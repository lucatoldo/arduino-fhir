// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef FHIR_SINGLE_PSKEL_HXX
#define FHIR_SINGLE_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class date_primitive_base_pskel;
  class date_primitive_pskel;
  class Element_pskel;
  class date_pskel;
  class dateTime_primitive_base_pskel;
  class dateTime_primitive_pskel;
  class dateTime_pskel;
  class code_primitive_pskel;
  class code_pskel;
  class string_primitive_pskel;
  class string_pskel;
  class integer_primitive_pskel;
  class integer_pskel;
  class oid_primitive_pskel;
  class oid_pskel;
  class canonical_primitive_pskel;
  class canonical_pskel;
  class uri_primitive_pskel;
  class uri_pskel;
  class uuid_primitive_pskel;
  class uuid_pskel;
  class url_primitive_pskel;
  class url_pskel;
  class instant_primitive_pskel;
  class instant_pskel;
  class boolean_primitive_pskel;
  class boolean_pskel;
  class base64Binary_primitive_pskel;
  class base64Binary_pskel;
  class unsignedInt_primitive_pskel;
  class unsignedInt_pskel;
  class markdown_primitive_pskel;
  class markdown_pskel;
  class time_primitive_pskel;
  class time_pskel;
  class id_primitive_pskel;
  class id_pskel;
  class positiveInt_primitive_pskel;
  class positiveInt_pskel;
  class decimal_primitive_pskel;
  class decimal_pskel;
  class ResourceContainer_pskel;
  class Extension_pskel;
  class BackboneElement_pskel;
  class Narrative_pskel;
  class NarrativeStatus_list_pskel;
  class NarrativeStatus_pskel;
  class Meta_pskel;
  class Address_pskel;
  class AddressUse_list_pskel;
  class AddressUse_pskel;
  class AddressType_list_pskel;
  class AddressType_pskel;
  class Contributor_pskel;
  class ContributorType_list_pskel;
  class ContributorType_pskel;
  class Attachment_pskel;
  class Quantity_pskel;
  class Count_pskel;
  class DataRequirement_pskel;
  class DataRequirement_CodeFilter_pskel;
  class DataRequirement_DateFilter_pskel;
  class DataRequirement_Sort_pskel;
  class SortDirection_list_pskel;
  class SortDirection_pskel;
  class Dosage_pskel;
  class Dosage_DoseAndRate_pskel;
  class Money_pskel;
  class HumanName_pskel;
  class NameUse_list_pskel;
  class NameUse_pskel;
  class ContactPoint_pskel;
  class ContactPointSystem_list_pskel;
  class ContactPointSystem_pskel;
  class ContactPointUse_list_pskel;
  class ContactPointUse_pskel;
  class MarketingStatus_pskel;
  class Identifier_pskel;
  class IdentifierUse_list_pskel;
  class IdentifierUse_pskel;
  class SubstanceAmount_pskel;
  class SubstanceAmount_ReferenceRange_pskel;
  class Coding_pskel;
  class SampledData_pskel;
  class SampledDataDataType_primitive_pskel;
  class SampledDataDataType_pskel;
  class Population_pskel;
  class Ratio_pskel;
  class Distance_pskel;
  class Age_pskel;
  class Reference_pskel;
  class TriggerDefinition_pskel;
  class TriggerType_list_pskel;
  class TriggerType_pskel;
  class QuantityComparator_list_pskel;
  class QuantityComparator_pskel;
  class Period_pskel;
  class Duration_pskel;
  class Range_pskel;
  class RelatedArtifact_pskel;
  class RelatedArtifactType_list_pskel;
  class RelatedArtifactType_pskel;
  class Annotation_pskel;
  class ProductShelfLife_pskel;
  class ContactDetail_pskel;
  class UsageContext_pskel;
  class Expression_pskel;
  class ExpressionLanguage_list_pskel;
  class ExpressionLanguage_pskel;
  class Signature_pskel;
  class Timing_pskel;
  class Timing_Repeat_pskel;
  class UnitsOfTime_list_pskel;
  class UnitsOfTime_pskel;
  class EventTiming_list_pskel;
  class EventTiming_pskel;
  class ProdCharacteristic_pskel;
  class CodeableConcept_pskel;
  class ParameterDefinition_pskel;
  class ElementDefinition_pskel;
  class ElementDefinition_Constraint_pskel;
  class ElementDefinition_Mapping_pskel;
  class ElementDefinition_Base_pskel;
  class ElementDefinition_Type_pskel;
  class ElementDefinition_Example_pskel;
  class ElementDefinition_Slicing_pskel;
  class ElementDefinition_Binding_pskel;
  class ElementDefinition_Discriminator_pskel;
  class PropertyRepresentation_list_pskel;
  class PropertyRepresentation_pskel;
  class ConstraintSeverity_list_pskel;
  class ConstraintSeverity_pskel;
  class AggregationMode_list_pskel;
  class AggregationMode_pskel;
  class ReferenceVersionRules_list_pskel;
  class ReferenceVersionRules_pskel;
  class SlicingRules_list_pskel;
  class SlicingRules_pskel;
  class BindingStrength_list_pskel;
  class BindingStrength_pskel;
  class DiscriminatorType_list_pskel;
  class DiscriminatorType_pskel;
  class Resource_pskel;
  class DomainResource_pskel;
  class PublicationStatus_list_pskel;
  class PublicationStatus_pskel;
  class SearchParamType_list_pskel;
  class SearchParamType_pskel;
  class AdministrativeGender_list_pskel;
  class AdministrativeGender_pskel;
  class FHIRVersion_list_pskel;
  class FHIRVersion_pskel;
  class NoteType_list_pskel;
  class NoteType_pskel;
  class RemittanceOutcome_list_pskel;
  class RemittanceOutcome_pskel;
  class ConceptMapEquivalence_list_pskel;
  class ConceptMapEquivalence_pskel;
  class DocumentReferenceStatus_list_pskel;
  class DocumentReferenceStatus_pskel;
  class Account_pskel;
  class Account_Coverage_pskel;
  class Account_Guarantor_pskel;
  class AccountStatus_list_pskel;
  class AccountStatus_pskel;
  class ActivityDefinition_pskel;
  class ActivityDefinition_Participant_pskel;
  class ActivityDefinition_DynamicValue_pskel;
  class ActionParticipantType_list_pskel;
  class ActionParticipantType_pskel;
  class RequestIntent_list_pskel;
  class RequestIntent_pskel;
  class RequestResourceType_list_pskel;
  class RequestResourceType_pskel;
  class RequestPriority_list_pskel;
  class RequestPriority_pskel;
  class AdverseEvent_pskel;
  class AdverseEvent_SuspectEntity_pskel;
  class AdverseEvent_Causality_pskel;
  class AdverseEventActuality_list_pskel;
  class AdverseEventActuality_pskel;
  class AllergyIntolerance_pskel;
  class AllergyIntolerance_Reaction_pskel;
  class AllergyIntoleranceCriticality_list_pskel;
  class AllergyIntoleranceCriticality_pskel;
  class AllergyIntoleranceType_list_pskel;
  class AllergyIntoleranceType_pskel;
  class AllergyIntoleranceCategory_list_pskel;
  class AllergyIntoleranceCategory_pskel;
  class AllergyIntoleranceSeverity_list_pskel;
  class AllergyIntoleranceSeverity_pskel;
  class Appointment_pskel;
  class Appointment_Participant_pskel;
  class ParticipantRequired_list_pskel;
  class ParticipantRequired_pskel;
  class AppointmentStatus_list_pskel;
  class AppointmentStatus_pskel;
  class ParticipationStatus_list_pskel;
  class ParticipationStatus_pskel;
  class AppointmentResponse_pskel;
  class AuditEvent_pskel;
  class AuditEvent_Agent_pskel;
  class AuditEvent_Network_pskel;
  class AuditEvent_Source_pskel;
  class AuditEvent_Entity_pskel;
  class AuditEvent_Detail_pskel;
  class AuditEventOutcome_list_pskel;
  class AuditEventOutcome_pskel;
  class AuditEventAction_list_pskel;
  class AuditEventAction_pskel;
  class AuditEventAgentNetworkType_list_pskel;
  class AuditEventAgentNetworkType_pskel;
  class Basic_pskel;
  class Binary_pskel;
  class BiologicallyDerivedProduct_pskel;
  class BiologicallyDerivedProduct_Collection_pskel;
  class BiologicallyDerivedProduct_Processing_pskel;
  class BiologicallyDerivedProduct_Manipulation_pskel;
  class BiologicallyDerivedProduct_Storage_pskel;
  class BiologicallyDerivedProductCategory_list_pskel;
  class BiologicallyDerivedProductCategory_pskel;
  class BiologicallyDerivedProductStatus_list_pskel;
  class BiologicallyDerivedProductStatus_pskel;
  class BiologicallyDerivedProductStorageScale_list_pskel;
  class BiologicallyDerivedProductStorageScale_pskel;
  class BodyStructure_pskel;
  class Bundle_pskel;
  class Bundle_Link_pskel;
  class Bundle_Entry_pskel;
  class Bundle_Search_pskel;
  class Bundle_Request_pskel;
  class Bundle_Response_pskel;
  class HTTPVerb_list_pskel;
  class HTTPVerb_pskel;
  class BundleType_list_pskel;
  class BundleType_pskel;
  class SearchEntryMode_list_pskel;
  class SearchEntryMode_pskel;
  class CapabilityStatement_pskel;
  class CapabilityStatement_Software_pskel;
  class CapabilityStatement_Implementation_pskel;
  class CapabilityStatement_Rest_pskel;
  class CapabilityStatement_Security_pskel;
  class CapabilityStatement_Resource_pskel;
  class CapabilityStatement_Interaction_pskel;
  class CapabilityStatement_SearchParam_pskel;
  class CapabilityStatement_Operation_pskel;
  class CapabilityStatement_Interaction1_pskel;
  class CapabilityStatement_Messaging_pskel;
  class CapabilityStatement_Endpoint_pskel;
  class CapabilityStatement_SupportedMessage_pskel;
  class CapabilityStatement_Document_pskel;
  class CapabilityStatementKind_list_pskel;
  class CapabilityStatementKind_pskel;
  class EventCapabilityMode_list_pskel;
  class EventCapabilityMode_pskel;
  class ResourceVersionPolicy_list_pskel;
  class ResourceVersionPolicy_pskel;
  class DocumentMode_list_pskel;
  class DocumentMode_pskel;
  class RestfulCapabilityMode_list_pskel;
  class RestfulCapabilityMode_pskel;
  class TypeRestfulInteraction_list_pskel;
  class TypeRestfulInteraction_pskel;
  class SystemRestfulInteraction_list_pskel;
  class SystemRestfulInteraction_pskel;
  class ConditionalReadStatus_list_pskel;
  class ConditionalReadStatus_pskel;
  class ReferenceHandlingPolicy_list_pskel;
  class ReferenceHandlingPolicy_pskel;
  class ConditionalDeleteStatus_list_pskel;
  class ConditionalDeleteStatus_pskel;
  class CarePlan_pskel;
  class CarePlan_Activity_pskel;
  class CarePlan_Detail_pskel;
  class CarePlanActivityKind_list_pskel;
  class CarePlanActivityKind_pskel;
  class CarePlanActivityStatus_list_pskel;
  class CarePlanActivityStatus_pskel;
  class CarePlanIntent_list_pskel;
  class CarePlanIntent_pskel;
  class RequestStatus_list_pskel;
  class RequestStatus_pskel;
  class CareTeam_pskel;
  class CareTeam_Participant_pskel;
  class CareTeamStatus_list_pskel;
  class CareTeamStatus_pskel;
  class CatalogEntry_pskel;
  class CatalogEntry_RelatedEntry_pskel;
  class CatalogEntryRelationType_list_pskel;
  class CatalogEntryRelationType_pskel;
  class ChargeItem_pskel;
  class ChargeItem_Performer_pskel;
  class ChargeItemStatus_list_pskel;
  class ChargeItemStatus_pskel;
  class ChargeItemDefinition_pskel;
  class ChargeItemDefinition_Applicability_pskel;
  class ChargeItemDefinition_PropertyGroup_pskel;
  class ChargeItemDefinition_PriceComponent_pskel;
  class InvoicePriceComponentType_list_pskel;
  class InvoicePriceComponentType_pskel;
  class Claim_pskel;
  class Claim_Related_pskel;
  class Claim_Payee_pskel;
  class Claim_CareTeam_pskel;
  class Claim_SupportingInfo_pskel;
  class Claim_Diagnosis_pskel;
  class Claim_Procedure_pskel;
  class Claim_Insurance_pskel;
  class Claim_Accident_pskel;
  class Claim_Item_pskel;
  class Claim_Detail_pskel;
  class Claim_SubDetail_pskel;
  class Use_list_pskel;
  class Use_pskel;
  class FinancialResourceStatusCodes_list_pskel;
  class FinancialResourceStatusCodes_pskel;
  class ClaimResponse_pskel;
  class ClaimResponse_Item_pskel;
  class ClaimResponse_Adjudication_pskel;
  class ClaimResponse_Detail_pskel;
  class ClaimResponse_SubDetail_pskel;
  class ClaimResponse_AddItem_pskel;
  class ClaimResponse_Detail1_pskel;
  class ClaimResponse_SubDetail1_pskel;
  class ClaimResponse_Total_pskel;
  class ClaimResponse_Payment_pskel;
  class ClaimResponse_ProcessNote_pskel;
  class ClaimResponse_Insurance_pskel;
  class ClaimResponse_Error_pskel;
  class ClaimProcessingCodes_list_pskel;
  class ClaimProcessingCodes_pskel;
  class ClinicalImpression_pskel;
  class ClinicalImpression_Investigation_pskel;
  class ClinicalImpression_Finding_pskel;
  class ClinicalImpressionStatus_list_pskel;
  class ClinicalImpressionStatus_pskel;
  class CodeSystem_pskel;
  class CodeSystem_Filter_pskel;
  class CodeSystem_Property_pskel;
  class CodeSystem_Concept_pskel;
  class CodeSystem_Designation_pskel;
  class CodeSystem_Property1_pskel;
  class FilterOperator_list_pskel;
  class FilterOperator_pskel;
  class PropertyType_list_pskel;
  class PropertyType_pskel;
  class CodeSystemHierarchyMeaning_list_pskel;
  class CodeSystemHierarchyMeaning_pskel;
  class CodeSystemContentMode_list_pskel;
  class CodeSystemContentMode_pskel;
  class Communication_pskel;
  class Communication_Payload_pskel;
  class EventStatus_list_pskel;
  class EventStatus_pskel;
  class CommunicationRequest_pskel;
  class CommunicationRequest_Payload_pskel;
  class CompartmentDefinition_pskel;
  class CompartmentDefinition_Resource_pskel;
  class CompartmentType_list_pskel;
  class CompartmentType_pskel;
  class Composition_pskel;
  class Composition_Attester_pskel;
  class Composition_RelatesTo_pskel;
  class Composition_Event_pskel;
  class Composition_Section_pskel;
  class vConfidentialityClassification_list_pskel;
  class vConfidentialityClassification_pskel;
  class CompositionStatus_list_pskel;
  class CompositionStatus_pskel;
  class DocumentRelationshipType_list_pskel;
  class DocumentRelationshipType_pskel;
  class CompositionAttestationMode_list_pskel;
  class CompositionAttestationMode_pskel;
  class ListMode_list_pskel;
  class ListMode_pskel;
  class ConceptMap_pskel;
  class ConceptMap_Group_pskel;
  class ConceptMap_Element_pskel;
  class ConceptMap_Target_pskel;
  class ConceptMap_DependsOn_pskel;
  class ConceptMap_Unmapped_pskel;
  class ConceptMapGroupUnmappedMode_list_pskel;
  class ConceptMapGroupUnmappedMode_pskel;
  class Condition_pskel;
  class Condition_Stage_pskel;
  class Condition_Evidence_pskel;
  class Consent_pskel;
  class Consent_Policy_pskel;
  class Consent_Verification_pskel;
  class Consent_Provision_pskel;
  class Consent_Actor_pskel;
  class Consent_Data_pskel;
  class ConsentProvisionType_list_pskel;
  class ConsentProvisionType_pskel;
  class ConsentDataMeaning_list_pskel;
  class ConsentDataMeaning_pskel;
  class ConsentState_list_pskel;
  class ConsentState_pskel;
  class Contract_pskel;
  class Contract_ContentDefinition_pskel;
  class Contract_Term_pskel;
  class Contract_SecurityLabel_pskel;
  class Contract_Offer_pskel;
  class Contract_Party_pskel;
  class Contract_Answer_pskel;
  class Contract_Asset_pskel;
  class Contract_Context_pskel;
  class Contract_ValuedItem_pskel;
  class Contract_Action_pskel;
  class Contract_Subject_pskel;
  class Contract_Signer_pskel;
  class Contract_Friendly_pskel;
  class Contract_Legal_pskel;
  class Contract_Rule_pskel;
  class ContractResourceStatusCodes_list_pskel;
  class ContractResourceStatusCodes_pskel;
  class ContractResourcePublicationStatusCodes_list_pskel;
  class ContractResourcePublicationStatusCodes_pskel;
  class Coverage_pskel;
  class Coverage_Class_pskel;
  class Coverage_CostToBeneficiary_pskel;
  class Coverage_Exception_pskel;
  class CoverageEligibilityRequest_pskel;
  class CoverageEligibilityRequest_SupportingInfo_pskel;
  class CoverageEligibilityRequest_Insurance_pskel;
  class CoverageEligibilityRequest_Item_pskel;
  class CoverageEligibilityRequest_Diagnosis_pskel;
  class EligibilityRequestPurpose_list_pskel;
  class EligibilityRequestPurpose_pskel;
  class CoverageEligibilityResponse_pskel;
  class CoverageEligibilityResponse_Insurance_pskel;
  class CoverageEligibilityResponse_Item_pskel;
  class CoverageEligibilityResponse_Benefit_pskel;
  class CoverageEligibilityResponse_Error_pskel;
  class EligibilityResponsePurpose_list_pskel;
  class EligibilityResponsePurpose_pskel;
  class DetectedIssue_pskel;
  class DetectedIssue_Evidence_pskel;
  class DetectedIssue_Mitigation_pskel;
  class ObservationStatus_list_pskel;
  class ObservationStatus_pskel;
  class DetectedIssueSeverity_list_pskel;
  class DetectedIssueSeverity_pskel;
  class Device_pskel;
  class Device_UdiCarrier_pskel;
  class Device_DeviceName_pskel;
  class Device_Specialization_pskel;
  class Device_Version_pskel;
  class Device_Property_pskel;
  class FHIRDeviceStatus_list_pskel;
  class FHIRDeviceStatus_pskel;
  class DeviceNameType_list_pskel;
  class DeviceNameType_pskel;
  class UDIEntryType_list_pskel;
  class UDIEntryType_pskel;
  class DeviceDefinition_pskel;
  class DeviceDefinition_UdiDeviceIdentifier_pskel;
  class DeviceDefinition_DeviceName_pskel;
  class DeviceDefinition_Specialization_pskel;
  class DeviceDefinition_Capability_pskel;
  class DeviceDefinition_Property_pskel;
  class DeviceDefinition_Material_pskel;
  class DeviceMetric_pskel;
  class DeviceMetric_Calibration_pskel;
  class DeviceMetricCalibrationType_list_pskel;
  class DeviceMetricCalibrationType_pskel;
  class DeviceMetricColor_list_pskel;
  class DeviceMetricColor_pskel;
  class DeviceMetricCalibrationState_list_pskel;
  class DeviceMetricCalibrationState_pskel;
  class DeviceMetricOperationalStatus_list_pskel;
  class DeviceMetricOperationalStatus_pskel;
  class DeviceMetricCategory_list_pskel;
  class DeviceMetricCategory_pskel;
  class DeviceRequest_pskel;
  class DeviceRequest_Parameter_pskel;
  class DeviceUseStatement_pskel;
  class DeviceUseStatementStatus_list_pskel;
  class DeviceUseStatementStatus_pskel;
  class DiagnosticReport_pskel;
  class DiagnosticReport_Media_pskel;
  class DiagnosticReportStatus_list_pskel;
  class DiagnosticReportStatus_pskel;
  class DocumentManifest_pskel;
  class DocumentManifest_Related_pskel;
  class DocumentReference_pskel;
  class DocumentReference_RelatesTo_pskel;
  class DocumentReference_Content_pskel;
  class DocumentReference_Context_pskel;
  class EffectEvidenceSynthesis_pskel;
  class EffectEvidenceSynthesis_SampleSize_pskel;
  class EffectEvidenceSynthesis_ResultsByExposure_pskel;
  class EffectEvidenceSynthesis_EffectEstimate_pskel;
  class EffectEvidenceSynthesis_PrecisionEstimate_pskel;
  class EffectEvidenceSynthesis_Certainty_pskel;
  class EffectEvidenceSynthesis_CertaintySubcomponent_pskel;
  class ExposureState_list_pskel;
  class ExposureState_pskel;
  class Encounter_pskel;
  class Encounter_StatusHistory_pskel;
  class Encounter_ClassHistory_pskel;
  class Encounter_Participant_pskel;
  class Encounter_Diagnosis_pskel;
  class Encounter_Hospitalization_pskel;
  class Encounter_Location_pskel;
  class EncounterLocationStatus_list_pskel;
  class EncounterLocationStatus_pskel;
  class EncounterStatus_list_pskel;
  class EncounterStatus_pskel;
  class Endpoint_pskel;
  class EndpointStatus_list_pskel;
  class EndpointStatus_pskel;
  class EnrollmentRequest_pskel;
  class EnrollmentResponse_pskel;
  class EpisodeOfCare_pskel;
  class EpisodeOfCare_StatusHistory_pskel;
  class EpisodeOfCare_Diagnosis_pskel;
  class EpisodeOfCareStatus_list_pskel;
  class EpisodeOfCareStatus_pskel;
  class EventDefinition_pskel;
  class Evidence_pskel;
  class EvidenceVariable_pskel;
  class EvidenceVariable_Characteristic_pskel;
  class EvidenceVariableType_list_pskel;
  class EvidenceVariableType_pskel;
  class GroupMeasure_list_pskel;
  class GroupMeasure_pskel;
  class ExampleScenario_pskel;
  class ExampleScenario_Actor_pskel;
  class ExampleScenario_Instance_pskel;
  class ExampleScenario_Version_pskel;
  class ExampleScenario_ContainedInstance_pskel;
  class ExampleScenario_Process_pskel;
  class ExampleScenario_Step_pskel;
  class ExampleScenario_Operation_pskel;
  class ExampleScenario_Alternative_pskel;
  class ExampleScenarioActorType_list_pskel;
  class ExampleScenarioActorType_pskel;
  class ResourceType_list_pskel;
  class ResourceType_pskel;
  class ExplanationOfBenefit_pskel;
  class ExplanationOfBenefit_Related_pskel;
  class ExplanationOfBenefit_Payee_pskel;
  class ExplanationOfBenefit_CareTeam_pskel;
  class ExplanationOfBenefit_SupportingInfo_pskel;
  class ExplanationOfBenefit_Diagnosis_pskel;
  class ExplanationOfBenefit_Procedure_pskel;
  class ExplanationOfBenefit_Insurance_pskel;
  class ExplanationOfBenefit_Accident_pskel;
  class ExplanationOfBenefit_Item_pskel;
  class ExplanationOfBenefit_Adjudication_pskel;
  class ExplanationOfBenefit_Detail_pskel;
  class ExplanationOfBenefit_SubDetail_pskel;
  class ExplanationOfBenefit_AddItem_pskel;
  class ExplanationOfBenefit_Detail1_pskel;
  class ExplanationOfBenefit_SubDetail1_pskel;
  class ExplanationOfBenefit_Total_pskel;
  class ExplanationOfBenefit_Payment_pskel;
  class ExplanationOfBenefit_ProcessNote_pskel;
  class ExplanationOfBenefit_BenefitBalance_pskel;
  class ExplanationOfBenefit_Financial_pskel;
  class ExplanationOfBenefitStatus_list_pskel;
  class ExplanationOfBenefitStatus_pskel;
  class FamilyMemberHistory_pskel;
  class FamilyMemberHistory_Condition_pskel;
  class FamilyHistoryStatus_list_pskel;
  class FamilyHistoryStatus_pskel;
  class Flag_pskel;
  class FlagStatus_list_pskel;
  class FlagStatus_pskel;
  class Goal_pskel;
  class Goal_Target_pskel;
  class GoalLifecycleStatus_list_pskel;
  class GoalLifecycleStatus_pskel;
  class GraphDefinition_pskel;
  class GraphDefinition_Link_pskel;
  class GraphDefinition_Target_pskel;
  class GraphDefinition_Compartment_pskel;
  class GraphCompartmentUse_list_pskel;
  class GraphCompartmentUse_pskel;
  class GraphCompartmentRule_list_pskel;
  class GraphCompartmentRule_pskel;
  class Group_pskel;
  class Group_Characteristic_pskel;
  class Group_Member_pskel;
  class GroupType_list_pskel;
  class GroupType_pskel;
  class GuidanceResponse_pskel;
  class GuidanceResponseStatus_list_pskel;
  class GuidanceResponseStatus_pskel;
  class HealthcareService_pskel;
  class HealthcareService_Eligibility_pskel;
  class HealthcareService_AvailableTime_pskel;
  class HealthcareService_NotAvailable_pskel;
  class DaysOfWeek_list_pskel;
  class DaysOfWeek_pskel;
  class ImagingStudy_pskel;
  class ImagingStudy_Series_pskel;
  class ImagingStudy_Performer_pskel;
  class ImagingStudy_Instance_pskel;
  class ImagingStudyStatus_list_pskel;
  class ImagingStudyStatus_pskel;
  class Immunization_pskel;
  class Immunization_Performer_pskel;
  class Immunization_Education_pskel;
  class Immunization_Reaction_pskel;
  class Immunization_ProtocolApplied_pskel;
  class ImmunizationStatusCodes_list_pskel;
  class ImmunizationStatusCodes_pskel;
  class ImmunizationEvaluation_pskel;
  class ImmunizationEvaluationStatusCodes_list_pskel;
  class ImmunizationEvaluationStatusCodes_pskel;
  class ImmunizationRecommendation_pskel;
  class ImmunizationRecommendation_Recommendation_pskel;
  class ImmunizationRecommendation_DateCriterion_pskel;
  class ImplementationGuide_pskel;
  class ImplementationGuide_DependsOn_pskel;
  class ImplementationGuide_Global_pskel;
  class ImplementationGuide_Definition_pskel;
  class ImplementationGuide_Grouping_pskel;
  class ImplementationGuide_Resource_pskel;
  class ImplementationGuide_Page_pskel;
  class ImplementationGuide_Parameter_pskel;
  class ImplementationGuide_Template_pskel;
  class ImplementationGuide_Manifest_pskel;
  class ImplementationGuide_Resource1_pskel;
  class ImplementationGuide_Page1_pskel;
  class GuideParameterCode_list_pskel;
  class GuideParameterCode_pskel;
  class SPDXLicense_list_pskel;
  class SPDXLicense_pskel;
  class GuidePageGeneration_list_pskel;
  class GuidePageGeneration_pskel;
  class InsurancePlan_pskel;
  class InsurancePlan_Contact_pskel;
  class InsurancePlan_Coverage_pskel;
  class InsurancePlan_Benefit_pskel;
  class InsurancePlan_Limit_pskel;
  class InsurancePlan_Plan_pskel;
  class InsurancePlan_GeneralCost_pskel;
  class InsurancePlan_SpecificCost_pskel;
  class InsurancePlan_Benefit1_pskel;
  class InsurancePlan_Cost_pskel;
  class Invoice_pskel;
  class Invoice_Participant_pskel;
  class Invoice_LineItem_pskel;
  class Invoice_PriceComponent_pskel;
  class InvoiceStatus_list_pskel;
  class InvoiceStatus_pskel;
  class Library_pskel;
  class Linkage_pskel;
  class Linkage_Item_pskel;
  class LinkageType_list_pskel;
  class LinkageType_pskel;
  class List_pskel;
  class List_Entry_pskel;
  class ListStatus_list_pskel;
  class ListStatus_pskel;
  class Location_pskel;
  class Location_Position_pskel;
  class Location_HoursOfOperation_pskel;
  class LocationMode_list_pskel;
  class LocationMode_pskel;
  class LocationStatus_list_pskel;
  class LocationStatus_pskel;
  class Measure_pskel;
  class Measure_Group_pskel;
  class Measure_Population_pskel;
  class Measure_Stratifier_pskel;
  class Measure_Component_pskel;
  class Measure_SupplementalData_pskel;
  class MeasureReport_pskel;
  class MeasureReport_Group_pskel;
  class MeasureReport_Population_pskel;
  class MeasureReport_Stratifier_pskel;
  class MeasureReport_Stratum_pskel;
  class MeasureReport_Component_pskel;
  class MeasureReport_Population1_pskel;
  class MeasureReportStatus_list_pskel;
  class MeasureReportStatus_pskel;
  class MeasureReportType_list_pskel;
  class MeasureReportType_pskel;
  class Media_pskel;
  class Medication_pskel;
  class Medication_Ingredient_pskel;
  class Medication_Batch_pskel;
  class MedicationStatusCodes_list_pskel;
  class MedicationStatusCodes_pskel;
  class MedicationAdministration_pskel;
  class MedicationAdministration_Performer_pskel;
  class MedicationAdministration_Dosage_pskel;
  class MedicationDispense_pskel;
  class MedicationDispense_Performer_pskel;
  class MedicationDispense_Substitution_pskel;
  class MedicationKnowledge_pskel;
  class MedicationKnowledge_RelatedMedicationKnowledge_pskel;
  class MedicationKnowledge_Monograph_pskel;
  class MedicationKnowledge_Ingredient_pskel;
  class MedicationKnowledge_Cost_pskel;
  class MedicationKnowledge_MonitoringProgram_pskel;
  class MedicationKnowledge_AdministrationGuidelines_pskel;
  class MedicationKnowledge_Dosage_pskel;
  class MedicationKnowledge_PatientCharacteristics_pskel;
  class MedicationKnowledge_MedicineClassification_pskel;
  class MedicationKnowledge_Packaging_pskel;
  class MedicationKnowledge_DrugCharacteristic_pskel;
  class MedicationKnowledge_Regulatory_pskel;
  class MedicationKnowledge_Substitution_pskel;
  class MedicationKnowledge_Schedule_pskel;
  class MedicationKnowledge_MaxDispense_pskel;
  class MedicationKnowledge_Kinetics_pskel;
  class MedicationRequest_pskel;
  class MedicationRequest_DispenseRequest_pskel;
  class MedicationRequest_InitialFill_pskel;
  class MedicationRequest_Substitution_pskel;
  class medicationrequestStatus_list_pskel;
  class medicationrequestStatus_pskel;
  class medicationRequestIntent_list_pskel;
  class medicationRequestIntent_pskel;
  class MedicationStatement_pskel;
  class MedicinalProduct_pskel;
  class MedicinalProduct_Name_pskel;
  class MedicinalProduct_NamePart_pskel;
  class MedicinalProduct_CountryLanguage_pskel;
  class MedicinalProduct_ManufacturingBusinessOperation_pskel;
  class MedicinalProduct_SpecialDesignation_pskel;
  class MedicinalProductAuthorization_pskel;
  class MedicinalProductAuthorization_JurisdictionalAuthorization_pskel;
  class MedicinalProductAuthorization_Procedure_pskel;
  class MedicinalProductContraindication_pskel;
  class MedicinalProductContraindication_OtherTherapy_pskel;
  class MedicinalProductIndication_pskel;
  class MedicinalProductIndication_OtherTherapy_pskel;
  class MedicinalProductIngredient_pskel;
  class MedicinalProductIngredient_SpecifiedSubstance_pskel;
  class MedicinalProductIngredient_Strength_pskel;
  class MedicinalProductIngredient_ReferenceStrength_pskel;
  class MedicinalProductIngredient_Substance_pskel;
  class MedicinalProductInteraction_pskel;
  class MedicinalProductInteraction_Interactant_pskel;
  class MedicinalProductManufactured_pskel;
  class MedicinalProductPackaged_pskel;
  class MedicinalProductPackaged_BatchIdentifier_pskel;
  class MedicinalProductPackaged_PackageItem_pskel;
  class MedicinalProductPharmaceutical_pskel;
  class MedicinalProductPharmaceutical_Characteristics_pskel;
  class MedicinalProductPharmaceutical_RouteOfAdministration_pskel;
  class MedicinalProductPharmaceutical_TargetSpecies_pskel;
  class MedicinalProductPharmaceutical_WithdrawalPeriod_pskel;
  class MedicinalProductUndesirableEffect_pskel;
  class MessageDefinition_pskel;
  class MessageDefinition_Focus_pskel;
  class MessageDefinition_AllowedResponse_pskel;
  class MessageSignificanceCategory_list_pskel;
  class MessageSignificanceCategory_pskel;
  class messageheaderResponseRequest_list_pskel;
  class messageheaderResponseRequest_pskel;
  class MessageHeader_pskel;
  class MessageHeader_Destination_pskel;
  class MessageHeader_Source_pskel;
  class MessageHeader_Response_pskel;
  class ResponseType_list_pskel;
  class ResponseType_pskel;
  class MolecularSequence_pskel;
  class MolecularSequence_ReferenceSeq_pskel;
  class MolecularSequence_Variant_pskel;
  class MolecularSequence_Quality_pskel;
  class MolecularSequence_Roc_pskel;
  class MolecularSequence_Repository_pskel;
  class MolecularSequence_StructureVariant_pskel;
  class MolecularSequence_Outer_pskel;
  class MolecularSequence_Inner_pskel;
  class strandType_list_pskel;
  class strandType_pskel;
  class orientationType_list_pskel;
  class orientationType_pskel;
  class repositoryType_list_pskel;
  class repositoryType_pskel;
  class qualityType_list_pskel;
  class qualityType_pskel;
  class sequenceType_list_pskel;
  class sequenceType_pskel;
  class NamingSystem_pskel;
  class NamingSystem_UniqueId_pskel;
  class NamingSystemIdentifierType_list_pskel;
  class NamingSystemIdentifierType_pskel;
  class NamingSystemType_list_pskel;
  class NamingSystemType_pskel;
  class NutritionOrder_pskel;
  class NutritionOrder_OralDiet_pskel;
  class NutritionOrder_Nutrient_pskel;
  class NutritionOrder_Texture_pskel;
  class NutritionOrder_Supplement_pskel;
  class NutritionOrder_EnteralFormula_pskel;
  class NutritionOrder_Administration_pskel;
  class Observation_pskel;
  class Observation_ReferenceRange_pskel;
  class Observation_Component_pskel;
  class ObservationDefinition_pskel;
  class ObservationDefinition_QuantitativeDetails_pskel;
  class ObservationDefinition_QualifiedInterval_pskel;
  class ObservationDataType_list_pskel;
  class ObservationDataType_pskel;
  class ObservationRangeCategory_list_pskel;
  class ObservationRangeCategory_pskel;
  class OperationDefinition_pskel;
  class OperationDefinition_Parameter_pskel;
  class OperationDefinition_Binding_pskel;
  class OperationDefinition_ReferencedFrom_pskel;
  class OperationDefinition_Overload_pskel;
  class OperationParameterUse_list_pskel;
  class OperationParameterUse_pskel;
  class OperationKind_list_pskel;
  class OperationKind_pskel;
  class OperationOutcome_pskel;
  class OperationOutcome_Issue_pskel;
  class IssueType_list_pskel;
  class IssueType_pskel;
  class IssueSeverity_list_pskel;
  class IssueSeverity_pskel;
  class Organization_pskel;
  class Organization_Contact_pskel;
  class OrganizationAffiliation_pskel;
  class Parameters_pskel;
  class Parameters_Parameter_pskel;
  class Patient_pskel;
  class Patient_Contact_pskel;
  class Patient_Communication_pskel;
  class Patient_Link_pskel;
  class LinkType_list_pskel;
  class LinkType_pskel;
  class PaymentNotice_pskel;
  class PaymentReconciliation_pskel;
  class PaymentReconciliation_Detail_pskel;
  class PaymentReconciliation_ProcessNote_pskel;
  class Person_pskel;
  class Person_Link_pskel;
  class IdentityAssuranceLevel_list_pskel;
  class IdentityAssuranceLevel_pskel;
  class PlanDefinition_pskel;
  class PlanDefinition_Goal_pskel;
  class PlanDefinition_Target_pskel;
  class PlanDefinition_Action_pskel;
  class PlanDefinition_Condition_pskel;
  class PlanDefinition_RelatedAction_pskel;
  class PlanDefinition_Participant_pskel;
  class PlanDefinition_DynamicValue_pskel;
  class ActionRequiredBehavior_list_pskel;
  class ActionRequiredBehavior_pskel;
  class ActionRelationshipType_list_pskel;
  class ActionRelationshipType_pskel;
  class ActionGroupingBehavior_list_pskel;
  class ActionGroupingBehavior_pskel;
  class ActionSelectionBehavior_list_pskel;
  class ActionSelectionBehavior_pskel;
  class ActionCardinalityBehavior_list_pskel;
  class ActionCardinalityBehavior_pskel;
  class ActionPrecheckBehavior_list_pskel;
  class ActionPrecheckBehavior_pskel;
  class ActionConditionKind_list_pskel;
  class ActionConditionKind_pskel;
  class Practitioner_pskel;
  class Practitioner_Qualification_pskel;
  class PractitionerRole_pskel;
  class PractitionerRole_AvailableTime_pskel;
  class PractitionerRole_NotAvailable_pskel;
  class Procedure_pskel;
  class Procedure_Performer_pskel;
  class Procedure_FocalDevice_pskel;
  class Provenance_pskel;
  class Provenance_Agent_pskel;
  class Provenance_Entity_pskel;
  class ProvenanceEntityRole_list_pskel;
  class ProvenanceEntityRole_pskel;
  class Questionnaire_pskel;
  class Questionnaire_Item_pskel;
  class Questionnaire_EnableWhen_pskel;
  class Questionnaire_AnswerOption_pskel;
  class Questionnaire_Initial_pskel;
  class QuestionnaireItemType_list_pskel;
  class QuestionnaireItemType_pskel;
  class EnableWhenBehavior_list_pskel;
  class EnableWhenBehavior_pskel;
  class QuestionnaireItemOperator_list_pskel;
  class QuestionnaireItemOperator_pskel;
  class QuestionnaireResponse_pskel;
  class QuestionnaireResponse_Item_pskel;
  class QuestionnaireResponse_Answer_pskel;
  class QuestionnaireResponseStatus_list_pskel;
  class QuestionnaireResponseStatus_pskel;
  class RelatedPerson_pskel;
  class RelatedPerson_Communication_pskel;
  class RequestGroup_pskel;
  class RequestGroup_Action_pskel;
  class RequestGroup_Condition_pskel;
  class RequestGroup_RelatedAction_pskel;
  class ResearchDefinition_pskel;
  class ResearchElementDefinition_pskel;
  class ResearchElementDefinition_Characteristic_pskel;
  class ResearchElementType_list_pskel;
  class ResearchElementType_pskel;
  class VariableType_list_pskel;
  class VariableType_pskel;
  class ResearchStudy_pskel;
  class ResearchStudy_Arm_pskel;
  class ResearchStudy_Objective_pskel;
  class ResearchStudyStatus_list_pskel;
  class ResearchStudyStatus_pskel;
  class ResearchSubject_pskel;
  class ResearchSubjectStatus_list_pskel;
  class ResearchSubjectStatus_pskel;
  class RiskAssessment_pskel;
  class RiskAssessment_Prediction_pskel;
  class RiskEvidenceSynthesis_pskel;
  class RiskEvidenceSynthesis_SampleSize_pskel;
  class RiskEvidenceSynthesis_RiskEstimate_pskel;
  class RiskEvidenceSynthesis_PrecisionEstimate_pskel;
  class RiskEvidenceSynthesis_Certainty_pskel;
  class RiskEvidenceSynthesis_CertaintySubcomponent_pskel;
  class Schedule_pskel;
  class SearchParameter_pskel;
  class SearchParameter_Component_pskel;
  class XPathUsageType_list_pskel;
  class XPathUsageType_pskel;
  class SearchModifierCode_list_pskel;
  class SearchModifierCode_pskel;
  class SearchComparator_list_pskel;
  class SearchComparator_pskel;
  class ServiceRequest_pskel;
  class Slot_pskel;
  class SlotStatus_list_pskel;
  class SlotStatus_pskel;
  class Specimen_pskel;
  class Specimen_Collection_pskel;
  class Specimen_Processing_pskel;
  class Specimen_Container_pskel;
  class SpecimenStatus_list_pskel;
  class SpecimenStatus_pskel;
  class SpecimenDefinition_pskel;
  class SpecimenDefinition_TypeTested_pskel;
  class SpecimenDefinition_Container_pskel;
  class SpecimenDefinition_Additive_pskel;
  class SpecimenDefinition_Handling_pskel;
  class SpecimenContainedPreference_list_pskel;
  class SpecimenContainedPreference_pskel;
  class StructureDefinition_pskel;
  class StructureDefinition_Mapping_pskel;
  class StructureDefinition_Context_pskel;
  class StructureDefinition_Snapshot_pskel;
  class StructureDefinition_Differential_pskel;
  class StructureDefinitionKind_list_pskel;
  class StructureDefinitionKind_pskel;
  class TypeDerivationRule_list_pskel;
  class TypeDerivationRule_pskel;
  class ExtensionContextType_list_pskel;
  class ExtensionContextType_pskel;
  class StructureMap_pskel;
  class StructureMap_Structure_pskel;
  class StructureMap_Group_pskel;
  class StructureMap_Input_pskel;
  class StructureMap_Rule_pskel;
  class StructureMap_Source_pskel;
  class StructureMap_Target_pskel;
  class StructureMap_Parameter_pskel;
  class StructureMap_Dependent_pskel;
  class StructureMapInputMode_list_pskel;
  class StructureMapInputMode_pskel;
  class StructureMapContextType_list_pskel;
  class StructureMapContextType_pskel;
  class StructureMapTargetListMode_list_pskel;
  class StructureMapTargetListMode_pskel;
  class StructureMapTransform_list_pskel;
  class StructureMapTransform_pskel;
  class StructureMapSourceListMode_list_pskel;
  class StructureMapSourceListMode_pskel;
  class StructureMapGroupTypeMode_list_pskel;
  class StructureMapGroupTypeMode_pskel;
  class StructureMapModelMode_list_pskel;
  class StructureMapModelMode_pskel;
  class Subscription_pskel;
  class Subscription_Channel_pskel;
  class SubscriptionStatus_list_pskel;
  class SubscriptionStatus_pskel;
  class SubscriptionChannelType_list_pskel;
  class SubscriptionChannelType_pskel;
  class Substance_pskel;
  class Substance_Instance_pskel;
  class Substance_Ingredient_pskel;
  class FHIRSubstanceStatus_list_pskel;
  class FHIRSubstanceStatus_pskel;
  class SubstanceNucleicAcid_pskel;
  class SubstanceNucleicAcid_Subunit_pskel;
  class SubstanceNucleicAcid_Linkage_pskel;
  class SubstanceNucleicAcid_Sugar_pskel;
  class SubstancePolymer_pskel;
  class SubstancePolymer_MonomerSet_pskel;
  class SubstancePolymer_StartingMaterial_pskel;
  class SubstancePolymer_Repeat_pskel;
  class SubstancePolymer_RepeatUnit_pskel;
  class SubstancePolymer_DegreeOfPolymerisation_pskel;
  class SubstancePolymer_StructuralRepresentation_pskel;
  class SubstanceProtein_pskel;
  class SubstanceProtein_Subunit_pskel;
  class SubstanceReferenceInformation_pskel;
  class SubstanceReferenceInformation_Gene_pskel;
  class SubstanceReferenceInformation_GeneElement_pskel;
  class SubstanceReferenceInformation_Classification_pskel;
  class SubstanceReferenceInformation_Target_pskel;
  class SubstanceSourceMaterial_pskel;
  class SubstanceSourceMaterial_FractionDescription_pskel;
  class SubstanceSourceMaterial_Organism_pskel;
  class SubstanceSourceMaterial_Author_pskel;
  class SubstanceSourceMaterial_Hybrid_pskel;
  class SubstanceSourceMaterial_OrganismGeneral_pskel;
  class SubstanceSourceMaterial_PartDescription_pskel;
  class SubstanceSpecification_pskel;
  class SubstanceSpecification_Moiety_pskel;
  class SubstanceSpecification_Property_pskel;
  class SubstanceSpecification_Structure_pskel;
  class SubstanceSpecification_Isotope_pskel;
  class SubstanceSpecification_MolecularWeight_pskel;
  class SubstanceSpecification_Representation_pskel;
  class SubstanceSpecification_Code_pskel;
  class SubstanceSpecification_Name_pskel;
  class SubstanceSpecification_Official_pskel;
  class SubstanceSpecification_Relationship_pskel;
  class SupplyDelivery_pskel;
  class SupplyDelivery_SuppliedItem_pskel;
  class SupplyDeliveryStatus_list_pskel;
  class SupplyDeliveryStatus_pskel;
  class SupplyRequest_pskel;
  class SupplyRequest_Parameter_pskel;
  class SupplyRequestStatus_list_pskel;
  class SupplyRequestStatus_pskel;
  class Task_pskel;
  class Task_Restriction_pskel;
  class Task_Input_pskel;
  class Task_Output_pskel;
  class TaskStatus_list_pskel;
  class TaskStatus_pskel;
  class TaskIntent_list_pskel;
  class TaskIntent_pskel;
  class TerminologyCapabilities_pskel;
  class TerminologyCapabilities_Software_pskel;
  class TerminologyCapabilities_Implementation_pskel;
  class TerminologyCapabilities_CodeSystem_pskel;
  class TerminologyCapabilities_Version_pskel;
  class TerminologyCapabilities_Filter_pskel;
  class TerminologyCapabilities_Expansion_pskel;
  class TerminologyCapabilities_Parameter_pskel;
  class TerminologyCapabilities_ValidateCode_pskel;
  class TerminologyCapabilities_Translation_pskel;
  class TerminologyCapabilities_Closure_pskel;
  class CodeSearchSupport_list_pskel;
  class CodeSearchSupport_pskel;
  class TestReport_pskel;
  class TestReport_Participant_pskel;
  class TestReport_Setup_pskel;
  class TestReport_Action_pskel;
  class TestReport_Operation_pskel;
  class TestReport_Assert_pskel;
  class TestReport_Test_pskel;
  class TestReport_Action1_pskel;
  class TestReport_Teardown_pskel;
  class TestReport_Action2_pskel;
  class TestReportStatus_list_pskel;
  class TestReportStatus_pskel;
  class TestReportActionResult_list_pskel;
  class TestReportActionResult_pskel;
  class TestReportParticipantType_list_pskel;
  class TestReportParticipantType_pskel;
  class TestReportResult_list_pskel;
  class TestReportResult_pskel;
  class TestScript_pskel;
  class TestScript_Origin_pskel;
  class TestScript_Destination_pskel;
  class TestScript_Metadata_pskel;
  class TestScript_Link_pskel;
  class TestScript_Capability_pskel;
  class TestScript_Fixture_pskel;
  class TestScript_Variable_pskel;
  class TestScript_Setup_pskel;
  class TestScript_Action_pskel;
  class TestScript_Operation_pskel;
  class TestScript_RequestHeader_pskel;
  class TestScript_Assert_pskel;
  class TestScript_Test_pskel;
  class TestScript_Action1_pskel;
  class TestScript_Teardown_pskel;
  class TestScript_Action2_pskel;
  class AssertionDirectionType_list_pskel;
  class AssertionDirectionType_pskel;
  class AssertionOperatorType_list_pskel;
  class AssertionOperatorType_pskel;
  class AssertionResponseTypes_list_pskel;
  class AssertionResponseTypes_pskel;
  class TestScriptRequestMethodCode_list_pskel;
  class TestScriptRequestMethodCode_pskel;
  class ValueSet_pskel;
  class ValueSet_Compose_pskel;
  class ValueSet_Include_pskel;
  class ValueSet_Concept_pskel;
  class ValueSet_Designation_pskel;
  class ValueSet_Filter_pskel;
  class ValueSet_Expansion_pskel;
  class ValueSet_Parameter_pskel;
  class ValueSet_Contains_pskel;
  class VerificationResult_pskel;
  class VerificationResult_PrimarySource_pskel;
  class VerificationResult_Attestation_pskel;
  class VerificationResult_Validator_pskel;
  class status_list_pskel;
  class status_pskel;
  class VisionPrescription_pskel;
  class VisionPrescription_LensSpecification_pskel;
  class VisionPrescription_Prism_pskel;
  class VisionBase_list_pskel;
  class VisionBase_pskel;
  class VisionEyes_list_pskel;
  class VisionEyes_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "xml-pskel.hxx"

#include "fhir-xhtml-pskel.hxx"

namespace fhir
{
  class date_primitive_base_pskel: public ::xsde::cxx::parser::validating::simple_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();
    //
    // virtual void
    // _characters (const ::xsde::cxx::ro_string&);

    virtual void
    post_date_primitive_base ();

    // Constructor.
    //
    date_primitive_base_pskel ();

    // Implementation details.
    //
    protected:
    date_primitive_base_pskel* date_primitive_base_impl_;
    date_primitive_base_pskel (date_primitive_base_pskel*, void*);
  };

  class date_primitive_pskel: public ::fhir::date_primitive_base_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_date_primitive ();

    // Constructor.
    //
    date_primitive_pskel (::fhir::date_primitive_base_pskel* tiein);

    // Implementation details.
    //
    protected:
    date_primitive_pskel* date_primitive_impl_;
    date_primitive_pskel (date_primitive_pskel*, void*);
  };

  class Element_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    id ();

    // Elements.
    //
    virtual void
    extension ();

    virtual void
    post_Element ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */);

    // Individual attribute parsers.
    //
    void
    id_parser (::fhir::string_primitive_pskel&);

    // Individual element parsers.
    //
    void
    extension_parser (::fhir::Extension_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Element_pskel ();

    // Implementation details.
    //
    protected:
    Element_pskel* Element_impl_;
    Element_pskel (Element_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::string_primitive_pskel* id_parser_;
    ::fhir::Extension_pskel* extension_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Element_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class date_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_date ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::date_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::date_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    date_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    date_pskel* date_impl_;
    date_pskel (date_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::date_primitive_pskel* value_parser_;
  };

  class dateTime_primitive_base_pskel: public ::xsde::cxx::parser::validating::simple_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();
    //
    // virtual void
    // _characters (const ::xsde::cxx::ro_string&);

    virtual void
    post_dateTime_primitive_base ();

    // Constructor.
    //
    dateTime_primitive_base_pskel ();

    // Implementation details.
    //
    protected:
    dateTime_primitive_base_pskel* dateTime_primitive_base_impl_;
    dateTime_primitive_base_pskel (dateTime_primitive_base_pskel*, void*);
  };

  class dateTime_primitive_pskel: public ::fhir::dateTime_primitive_base_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_dateTime_primitive ();

    // Constructor.
    //
    dateTime_primitive_pskel (::fhir::dateTime_primitive_base_pskel* tiein);

    // Implementation details.
    //
    protected:
    dateTime_primitive_pskel* dateTime_primitive_impl_;
    dateTime_primitive_pskel (dateTime_primitive_pskel*, void*);
  };

  class dateTime_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_dateTime ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::dateTime_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::dateTime_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    dateTime_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    dateTime_pskel* dateTime_impl_;
    dateTime_pskel (dateTime_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::dateTime_primitive_pskel* value_parser_;
  };

  class code_primitive_pskel: public ::xml_schema::token_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_code_primitive ();

    // Constructor.
    //
    code_primitive_pskel (::xml_schema::token_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_token ();

    protected:
    code_primitive_pskel* code_primitive_impl_;
    code_primitive_pskel (code_primitive_pskel*, void*);
  };

  class code_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_code ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::code_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::code_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    code_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    code_pskel* code_impl_;
    code_pskel (code_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::code_primitive_pskel* value_parser_;
  };

  class string_primitive_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_string_primitive ();

    // Constructor.
    //
    string_primitive_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    string_primitive_pskel* string_primitive_impl_;
    string_primitive_pskel (string_primitive_pskel*, void*);
  };

  class string_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_string ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::string_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    string_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    string_pskel* string_impl_;
    string_pskel (string_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::string_primitive_pskel* value_parser_;
  };

  class integer_primitive_pskel: public ::xml_schema::int_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_integer_primitive ();

    // Constructor.
    //
    integer_primitive_pskel (::xml_schema::int_pskel* tiein);

    // Implementation details.
    //
    virtual int
    post_int ();

    protected:
    integer_primitive_pskel* integer_primitive_impl_;
    integer_primitive_pskel (integer_primitive_pskel*, void*);
  };

  class integer_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_integer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::integer_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::integer_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    integer_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    integer_pskel* integer_impl_;
    integer_pskel (integer_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::integer_primitive_pskel* value_parser_;
  };

  class oid_primitive_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_oid_primitive ();

    // Constructor.
    //
    oid_primitive_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    oid_primitive_pskel* oid_primitive_impl_;
    oid_primitive_pskel (oid_primitive_pskel*, void*);
  };

  class oid_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_oid ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::oid_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::oid_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    oid_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    oid_pskel* oid_impl_;
    oid_pskel (oid_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::oid_primitive_pskel* value_parser_;
  };

  class canonical_primitive_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_canonical_primitive ();

    // Constructor.
    //
    canonical_primitive_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    canonical_primitive_pskel* canonical_primitive_impl_;
    canonical_primitive_pskel (canonical_primitive_pskel*, void*);
  };

  class canonical_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_canonical ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::canonical_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::canonical_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    canonical_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    canonical_pskel* canonical_impl_;
    canonical_pskel (canonical_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::canonical_primitive_pskel* value_parser_;
  };

  class uri_primitive_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_uri_primitive ();

    // Constructor.
    //
    uri_primitive_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    uri_primitive_pskel* uri_primitive_impl_;
    uri_primitive_pskel (uri_primitive_pskel*, void*);
  };

  class uri_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_uri ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::uri_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::uri_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    uri_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    uri_pskel* uri_impl_;
    uri_pskel (uri_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::uri_primitive_pskel* value_parser_;
  };

  class uuid_primitive_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_uuid_primitive ();

    // Constructor.
    //
    uuid_primitive_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    uuid_primitive_pskel* uuid_primitive_impl_;
    uuid_primitive_pskel (uuid_primitive_pskel*, void*);
  };

  class uuid_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_uuid ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::uuid_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::uuid_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    uuid_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    uuid_pskel* uuid_impl_;
    uuid_pskel (uuid_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::uuid_primitive_pskel* value_parser_;
  };

  class url_primitive_pskel: public ::xml_schema::uri_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_url_primitive ();

    // Constructor.
    //
    url_primitive_pskel (::xml_schema::uri_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_uri ();

    protected:
    url_primitive_pskel* url_primitive_impl_;
    url_primitive_pskel (url_primitive_pskel*, void*);
  };

  class url_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_url ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::url_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::url_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    url_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    url_pskel* url_impl_;
    url_pskel (url_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::url_primitive_pskel* value_parser_;
  };

  class instant_primitive_pskel: public ::xml_schema::date_time_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_instant_primitive ();

    // Constructor.
    //
    instant_primitive_pskel (::xml_schema::date_time_pskel* tiein);

    // Implementation details.
    //
    virtual ::xml_schema::date_time
    post_date_time ();

    protected:
    instant_primitive_pskel* instant_primitive_impl_;
    instant_primitive_pskel (instant_primitive_pskel*, void*);
  };

  class instant_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_instant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::instant_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::instant_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    instant_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    instant_pskel* instant_impl_;
    instant_pskel (instant_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::instant_primitive_pskel* value_parser_;
  };

  class boolean_primitive_pskel: public ::xml_schema::boolean_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_boolean_primitive ();

    // Constructor.
    //
    boolean_primitive_pskel (::xml_schema::boolean_pskel* tiein);

    // Implementation details.
    //
    virtual bool
    post_boolean ();

    protected:
    boolean_primitive_pskel* boolean_primitive_impl_;
    boolean_primitive_pskel (boolean_primitive_pskel*, void*);
  };

  class boolean_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_boolean ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::boolean_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::boolean_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    boolean_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    boolean_pskel* boolean_impl_;
    boolean_pskel (boolean_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::boolean_primitive_pskel* value_parser_;
  };

  class base64Binary_primitive_pskel: public ::xml_schema::base64_binary_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_base64Binary_primitive ();

    // Constructor.
    //
    base64Binary_primitive_pskel (::xml_schema::base64_binary_pskel* tiein);

    // Implementation details.
    //
    virtual ::xml_schema::buffer*
    post_base64_binary ();

    protected:
    base64Binary_primitive_pskel* base64Binary_primitive_impl_;
    base64Binary_primitive_pskel (base64Binary_primitive_pskel*, void*);
  };

  class base64Binary_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_base64Binary ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::base64Binary_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::base64Binary_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    base64Binary_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    base64Binary_pskel* base64Binary_impl_;
    base64Binary_pskel (base64Binary_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::base64Binary_primitive_pskel* value_parser_;
  };

  class unsignedInt_primitive_pskel: public ::xml_schema::non_negative_integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_unsignedInt_primitive ();

    // Constructor.
    //
    unsignedInt_primitive_pskel (::xml_schema::non_negative_integer_pskel* tiein);

    // Implementation details.
    //
    virtual unsigned long
    post_non_negative_integer ();

    protected:
    unsignedInt_primitive_pskel* unsignedInt_primitive_impl_;
    unsignedInt_primitive_pskel (unsignedInt_primitive_pskel*, void*);
  };

  class unsignedInt_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_unsignedInt ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::unsignedInt_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::unsignedInt_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    unsignedInt_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    unsignedInt_pskel* unsignedInt_impl_;
    unsignedInt_pskel (unsignedInt_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::unsignedInt_primitive_pskel* value_parser_;
  };

  class markdown_primitive_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_markdown_primitive ();

    // Constructor.
    //
    markdown_primitive_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    markdown_primitive_pskel* markdown_primitive_impl_;
    markdown_primitive_pskel (markdown_primitive_pskel*, void*);
  };

  class markdown_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_markdown ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::markdown_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::markdown_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    markdown_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    markdown_pskel* markdown_impl_;
    markdown_pskel (markdown_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::markdown_primitive_pskel* value_parser_;
  };

  class time_primitive_pskel: public ::xml_schema::time_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_time_primitive ();

    // Constructor.
    //
    time_primitive_pskel (::xml_schema::time_pskel* tiein);

    // Implementation details.
    //
    virtual ::xml_schema::time
    post_time ();

    protected:
    time_primitive_pskel* time_primitive_impl_;
    time_primitive_pskel (time_primitive_pskel*, void*);
  };

  class time_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_time ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::time_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::time_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    time_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    time_pskel* time_impl_;
    time_pskel (time_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::time_primitive_pskel* value_parser_;
  };

  class id_primitive_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_id_primitive ();

    // Constructor.
    //
    id_primitive_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    id_primitive_pskel* id_primitive_impl_;
    id_primitive_pskel (id_primitive_pskel*, void*);
  };

  class id_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_id ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::id_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::id_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    id_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    id_pskel* id_impl_;
    id_pskel (id_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::id_primitive_pskel* value_parser_;
  };

  class positiveInt_primitive_pskel: public ::xml_schema::positive_integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_positiveInt_primitive ();

    // Constructor.
    //
    positiveInt_primitive_pskel (::xml_schema::positive_integer_pskel* tiein);

    // Implementation details.
    //
    virtual unsigned long
    post_positive_integer ();

    protected:
    positiveInt_primitive_pskel* positiveInt_primitive_impl_;
    positiveInt_primitive_pskel (positiveInt_primitive_pskel*, void*);
  };

  class positiveInt_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_positiveInt ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::positiveInt_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::positiveInt_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    positiveInt_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    positiveInt_pskel* positiveInt_impl_;
    positiveInt_pskel (positiveInt_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::positiveInt_primitive_pskel* value_parser_;
  };

  class decimal_primitive_pskel: public ::xsde::cxx::parser::validating::simple_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();
    //
    // virtual void
    // _characters (const ::xsde::cxx::ro_string&);

    virtual void
    post_decimal_primitive ();

    // Constructor.
    //
    decimal_primitive_pskel ();

    // Implementation details.
    //
    protected:
    decimal_primitive_pskel* decimal_primitive_impl_;
    decimal_primitive_pskel (decimal_primitive_pskel*, void*);
  };

  class decimal_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_decimal ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::decimal_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::decimal_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    decimal_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    decimal_pskel* decimal_impl_;
    decimal_pskel (decimal_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::decimal_primitive_pskel* value_parser_;
  };

  class ResourceContainer_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    Account ();

    virtual void
    ActivityDefinition ();

    virtual void
    AdverseEvent ();

    virtual void
    AllergyIntolerance ();

    virtual void
    Appointment ();

    virtual void
    AppointmentResponse ();

    virtual void
    AuditEvent ();

    virtual void
    Basic ();

    virtual void
    Binary ();

    virtual void
    BiologicallyDerivedProduct ();

    virtual void
    BodyStructure ();

    virtual void
    Bundle ();

    virtual void
    CapabilityStatement ();

    virtual void
    CarePlan ();

    virtual void
    CareTeam ();

    virtual void
    CatalogEntry ();

    virtual void
    ChargeItem ();

    virtual void
    ChargeItemDefinition ();

    virtual void
    Claim ();

    virtual void
    ClaimResponse ();

    virtual void
    ClinicalImpression ();

    virtual void
    CodeSystem ();

    virtual void
    Communication ();

    virtual void
    CommunicationRequest ();

    virtual void
    CompartmentDefinition ();

    virtual void
    Composition ();

    virtual void
    ConceptMap ();

    virtual void
    Condition ();

    virtual void
    Consent ();

    virtual void
    Contract ();

    virtual void
    Coverage ();

    virtual void
    CoverageEligibilityRequest ();

    virtual void
    CoverageEligibilityResponse ();

    virtual void
    DetectedIssue ();

    virtual void
    Device ();

    virtual void
    DeviceDefinition ();

    virtual void
    DeviceMetric ();

    virtual void
    DeviceRequest ();

    virtual void
    DeviceUseStatement ();

    virtual void
    DiagnosticReport ();

    virtual void
    DocumentManifest ();

    virtual void
    DocumentReference ();

    virtual void
    EffectEvidenceSynthesis ();

    virtual void
    Encounter ();

    virtual void
    Endpoint ();

    virtual void
    EnrollmentRequest ();

    virtual void
    EnrollmentResponse ();

    virtual void
    EpisodeOfCare ();

    virtual void
    EventDefinition ();

    virtual void
    Evidence ();

    virtual void
    EvidenceVariable ();

    virtual void
    ExampleScenario ();

    virtual void
    ExplanationOfBenefit ();

    virtual void
    FamilyMemberHistory ();

    virtual void
    Flag ();

    virtual void
    Goal ();

    virtual void
    GraphDefinition ();

    virtual void
    Group ();

    virtual void
    GuidanceResponse ();

    virtual void
    HealthcareService ();

    virtual void
    ImagingStudy ();

    virtual void
    Immunization ();

    virtual void
    ImmunizationEvaluation ();

    virtual void
    ImmunizationRecommendation ();

    virtual void
    ImplementationGuide ();

    virtual void
    InsurancePlan ();

    virtual void
    Invoice ();

    virtual void
    Library ();

    virtual void
    Linkage ();

    virtual void
    List ();

    virtual void
    Location ();

    virtual void
    Measure ();

    virtual void
    MeasureReport ();

    virtual void
    Media ();

    virtual void
    Medication ();

    virtual void
    MedicationAdministration ();

    virtual void
    MedicationDispense ();

    virtual void
    MedicationKnowledge ();

    virtual void
    MedicationRequest ();

    virtual void
    MedicationStatement ();

    virtual void
    MedicinalProduct ();

    virtual void
    MedicinalProductAuthorization ();

    virtual void
    MedicinalProductContraindication ();

    virtual void
    MedicinalProductIndication ();

    virtual void
    MedicinalProductIngredient ();

    virtual void
    MedicinalProductInteraction ();

    virtual void
    MedicinalProductManufactured ();

    virtual void
    MedicinalProductPackaged ();

    virtual void
    MedicinalProductPharmaceutical ();

    virtual void
    MedicinalProductUndesirableEffect ();

    virtual void
    MessageDefinition ();

    virtual void
    MessageHeader ();

    virtual void
    MolecularSequence ();

    virtual void
    NamingSystem ();

    virtual void
    NutritionOrder ();

    virtual void
    Observation ();

    virtual void
    ObservationDefinition ();

    virtual void
    OperationDefinition ();

    virtual void
    OperationOutcome ();

    virtual void
    Organization ();

    virtual void
    OrganizationAffiliation ();

    virtual void
    Patient ();

    virtual void
    PaymentNotice ();

    virtual void
    PaymentReconciliation ();

    virtual void
    Person ();

    virtual void
    PlanDefinition ();

    virtual void
    Practitioner ();

    virtual void
    PractitionerRole ();

    virtual void
    Procedure ();

    virtual void
    Provenance ();

    virtual void
    Questionnaire ();

    virtual void
    QuestionnaireResponse ();

    virtual void
    RelatedPerson ();

    virtual void
    RequestGroup ();

    virtual void
    ResearchDefinition ();

    virtual void
    ResearchElementDefinition ();

    virtual void
    ResearchStudy ();

    virtual void
    ResearchSubject ();

    virtual void
    RiskAssessment ();

    virtual void
    RiskEvidenceSynthesis ();

    virtual void
    Schedule ();

    virtual void
    SearchParameter ();

    virtual void
    ServiceRequest ();

    virtual void
    Slot ();

    virtual void
    Specimen ();

    virtual void
    SpecimenDefinition ();

    virtual void
    StructureDefinition ();

    virtual void
    StructureMap ();

    virtual void
    Subscription ();

    virtual void
    Substance ();

    virtual void
    SubstanceNucleicAcid ();

    virtual void
    SubstancePolymer ();

    virtual void
    SubstanceProtein ();

    virtual void
    SubstanceReferenceInformation ();

    virtual void
    SubstanceSourceMaterial ();

    virtual void
    SubstanceSpecification ();

    virtual void
    SupplyDelivery ();

    virtual void
    SupplyRequest ();

    virtual void
    Task ();

    virtual void
    TerminologyCapabilities ();

    virtual void
    TestReport ();

    virtual void
    TestScript ();

    virtual void
    ValueSet ();

    virtual void
    VerificationResult ();

    virtual void
    VisionPrescription ();

    virtual void
    Parameters ();

    virtual void
    post_ResourceContainer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::Account_pskel& /* Account */,
             ::fhir::ActivityDefinition_pskel& /* ActivityDefinition */,
             ::fhir::AdverseEvent_pskel& /* AdverseEvent */,
             ::fhir::AllergyIntolerance_pskel& /* AllergyIntolerance */,
             ::fhir::Appointment_pskel& /* Appointment */,
             ::fhir::AppointmentResponse_pskel& /* AppointmentResponse */,
             ::fhir::AuditEvent_pskel& /* AuditEvent */,
             ::fhir::Basic_pskel& /* Basic */,
             ::fhir::Binary_pskel& /* Binary */,
             ::fhir::BiologicallyDerivedProduct_pskel& /* BiologicallyDerivedProduct */,
             ::fhir::BodyStructure_pskel& /* BodyStructure */,
             ::fhir::Bundle_pskel& /* Bundle */,
             ::fhir::CapabilityStatement_pskel& /* CapabilityStatement */,
             ::fhir::CarePlan_pskel& /* CarePlan */,
             ::fhir::CareTeam_pskel& /* CareTeam */,
             ::fhir::CatalogEntry_pskel& /* CatalogEntry */,
             ::fhir::ChargeItem_pskel& /* ChargeItem */,
             ::fhir::ChargeItemDefinition_pskel& /* ChargeItemDefinition */,
             ::fhir::Claim_pskel& /* Claim */,
             ::fhir::ClaimResponse_pskel& /* ClaimResponse */,
             ::fhir::ClinicalImpression_pskel& /* ClinicalImpression */,
             ::fhir::CodeSystem_pskel& /* CodeSystem */,
             ::fhir::Communication_pskel& /* Communication */,
             ::fhir::CommunicationRequest_pskel& /* CommunicationRequest */,
             ::fhir::CompartmentDefinition_pskel& /* CompartmentDefinition */,
             ::fhir::Composition_pskel& /* Composition */,
             ::fhir::ConceptMap_pskel& /* ConceptMap */,
             ::fhir::Condition_pskel& /* Condition */,
             ::fhir::Consent_pskel& /* Consent */,
             ::fhir::Contract_pskel& /* Contract */,
             ::fhir::Coverage_pskel& /* Coverage */,
             ::fhir::CoverageEligibilityRequest_pskel& /* CoverageEligibilityRequest */,
             ::fhir::CoverageEligibilityResponse_pskel& /* CoverageEligibilityResponse */,
             ::fhir::DetectedIssue_pskel& /* DetectedIssue */,
             ::fhir::Device_pskel& /* Device */,
             ::fhir::DeviceDefinition_pskel& /* DeviceDefinition */,
             ::fhir::DeviceMetric_pskel& /* DeviceMetric */,
             ::fhir::DeviceRequest_pskel& /* DeviceRequest */,
             ::fhir::DeviceUseStatement_pskel& /* DeviceUseStatement */,
             ::fhir::DiagnosticReport_pskel& /* DiagnosticReport */,
             ::fhir::DocumentManifest_pskel& /* DocumentManifest */,
             ::fhir::DocumentReference_pskel& /* DocumentReference */,
             ::fhir::EffectEvidenceSynthesis_pskel& /* EffectEvidenceSynthesis */,
             ::fhir::Encounter_pskel& /* Encounter */,
             ::fhir::Endpoint_pskel& /* Endpoint */,
             ::fhir::EnrollmentRequest_pskel& /* EnrollmentRequest */,
             ::fhir::EnrollmentResponse_pskel& /* EnrollmentResponse */,
             ::fhir::EpisodeOfCare_pskel& /* EpisodeOfCare */,
             ::fhir::EventDefinition_pskel& /* EventDefinition */,
             ::fhir::Evidence_pskel& /* Evidence */,
             ::fhir::EvidenceVariable_pskel& /* EvidenceVariable */,
             ::fhir::ExampleScenario_pskel& /* ExampleScenario */,
             ::fhir::ExplanationOfBenefit_pskel& /* ExplanationOfBenefit */,
             ::fhir::FamilyMemberHistory_pskel& /* FamilyMemberHistory */,
             ::fhir::Flag_pskel& /* Flag */,
             ::fhir::Goal_pskel& /* Goal */,
             ::fhir::GraphDefinition_pskel& /* GraphDefinition */,
             ::fhir::Group_pskel& /* Group */,
             ::fhir::GuidanceResponse_pskel& /* GuidanceResponse */,
             ::fhir::HealthcareService_pskel& /* HealthcareService */,
             ::fhir::ImagingStudy_pskel& /* ImagingStudy */,
             ::fhir::Immunization_pskel& /* Immunization */,
             ::fhir::ImmunizationEvaluation_pskel& /* ImmunizationEvaluation */,
             ::fhir::ImmunizationRecommendation_pskel& /* ImmunizationRecommendation */,
             ::fhir::ImplementationGuide_pskel& /* ImplementationGuide */,
             ::fhir::InsurancePlan_pskel& /* InsurancePlan */,
             ::fhir::Invoice_pskel& /* Invoice */,
             ::fhir::Library_pskel& /* Library */,
             ::fhir::Linkage_pskel& /* Linkage */,
             ::fhir::List_pskel& /* List */,
             ::fhir::Location_pskel& /* Location */,
             ::fhir::Measure_pskel& /* Measure */,
             ::fhir::MeasureReport_pskel& /* MeasureReport */,
             ::fhir::Media_pskel& /* Media */,
             ::fhir::Medication_pskel& /* Medication */,
             ::fhir::MedicationAdministration_pskel& /* MedicationAdministration */,
             ::fhir::MedicationDispense_pskel& /* MedicationDispense */,
             ::fhir::MedicationKnowledge_pskel& /* MedicationKnowledge */,
             ::fhir::MedicationRequest_pskel& /* MedicationRequest */,
             ::fhir::MedicationStatement_pskel& /* MedicationStatement */,
             ::fhir::MedicinalProduct_pskel& /* MedicinalProduct */,
             ::fhir::MedicinalProductAuthorization_pskel& /* MedicinalProductAuthorization */,
             ::fhir::MedicinalProductContraindication_pskel& /* MedicinalProductContraindication */,
             ::fhir::MedicinalProductIndication_pskel& /* MedicinalProductIndication */,
             ::fhir::MedicinalProductIngredient_pskel& /* MedicinalProductIngredient */,
             ::fhir::MedicinalProductInteraction_pskel& /* MedicinalProductInteraction */,
             ::fhir::MedicinalProductManufactured_pskel& /* MedicinalProductManufactured */,
             ::fhir::MedicinalProductPackaged_pskel& /* MedicinalProductPackaged */,
             ::fhir::MedicinalProductPharmaceutical_pskel& /* MedicinalProductPharmaceutical */,
             ::fhir::MedicinalProductUndesirableEffect_pskel& /* MedicinalProductUndesirableEffect */,
             ::fhir::MessageDefinition_pskel& /* MessageDefinition */,
             ::fhir::MessageHeader_pskel& /* MessageHeader */,
             ::fhir::MolecularSequence_pskel& /* MolecularSequence */,
             ::fhir::NamingSystem_pskel& /* NamingSystem */,
             ::fhir::NutritionOrder_pskel& /* NutritionOrder */,
             ::fhir::Observation_pskel& /* Observation */,
             ::fhir::ObservationDefinition_pskel& /* ObservationDefinition */,
             ::fhir::OperationDefinition_pskel& /* OperationDefinition */,
             ::fhir::OperationOutcome_pskel& /* OperationOutcome */,
             ::fhir::Organization_pskel& /* Organization */,
             ::fhir::OrganizationAffiliation_pskel& /* OrganizationAffiliation */,
             ::fhir::Patient_pskel& /* Patient */,
             ::fhir::PaymentNotice_pskel& /* PaymentNotice */,
             ::fhir::PaymentReconciliation_pskel& /* PaymentReconciliation */,
             ::fhir::Person_pskel& /* Person */,
             ::fhir::PlanDefinition_pskel& /* PlanDefinition */,
             ::fhir::Practitioner_pskel& /* Practitioner */,
             ::fhir::PractitionerRole_pskel& /* PractitionerRole */,
             ::fhir::Procedure_pskel& /* Procedure */,
             ::fhir::Provenance_pskel& /* Provenance */,
             ::fhir::Questionnaire_pskel& /* Questionnaire */,
             ::fhir::QuestionnaireResponse_pskel& /* QuestionnaireResponse */,
             ::fhir::RelatedPerson_pskel& /* RelatedPerson */,
             ::fhir::RequestGroup_pskel& /* RequestGroup */,
             ::fhir::ResearchDefinition_pskel& /* ResearchDefinition */,
             ::fhir::ResearchElementDefinition_pskel& /* ResearchElementDefinition */,
             ::fhir::ResearchStudy_pskel& /* ResearchStudy */,
             ::fhir::ResearchSubject_pskel& /* ResearchSubject */,
             ::fhir::RiskAssessment_pskel& /* RiskAssessment */,
             ::fhir::RiskEvidenceSynthesis_pskel& /* RiskEvidenceSynthesis */,
             ::fhir::Schedule_pskel& /* Schedule */,
             ::fhir::SearchParameter_pskel& /* SearchParameter */,
             ::fhir::ServiceRequest_pskel& /* ServiceRequest */,
             ::fhir::Slot_pskel& /* Slot */,
             ::fhir::Specimen_pskel& /* Specimen */,
             ::fhir::SpecimenDefinition_pskel& /* SpecimenDefinition */,
             ::fhir::StructureDefinition_pskel& /* StructureDefinition */,
             ::fhir::StructureMap_pskel& /* StructureMap */,
             ::fhir::Subscription_pskel& /* Subscription */,
             ::fhir::Substance_pskel& /* Substance */,
             ::fhir::SubstanceNucleicAcid_pskel& /* SubstanceNucleicAcid */,
             ::fhir::SubstancePolymer_pskel& /* SubstancePolymer */,
             ::fhir::SubstanceProtein_pskel& /* SubstanceProtein */,
             ::fhir::SubstanceReferenceInformation_pskel& /* SubstanceReferenceInformation */,
             ::fhir::SubstanceSourceMaterial_pskel& /* SubstanceSourceMaterial */,
             ::fhir::SubstanceSpecification_pskel& /* SubstanceSpecification */,
             ::fhir::SupplyDelivery_pskel& /* SupplyDelivery */,
             ::fhir::SupplyRequest_pskel& /* SupplyRequest */,
             ::fhir::Task_pskel& /* Task */,
             ::fhir::TerminologyCapabilities_pskel& /* TerminologyCapabilities */,
             ::fhir::TestReport_pskel& /* TestReport */,
             ::fhir::TestScript_pskel& /* TestScript */,
             ::fhir::ValueSet_pskel& /* ValueSet */,
             ::fhir::VerificationResult_pskel& /* VerificationResult */,
             ::fhir::VisionPrescription_pskel& /* VisionPrescription */,
             ::fhir::Parameters_pskel& /* Parameters */);

    // Individual element parsers.
    //
    void
    Account_parser (::fhir::Account_pskel&);

    void
    ActivityDefinition_parser (::fhir::ActivityDefinition_pskel&);

    void
    AdverseEvent_parser (::fhir::AdverseEvent_pskel&);

    void
    AllergyIntolerance_parser (::fhir::AllergyIntolerance_pskel&);

    void
    Appointment_parser (::fhir::Appointment_pskel&);

    void
    AppointmentResponse_parser (::fhir::AppointmentResponse_pskel&);

    void
    AuditEvent_parser (::fhir::AuditEvent_pskel&);

    void
    Basic_parser (::fhir::Basic_pskel&);

    void
    Binary_parser (::fhir::Binary_pskel&);

    void
    BiologicallyDerivedProduct_parser (::fhir::BiologicallyDerivedProduct_pskel&);

    void
    BodyStructure_parser (::fhir::BodyStructure_pskel&);

    void
    Bundle_parser (::fhir::Bundle_pskel&);

    void
    CapabilityStatement_parser (::fhir::CapabilityStatement_pskel&);

    void
    CarePlan_parser (::fhir::CarePlan_pskel&);

    void
    CareTeam_parser (::fhir::CareTeam_pskel&);

    void
    CatalogEntry_parser (::fhir::CatalogEntry_pskel&);

    void
    ChargeItem_parser (::fhir::ChargeItem_pskel&);

    void
    ChargeItemDefinition_parser (::fhir::ChargeItemDefinition_pskel&);

    void
    Claim_parser (::fhir::Claim_pskel&);

    void
    ClaimResponse_parser (::fhir::ClaimResponse_pskel&);

    void
    ClinicalImpression_parser (::fhir::ClinicalImpression_pskel&);

    void
    CodeSystem_parser (::fhir::CodeSystem_pskel&);

    void
    Communication_parser (::fhir::Communication_pskel&);

    void
    CommunicationRequest_parser (::fhir::CommunicationRequest_pskel&);

    void
    CompartmentDefinition_parser (::fhir::CompartmentDefinition_pskel&);

    void
    Composition_parser (::fhir::Composition_pskel&);

    void
    ConceptMap_parser (::fhir::ConceptMap_pskel&);

    void
    Condition_parser (::fhir::Condition_pskel&);

    void
    Consent_parser (::fhir::Consent_pskel&);

    void
    Contract_parser (::fhir::Contract_pskel&);

    void
    Coverage_parser (::fhir::Coverage_pskel&);

    void
    CoverageEligibilityRequest_parser (::fhir::CoverageEligibilityRequest_pskel&);

    void
    CoverageEligibilityResponse_parser (::fhir::CoverageEligibilityResponse_pskel&);

    void
    DetectedIssue_parser (::fhir::DetectedIssue_pskel&);

    void
    Device_parser (::fhir::Device_pskel&);

    void
    DeviceDefinition_parser (::fhir::DeviceDefinition_pskel&);

    void
    DeviceMetric_parser (::fhir::DeviceMetric_pskel&);

    void
    DeviceRequest_parser (::fhir::DeviceRequest_pskel&);

    void
    DeviceUseStatement_parser (::fhir::DeviceUseStatement_pskel&);

    void
    DiagnosticReport_parser (::fhir::DiagnosticReport_pskel&);

    void
    DocumentManifest_parser (::fhir::DocumentManifest_pskel&);

    void
    DocumentReference_parser (::fhir::DocumentReference_pskel&);

    void
    EffectEvidenceSynthesis_parser (::fhir::EffectEvidenceSynthesis_pskel&);

    void
    Encounter_parser (::fhir::Encounter_pskel&);

    void
    Endpoint_parser (::fhir::Endpoint_pskel&);

    void
    EnrollmentRequest_parser (::fhir::EnrollmentRequest_pskel&);

    void
    EnrollmentResponse_parser (::fhir::EnrollmentResponse_pskel&);

    void
    EpisodeOfCare_parser (::fhir::EpisodeOfCare_pskel&);

    void
    EventDefinition_parser (::fhir::EventDefinition_pskel&);

    void
    Evidence_parser (::fhir::Evidence_pskel&);

    void
    EvidenceVariable_parser (::fhir::EvidenceVariable_pskel&);

    void
    ExampleScenario_parser (::fhir::ExampleScenario_pskel&);

    void
    ExplanationOfBenefit_parser (::fhir::ExplanationOfBenefit_pskel&);

    void
    FamilyMemberHistory_parser (::fhir::FamilyMemberHistory_pskel&);

    void
    Flag_parser (::fhir::Flag_pskel&);

    void
    Goal_parser (::fhir::Goal_pskel&);

    void
    GraphDefinition_parser (::fhir::GraphDefinition_pskel&);

    void
    Group_parser (::fhir::Group_pskel&);

    void
    GuidanceResponse_parser (::fhir::GuidanceResponse_pskel&);

    void
    HealthcareService_parser (::fhir::HealthcareService_pskel&);

    void
    ImagingStudy_parser (::fhir::ImagingStudy_pskel&);

    void
    Immunization_parser (::fhir::Immunization_pskel&);

    void
    ImmunizationEvaluation_parser (::fhir::ImmunizationEvaluation_pskel&);

    void
    ImmunizationRecommendation_parser (::fhir::ImmunizationRecommendation_pskel&);

    void
    ImplementationGuide_parser (::fhir::ImplementationGuide_pskel&);

    void
    InsurancePlan_parser (::fhir::InsurancePlan_pskel&);

    void
    Invoice_parser (::fhir::Invoice_pskel&);

    void
    Library_parser (::fhir::Library_pskel&);

    void
    Linkage_parser (::fhir::Linkage_pskel&);

    void
    List_parser (::fhir::List_pskel&);

    void
    Location_parser (::fhir::Location_pskel&);

    void
    Measure_parser (::fhir::Measure_pskel&);

    void
    MeasureReport_parser (::fhir::MeasureReport_pskel&);

    void
    Media_parser (::fhir::Media_pskel&);

    void
    Medication_parser (::fhir::Medication_pskel&);

    void
    MedicationAdministration_parser (::fhir::MedicationAdministration_pskel&);

    void
    MedicationDispense_parser (::fhir::MedicationDispense_pskel&);

    void
    MedicationKnowledge_parser (::fhir::MedicationKnowledge_pskel&);

    void
    MedicationRequest_parser (::fhir::MedicationRequest_pskel&);

    void
    MedicationStatement_parser (::fhir::MedicationStatement_pskel&);

    void
    MedicinalProduct_parser (::fhir::MedicinalProduct_pskel&);

    void
    MedicinalProductAuthorization_parser (::fhir::MedicinalProductAuthorization_pskel&);

    void
    MedicinalProductContraindication_parser (::fhir::MedicinalProductContraindication_pskel&);

    void
    MedicinalProductIndication_parser (::fhir::MedicinalProductIndication_pskel&);

    void
    MedicinalProductIngredient_parser (::fhir::MedicinalProductIngredient_pskel&);

    void
    MedicinalProductInteraction_parser (::fhir::MedicinalProductInteraction_pskel&);

    void
    MedicinalProductManufactured_parser (::fhir::MedicinalProductManufactured_pskel&);

    void
    MedicinalProductPackaged_parser (::fhir::MedicinalProductPackaged_pskel&);

    void
    MedicinalProductPharmaceutical_parser (::fhir::MedicinalProductPharmaceutical_pskel&);

    void
    MedicinalProductUndesirableEffect_parser (::fhir::MedicinalProductUndesirableEffect_pskel&);

    void
    MessageDefinition_parser (::fhir::MessageDefinition_pskel&);

    void
    MessageHeader_parser (::fhir::MessageHeader_pskel&);

    void
    MolecularSequence_parser (::fhir::MolecularSequence_pskel&);

    void
    NamingSystem_parser (::fhir::NamingSystem_pskel&);

    void
    NutritionOrder_parser (::fhir::NutritionOrder_pskel&);

    void
    Observation_parser (::fhir::Observation_pskel&);

    void
    ObservationDefinition_parser (::fhir::ObservationDefinition_pskel&);

    void
    OperationDefinition_parser (::fhir::OperationDefinition_pskel&);

    void
    OperationOutcome_parser (::fhir::OperationOutcome_pskel&);

    void
    Organization_parser (::fhir::Organization_pskel&);

    void
    OrganizationAffiliation_parser (::fhir::OrganizationAffiliation_pskel&);

    void
    Patient_parser (::fhir::Patient_pskel&);

    void
    PaymentNotice_parser (::fhir::PaymentNotice_pskel&);

    void
    PaymentReconciliation_parser (::fhir::PaymentReconciliation_pskel&);

    void
    Person_parser (::fhir::Person_pskel&);

    void
    PlanDefinition_parser (::fhir::PlanDefinition_pskel&);

    void
    Practitioner_parser (::fhir::Practitioner_pskel&);

    void
    PractitionerRole_parser (::fhir::PractitionerRole_pskel&);

    void
    Procedure_parser (::fhir::Procedure_pskel&);

    void
    Provenance_parser (::fhir::Provenance_pskel&);

    void
    Questionnaire_parser (::fhir::Questionnaire_pskel&);

    void
    QuestionnaireResponse_parser (::fhir::QuestionnaireResponse_pskel&);

    void
    RelatedPerson_parser (::fhir::RelatedPerson_pskel&);

    void
    RequestGroup_parser (::fhir::RequestGroup_pskel&);

    void
    ResearchDefinition_parser (::fhir::ResearchDefinition_pskel&);

    void
    ResearchElementDefinition_parser (::fhir::ResearchElementDefinition_pskel&);

    void
    ResearchStudy_parser (::fhir::ResearchStudy_pskel&);

    void
    ResearchSubject_parser (::fhir::ResearchSubject_pskel&);

    void
    RiskAssessment_parser (::fhir::RiskAssessment_pskel&);

    void
    RiskEvidenceSynthesis_parser (::fhir::RiskEvidenceSynthesis_pskel&);

    void
    Schedule_parser (::fhir::Schedule_pskel&);

    void
    SearchParameter_parser (::fhir::SearchParameter_pskel&);

    void
    ServiceRequest_parser (::fhir::ServiceRequest_pskel&);

    void
    Slot_parser (::fhir::Slot_pskel&);

    void
    Specimen_parser (::fhir::Specimen_pskel&);

    void
    SpecimenDefinition_parser (::fhir::SpecimenDefinition_pskel&);

    void
    StructureDefinition_parser (::fhir::StructureDefinition_pskel&);

    void
    StructureMap_parser (::fhir::StructureMap_pskel&);

    void
    Subscription_parser (::fhir::Subscription_pskel&);

    void
    Substance_parser (::fhir::Substance_pskel&);

    void
    SubstanceNucleicAcid_parser (::fhir::SubstanceNucleicAcid_pskel&);

    void
    SubstancePolymer_parser (::fhir::SubstancePolymer_pskel&);

    void
    SubstanceProtein_parser (::fhir::SubstanceProtein_pskel&);

    void
    SubstanceReferenceInformation_parser (::fhir::SubstanceReferenceInformation_pskel&);

    void
    SubstanceSourceMaterial_parser (::fhir::SubstanceSourceMaterial_pskel&);

    void
    SubstanceSpecification_parser (::fhir::SubstanceSpecification_pskel&);

    void
    SupplyDelivery_parser (::fhir::SupplyDelivery_pskel&);

    void
    SupplyRequest_parser (::fhir::SupplyRequest_pskel&);

    void
    Task_parser (::fhir::Task_pskel&);

    void
    TerminologyCapabilities_parser (::fhir::TerminologyCapabilities_pskel&);

    void
    TestReport_parser (::fhir::TestReport_pskel&);

    void
    TestScript_parser (::fhir::TestScript_pskel&);

    void
    ValueSet_parser (::fhir::ValueSet_pskel&);

    void
    VerificationResult_parser (::fhir::VerificationResult_pskel&);

    void
    VisionPrescription_parser (::fhir::VisionPrescription_pskel&);

    void
    Parameters_parser (::fhir::Parameters_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResourceContainer_pskel ();

    // Implementation details.
    //
    protected:
    ResourceContainer_pskel* ResourceContainer_impl_;
    ResourceContainer_pskel (ResourceContainer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Account_pskel* Account_parser_;
    ::fhir::ActivityDefinition_pskel* ActivityDefinition_parser_;
    ::fhir::AdverseEvent_pskel* AdverseEvent_parser_;
    ::fhir::AllergyIntolerance_pskel* AllergyIntolerance_parser_;
    ::fhir::Appointment_pskel* Appointment_parser_;
    ::fhir::AppointmentResponse_pskel* AppointmentResponse_parser_;
    ::fhir::AuditEvent_pskel* AuditEvent_parser_;
    ::fhir::Basic_pskel* Basic_parser_;
    ::fhir::Binary_pskel* Binary_parser_;
    ::fhir::BiologicallyDerivedProduct_pskel* BiologicallyDerivedProduct_parser_;
    ::fhir::BodyStructure_pskel* BodyStructure_parser_;
    ::fhir::Bundle_pskel* Bundle_parser_;
    ::fhir::CapabilityStatement_pskel* CapabilityStatement_parser_;
    ::fhir::CarePlan_pskel* CarePlan_parser_;
    ::fhir::CareTeam_pskel* CareTeam_parser_;
    ::fhir::CatalogEntry_pskel* CatalogEntry_parser_;
    ::fhir::ChargeItem_pskel* ChargeItem_parser_;
    ::fhir::ChargeItemDefinition_pskel* ChargeItemDefinition_parser_;
    ::fhir::Claim_pskel* Claim_parser_;
    ::fhir::ClaimResponse_pskel* ClaimResponse_parser_;
    ::fhir::ClinicalImpression_pskel* ClinicalImpression_parser_;
    ::fhir::CodeSystem_pskel* CodeSystem_parser_;
    ::fhir::Communication_pskel* Communication_parser_;
    ::fhir::CommunicationRequest_pskel* CommunicationRequest_parser_;
    ::fhir::CompartmentDefinition_pskel* CompartmentDefinition_parser_;
    ::fhir::Composition_pskel* Composition_parser_;
    ::fhir::ConceptMap_pskel* ConceptMap_parser_;
    ::fhir::Condition_pskel* Condition_parser_;
    ::fhir::Consent_pskel* Consent_parser_;
    ::fhir::Contract_pskel* Contract_parser_;
    ::fhir::Coverage_pskel* Coverage_parser_;
    ::fhir::CoverageEligibilityRequest_pskel* CoverageEligibilityRequest_parser_;
    ::fhir::CoverageEligibilityResponse_pskel* CoverageEligibilityResponse_parser_;
    ::fhir::DetectedIssue_pskel* DetectedIssue_parser_;
    ::fhir::Device_pskel* Device_parser_;
    ::fhir::DeviceDefinition_pskel* DeviceDefinition_parser_;
    ::fhir::DeviceMetric_pskel* DeviceMetric_parser_;
    ::fhir::DeviceRequest_pskel* DeviceRequest_parser_;
    ::fhir::DeviceUseStatement_pskel* DeviceUseStatement_parser_;
    ::fhir::DiagnosticReport_pskel* DiagnosticReport_parser_;
    ::fhir::DocumentManifest_pskel* DocumentManifest_parser_;
    ::fhir::DocumentReference_pskel* DocumentReference_parser_;
    ::fhir::EffectEvidenceSynthesis_pskel* EffectEvidenceSynthesis_parser_;
    ::fhir::Encounter_pskel* Encounter_parser_;
    ::fhir::Endpoint_pskel* Endpoint_parser_;
    ::fhir::EnrollmentRequest_pskel* EnrollmentRequest_parser_;
    ::fhir::EnrollmentResponse_pskel* EnrollmentResponse_parser_;
    ::fhir::EpisodeOfCare_pskel* EpisodeOfCare_parser_;
    ::fhir::EventDefinition_pskel* EventDefinition_parser_;
    ::fhir::Evidence_pskel* Evidence_parser_;
    ::fhir::EvidenceVariable_pskel* EvidenceVariable_parser_;
    ::fhir::ExampleScenario_pskel* ExampleScenario_parser_;
    ::fhir::ExplanationOfBenefit_pskel* ExplanationOfBenefit_parser_;
    ::fhir::FamilyMemberHistory_pskel* FamilyMemberHistory_parser_;
    ::fhir::Flag_pskel* Flag_parser_;
    ::fhir::Goal_pskel* Goal_parser_;
    ::fhir::GraphDefinition_pskel* GraphDefinition_parser_;
    ::fhir::Group_pskel* Group_parser_;
    ::fhir::GuidanceResponse_pskel* GuidanceResponse_parser_;
    ::fhir::HealthcareService_pskel* HealthcareService_parser_;
    ::fhir::ImagingStudy_pskel* ImagingStudy_parser_;
    ::fhir::Immunization_pskel* Immunization_parser_;
    ::fhir::ImmunizationEvaluation_pskel* ImmunizationEvaluation_parser_;
    ::fhir::ImmunizationRecommendation_pskel* ImmunizationRecommendation_parser_;
    ::fhir::ImplementationGuide_pskel* ImplementationGuide_parser_;
    ::fhir::InsurancePlan_pskel* InsurancePlan_parser_;
    ::fhir::Invoice_pskel* Invoice_parser_;
    ::fhir::Library_pskel* Library_parser_;
    ::fhir::Linkage_pskel* Linkage_parser_;
    ::fhir::List_pskel* List_parser_;
    ::fhir::Location_pskel* Location_parser_;
    ::fhir::Measure_pskel* Measure_parser_;
    ::fhir::MeasureReport_pskel* MeasureReport_parser_;
    ::fhir::Media_pskel* Media_parser_;
    ::fhir::Medication_pskel* Medication_parser_;
    ::fhir::MedicationAdministration_pskel* MedicationAdministration_parser_;
    ::fhir::MedicationDispense_pskel* MedicationDispense_parser_;
    ::fhir::MedicationKnowledge_pskel* MedicationKnowledge_parser_;
    ::fhir::MedicationRequest_pskel* MedicationRequest_parser_;
    ::fhir::MedicationStatement_pskel* MedicationStatement_parser_;
    ::fhir::MedicinalProduct_pskel* MedicinalProduct_parser_;
    ::fhir::MedicinalProductAuthorization_pskel* MedicinalProductAuthorization_parser_;
    ::fhir::MedicinalProductContraindication_pskel* MedicinalProductContraindication_parser_;
    ::fhir::MedicinalProductIndication_pskel* MedicinalProductIndication_parser_;
    ::fhir::MedicinalProductIngredient_pskel* MedicinalProductIngredient_parser_;
    ::fhir::MedicinalProductInteraction_pskel* MedicinalProductInteraction_parser_;
    ::fhir::MedicinalProductManufactured_pskel* MedicinalProductManufactured_parser_;
    ::fhir::MedicinalProductPackaged_pskel* MedicinalProductPackaged_parser_;
    ::fhir::MedicinalProductPharmaceutical_pskel* MedicinalProductPharmaceutical_parser_;
    ::fhir::MedicinalProductUndesirableEffect_pskel* MedicinalProductUndesirableEffect_parser_;
    ::fhir::MessageDefinition_pskel* MessageDefinition_parser_;
    ::fhir::MessageHeader_pskel* MessageHeader_parser_;
    ::fhir::MolecularSequence_pskel* MolecularSequence_parser_;
    ::fhir::NamingSystem_pskel* NamingSystem_parser_;
    ::fhir::NutritionOrder_pskel* NutritionOrder_parser_;
    ::fhir::Observation_pskel* Observation_parser_;
    ::fhir::ObservationDefinition_pskel* ObservationDefinition_parser_;
    ::fhir::OperationDefinition_pskel* OperationDefinition_parser_;
    ::fhir::OperationOutcome_pskel* OperationOutcome_parser_;
    ::fhir::Organization_pskel* Organization_parser_;
    ::fhir::OrganizationAffiliation_pskel* OrganizationAffiliation_parser_;
    ::fhir::Patient_pskel* Patient_parser_;
    ::fhir::PaymentNotice_pskel* PaymentNotice_parser_;
    ::fhir::PaymentReconciliation_pskel* PaymentReconciliation_parser_;
    ::fhir::Person_pskel* Person_parser_;
    ::fhir::PlanDefinition_pskel* PlanDefinition_parser_;
    ::fhir::Practitioner_pskel* Practitioner_parser_;
    ::fhir::PractitionerRole_pskel* PractitionerRole_parser_;
    ::fhir::Procedure_pskel* Procedure_parser_;
    ::fhir::Provenance_pskel* Provenance_parser_;
    ::fhir::Questionnaire_pskel* Questionnaire_parser_;
    ::fhir::QuestionnaireResponse_pskel* QuestionnaireResponse_parser_;
    ::fhir::RelatedPerson_pskel* RelatedPerson_parser_;
    ::fhir::RequestGroup_pskel* RequestGroup_parser_;
    ::fhir::ResearchDefinition_pskel* ResearchDefinition_parser_;
    ::fhir::ResearchElementDefinition_pskel* ResearchElementDefinition_parser_;
    ::fhir::ResearchStudy_pskel* ResearchStudy_parser_;
    ::fhir::ResearchSubject_pskel* ResearchSubject_parser_;
    ::fhir::RiskAssessment_pskel* RiskAssessment_parser_;
    ::fhir::RiskEvidenceSynthesis_pskel* RiskEvidenceSynthesis_parser_;
    ::fhir::Schedule_pskel* Schedule_parser_;
    ::fhir::SearchParameter_pskel* SearchParameter_parser_;
    ::fhir::ServiceRequest_pskel* ServiceRequest_parser_;
    ::fhir::Slot_pskel* Slot_parser_;
    ::fhir::Specimen_pskel* Specimen_parser_;
    ::fhir::SpecimenDefinition_pskel* SpecimenDefinition_parser_;
    ::fhir::StructureDefinition_pskel* StructureDefinition_parser_;
    ::fhir::StructureMap_pskel* StructureMap_parser_;
    ::fhir::Subscription_pskel* Subscription_parser_;
    ::fhir::Substance_pskel* Substance_parser_;
    ::fhir::SubstanceNucleicAcid_pskel* SubstanceNucleicAcid_parser_;
    ::fhir::SubstancePolymer_pskel* SubstancePolymer_parser_;
    ::fhir::SubstanceProtein_pskel* SubstanceProtein_parser_;
    ::fhir::SubstanceReferenceInformation_pskel* SubstanceReferenceInformation_parser_;
    ::fhir::SubstanceSourceMaterial_pskel* SubstanceSourceMaterial_parser_;
    ::fhir::SubstanceSpecification_pskel* SubstanceSpecification_parser_;
    ::fhir::SupplyDelivery_pskel* SupplyDelivery_parser_;
    ::fhir::SupplyRequest_pskel* SupplyRequest_parser_;
    ::fhir::Task_pskel* Task_parser_;
    ::fhir::TerminologyCapabilities_pskel* TerminologyCapabilities_parser_;
    ::fhir::TestReport_pskel* TestReport_parser_;
    ::fhir::TestScript_pskel* TestScript_parser_;
    ::fhir::ValueSet_pskel* ValueSet_parser_;
    ::fhir::VerificationResult_pskel* VerificationResult_parser_;
    ::fhir::VisionPrescription_pskel* VisionPrescription_parser_;
    ::fhir::Parameters_pskel* Parameters_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ResourceContainer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Extension_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    url ();

    // Elements.
    //
    virtual void
    valueBase64Binary ();

    virtual void
    valueBoolean ();

    virtual void
    valueCanonical ();

    virtual void
    valueCode ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueDecimal ();

    virtual void
    valueId ();

    virtual void
    valueInstant ();

    virtual void
    valueInteger ();

    virtual void
    valueMarkdown ();

    virtual void
    valueOid ();

    virtual void
    valuePositiveInt ();

    virtual void
    valueString ();

    virtual void
    valueTime ();

    virtual void
    valueUnsignedInt ();

    virtual void
    valueUri ();

    virtual void
    valueUrl ();

    virtual void
    valueUuid ();

    virtual void
    valueAddress ();

    virtual void
    valueAge ();

    virtual void
    valueAnnotation ();

    virtual void
    valueAttachment ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueCoding ();

    virtual void
    valueContactPoint ();

    virtual void
    valueCount ();

    virtual void
    valueDistance ();

    virtual void
    valueDuration ();

    virtual void
    valueHumanName ();

    virtual void
    valueIdentifier ();

    virtual void
    valueMoney ();

    virtual void
    valuePeriod ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueRatio ();

    virtual void
    valueReference ();

    virtual void
    valueSampledData ();

    virtual void
    valueSignature ();

    virtual void
    valueTiming ();

    virtual void
    valueContactDetail ();

    virtual void
    valueContributor ();

    virtual void
    valueDataRequirement ();

    virtual void
    valueExpression ();

    virtual void
    valueParameterDefinition ();

    virtual void
    valueRelatedArtifact ();

    virtual void
    valueTriggerDefinition ();

    virtual void
    valueUsageContext ();

    virtual void
    valueDosage ();

    virtual void
    valueMeta ();

    virtual void
    post_Extension ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::uri_primitive_pskel& /* url */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::canonical_pskel& /* valueCanonical */,
             ::fhir::code_pskel& /* valueCode */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::id_pskel& /* valueId */,
             ::fhir::instant_pskel& /* valueInstant */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::markdown_pskel& /* valueMarkdown */,
             ::fhir::oid_pskel& /* valueOid */,
             ::fhir::positiveInt_pskel& /* valuePositiveInt */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::unsignedInt_pskel& /* valueUnsignedInt */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::url_pskel& /* valueUrl */,
             ::fhir::uuid_pskel& /* valueUuid */,
             ::fhir::Address_pskel& /* valueAddress */,
             ::fhir::Age_pskel& /* valueAge */,
             ::fhir::Annotation_pskel& /* valueAnnotation */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::ContactPoint_pskel& /* valueContactPoint */,
             ::fhir::Count_pskel& /* valueCount */,
             ::fhir::Distance_pskel& /* valueDistance */,
             ::fhir::Duration_pskel& /* valueDuration */,
             ::fhir::HumanName_pskel& /* valueHumanName */,
             ::fhir::Identifier_pskel& /* valueIdentifier */,
             ::fhir::Money_pskel& /* valueMoney */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Ratio_pskel& /* valueRatio */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::SampledData_pskel& /* valueSampledData */,
             ::fhir::Signature_pskel& /* valueSignature */,
             ::fhir::Timing_pskel& /* valueTiming */,
             ::fhir::ContactDetail_pskel& /* valueContactDetail */,
             ::fhir::Contributor_pskel& /* valueContributor */,
             ::fhir::DataRequirement_pskel& /* valueDataRequirement */,
             ::fhir::Expression_pskel& /* valueExpression */,
             ::fhir::ParameterDefinition_pskel& /* valueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* valueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* valueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* valueUsageContext */,
             ::fhir::Dosage_pskel& /* valueDosage */,
             ::fhir::Meta_pskel& /* valueMeta */);

    // Individual attribute parsers.
    //
    void
    url_parser (::fhir::uri_primitive_pskel&);

    // Individual element parsers.
    //
    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueCanonical_parser (::fhir::canonical_pskel&);

    void
    valueCode_parser (::fhir::code_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueId_parser (::fhir::id_pskel&);

    void
    valueInstant_parser (::fhir::instant_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueMarkdown_parser (::fhir::markdown_pskel&);

    void
    valueOid_parser (::fhir::oid_pskel&);

    void
    valuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueUrl_parser (::fhir::url_pskel&);

    void
    valueUuid_parser (::fhir::uuid_pskel&);

    void
    valueAddress_parser (::fhir::Address_pskel&);

    void
    valueAge_parser (::fhir::Age_pskel&);

    void
    valueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    valueCount_parser (::fhir::Count_pskel&);

    void
    valueDistance_parser (::fhir::Distance_pskel&);

    void
    valueDuration_parser (::fhir::Duration_pskel&);

    void
    valueHumanName_parser (::fhir::HumanName_pskel&);

    void
    valueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    valueMoney_parser (::fhir::Money_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueRatio_parser (::fhir::Ratio_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    valueSampledData_parser (::fhir::SampledData_pskel&);

    void
    valueSignature_parser (::fhir::Signature_pskel&);

    void
    valueTiming_parser (::fhir::Timing_pskel&);

    void
    valueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    valueContributor_parser (::fhir::Contributor_pskel&);

    void
    valueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    valueExpression_parser (::fhir::Expression_pskel&);

    void
    valueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    valueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    valueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    valueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    valueDosage_parser (::fhir::Dosage_pskel&);

    void
    valueMeta_parser (::fhir::Meta_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Extension_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Extension_pskel* Extension_impl_;
    Extension_pskel (Extension_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::uri_primitive_pskel* url_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::canonical_pskel* valueCanonical_parser_;
    ::fhir::code_pskel* valueCode_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::id_pskel* valueId_parser_;
    ::fhir::instant_pskel* valueInstant_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::markdown_pskel* valueMarkdown_parser_;
    ::fhir::oid_pskel* valueOid_parser_;
    ::fhir::positiveInt_pskel* valuePositiveInt_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::unsignedInt_pskel* valueUnsignedInt_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::url_pskel* valueUrl_parser_;
    ::fhir::uuid_pskel* valueUuid_parser_;
    ::fhir::Address_pskel* valueAddress_parser_;
    ::fhir::Age_pskel* valueAge_parser_;
    ::fhir::Annotation_pskel* valueAnnotation_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::ContactPoint_pskel* valueContactPoint_parser_;
    ::fhir::Count_pskel* valueCount_parser_;
    ::fhir::Distance_pskel* valueDistance_parser_;
    ::fhir::Duration_pskel* valueDuration_parser_;
    ::fhir::HumanName_pskel* valueHumanName_parser_;
    ::fhir::Identifier_pskel* valueIdentifier_parser_;
    ::fhir::Money_pskel* valueMoney_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Ratio_pskel* valueRatio_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::SampledData_pskel* valueSampledData_parser_;
    ::fhir::Signature_pskel* valueSignature_parser_;
    ::fhir::Timing_pskel* valueTiming_parser_;
    ::fhir::ContactDetail_pskel* valueContactDetail_parser_;
    ::fhir::Contributor_pskel* valueContributor_parser_;
    ::fhir::DataRequirement_pskel* valueDataRequirement_parser_;
    ::fhir::Expression_pskel* valueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* valueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* valueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* valueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* valueUsageContext_parser_;
    ::fhir::Dosage_pskel* valueDosage_parser_;
    ::fhir::Meta_pskel* valueMeta_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Extension_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

    protected:
    struct v_state_attr_
    {
      bool url;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class BackboneElement_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    modifierExtension ();

    virtual void
    post_BackboneElement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */);

    // Individual element parsers.
    //
    void
    modifierExtension_parser (::fhir::Extension_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BackboneElement_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    BackboneElement_pskel* BackboneElement_impl_;
    BackboneElement_pskel (BackboneElement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Extension_pskel* modifierExtension_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::BackboneElement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Narrative_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    status ();

    virtual void
    div ();

    virtual void
    post_Narrative ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NarrativeStatus_pskel& /* status */,
             ::xhtml::div_pskel& /* div */);

    // Individual element parsers.
    //
    void
    status_parser (::fhir::NarrativeStatus_pskel&);

    void
    div_parser (::xhtml::div_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Narrative_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Narrative_pskel* Narrative_impl_;
    Narrative_pskel (Narrative_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::NarrativeStatus_pskel* status_parser_;
    ::xhtml::div_pskel* div_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Narrative_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NarrativeStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_NarrativeStatus_list ();

    // Constructor.
    //
    NarrativeStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    NarrativeStatus_list_pskel* NarrativeStatus_list_impl_;
    NarrativeStatus_list_pskel (NarrativeStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_NarrativeStatus_list_pskel_enums_[4UL];
  };

  class NarrativeStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_NarrativeStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NarrativeStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::NarrativeStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NarrativeStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    NarrativeStatus_pskel* NarrativeStatus_impl_;
    NarrativeStatus_pskel (NarrativeStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::NarrativeStatus_list_pskel* value_parser_;
  };

  class Meta_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    versionId ();

    virtual void
    lastUpdated ();

    virtual void
    source ();

    virtual void
    profile ();

    virtual void
    security ();

    virtual void
    tag ();

    virtual void
    post_Meta ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::id_pskel& /* versionId */,
             ::fhir::instant_pskel& /* lastUpdated */,
             ::fhir::uri_pskel& /* source */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::Coding_pskel& /* security */,
             ::fhir::Coding_pskel& /* tag */);

    // Individual element parsers.
    //
    void
    versionId_parser (::fhir::id_pskel&);

    void
    lastUpdated_parser (::fhir::instant_pskel&);

    void
    source_parser (::fhir::uri_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    security_parser (::fhir::Coding_pskel&);

    void
    tag_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Meta_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Meta_pskel* Meta_impl_;
    Meta_pskel (Meta_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* versionId_parser_;
    ::fhir::instant_pskel* lastUpdated_parser_;
    ::fhir::uri_pskel* source_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::Coding_pskel* security_parser_;
    ::fhir::Coding_pskel* tag_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Meta_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Address_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    use ();

    virtual void
    type ();

    virtual void
    text ();

    virtual void
    line ();

    virtual void
    city ();

    virtual void
    district ();

    virtual void
    state ();

    virtual void
    postalCode ();

    virtual void
    country ();

    virtual void
    period ();

    virtual void
    post_Address ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AddressUse_pskel& /* use */,
             ::fhir::AddressType_pskel& /* type */,
             ::fhir::string_pskel& /* text */,
             ::fhir::string_pskel& /* line */,
             ::fhir::string_pskel& /* city */,
             ::fhir::string_pskel& /* district */,
             ::fhir::string_pskel& /* state */,
             ::fhir::string_pskel& /* postalCode */,
             ::fhir::string_pskel& /* country */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    use_parser (::fhir::AddressUse_pskel&);

    void
    type_parser (::fhir::AddressType_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    line_parser (::fhir::string_pskel&);

    void
    city_parser (::fhir::string_pskel&);

    void
    district_parser (::fhir::string_pskel&);

    void
    state_parser (::fhir::string_pskel&);

    void
    postalCode_parser (::fhir::string_pskel&);

    void
    country_parser (::fhir::string_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Address_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Address_pskel* Address_impl_;
    Address_pskel (Address_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::AddressUse_pskel* use_parser_;
    ::fhir::AddressType_pskel* type_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::string_pskel* line_parser_;
    ::fhir::string_pskel* city_parser_;
    ::fhir::string_pskel* district_parser_;
    ::fhir::string_pskel* state_parser_;
    ::fhir::string_pskel* postalCode_parser_;
    ::fhir::string_pskel* country_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Address_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AddressUse_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AddressUse_list ();

    // Constructor.
    //
    AddressUse_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AddressUse_list_pskel* AddressUse_list_impl_;
    AddressUse_list_pskel (AddressUse_list_pskel*, void*);

    protected:
    static const char* const _xsde_AddressUse_list_pskel_enums_[5UL];
  };

  class AddressUse_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AddressUse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AddressUse_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AddressUse_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AddressUse_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AddressUse_pskel* AddressUse_impl_;
    AddressUse_pskel (AddressUse_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AddressUse_list_pskel* value_parser_;
  };

  class AddressType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AddressType_list ();

    // Constructor.
    //
    AddressType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AddressType_list_pskel* AddressType_list_impl_;
    AddressType_list_pskel (AddressType_list_pskel*, void*);

    protected:
    static const char* const _xsde_AddressType_list_pskel_enums_[3UL];
  };

  class AddressType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AddressType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AddressType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AddressType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AddressType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AddressType_pskel* AddressType_impl_;
    AddressType_pskel (AddressType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AddressType_list_pskel* value_parser_;
  };

  class Contributor_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    name ();

    virtual void
    contact ();

    virtual void
    post_Contributor ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContributorType_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::ContactDetail_pskel& /* contact */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::ContributorType_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contributor_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contributor_pskel* Contributor_impl_;
    Contributor_pskel (Contributor_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ContributorType_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contributor_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ContributorType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContributorType_list ();

    // Constructor.
    //
    ContributorType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContributorType_list_pskel* ContributorType_list_impl_;
    ContributorType_list_pskel (ContributorType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ContributorType_list_pskel_enums_[4UL];
  };

  class ContributorType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ContributorType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContributorType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ContributorType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContributorType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContributorType_pskel* ContributorType_impl_;
    ContributorType_pskel (ContributorType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ContributorType_list_pskel* value_parser_;
  };

  class Attachment_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentType ();

    virtual void
    language ();

    virtual void
    data ();

    virtual void
    url ();

    virtual void
    size ();

    virtual void
    hash ();

    virtual void
    title ();

    virtual void
    creation ();

    virtual void
    post_Attachment ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::code_pskel& /* contentType */,
             ::fhir::code_pskel& /* language */,
             ::fhir::base64Binary_pskel& /* data */,
             ::fhir::url_pskel& /* url */,
             ::fhir::unsignedInt_pskel& /* size */,
             ::fhir::base64Binary_pskel& /* hash */,
             ::fhir::string_pskel& /* title */,
             ::fhir::dateTime_pskel& /* creation */);

    // Individual element parsers.
    //
    void
    contentType_parser (::fhir::code_pskel&);

    void
    language_parser (::fhir::code_pskel&);

    void
    data_parser (::fhir::base64Binary_pskel&);

    void
    url_parser (::fhir::url_pskel&);

    void
    size_parser (::fhir::unsignedInt_pskel&);

    void
    hash_parser (::fhir::base64Binary_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    creation_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Attachment_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Attachment_pskel* Attachment_impl_;
    Attachment_pskel (Attachment_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* contentType_parser_;
    ::fhir::code_pskel* language_parser_;
    ::fhir::base64Binary_pskel* data_parser_;
    ::fhir::url_pskel* url_parser_;
    ::fhir::unsignedInt_pskel* size_parser_;
    ::fhir::base64Binary_pskel* hash_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::dateTime_pskel* creation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Attachment_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Quantity_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    value ();

    virtual void
    comparator ();

    virtual void
    unit ();

    virtual void
    system ();

    virtual void
    code ();

    virtual void
    post_Quantity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::decimal_pskel& /* value */,
             ::fhir::QuantityComparator_pskel& /* comparator */,
             ::fhir::string_pskel& /* unit */,
             ::fhir::uri_pskel& /* system */,
             ::fhir::code_pskel& /* code */);

    // Individual element parsers.
    //
    void
    value_parser (::fhir::decimal_pskel&);

    void
    comparator_parser (::fhir::QuantityComparator_pskel&);

    void
    unit_parser (::fhir::string_pskel&);

    void
    system_parser (::fhir::uri_pskel&);

    void
    code_parser (::fhir::code_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Quantity_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Quantity_pskel* Quantity_impl_;
    Quantity_pskel (Quantity_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::decimal_pskel* value_parser_;
    ::fhir::QuantityComparator_pskel* comparator_parser_;
    ::fhir::string_pskel* unit_parser_;
    ::fhir::uri_pskel* system_parser_;
    ::fhir::code_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Quantity_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Count_pskel: public ::fhir::Quantity_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Count ();

    // Constructor.
    //
    Count_pskel (::fhir::Quantity_pskel* tiein);

    // Implementation details.
    //
    protected:
    Count_pskel* Count_impl_;
    Count_pskel (Count_pskel*, void*);
  };

  class DataRequirement_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    profile ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    mustSupport ();

    virtual void
    codeFilter ();

    virtual void
    dateFilter ();

    virtual void
    limit ();

    virtual void
    sort ();

    virtual void
    post_DataRequirement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::code_pskel& /* type */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::string_pskel& /* mustSupport */,
             ::fhir::DataRequirement_CodeFilter_pskel& /* codeFilter */,
             ::fhir::DataRequirement_DateFilter_pskel& /* dateFilter */,
             ::fhir::positiveInt_pskel& /* limit */,
             ::fhir::DataRequirement_Sort_pskel& /* sort */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::code_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    mustSupport_parser (::fhir::string_pskel&);

    void
    codeFilter_parser (::fhir::DataRequirement_CodeFilter_pskel&);

    void
    dateFilter_parser (::fhir::DataRequirement_DateFilter_pskel&);

    void
    limit_parser (::fhir::positiveInt_pskel&);

    void
    sort_parser (::fhir::DataRequirement_Sort_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DataRequirement_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DataRequirement_pskel* DataRequirement_impl_;
    DataRequirement_pskel (DataRequirement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* type_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::string_pskel* mustSupport_parser_;
    ::fhir::DataRequirement_CodeFilter_pskel* codeFilter_parser_;
    ::fhir::DataRequirement_DateFilter_pskel* dateFilter_parser_;
    ::fhir::positiveInt_pskel* limit_parser_;
    ::fhir::DataRequirement_Sort_pskel* sort_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DataRequirement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DataRequirement_CodeFilter_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    searchParam ();

    virtual void
    valueSet ();

    virtual void
    code ();

    virtual void
    post_DataRequirement_CodeFilter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::string_pskel& /* searchParam */,
             ::fhir::canonical_pskel& /* valueSet */,
             ::fhir::Coding_pskel& /* code */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    searchParam_parser (::fhir::string_pskel&);

    void
    valueSet_parser (::fhir::canonical_pskel&);

    void
    code_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DataRequirement_CodeFilter_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DataRequirement_CodeFilter_pskel* DataRequirement_CodeFilter_impl_;
    DataRequirement_CodeFilter_pskel (DataRequirement_CodeFilter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::string_pskel* searchParam_parser_;
    ::fhir::canonical_pskel* valueSet_parser_;
    ::fhir::Coding_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DataRequirement_CodeFilter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DataRequirement_DateFilter_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    searchParam ();

    virtual void
    valueDateTime ();

    virtual void
    valuePeriod ();

    virtual void
    valueDuration ();

    virtual void
    post_DataRequirement_DateFilter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::string_pskel& /* searchParam */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::Duration_pskel& /* valueDuration */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    searchParam_parser (::fhir::string_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    valueDuration_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DataRequirement_DateFilter_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DataRequirement_DateFilter_pskel* DataRequirement_DateFilter_impl_;
    DataRequirement_DateFilter_pskel (DataRequirement_DateFilter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::string_pskel* searchParam_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::Duration_pskel* valueDuration_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DataRequirement_DateFilter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DataRequirement_Sort_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    direction ();

    virtual void
    post_DataRequirement_Sort ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::SortDirection_pskel& /* direction */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    direction_parser (::fhir::SortDirection_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DataRequirement_Sort_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DataRequirement_Sort_pskel* DataRequirement_Sort_impl_;
    DataRequirement_Sort_pskel (DataRequirement_Sort_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::SortDirection_pskel* direction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DataRequirement_Sort_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SortDirection_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SortDirection_list ();

    // Constructor.
    //
    SortDirection_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SortDirection_list_pskel* SortDirection_list_impl_;
    SortDirection_list_pskel (SortDirection_list_pskel*, void*);

    protected:
    static const char* const _xsde_SortDirection_list_pskel_enums_[2UL];
  };

  class SortDirection_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SortDirection ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SortDirection_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SortDirection_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SortDirection_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SortDirection_pskel* SortDirection_impl_;
    SortDirection_pskel (SortDirection_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SortDirection_list_pskel* value_parser_;
  };

  class Dosage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    text ();

    virtual void
    additionalInstruction ();

    virtual void
    patientInstruction ();

    virtual void
    timing ();

    virtual void
    asNeededBoolean ();

    virtual void
    asNeededCodeableConcept ();

    virtual void
    site ();

    virtual void
    route ();

    virtual void
    method ();

    virtual void
    doseAndRate ();

    virtual void
    maxDosePerPeriod ();

    virtual void
    maxDosePerAdministration ();

    virtual void
    maxDosePerLifetime ();

    virtual void
    post_Dosage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* sequence */,
             ::fhir::string_pskel& /* text */,
             ::fhir::CodeableConcept_pskel& /* additionalInstruction */,
             ::fhir::string_pskel& /* patientInstruction */,
             ::fhir::Timing_pskel& /* timing */,
             ::fhir::boolean_pskel& /* asNeededBoolean */,
             ::fhir::CodeableConcept_pskel& /* asNeededCodeableConcept */,
             ::fhir::CodeableConcept_pskel& /* site */,
             ::fhir::CodeableConcept_pskel& /* route */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::Dosage_DoseAndRate_pskel& /* doseAndRate */,
             ::fhir::Ratio_pskel& /* maxDosePerPeriod */,
             ::fhir::Quantity_pskel& /* maxDosePerAdministration */,
             ::fhir::Quantity_pskel& /* maxDosePerLifetime */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::integer_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    additionalInstruction_parser (::fhir::CodeableConcept_pskel&);

    void
    patientInstruction_parser (::fhir::string_pskel&);

    void
    timing_parser (::fhir::Timing_pskel&);

    void
    asNeededBoolean_parser (::fhir::boolean_pskel&);

    void
    asNeededCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    site_parser (::fhir::CodeableConcept_pskel&);

    void
    route_parser (::fhir::CodeableConcept_pskel&);

    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    doseAndRate_parser (::fhir::Dosage_DoseAndRate_pskel&);

    void
    maxDosePerPeriod_parser (::fhir::Ratio_pskel&);

    void
    maxDosePerAdministration_parser (::fhir::Quantity_pskel&);

    void
    maxDosePerLifetime_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Dosage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Dosage_pskel* Dosage_impl_;
    Dosage_pskel (Dosage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* sequence_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::CodeableConcept_pskel* additionalInstruction_parser_;
    ::fhir::string_pskel* patientInstruction_parser_;
    ::fhir::Timing_pskel* timing_parser_;
    ::fhir::boolean_pskel* asNeededBoolean_parser_;
    ::fhir::CodeableConcept_pskel* asNeededCodeableConcept_parser_;
    ::fhir::CodeableConcept_pskel* site_parser_;
    ::fhir::CodeableConcept_pskel* route_parser_;
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::Dosage_DoseAndRate_pskel* doseAndRate_parser_;
    ::fhir::Ratio_pskel* maxDosePerPeriod_parser_;
    ::fhir::Quantity_pskel* maxDosePerAdministration_parser_;
    ::fhir::Quantity_pskel* maxDosePerLifetime_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Dosage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Dosage_DoseAndRate_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    doseRange ();

    virtual void
    doseQuantity ();

    virtual void
    rateRatio ();

    virtual void
    rateRange ();

    virtual void
    rateQuantity ();

    virtual void
    post_Dosage_DoseAndRate ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Range_pskel& /* doseRange */,
             ::fhir::Quantity_pskel& /* doseQuantity */,
             ::fhir::Ratio_pskel& /* rateRatio */,
             ::fhir::Range_pskel& /* rateRange */,
             ::fhir::Quantity_pskel& /* rateQuantity */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    doseRange_parser (::fhir::Range_pskel&);

    void
    doseQuantity_parser (::fhir::Quantity_pskel&);

    void
    rateRatio_parser (::fhir::Ratio_pskel&);

    void
    rateRange_parser (::fhir::Range_pskel&);

    void
    rateQuantity_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Dosage_DoseAndRate_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Dosage_DoseAndRate_pskel* Dosage_DoseAndRate_impl_;
    Dosage_DoseAndRate_pskel (Dosage_DoseAndRate_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Range_pskel* doseRange_parser_;
    ::fhir::Quantity_pskel* doseQuantity_parser_;
    ::fhir::Ratio_pskel* rateRatio_parser_;
    ::fhir::Range_pskel* rateRange_parser_;
    ::fhir::Quantity_pskel* rateQuantity_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Dosage_DoseAndRate_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Money_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    value ();

    virtual void
    currency ();

    virtual void
    post_Money ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::decimal_pskel& /* value */,
             ::fhir::code_pskel& /* currency */);

    // Individual element parsers.
    //
    void
    value_parser (::fhir::decimal_pskel&);

    void
    currency_parser (::fhir::code_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Money_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Money_pskel* Money_impl_;
    Money_pskel (Money_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::decimal_pskel* value_parser_;
    ::fhir::code_pskel* currency_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Money_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class HumanName_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    use ();

    virtual void
    text ();

    virtual void
    family ();

    virtual void
    given ();

    virtual void
    prefix ();

    virtual void
    suffix ();

    virtual void
    period ();

    virtual void
    post_HumanName ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NameUse_pskel& /* use */,
             ::fhir::string_pskel& /* text */,
             ::fhir::string_pskel& /* family */,
             ::fhir::string_pskel& /* given */,
             ::fhir::string_pskel& /* prefix */,
             ::fhir::string_pskel& /* suffix */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    use_parser (::fhir::NameUse_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    family_parser (::fhir::string_pskel&);

    void
    given_parser (::fhir::string_pskel&);

    void
    prefix_parser (::fhir::string_pskel&);

    void
    suffix_parser (::fhir::string_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    HumanName_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    HumanName_pskel* HumanName_impl_;
    HumanName_pskel (HumanName_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::NameUse_pskel* use_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::string_pskel* family_parser_;
    ::fhir::string_pskel* given_parser_;
    ::fhir::string_pskel* prefix_parser_;
    ::fhir::string_pskel* suffix_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::HumanName_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NameUse_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_NameUse_list ();

    // Constructor.
    //
    NameUse_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    NameUse_list_pskel* NameUse_list_impl_;
    NameUse_list_pskel (NameUse_list_pskel*, void*);

    protected:
    static const char* const _xsde_NameUse_list_pskel_enums_[7UL];
  };

  class NameUse_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_NameUse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NameUse_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::NameUse_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NameUse_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    NameUse_pskel* NameUse_impl_;
    NameUse_pskel (NameUse_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::NameUse_list_pskel* value_parser_;
  };

  class ContactPoint_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    system ();

    virtual void
    value ();

    virtual void
    use ();

    virtual void
    rank ();

    virtual void
    period ();

    virtual void
    post_ContactPoint ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContactPointSystem_pskel& /* system */,
             ::fhir::string_pskel& /* value */,
             ::fhir::ContactPointUse_pskel& /* use */,
             ::fhir::positiveInt_pskel& /* rank */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    system_parser (::fhir::ContactPointSystem_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    void
    use_parser (::fhir::ContactPointUse_pskel&);

    void
    rank_parser (::fhir::positiveInt_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContactPoint_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactPoint_pskel* ContactPoint_impl_;
    ContactPoint_pskel (ContactPoint_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ContactPointSystem_pskel* system_parser_;
    ::fhir::string_pskel* value_parser_;
    ::fhir::ContactPointUse_pskel* use_parser_;
    ::fhir::positiveInt_pskel* rank_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ContactPoint_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ContactPointSystem_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContactPointSystem_list ();

    // Constructor.
    //
    ContactPointSystem_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactPointSystem_list_pskel* ContactPointSystem_list_impl_;
    ContactPointSystem_list_pskel (ContactPointSystem_list_pskel*, void*);

    protected:
    static const char* const _xsde_ContactPointSystem_list_pskel_enums_[7UL];
  };

  class ContactPointSystem_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ContactPointSystem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContactPointSystem_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ContactPointSystem_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContactPointSystem_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactPointSystem_pskel* ContactPointSystem_impl_;
    ContactPointSystem_pskel (ContactPointSystem_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ContactPointSystem_list_pskel* value_parser_;
  };

  class ContactPointUse_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContactPointUse_list ();

    // Constructor.
    //
    ContactPointUse_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactPointUse_list_pskel* ContactPointUse_list_impl_;
    ContactPointUse_list_pskel (ContactPointUse_list_pskel*, void*);

    protected:
    static const char* const _xsde_ContactPointUse_list_pskel_enums_[5UL];
  };

  class ContactPointUse_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ContactPointUse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContactPointUse_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ContactPointUse_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContactPointUse_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactPointUse_pskel* ContactPointUse_impl_;
    ContactPointUse_pskel (ContactPointUse_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ContactPointUse_list_pskel* value_parser_;
  };

  class MarketingStatus_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    country ();

    virtual void
    jurisdiction ();

    virtual void
    status ();

    virtual void
    dateRange ();

    virtual void
    restoreDate ();

    virtual void
    post_MarketingStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* country */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::Period_pskel& /* dateRange */,
             ::fhir::dateTime_pskel& /* restoreDate */);

    // Individual element parsers.
    //
    void
    country_parser (::fhir::CodeableConcept_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    dateRange_parser (::fhir::Period_pskel&);

    void
    restoreDate_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MarketingStatus_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MarketingStatus_pskel* MarketingStatus_impl_;
    MarketingStatus_pskel (MarketingStatus_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* country_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::Period_pskel* dateRange_parser_;
    ::fhir::dateTime_pskel* restoreDate_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MarketingStatus_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Identifier_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    use ();

    virtual void
    type ();

    virtual void
    system ();

    virtual void
    value ();

    virtual void
    period ();

    virtual void
    assigner ();

    virtual void
    post_Identifier ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::IdentifierUse_pskel& /* use */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::uri_pskel& /* system */,
             ::fhir::string_pskel& /* value */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* assigner */);

    // Individual element parsers.
    //
    void
    use_parser (::fhir::IdentifierUse_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    system_parser (::fhir::uri_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    assigner_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Identifier_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Identifier_pskel* Identifier_impl_;
    Identifier_pskel (Identifier_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::IdentifierUse_pskel* use_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::uri_pskel* system_parser_;
    ::fhir::string_pskel* value_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* assigner_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Identifier_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class IdentifierUse_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_IdentifierUse_list ();

    // Constructor.
    //
    IdentifierUse_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    IdentifierUse_list_pskel* IdentifierUse_list_impl_;
    IdentifierUse_list_pskel (IdentifierUse_list_pskel*, void*);

    protected:
    static const char* const _xsde_IdentifierUse_list_pskel_enums_[5UL];
  };

  class IdentifierUse_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_IdentifierUse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::IdentifierUse_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::IdentifierUse_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    IdentifierUse_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    IdentifierUse_pskel* IdentifierUse_impl_;
    IdentifierUse_pskel (IdentifierUse_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::IdentifierUse_list_pskel* value_parser_;
  };

  class SubstanceAmount_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    amountQuantity ();

    virtual void
    amountRange ();

    virtual void
    amountString ();

    virtual void
    amountType ();

    virtual void
    amountText ();

    virtual void
    referenceRange ();

    virtual void
    post_SubstanceAmount ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* amountQuantity */,
             ::fhir::Range_pskel& /* amountRange */,
             ::fhir::string_pskel& /* amountString */,
             ::fhir::CodeableConcept_pskel& /* amountType */,
             ::fhir::string_pskel& /* amountText */,
             ::fhir::SubstanceAmount_ReferenceRange_pskel& /* referenceRange */);

    // Individual element parsers.
    //
    void
    amountQuantity_parser (::fhir::Quantity_pskel&);

    void
    amountRange_parser (::fhir::Range_pskel&);

    void
    amountString_parser (::fhir::string_pskel&);

    void
    amountType_parser (::fhir::CodeableConcept_pskel&);

    void
    amountText_parser (::fhir::string_pskel&);

    void
    referenceRange_parser (::fhir::SubstanceAmount_ReferenceRange_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceAmount_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceAmount_pskel* SubstanceAmount_impl_;
    SubstanceAmount_pskel (SubstanceAmount_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* amountQuantity_parser_;
    ::fhir::Range_pskel* amountRange_parser_;
    ::fhir::string_pskel* amountString_parser_;
    ::fhir::CodeableConcept_pskel* amountType_parser_;
    ::fhir::string_pskel* amountText_parser_;
    ::fhir::SubstanceAmount_ReferenceRange_pskel* referenceRange_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceAmount_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceAmount_ReferenceRange_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    lowLimit ();

    virtual void
    highLimit ();

    virtual void
    post_SubstanceAmount_ReferenceRange ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* lowLimit */,
             ::fhir::Quantity_pskel& /* highLimit */);

    // Individual element parsers.
    //
    void
    lowLimit_parser (::fhir::Quantity_pskel&);

    void
    highLimit_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceAmount_ReferenceRange_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceAmount_ReferenceRange_pskel* SubstanceAmount_ReferenceRange_impl_;
    SubstanceAmount_ReferenceRange_pskel (SubstanceAmount_ReferenceRange_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* lowLimit_parser_;
    ::fhir::Quantity_pskel* highLimit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceAmount_ReferenceRange_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Coding_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    system ();

    virtual void
    version ();

    virtual void
    code ();

    virtual void
    display ();

    virtual void
    userSelected ();

    virtual void
    post_Coding ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::uri_pskel& /* system */,
             ::fhir::string_pskel& /* version */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* display */,
             ::fhir::boolean_pskel& /* userSelected */);

    // Individual element parsers.
    //
    void
    system_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    code_parser (::fhir::code_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    void
    userSelected_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Coding_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Coding_pskel* Coding_impl_;
    Coding_pskel (Coding_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* system_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* display_parser_;
    ::fhir::boolean_pskel* userSelected_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Coding_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SampledData_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    origin ();

    virtual void
    period ();

    virtual void
    factor ();

    virtual void
    lowerLimit ();

    virtual void
    upperLimit ();

    virtual void
    dimensions ();

    virtual void
    data ();

    virtual void
    post_SampledData ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Quantity_pskel& /* origin */,
             ::fhir::decimal_pskel& /* period */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::decimal_pskel& /* lowerLimit */,
             ::fhir::decimal_pskel& /* upperLimit */,
             ::fhir::positiveInt_pskel& /* dimensions */,
             ::fhir::SampledDataDataType_pskel& /* data */);

    // Individual element parsers.
    //
    void
    origin_parser (::fhir::Quantity_pskel&);

    void
    period_parser (::fhir::decimal_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    lowerLimit_parser (::fhir::decimal_pskel&);

    void
    upperLimit_parser (::fhir::decimal_pskel&);

    void
    dimensions_parser (::fhir::positiveInt_pskel&);

    void
    data_parser (::fhir::SampledDataDataType_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SampledData_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SampledData_pskel* SampledData_impl_;
    SampledData_pskel (SampledData_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* origin_parser_;
    ::fhir::decimal_pskel* period_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::decimal_pskel* lowerLimit_parser_;
    ::fhir::decimal_pskel* upperLimit_parser_;
    ::fhir::positiveInt_pskel* dimensions_parser_;
    ::fhir::SampledDataDataType_pskel* data_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SampledData_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SampledDataDataType_primitive_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SampledDataDataType_primitive ();

    // Constructor.
    //
    SampledDataDataType_primitive_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    SampledDataDataType_primitive_pskel* SampledDataDataType_primitive_impl_;
    SampledDataDataType_primitive_pskel (SampledDataDataType_primitive_pskel*, void*);
  };

  class SampledDataDataType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SampledDataDataType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SampledDataDataType_primitive_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SampledDataDataType_primitive_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SampledDataDataType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SampledDataDataType_pskel* SampledDataDataType_impl_;
    SampledDataDataType_pskel (SampledDataDataType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SampledDataDataType_primitive_pskel* value_parser_;
  };

  class Population_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    ageRange ();

    virtual void
    ageCodeableConcept ();

    virtual void
    gender ();

    virtual void
    race ();

    virtual void
    physiologicalCondition ();

    virtual void
    post_Population ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Range_pskel& /* ageRange */,
             ::fhir::CodeableConcept_pskel& /* ageCodeableConcept */,
             ::fhir::CodeableConcept_pskel& /* gender */,
             ::fhir::CodeableConcept_pskel& /* race */,
             ::fhir::CodeableConcept_pskel& /* physiologicalCondition */);

    // Individual element parsers.
    //
    void
    ageRange_parser (::fhir::Range_pskel&);

    void
    ageCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    gender_parser (::fhir::CodeableConcept_pskel&);

    void
    race_parser (::fhir::CodeableConcept_pskel&);

    void
    physiologicalCondition_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Population_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Population_pskel* Population_impl_;
    Population_pskel (Population_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Range_pskel* ageRange_parser_;
    ::fhir::CodeableConcept_pskel* ageCodeableConcept_parser_;
    ::fhir::CodeableConcept_pskel* gender_parser_;
    ::fhir::CodeableConcept_pskel* race_parser_;
    ::fhir::CodeableConcept_pskel* physiologicalCondition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Population_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Ratio_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    numerator ();

    virtual void
    denominator ();

    virtual void
    post_Ratio ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Quantity_pskel& /* numerator */,
             ::fhir::Quantity_pskel& /* denominator */);

    // Individual element parsers.
    //
    void
    numerator_parser (::fhir::Quantity_pskel&);

    void
    denominator_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Ratio_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Ratio_pskel* Ratio_impl_;
    Ratio_pskel (Ratio_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* numerator_parser_;
    ::fhir::Quantity_pskel* denominator_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Ratio_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Distance_pskel: public ::fhir::Quantity_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Distance ();

    // Constructor.
    //
    Distance_pskel (::fhir::Quantity_pskel* tiein);

    // Implementation details.
    //
    protected:
    Distance_pskel* Distance_impl_;
    Distance_pskel (Distance_pskel*, void*);
  };

  class Age_pskel: public ::fhir::Quantity_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Age ();

    // Constructor.
    //
    Age_pskel (::fhir::Quantity_pskel* tiein);

    // Implementation details.
    //
    protected:
    Age_pskel* Age_impl_;
    Age_pskel (Age_pskel*, void*);
  };

  class Reference_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    type ();

    virtual void
    identifier ();

    virtual void
    display ();

    virtual void
    post_Reference ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* reference */,
             ::fhir::uri_pskel& /* type */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* display */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Reference_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Reference_pskel* Reference_impl_;
    Reference_pskel (Reference_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* reference_parser_;
    ::fhir::uri_pskel* type_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* display_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Reference_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TriggerDefinition_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    name ();

    virtual void
    timingTiming ();

    virtual void
    timingReference ();

    virtual void
    timingDate ();

    virtual void
    timingDateTime ();

    virtual void
    data ();

    virtual void
    condition ();

    virtual void
    post_TriggerDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TriggerType_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::Timing_pskel& /* timingTiming */,
             ::fhir::Reference_pskel& /* timingReference */,
             ::fhir::date_pskel& /* timingDate */,
             ::fhir::dateTime_pskel& /* timingDateTime */,
             ::fhir::DataRequirement_pskel& /* data */,
             ::fhir::Expression_pskel& /* condition */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::TriggerType_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    timingTiming_parser (::fhir::Timing_pskel&);

    void
    timingReference_parser (::fhir::Reference_pskel&);

    void
    timingDate_parser (::fhir::date_pskel&);

    void
    timingDateTime_parser (::fhir::dateTime_pskel&);

    void
    data_parser (::fhir::DataRequirement_pskel&);

    void
    condition_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TriggerDefinition_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TriggerDefinition_pskel* TriggerDefinition_impl_;
    TriggerDefinition_pskel (TriggerDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TriggerType_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::Timing_pskel* timingTiming_parser_;
    ::fhir::Reference_pskel* timingReference_parser_;
    ::fhir::date_pskel* timingDate_parser_;
    ::fhir::dateTime_pskel* timingDateTime_parser_;
    ::fhir::DataRequirement_pskel* data_parser_;
    ::fhir::Expression_pskel* condition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TriggerDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TriggerType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TriggerType_list ();

    // Constructor.
    //
    TriggerType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TriggerType_list_pskel* TriggerType_list_impl_;
    TriggerType_list_pskel (TriggerType_list_pskel*, void*);

    protected:
    static const char* const _xsde_TriggerType_list_pskel_enums_[8UL];
  };

  class TriggerType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TriggerType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TriggerType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TriggerType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TriggerType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TriggerType_pskel* TriggerType_impl_;
    TriggerType_pskel (TriggerType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TriggerType_list_pskel* value_parser_;
  };

  class QuantityComparator_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_QuantityComparator_list ();

    // Constructor.
    //
    QuantityComparator_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuantityComparator_list_pskel* QuantityComparator_list_impl_;
    QuantityComparator_list_pskel (QuantityComparator_list_pskel*, void*);

    protected:
    static const char* const _xsde_QuantityComparator_list_pskel_enums_[4UL];
  };

  class QuantityComparator_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_QuantityComparator ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::QuantityComparator_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::QuantityComparator_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    QuantityComparator_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuantityComparator_pskel* QuantityComparator_impl_;
    QuantityComparator_pskel (QuantityComparator_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::QuantityComparator_list_pskel* value_parser_;
  };

  class Period_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    start ();

    virtual void
    end ();

    virtual void
    post_Period ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::dateTime_pskel& /* start */,
             ::fhir::dateTime_pskel& /* end */);

    // Individual element parsers.
    //
    void
    start_parser (::fhir::dateTime_pskel&);

    void
    end_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Period_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Period_pskel* Period_impl_;
    Period_pskel (Period_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::dateTime_pskel* start_parser_;
    ::fhir::dateTime_pskel* end_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Period_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Duration_pskel: public ::fhir::Quantity_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Duration ();

    // Constructor.
    //
    Duration_pskel (::fhir::Quantity_pskel* tiein);

    // Implementation details.
    //
    protected:
    Duration_pskel* Duration_impl_;
    Duration_pskel (Duration_pskel*, void*);
  };

  class Range_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    low ();

    virtual void
    high ();

    virtual void
    post_Range ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Quantity_pskel& /* low */,
             ::fhir::Quantity_pskel& /* high */);

    // Individual element parsers.
    //
    void
    low_parser (::fhir::Quantity_pskel&);

    void
    high_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Range_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Range_pskel* Range_impl_;
    Range_pskel (Range_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* low_parser_;
    ::fhir::Quantity_pskel* high_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Range_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RelatedArtifact_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    label ();

    virtual void
    display ();

    virtual void
    citation ();

    virtual void
    url ();

    virtual void
    document ();

    virtual void
    resource ();

    virtual void
    post_RelatedArtifact ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RelatedArtifactType_pskel& /* type */,
             ::fhir::string_pskel& /* label */,
             ::fhir::string_pskel& /* display */,
             ::fhir::markdown_pskel& /* citation */,
             ::fhir::url_pskel& /* url */,
             ::fhir::Attachment_pskel& /* document */,
             ::fhir::canonical_pskel& /* resource */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::RelatedArtifactType_pskel&);

    void
    label_parser (::fhir::string_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    void
    citation_parser (::fhir::markdown_pskel&);

    void
    url_parser (::fhir::url_pskel&);

    void
    document_parser (::fhir::Attachment_pskel&);

    void
    resource_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RelatedArtifact_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RelatedArtifact_pskel* RelatedArtifact_impl_;
    RelatedArtifact_pskel (RelatedArtifact_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::RelatedArtifactType_pskel* type_parser_;
    ::fhir::string_pskel* label_parser_;
    ::fhir::string_pskel* display_parser_;
    ::fhir::markdown_pskel* citation_parser_;
    ::fhir::url_pskel* url_parser_;
    ::fhir::Attachment_pskel* document_parser_;
    ::fhir::canonical_pskel* resource_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RelatedArtifact_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RelatedArtifactType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RelatedArtifactType_list ();

    // Constructor.
    //
    RelatedArtifactType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RelatedArtifactType_list_pskel* RelatedArtifactType_list_impl_;
    RelatedArtifactType_list_pskel (RelatedArtifactType_list_pskel*, void*);

    protected:
    static const char* const _xsde_RelatedArtifactType_list_pskel_enums_[8UL];
  };

  class RelatedArtifactType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RelatedArtifactType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RelatedArtifactType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RelatedArtifactType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RelatedArtifactType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RelatedArtifactType_pskel* RelatedArtifactType_impl_;
    RelatedArtifactType_pskel (RelatedArtifactType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RelatedArtifactType_list_pskel* value_parser_;
  };

  class Annotation_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    authorReference ();

    virtual void
    authorString ();

    virtual void
    time ();

    virtual void
    text ();

    virtual void
    post_Annotation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Reference_pskel& /* authorReference */,
             ::fhir::string_pskel& /* authorString */,
             ::fhir::dateTime_pskel& /* time */,
             ::fhir::markdown_pskel& /* text */);

    // Individual element parsers.
    //
    void
    authorReference_parser (::fhir::Reference_pskel&);

    void
    authorString_parser (::fhir::string_pskel&);

    void
    time_parser (::fhir::dateTime_pskel&);

    void
    text_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Annotation_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Annotation_pskel* Annotation_impl_;
    Annotation_pskel (Annotation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* authorReference_parser_;
    ::fhir::string_pskel* authorString_parser_;
    ::fhir::dateTime_pskel* time_parser_;
    ::fhir::markdown_pskel* text_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Annotation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ProductShelfLife_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    period ();

    virtual void
    specialPrecautionsForStorage ();

    virtual void
    post_ProductShelfLife ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* period */,
             ::fhir::CodeableConcept_pskel& /* specialPrecautionsForStorage */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Quantity_pskel&);

    void
    specialPrecautionsForStorage_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ProductShelfLife_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ProductShelfLife_pskel* ProductShelfLife_impl_;
    ProductShelfLife_pskel (ProductShelfLife_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* period_parser_;
    ::fhir::CodeableConcept_pskel* specialPrecautionsForStorage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ProductShelfLife_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ContactDetail_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    telecom ();

    virtual void
    post_ContactDetail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::ContactPoint_pskel& /* telecom */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContactDetail_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContactDetail_pskel* ContactDetail_impl_;
    ContactDetail_pskel (ContactDetail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ContactDetail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class UsageContext_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueReference ();

    virtual void
    post_UsageContext ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Coding_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Reference_pskel& /* valueReference */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::Coding_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    UsageContext_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    UsageContext_pskel* UsageContext_impl_;
    UsageContext_pskel (UsageContext_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::UsageContext_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Expression_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    name ();

    virtual void
    language ();

    virtual void
    expression ();

    virtual void
    reference ();

    virtual void
    post_Expression ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::id_pskel& /* name */,
             ::fhir::ExpressionLanguage_pskel& /* language */,
             ::fhir::string_pskel& /* expression */,
             ::fhir::uri_pskel& /* reference */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::id_pskel&);

    void
    language_parser (::fhir::ExpressionLanguage_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    void
    reference_parser (::fhir::uri_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Expression_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Expression_pskel* Expression_impl_;
    Expression_pskel (Expression_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::id_pskel* name_parser_;
    ::fhir::ExpressionLanguage_pskel* language_parser_;
    ::fhir::string_pskel* expression_parser_;
    ::fhir::uri_pskel* reference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Expression_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExpressionLanguage_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ExpressionLanguage_list ();

    // Constructor.
    //
    ExpressionLanguage_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExpressionLanguage_list_pskel* ExpressionLanguage_list_impl_;
    ExpressionLanguage_list_pskel (ExpressionLanguage_list_pskel*, void*);

    protected:
    static const char* const _xsde_ExpressionLanguage_list_pskel_enums_[3UL];
  };

  class ExpressionLanguage_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ExpressionLanguage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ExpressionLanguage_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ExpressionLanguage_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExpressionLanguage_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExpressionLanguage_pskel* ExpressionLanguage_impl_;
    ExpressionLanguage_pskel (ExpressionLanguage_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ExpressionLanguage_list_pskel* value_parser_;
  };

  class Signature_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    when ();

    virtual void
    who ();

    virtual void
    onBehalfOf ();

    virtual void
    targetFormat ();

    virtual void
    sigFormat ();

    virtual void
    data ();

    virtual void
    post_Signature ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Coding_pskel& /* type */,
             ::fhir::instant_pskel& /* when */,
             ::fhir::Reference_pskel& /* who */,
             ::fhir::Reference_pskel& /* onBehalfOf */,
             ::fhir::code_pskel& /* targetFormat */,
             ::fhir::code_pskel& /* sigFormat */,
             ::fhir::base64Binary_pskel& /* data */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::Coding_pskel&);

    void
    when_parser (::fhir::instant_pskel&);

    void
    who_parser (::fhir::Reference_pskel&);

    void
    onBehalfOf_parser (::fhir::Reference_pskel&);

    void
    targetFormat_parser (::fhir::code_pskel&);

    void
    sigFormat_parser (::fhir::code_pskel&);

    void
    data_parser (::fhir::base64Binary_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Signature_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Signature_pskel* Signature_impl_;
    Signature_pskel (Signature_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* type_parser_;
    ::fhir::instant_pskel* when_parser_;
    ::fhir::Reference_pskel* who_parser_;
    ::fhir::Reference_pskel* onBehalfOf_parser_;
    ::fhir::code_pskel* targetFormat_parser_;
    ::fhir::code_pskel* sigFormat_parser_;
    ::fhir::base64Binary_pskel* data_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Signature_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Timing_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    event ();

    virtual void
    repeat ();

    virtual void
    code ();

    virtual void
    post_Timing ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::dateTime_pskel& /* event */,
             ::fhir::Timing_Repeat_pskel& /* repeat */,
             ::fhir::CodeableConcept_pskel& /* code */);

    // Individual element parsers.
    //
    void
    event_parser (::fhir::dateTime_pskel&);

    void
    repeat_parser (::fhir::Timing_Repeat_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Timing_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Timing_pskel* Timing_impl_;
    Timing_pskel (Timing_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::dateTime_pskel* event_parser_;
    ::fhir::Timing_Repeat_pskel* repeat_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Timing_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Timing_Repeat_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    boundsDuration ();

    virtual void
    boundsRange ();

    virtual void
    boundsPeriod ();

    virtual void
    count ();

    virtual void
    countMax ();

    virtual void
    duration ();

    virtual void
    durationMax ();

    virtual void
    durationUnit ();

    virtual void
    frequency ();

    virtual void
    frequencyMax ();

    virtual void
    period ();

    virtual void
    periodMax ();

    virtual void
    periodUnit ();

    virtual void
    dayOfWeek ();

    virtual void
    timeOfDay ();

    virtual void
    when ();

    virtual void
    offset ();

    virtual void
    post_Timing_Repeat ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Duration_pskel& /* boundsDuration */,
             ::fhir::Range_pskel& /* boundsRange */,
             ::fhir::Period_pskel& /* boundsPeriod */,
             ::fhir::positiveInt_pskel& /* count */,
             ::fhir::positiveInt_pskel& /* countMax */,
             ::fhir::decimal_pskel& /* duration */,
             ::fhir::decimal_pskel& /* durationMax */,
             ::fhir::UnitsOfTime_pskel& /* durationUnit */,
             ::fhir::positiveInt_pskel& /* frequency */,
             ::fhir::positiveInt_pskel& /* frequencyMax */,
             ::fhir::decimal_pskel& /* period */,
             ::fhir::decimal_pskel& /* periodMax */,
             ::fhir::UnitsOfTime_pskel& /* periodUnit */,
             ::fhir::code_pskel& /* dayOfWeek */,
             ::fhir::time_pskel& /* timeOfDay */,
             ::fhir::EventTiming_pskel& /* when */,
             ::fhir::unsignedInt_pskel& /* offset */);

    // Individual element parsers.
    //
    void
    boundsDuration_parser (::fhir::Duration_pskel&);

    void
    boundsRange_parser (::fhir::Range_pskel&);

    void
    boundsPeriod_parser (::fhir::Period_pskel&);

    void
    count_parser (::fhir::positiveInt_pskel&);

    void
    countMax_parser (::fhir::positiveInt_pskel&);

    void
    duration_parser (::fhir::decimal_pskel&);

    void
    durationMax_parser (::fhir::decimal_pskel&);

    void
    durationUnit_parser (::fhir::UnitsOfTime_pskel&);

    void
    frequency_parser (::fhir::positiveInt_pskel&);

    void
    frequencyMax_parser (::fhir::positiveInt_pskel&);

    void
    period_parser (::fhir::decimal_pskel&);

    void
    periodMax_parser (::fhir::decimal_pskel&);

    void
    periodUnit_parser (::fhir::UnitsOfTime_pskel&);

    void
    dayOfWeek_parser (::fhir::code_pskel&);

    void
    timeOfDay_parser (::fhir::time_pskel&);

    void
    when_parser (::fhir::EventTiming_pskel&);

    void
    offset_parser (::fhir::unsignedInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Timing_Repeat_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Timing_Repeat_pskel* Timing_Repeat_impl_;
    Timing_Repeat_pskel (Timing_Repeat_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Duration_pskel* boundsDuration_parser_;
    ::fhir::Range_pskel* boundsRange_parser_;
    ::fhir::Period_pskel* boundsPeriod_parser_;
    ::fhir::positiveInt_pskel* count_parser_;
    ::fhir::positiveInt_pskel* countMax_parser_;
    ::fhir::decimal_pskel* duration_parser_;
    ::fhir::decimal_pskel* durationMax_parser_;
    ::fhir::UnitsOfTime_pskel* durationUnit_parser_;
    ::fhir::positiveInt_pskel* frequency_parser_;
    ::fhir::positiveInt_pskel* frequencyMax_parser_;
    ::fhir::decimal_pskel* period_parser_;
    ::fhir::decimal_pskel* periodMax_parser_;
    ::fhir::UnitsOfTime_pskel* periodUnit_parser_;
    ::fhir::code_pskel* dayOfWeek_parser_;
    ::fhir::time_pskel* timeOfDay_parser_;
    ::fhir::EventTiming_pskel* when_parser_;
    ::fhir::unsignedInt_pskel* offset_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Timing_Repeat_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class UnitsOfTime_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_UnitsOfTime_list ();

    // Constructor.
    //
    UnitsOfTime_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    UnitsOfTime_list_pskel* UnitsOfTime_list_impl_;
    UnitsOfTime_list_pskel (UnitsOfTime_list_pskel*, void*);

    protected:
    static const char* const _xsde_UnitsOfTime_list_pskel_enums_[7UL];
  };

  class UnitsOfTime_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_UnitsOfTime ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::UnitsOfTime_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::UnitsOfTime_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    UnitsOfTime_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    UnitsOfTime_pskel* UnitsOfTime_impl_;
    UnitsOfTime_pskel (UnitsOfTime_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::UnitsOfTime_list_pskel* value_parser_;
  };

  class EventTiming_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EventTiming_list ();

    // Constructor.
    //
    EventTiming_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventTiming_list_pskel* EventTiming_list_impl_;
    EventTiming_list_pskel (EventTiming_list_pskel*, void*);

    protected:
    static const char* const _xsde_EventTiming_list_pskel_enums_[26UL];
  };

  class EventTiming_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EventTiming ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EventTiming_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EventTiming_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EventTiming_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventTiming_pskel* EventTiming_impl_;
    EventTiming_pskel (EventTiming_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EventTiming_list_pskel* value_parser_;
  };

  class ProdCharacteristic_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    height ();

    virtual void
    width ();

    virtual void
    depth ();

    virtual void
    weight ();

    virtual void
    nominalVolume ();

    virtual void
    externalDiameter ();

    virtual void
    shape ();

    virtual void
    color ();

    virtual void
    imprint ();

    virtual void
    image ();

    virtual void
    scoring ();

    virtual void
    post_ProdCharacteristic ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* height */,
             ::fhir::Quantity_pskel& /* width */,
             ::fhir::Quantity_pskel& /* depth */,
             ::fhir::Quantity_pskel& /* weight */,
             ::fhir::Quantity_pskel& /* nominalVolume */,
             ::fhir::Quantity_pskel& /* externalDiameter */,
             ::fhir::string_pskel& /* shape */,
             ::fhir::string_pskel& /* color */,
             ::fhir::string_pskel& /* imprint */,
             ::fhir::Attachment_pskel& /* image */,
             ::fhir::CodeableConcept_pskel& /* scoring */);

    // Individual element parsers.
    //
    void
    height_parser (::fhir::Quantity_pskel&);

    void
    width_parser (::fhir::Quantity_pskel&);

    void
    depth_parser (::fhir::Quantity_pskel&);

    void
    weight_parser (::fhir::Quantity_pskel&);

    void
    nominalVolume_parser (::fhir::Quantity_pskel&);

    void
    externalDiameter_parser (::fhir::Quantity_pskel&);

    void
    shape_parser (::fhir::string_pskel&);

    void
    color_parser (::fhir::string_pskel&);

    void
    imprint_parser (::fhir::string_pskel&);

    void
    image_parser (::fhir::Attachment_pskel&);

    void
    scoring_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ProdCharacteristic_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ProdCharacteristic_pskel* ProdCharacteristic_impl_;
    ProdCharacteristic_pskel (ProdCharacteristic_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* height_parser_;
    ::fhir::Quantity_pskel* width_parser_;
    ::fhir::Quantity_pskel* depth_parser_;
    ::fhir::Quantity_pskel* weight_parser_;
    ::fhir::Quantity_pskel* nominalVolume_parser_;
    ::fhir::Quantity_pskel* externalDiameter_parser_;
    ::fhir::string_pskel* shape_parser_;
    ::fhir::string_pskel* color_parser_;
    ::fhir::string_pskel* imprint_parser_;
    ::fhir::Attachment_pskel* image_parser_;
    ::fhir::CodeableConcept_pskel* scoring_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ProdCharacteristic_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CodeableConcept_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    coding ();

    virtual void
    text ();

    virtual void
    post_CodeableConcept ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Coding_pskel& /* coding */,
             ::fhir::string_pskel& /* text */);

    // Individual element parsers.
    //
    void
    coding_parser (::fhir::Coding_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeableConcept_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeableConcept_pskel* CodeableConcept_impl_;
    CodeableConcept_pskel (CodeableConcept_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* coding_parser_;
    ::fhir::string_pskel* text_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CodeableConcept_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ParameterDefinition_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    use ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    documentation ();

    virtual void
    type ();

    virtual void
    profile ();

    virtual void
    post_ParameterDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::code_pskel& /* name */,
             ::fhir::code_pskel& /* use */,
             ::fhir::integer_pskel& /* min */,
             ::fhir::string_pskel& /* max */,
             ::fhir::string_pskel& /* documentation */,
             ::fhir::code_pskel& /* type */,
             ::fhir::canonical_pskel& /* profile */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::code_pskel&);

    void
    use_parser (::fhir::code_pskel&);

    void
    min_parser (::fhir::integer_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::code_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ParameterDefinition_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ParameterDefinition_pskel* ParameterDefinition_impl_;
    ParameterDefinition_pskel (ParameterDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* name_parser_;
    ::fhir::code_pskel* use_parser_;
    ::fhir::integer_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;
    ::fhir::string_pskel* documentation_parser_;
    ::fhir::code_pskel* type_parser_;
    ::fhir::canonical_pskel* profile_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ParameterDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    representation ();

    virtual void
    sliceName ();

    virtual void
    sliceIsConstraining ();

    virtual void
    label ();

    virtual void
    code ();

    virtual void
    slicing ();

    virtual void
    short_ ();

    virtual void
    definition ();

    virtual void
    comment ();

    virtual void
    requirements ();

    virtual void
    alias ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    base ();

    virtual void
    contentReference ();

    virtual void
    type ();

    virtual void
    defaultValueBase64Binary ();

    virtual void
    defaultValueBoolean ();

    virtual void
    defaultValueCanonical ();

    virtual void
    defaultValueCode ();

    virtual void
    defaultValueDate ();

    virtual void
    defaultValueDateTime ();

    virtual void
    defaultValueDecimal ();

    virtual void
    defaultValueId ();

    virtual void
    defaultValueInstant ();

    virtual void
    defaultValueInteger ();

    virtual void
    defaultValueMarkdown ();

    virtual void
    defaultValueOid ();

    virtual void
    defaultValuePositiveInt ();

    virtual void
    defaultValueString ();

    virtual void
    defaultValueTime ();

    virtual void
    defaultValueUnsignedInt ();

    virtual void
    defaultValueUri ();

    virtual void
    defaultValueUrl ();

    virtual void
    defaultValueUuid ();

    virtual void
    defaultValueAddress ();

    virtual void
    defaultValueAge ();

    virtual void
    defaultValueAnnotation ();

    virtual void
    defaultValueAttachment ();

    virtual void
    defaultValueCodeableConcept ();

    virtual void
    defaultValueCoding ();

    virtual void
    defaultValueContactPoint ();

    virtual void
    defaultValueCount ();

    virtual void
    defaultValueDistance ();

    virtual void
    defaultValueDuration ();

    virtual void
    defaultValueHumanName ();

    virtual void
    defaultValueIdentifier ();

    virtual void
    defaultValueMoney ();

    virtual void
    defaultValuePeriod ();

    virtual void
    defaultValueQuantity ();

    virtual void
    defaultValueRange ();

    virtual void
    defaultValueRatio ();

    virtual void
    defaultValueReference ();

    virtual void
    defaultValueSampledData ();

    virtual void
    defaultValueSignature ();

    virtual void
    defaultValueTiming ();

    virtual void
    defaultValueContactDetail ();

    virtual void
    defaultValueContributor ();

    virtual void
    defaultValueDataRequirement ();

    virtual void
    defaultValueExpression ();

    virtual void
    defaultValueParameterDefinition ();

    virtual void
    defaultValueRelatedArtifact ();

    virtual void
    defaultValueTriggerDefinition ();

    virtual void
    defaultValueUsageContext ();

    virtual void
    defaultValueDosage ();

    virtual void
    defaultValueMeta ();

    virtual void
    meaningWhenMissing ();

    virtual void
    orderMeaning ();

    virtual void
    fixedBase64Binary ();

    virtual void
    fixedBoolean ();

    virtual void
    fixedCanonical ();

    virtual void
    fixedCode ();

    virtual void
    fixedDate ();

    virtual void
    fixedDateTime ();

    virtual void
    fixedDecimal ();

    virtual void
    fixedId ();

    virtual void
    fixedInstant ();

    virtual void
    fixedInteger ();

    virtual void
    fixedMarkdown ();

    virtual void
    fixedOid ();

    virtual void
    fixedPositiveInt ();

    virtual void
    fixedString ();

    virtual void
    fixedTime ();

    virtual void
    fixedUnsignedInt ();

    virtual void
    fixedUri ();

    virtual void
    fixedUrl ();

    virtual void
    fixedUuid ();

    virtual void
    fixedAddress ();

    virtual void
    fixedAge ();

    virtual void
    fixedAnnotation ();

    virtual void
    fixedAttachment ();

    virtual void
    fixedCodeableConcept ();

    virtual void
    fixedCoding ();

    virtual void
    fixedContactPoint ();

    virtual void
    fixedCount ();

    virtual void
    fixedDistance ();

    virtual void
    fixedDuration ();

    virtual void
    fixedHumanName ();

    virtual void
    fixedIdentifier ();

    virtual void
    fixedMoney ();

    virtual void
    fixedPeriod ();

    virtual void
    fixedQuantity ();

    virtual void
    fixedRange ();

    virtual void
    fixedRatio ();

    virtual void
    fixedReference ();

    virtual void
    fixedSampledData ();

    virtual void
    fixedSignature ();

    virtual void
    fixedTiming ();

    virtual void
    fixedContactDetail ();

    virtual void
    fixedContributor ();

    virtual void
    fixedDataRequirement ();

    virtual void
    fixedExpression ();

    virtual void
    fixedParameterDefinition ();

    virtual void
    fixedRelatedArtifact ();

    virtual void
    fixedTriggerDefinition ();

    virtual void
    fixedUsageContext ();

    virtual void
    fixedDosage ();

    virtual void
    fixedMeta ();

    virtual void
    patternBase64Binary ();

    virtual void
    patternBoolean ();

    virtual void
    patternCanonical ();

    virtual void
    patternCode ();

    virtual void
    patternDate ();

    virtual void
    patternDateTime ();

    virtual void
    patternDecimal ();

    virtual void
    patternId ();

    virtual void
    patternInstant ();

    virtual void
    patternInteger ();

    virtual void
    patternMarkdown ();

    virtual void
    patternOid ();

    virtual void
    patternPositiveInt ();

    virtual void
    patternString ();

    virtual void
    patternTime ();

    virtual void
    patternUnsignedInt ();

    virtual void
    patternUri ();

    virtual void
    patternUrl ();

    virtual void
    patternUuid ();

    virtual void
    patternAddress ();

    virtual void
    patternAge ();

    virtual void
    patternAnnotation ();

    virtual void
    patternAttachment ();

    virtual void
    patternCodeableConcept ();

    virtual void
    patternCoding ();

    virtual void
    patternContactPoint ();

    virtual void
    patternCount ();

    virtual void
    patternDistance ();

    virtual void
    patternDuration ();

    virtual void
    patternHumanName ();

    virtual void
    patternIdentifier ();

    virtual void
    patternMoney ();

    virtual void
    patternPeriod ();

    virtual void
    patternQuantity ();

    virtual void
    patternRange ();

    virtual void
    patternRatio ();

    virtual void
    patternReference ();

    virtual void
    patternSampledData ();

    virtual void
    patternSignature ();

    virtual void
    patternTiming ();

    virtual void
    patternContactDetail ();

    virtual void
    patternContributor ();

    virtual void
    patternDataRequirement ();

    virtual void
    patternExpression ();

    virtual void
    patternParameterDefinition ();

    virtual void
    patternRelatedArtifact ();

    virtual void
    patternTriggerDefinition ();

    virtual void
    patternUsageContext ();

    virtual void
    patternDosage ();

    virtual void
    patternMeta ();

    virtual void
    example ();

    virtual void
    minValueDate ();

    virtual void
    minValueDateTime ();

    virtual void
    minValueInstant ();

    virtual void
    minValueTime ();

    virtual void
    minValueDecimal ();

    virtual void
    minValueInteger ();

    virtual void
    minValuePositiveInt ();

    virtual void
    minValueUnsignedInt ();

    virtual void
    minValueQuantity ();

    virtual void
    maxValueDate ();

    virtual void
    maxValueDateTime ();

    virtual void
    maxValueInstant ();

    virtual void
    maxValueTime ();

    virtual void
    maxValueDecimal ();

    virtual void
    maxValueInteger ();

    virtual void
    maxValuePositiveInt ();

    virtual void
    maxValueUnsignedInt ();

    virtual void
    maxValueQuantity ();

    virtual void
    maxLength ();

    virtual void
    condition ();

    virtual void
    constraint ();

    virtual void
    mustSupport ();

    virtual void
    isModifier ();

    virtual void
    isModifierReason ();

    virtual void
    isSummary ();

    virtual void
    binding ();

    virtual void
    mapping ();

    virtual void
    post_ElementDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::PropertyRepresentation_pskel& /* representation */,
             ::fhir::string_pskel& /* sliceName */,
             ::fhir::boolean_pskel& /* sliceIsConstraining */,
             ::fhir::string_pskel& /* label */,
             ::fhir::Coding_pskel& /* code */,
             ::fhir::ElementDefinition_Slicing_pskel& /* slicing */,
             ::fhir::string_pskel& /* short */,
             ::fhir::markdown_pskel& /* definition */,
             ::fhir::markdown_pskel& /* comment */,
             ::fhir::markdown_pskel& /* requirements */,
             ::fhir::string_pskel& /* alias */,
             ::fhir::unsignedInt_pskel& /* min */,
             ::fhir::string_pskel& /* max */,
             ::fhir::ElementDefinition_Base_pskel& /* base */,
             ::fhir::uri_pskel& /* contentReference */,
             ::fhir::ElementDefinition_Type_pskel& /* type */,
             ::fhir::base64Binary_pskel& /* defaultValueBase64Binary */,
             ::fhir::boolean_pskel& /* defaultValueBoolean */,
             ::fhir::canonical_pskel& /* defaultValueCanonical */,
             ::fhir::code_pskel& /* defaultValueCode */,
             ::fhir::date_pskel& /* defaultValueDate */,
             ::fhir::dateTime_pskel& /* defaultValueDateTime */,
             ::fhir::decimal_pskel& /* defaultValueDecimal */,
             ::fhir::id_pskel& /* defaultValueId */,
             ::fhir::instant_pskel& /* defaultValueInstant */,
             ::fhir::integer_pskel& /* defaultValueInteger */,
             ::fhir::markdown_pskel& /* defaultValueMarkdown */,
             ::fhir::oid_pskel& /* defaultValueOid */,
             ::fhir::positiveInt_pskel& /* defaultValuePositiveInt */,
             ::fhir::string_pskel& /* defaultValueString */,
             ::fhir::time_pskel& /* defaultValueTime */,
             ::fhir::unsignedInt_pskel& /* defaultValueUnsignedInt */,
             ::fhir::uri_pskel& /* defaultValueUri */,
             ::fhir::url_pskel& /* defaultValueUrl */,
             ::fhir::uuid_pskel& /* defaultValueUuid */,
             ::fhir::Address_pskel& /* defaultValueAddress */,
             ::fhir::Age_pskel& /* defaultValueAge */,
             ::fhir::Annotation_pskel& /* defaultValueAnnotation */,
             ::fhir::Attachment_pskel& /* defaultValueAttachment */,
             ::fhir::CodeableConcept_pskel& /* defaultValueCodeableConcept */,
             ::fhir::Coding_pskel& /* defaultValueCoding */,
             ::fhir::ContactPoint_pskel& /* defaultValueContactPoint */,
             ::fhir::Count_pskel& /* defaultValueCount */,
             ::fhir::Distance_pskel& /* defaultValueDistance */,
             ::fhir::Duration_pskel& /* defaultValueDuration */,
             ::fhir::HumanName_pskel& /* defaultValueHumanName */,
             ::fhir::Identifier_pskel& /* defaultValueIdentifier */,
             ::fhir::Money_pskel& /* defaultValueMoney */,
             ::fhir::Period_pskel& /* defaultValuePeriod */,
             ::fhir::Quantity_pskel& /* defaultValueQuantity */,
             ::fhir::Range_pskel& /* defaultValueRange */,
             ::fhir::Ratio_pskel& /* defaultValueRatio */,
             ::fhir::Reference_pskel& /* defaultValueReference */,
             ::fhir::SampledData_pskel& /* defaultValueSampledData */,
             ::fhir::Signature_pskel& /* defaultValueSignature */,
             ::fhir::Timing_pskel& /* defaultValueTiming */,
             ::fhir::ContactDetail_pskel& /* defaultValueContactDetail */,
             ::fhir::Contributor_pskel& /* defaultValueContributor */,
             ::fhir::DataRequirement_pskel& /* defaultValueDataRequirement */,
             ::fhir::Expression_pskel& /* defaultValueExpression */,
             ::fhir::ParameterDefinition_pskel& /* defaultValueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* defaultValueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* defaultValueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* defaultValueUsageContext */,
             ::fhir::Dosage_pskel& /* defaultValueDosage */,
             ::fhir::Meta_pskel& /* defaultValueMeta */,
             ::fhir::markdown_pskel& /* meaningWhenMissing */,
             ::fhir::string_pskel& /* orderMeaning */,
             ::fhir::base64Binary_pskel& /* fixedBase64Binary */,
             ::fhir::boolean_pskel& /* fixedBoolean */,
             ::fhir::canonical_pskel& /* fixedCanonical */,
             ::fhir::code_pskel& /* fixedCode */,
             ::fhir::date_pskel& /* fixedDate */,
             ::fhir::dateTime_pskel& /* fixedDateTime */,
             ::fhir::decimal_pskel& /* fixedDecimal */,
             ::fhir::id_pskel& /* fixedId */,
             ::fhir::instant_pskel& /* fixedInstant */,
             ::fhir::integer_pskel& /* fixedInteger */,
             ::fhir::markdown_pskel& /* fixedMarkdown */,
             ::fhir::oid_pskel& /* fixedOid */,
             ::fhir::positiveInt_pskel& /* fixedPositiveInt */,
             ::fhir::string_pskel& /* fixedString */,
             ::fhir::time_pskel& /* fixedTime */,
             ::fhir::unsignedInt_pskel& /* fixedUnsignedInt */,
             ::fhir::uri_pskel& /* fixedUri */,
             ::fhir::url_pskel& /* fixedUrl */,
             ::fhir::uuid_pskel& /* fixedUuid */,
             ::fhir::Address_pskel& /* fixedAddress */,
             ::fhir::Age_pskel& /* fixedAge */,
             ::fhir::Annotation_pskel& /* fixedAnnotation */,
             ::fhir::Attachment_pskel& /* fixedAttachment */,
             ::fhir::CodeableConcept_pskel& /* fixedCodeableConcept */,
             ::fhir::Coding_pskel& /* fixedCoding */,
             ::fhir::ContactPoint_pskel& /* fixedContactPoint */,
             ::fhir::Count_pskel& /* fixedCount */,
             ::fhir::Distance_pskel& /* fixedDistance */,
             ::fhir::Duration_pskel& /* fixedDuration */,
             ::fhir::HumanName_pskel& /* fixedHumanName */,
             ::fhir::Identifier_pskel& /* fixedIdentifier */,
             ::fhir::Money_pskel& /* fixedMoney */,
             ::fhir::Period_pskel& /* fixedPeriod */,
             ::fhir::Quantity_pskel& /* fixedQuantity */,
             ::fhir::Range_pskel& /* fixedRange */,
             ::fhir::Ratio_pskel& /* fixedRatio */,
             ::fhir::Reference_pskel& /* fixedReference */,
             ::fhir::SampledData_pskel& /* fixedSampledData */,
             ::fhir::Signature_pskel& /* fixedSignature */,
             ::fhir::Timing_pskel& /* fixedTiming */,
             ::fhir::ContactDetail_pskel& /* fixedContactDetail */,
             ::fhir::Contributor_pskel& /* fixedContributor */,
             ::fhir::DataRequirement_pskel& /* fixedDataRequirement */,
             ::fhir::Expression_pskel& /* fixedExpression */,
             ::fhir::ParameterDefinition_pskel& /* fixedParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* fixedRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* fixedTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* fixedUsageContext */,
             ::fhir::Dosage_pskel& /* fixedDosage */,
             ::fhir::Meta_pskel& /* fixedMeta */,
             ::fhir::base64Binary_pskel& /* patternBase64Binary */,
             ::fhir::boolean_pskel& /* patternBoolean */,
             ::fhir::canonical_pskel& /* patternCanonical */,
             ::fhir::code_pskel& /* patternCode */,
             ::fhir::date_pskel& /* patternDate */,
             ::fhir::dateTime_pskel& /* patternDateTime */,
             ::fhir::decimal_pskel& /* patternDecimal */,
             ::fhir::id_pskel& /* patternId */,
             ::fhir::instant_pskel& /* patternInstant */,
             ::fhir::integer_pskel& /* patternInteger */,
             ::fhir::markdown_pskel& /* patternMarkdown */,
             ::fhir::oid_pskel& /* patternOid */,
             ::fhir::positiveInt_pskel& /* patternPositiveInt */,
             ::fhir::string_pskel& /* patternString */,
             ::fhir::time_pskel& /* patternTime */,
             ::fhir::unsignedInt_pskel& /* patternUnsignedInt */,
             ::fhir::uri_pskel& /* patternUri */,
             ::fhir::url_pskel& /* patternUrl */,
             ::fhir::uuid_pskel& /* patternUuid */,
             ::fhir::Address_pskel& /* patternAddress */,
             ::fhir::Age_pskel& /* patternAge */,
             ::fhir::Annotation_pskel& /* patternAnnotation */,
             ::fhir::Attachment_pskel& /* patternAttachment */,
             ::fhir::CodeableConcept_pskel& /* patternCodeableConcept */,
             ::fhir::Coding_pskel& /* patternCoding */,
             ::fhir::ContactPoint_pskel& /* patternContactPoint */,
             ::fhir::Count_pskel& /* patternCount */,
             ::fhir::Distance_pskel& /* patternDistance */,
             ::fhir::Duration_pskel& /* patternDuration */,
             ::fhir::HumanName_pskel& /* patternHumanName */,
             ::fhir::Identifier_pskel& /* patternIdentifier */,
             ::fhir::Money_pskel& /* patternMoney */,
             ::fhir::Period_pskel& /* patternPeriod */,
             ::fhir::Quantity_pskel& /* patternQuantity */,
             ::fhir::Range_pskel& /* patternRange */,
             ::fhir::Ratio_pskel& /* patternRatio */,
             ::fhir::Reference_pskel& /* patternReference */,
             ::fhir::SampledData_pskel& /* patternSampledData */,
             ::fhir::Signature_pskel& /* patternSignature */,
             ::fhir::Timing_pskel& /* patternTiming */,
             ::fhir::ContactDetail_pskel& /* patternContactDetail */,
             ::fhir::Contributor_pskel& /* patternContributor */,
             ::fhir::DataRequirement_pskel& /* patternDataRequirement */,
             ::fhir::Expression_pskel& /* patternExpression */,
             ::fhir::ParameterDefinition_pskel& /* patternParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* patternRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* patternTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* patternUsageContext */,
             ::fhir::Dosage_pskel& /* patternDosage */,
             ::fhir::Meta_pskel& /* patternMeta */,
             ::fhir::ElementDefinition_Example_pskel& /* example */,
             ::fhir::date_pskel& /* minValueDate */,
             ::fhir::dateTime_pskel& /* minValueDateTime */,
             ::fhir::instant_pskel& /* minValueInstant */,
             ::fhir::time_pskel& /* minValueTime */,
             ::fhir::decimal_pskel& /* minValueDecimal */,
             ::fhir::integer_pskel& /* minValueInteger */,
             ::fhir::positiveInt_pskel& /* minValuePositiveInt */,
             ::fhir::unsignedInt_pskel& /* minValueUnsignedInt */,
             ::fhir::Quantity_pskel& /* minValueQuantity */,
             ::fhir::date_pskel& /* maxValueDate */,
             ::fhir::dateTime_pskel& /* maxValueDateTime */,
             ::fhir::instant_pskel& /* maxValueInstant */,
             ::fhir::time_pskel& /* maxValueTime */,
             ::fhir::decimal_pskel& /* maxValueDecimal */,
             ::fhir::integer_pskel& /* maxValueInteger */,
             ::fhir::positiveInt_pskel& /* maxValuePositiveInt */,
             ::fhir::unsignedInt_pskel& /* maxValueUnsignedInt */,
             ::fhir::Quantity_pskel& /* maxValueQuantity */,
             ::fhir::integer_pskel& /* maxLength */,
             ::fhir::id_pskel& /* condition */,
             ::fhir::ElementDefinition_Constraint_pskel& /* constraint */,
             ::fhir::boolean_pskel& /* mustSupport */,
             ::fhir::boolean_pskel& /* isModifier */,
             ::fhir::string_pskel& /* isModifierReason */,
             ::fhir::boolean_pskel& /* isSummary */,
             ::fhir::ElementDefinition_Binding_pskel& /* binding */,
             ::fhir::ElementDefinition_Mapping_pskel& /* mapping */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    representation_parser (::fhir::PropertyRepresentation_pskel&);

    void
    sliceName_parser (::fhir::string_pskel&);

    void
    sliceIsConstraining_parser (::fhir::boolean_pskel&);

    void
    label_parser (::fhir::string_pskel&);

    void
    code_parser (::fhir::Coding_pskel&);

    void
    slicing_parser (::fhir::ElementDefinition_Slicing_pskel&);

    void
    short__parser (::fhir::string_pskel&);

    void
    definition_parser (::fhir::markdown_pskel&);

    void
    comment_parser (::fhir::markdown_pskel&);

    void
    requirements_parser (::fhir::markdown_pskel&);

    void
    alias_parser (::fhir::string_pskel&);

    void
    min_parser (::fhir::unsignedInt_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    void
    base_parser (::fhir::ElementDefinition_Base_pskel&);

    void
    contentReference_parser (::fhir::uri_pskel&);

    void
    type_parser (::fhir::ElementDefinition_Type_pskel&);

    void
    defaultValueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    defaultValueBoolean_parser (::fhir::boolean_pskel&);

    void
    defaultValueCanonical_parser (::fhir::canonical_pskel&);

    void
    defaultValueCode_parser (::fhir::code_pskel&);

    void
    defaultValueDate_parser (::fhir::date_pskel&);

    void
    defaultValueDateTime_parser (::fhir::dateTime_pskel&);

    void
    defaultValueDecimal_parser (::fhir::decimal_pskel&);

    void
    defaultValueId_parser (::fhir::id_pskel&);

    void
    defaultValueInstant_parser (::fhir::instant_pskel&);

    void
    defaultValueInteger_parser (::fhir::integer_pskel&);

    void
    defaultValueMarkdown_parser (::fhir::markdown_pskel&);

    void
    defaultValueOid_parser (::fhir::oid_pskel&);

    void
    defaultValuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    defaultValueString_parser (::fhir::string_pskel&);

    void
    defaultValueTime_parser (::fhir::time_pskel&);

    void
    defaultValueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    defaultValueUri_parser (::fhir::uri_pskel&);

    void
    defaultValueUrl_parser (::fhir::url_pskel&);

    void
    defaultValueUuid_parser (::fhir::uuid_pskel&);

    void
    defaultValueAddress_parser (::fhir::Address_pskel&);

    void
    defaultValueAge_parser (::fhir::Age_pskel&);

    void
    defaultValueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    defaultValueAttachment_parser (::fhir::Attachment_pskel&);

    void
    defaultValueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    defaultValueCoding_parser (::fhir::Coding_pskel&);

    void
    defaultValueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    defaultValueCount_parser (::fhir::Count_pskel&);

    void
    defaultValueDistance_parser (::fhir::Distance_pskel&);

    void
    defaultValueDuration_parser (::fhir::Duration_pskel&);

    void
    defaultValueHumanName_parser (::fhir::HumanName_pskel&);

    void
    defaultValueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    defaultValueMoney_parser (::fhir::Money_pskel&);

    void
    defaultValuePeriod_parser (::fhir::Period_pskel&);

    void
    defaultValueQuantity_parser (::fhir::Quantity_pskel&);

    void
    defaultValueRange_parser (::fhir::Range_pskel&);

    void
    defaultValueRatio_parser (::fhir::Ratio_pskel&);

    void
    defaultValueReference_parser (::fhir::Reference_pskel&);

    void
    defaultValueSampledData_parser (::fhir::SampledData_pskel&);

    void
    defaultValueSignature_parser (::fhir::Signature_pskel&);

    void
    defaultValueTiming_parser (::fhir::Timing_pskel&);

    void
    defaultValueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    defaultValueContributor_parser (::fhir::Contributor_pskel&);

    void
    defaultValueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    defaultValueExpression_parser (::fhir::Expression_pskel&);

    void
    defaultValueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    defaultValueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    defaultValueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    defaultValueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    defaultValueDosage_parser (::fhir::Dosage_pskel&);

    void
    defaultValueMeta_parser (::fhir::Meta_pskel&);

    void
    meaningWhenMissing_parser (::fhir::markdown_pskel&);

    void
    orderMeaning_parser (::fhir::string_pskel&);

    void
    fixedBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    fixedBoolean_parser (::fhir::boolean_pskel&);

    void
    fixedCanonical_parser (::fhir::canonical_pskel&);

    void
    fixedCode_parser (::fhir::code_pskel&);

    void
    fixedDate_parser (::fhir::date_pskel&);

    void
    fixedDateTime_parser (::fhir::dateTime_pskel&);

    void
    fixedDecimal_parser (::fhir::decimal_pskel&);

    void
    fixedId_parser (::fhir::id_pskel&);

    void
    fixedInstant_parser (::fhir::instant_pskel&);

    void
    fixedInteger_parser (::fhir::integer_pskel&);

    void
    fixedMarkdown_parser (::fhir::markdown_pskel&);

    void
    fixedOid_parser (::fhir::oid_pskel&);

    void
    fixedPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    fixedString_parser (::fhir::string_pskel&);

    void
    fixedTime_parser (::fhir::time_pskel&);

    void
    fixedUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    fixedUri_parser (::fhir::uri_pskel&);

    void
    fixedUrl_parser (::fhir::url_pskel&);

    void
    fixedUuid_parser (::fhir::uuid_pskel&);

    void
    fixedAddress_parser (::fhir::Address_pskel&);

    void
    fixedAge_parser (::fhir::Age_pskel&);

    void
    fixedAnnotation_parser (::fhir::Annotation_pskel&);

    void
    fixedAttachment_parser (::fhir::Attachment_pskel&);

    void
    fixedCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    fixedCoding_parser (::fhir::Coding_pskel&);

    void
    fixedContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    fixedCount_parser (::fhir::Count_pskel&);

    void
    fixedDistance_parser (::fhir::Distance_pskel&);

    void
    fixedDuration_parser (::fhir::Duration_pskel&);

    void
    fixedHumanName_parser (::fhir::HumanName_pskel&);

    void
    fixedIdentifier_parser (::fhir::Identifier_pskel&);

    void
    fixedMoney_parser (::fhir::Money_pskel&);

    void
    fixedPeriod_parser (::fhir::Period_pskel&);

    void
    fixedQuantity_parser (::fhir::Quantity_pskel&);

    void
    fixedRange_parser (::fhir::Range_pskel&);

    void
    fixedRatio_parser (::fhir::Ratio_pskel&);

    void
    fixedReference_parser (::fhir::Reference_pskel&);

    void
    fixedSampledData_parser (::fhir::SampledData_pskel&);

    void
    fixedSignature_parser (::fhir::Signature_pskel&);

    void
    fixedTiming_parser (::fhir::Timing_pskel&);

    void
    fixedContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    fixedContributor_parser (::fhir::Contributor_pskel&);

    void
    fixedDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    fixedExpression_parser (::fhir::Expression_pskel&);

    void
    fixedParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    fixedRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    fixedTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    fixedUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    fixedDosage_parser (::fhir::Dosage_pskel&);

    void
    fixedMeta_parser (::fhir::Meta_pskel&);

    void
    patternBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    patternBoolean_parser (::fhir::boolean_pskel&);

    void
    patternCanonical_parser (::fhir::canonical_pskel&);

    void
    patternCode_parser (::fhir::code_pskel&);

    void
    patternDate_parser (::fhir::date_pskel&);

    void
    patternDateTime_parser (::fhir::dateTime_pskel&);

    void
    patternDecimal_parser (::fhir::decimal_pskel&);

    void
    patternId_parser (::fhir::id_pskel&);

    void
    patternInstant_parser (::fhir::instant_pskel&);

    void
    patternInteger_parser (::fhir::integer_pskel&);

    void
    patternMarkdown_parser (::fhir::markdown_pskel&);

    void
    patternOid_parser (::fhir::oid_pskel&);

    void
    patternPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    patternString_parser (::fhir::string_pskel&);

    void
    patternTime_parser (::fhir::time_pskel&);

    void
    patternUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    patternUri_parser (::fhir::uri_pskel&);

    void
    patternUrl_parser (::fhir::url_pskel&);

    void
    patternUuid_parser (::fhir::uuid_pskel&);

    void
    patternAddress_parser (::fhir::Address_pskel&);

    void
    patternAge_parser (::fhir::Age_pskel&);

    void
    patternAnnotation_parser (::fhir::Annotation_pskel&);

    void
    patternAttachment_parser (::fhir::Attachment_pskel&);

    void
    patternCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    patternCoding_parser (::fhir::Coding_pskel&);

    void
    patternContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    patternCount_parser (::fhir::Count_pskel&);

    void
    patternDistance_parser (::fhir::Distance_pskel&);

    void
    patternDuration_parser (::fhir::Duration_pskel&);

    void
    patternHumanName_parser (::fhir::HumanName_pskel&);

    void
    patternIdentifier_parser (::fhir::Identifier_pskel&);

    void
    patternMoney_parser (::fhir::Money_pskel&);

    void
    patternPeriod_parser (::fhir::Period_pskel&);

    void
    patternQuantity_parser (::fhir::Quantity_pskel&);

    void
    patternRange_parser (::fhir::Range_pskel&);

    void
    patternRatio_parser (::fhir::Ratio_pskel&);

    void
    patternReference_parser (::fhir::Reference_pskel&);

    void
    patternSampledData_parser (::fhir::SampledData_pskel&);

    void
    patternSignature_parser (::fhir::Signature_pskel&);

    void
    patternTiming_parser (::fhir::Timing_pskel&);

    void
    patternContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    patternContributor_parser (::fhir::Contributor_pskel&);

    void
    patternDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    patternExpression_parser (::fhir::Expression_pskel&);

    void
    patternParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    patternRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    patternTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    patternUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    patternDosage_parser (::fhir::Dosage_pskel&);

    void
    patternMeta_parser (::fhir::Meta_pskel&);

    void
    example_parser (::fhir::ElementDefinition_Example_pskel&);

    void
    minValueDate_parser (::fhir::date_pskel&);

    void
    minValueDateTime_parser (::fhir::dateTime_pskel&);

    void
    minValueInstant_parser (::fhir::instant_pskel&);

    void
    minValueTime_parser (::fhir::time_pskel&);

    void
    minValueDecimal_parser (::fhir::decimal_pskel&);

    void
    minValueInteger_parser (::fhir::integer_pskel&);

    void
    minValuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    minValueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    minValueQuantity_parser (::fhir::Quantity_pskel&);

    void
    maxValueDate_parser (::fhir::date_pskel&);

    void
    maxValueDateTime_parser (::fhir::dateTime_pskel&);

    void
    maxValueInstant_parser (::fhir::instant_pskel&);

    void
    maxValueTime_parser (::fhir::time_pskel&);

    void
    maxValueDecimal_parser (::fhir::decimal_pskel&);

    void
    maxValueInteger_parser (::fhir::integer_pskel&);

    void
    maxValuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    maxValueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    maxValueQuantity_parser (::fhir::Quantity_pskel&);

    void
    maxLength_parser (::fhir::integer_pskel&);

    void
    condition_parser (::fhir::id_pskel&);

    void
    constraint_parser (::fhir::ElementDefinition_Constraint_pskel&);

    void
    mustSupport_parser (::fhir::boolean_pskel&);

    void
    isModifier_parser (::fhir::boolean_pskel&);

    void
    isModifierReason_parser (::fhir::string_pskel&);

    void
    isSummary_parser (::fhir::boolean_pskel&);

    void
    binding_parser (::fhir::ElementDefinition_Binding_pskel&);

    void
    mapping_parser (::fhir::ElementDefinition_Mapping_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_pskel* ElementDefinition_impl_;
    ElementDefinition_pskel (ElementDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::PropertyRepresentation_pskel* representation_parser_;
    ::fhir::string_pskel* sliceName_parser_;
    ::fhir::boolean_pskel* sliceIsConstraining_parser_;
    ::fhir::string_pskel* label_parser_;
    ::fhir::Coding_pskel* code_parser_;
    ::fhir::ElementDefinition_Slicing_pskel* slicing_parser_;
    ::fhir::string_pskel* short__parser_;
    ::fhir::markdown_pskel* definition_parser_;
    ::fhir::markdown_pskel* comment_parser_;
    ::fhir::markdown_pskel* requirements_parser_;
    ::fhir::string_pskel* alias_parser_;
    ::fhir::unsignedInt_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;
    ::fhir::ElementDefinition_Base_pskel* base_parser_;
    ::fhir::uri_pskel* contentReference_parser_;
    ::fhir::ElementDefinition_Type_pskel* type_parser_;
    ::fhir::base64Binary_pskel* defaultValueBase64Binary_parser_;
    ::fhir::boolean_pskel* defaultValueBoolean_parser_;
    ::fhir::canonical_pskel* defaultValueCanonical_parser_;
    ::fhir::code_pskel* defaultValueCode_parser_;
    ::fhir::date_pskel* defaultValueDate_parser_;
    ::fhir::dateTime_pskel* defaultValueDateTime_parser_;
    ::fhir::decimal_pskel* defaultValueDecimal_parser_;
    ::fhir::id_pskel* defaultValueId_parser_;
    ::fhir::instant_pskel* defaultValueInstant_parser_;
    ::fhir::integer_pskel* defaultValueInteger_parser_;
    ::fhir::markdown_pskel* defaultValueMarkdown_parser_;
    ::fhir::oid_pskel* defaultValueOid_parser_;
    ::fhir::positiveInt_pskel* defaultValuePositiveInt_parser_;
    ::fhir::string_pskel* defaultValueString_parser_;
    ::fhir::time_pskel* defaultValueTime_parser_;
    ::fhir::unsignedInt_pskel* defaultValueUnsignedInt_parser_;
    ::fhir::uri_pskel* defaultValueUri_parser_;
    ::fhir::url_pskel* defaultValueUrl_parser_;
    ::fhir::uuid_pskel* defaultValueUuid_parser_;
    ::fhir::Address_pskel* defaultValueAddress_parser_;
    ::fhir::Age_pskel* defaultValueAge_parser_;
    ::fhir::Annotation_pskel* defaultValueAnnotation_parser_;
    ::fhir::Attachment_pskel* defaultValueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* defaultValueCodeableConcept_parser_;
    ::fhir::Coding_pskel* defaultValueCoding_parser_;
    ::fhir::ContactPoint_pskel* defaultValueContactPoint_parser_;
    ::fhir::Count_pskel* defaultValueCount_parser_;
    ::fhir::Distance_pskel* defaultValueDistance_parser_;
    ::fhir::Duration_pskel* defaultValueDuration_parser_;
    ::fhir::HumanName_pskel* defaultValueHumanName_parser_;
    ::fhir::Identifier_pskel* defaultValueIdentifier_parser_;
    ::fhir::Money_pskel* defaultValueMoney_parser_;
    ::fhir::Period_pskel* defaultValuePeriod_parser_;
    ::fhir::Quantity_pskel* defaultValueQuantity_parser_;
    ::fhir::Range_pskel* defaultValueRange_parser_;
    ::fhir::Ratio_pskel* defaultValueRatio_parser_;
    ::fhir::Reference_pskel* defaultValueReference_parser_;
    ::fhir::SampledData_pskel* defaultValueSampledData_parser_;
    ::fhir::Signature_pskel* defaultValueSignature_parser_;
    ::fhir::Timing_pskel* defaultValueTiming_parser_;
    ::fhir::ContactDetail_pskel* defaultValueContactDetail_parser_;
    ::fhir::Contributor_pskel* defaultValueContributor_parser_;
    ::fhir::DataRequirement_pskel* defaultValueDataRequirement_parser_;
    ::fhir::Expression_pskel* defaultValueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* defaultValueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* defaultValueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* defaultValueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* defaultValueUsageContext_parser_;
    ::fhir::Dosage_pskel* defaultValueDosage_parser_;
    ::fhir::Meta_pskel* defaultValueMeta_parser_;
    ::fhir::markdown_pskel* meaningWhenMissing_parser_;
    ::fhir::string_pskel* orderMeaning_parser_;
    ::fhir::base64Binary_pskel* fixedBase64Binary_parser_;
    ::fhir::boolean_pskel* fixedBoolean_parser_;
    ::fhir::canonical_pskel* fixedCanonical_parser_;
    ::fhir::code_pskel* fixedCode_parser_;
    ::fhir::date_pskel* fixedDate_parser_;
    ::fhir::dateTime_pskel* fixedDateTime_parser_;
    ::fhir::decimal_pskel* fixedDecimal_parser_;
    ::fhir::id_pskel* fixedId_parser_;
    ::fhir::instant_pskel* fixedInstant_parser_;
    ::fhir::integer_pskel* fixedInteger_parser_;
    ::fhir::markdown_pskel* fixedMarkdown_parser_;
    ::fhir::oid_pskel* fixedOid_parser_;
    ::fhir::positiveInt_pskel* fixedPositiveInt_parser_;
    ::fhir::string_pskel* fixedString_parser_;
    ::fhir::time_pskel* fixedTime_parser_;
    ::fhir::unsignedInt_pskel* fixedUnsignedInt_parser_;
    ::fhir::uri_pskel* fixedUri_parser_;
    ::fhir::url_pskel* fixedUrl_parser_;
    ::fhir::uuid_pskel* fixedUuid_parser_;
    ::fhir::Address_pskel* fixedAddress_parser_;
    ::fhir::Age_pskel* fixedAge_parser_;
    ::fhir::Annotation_pskel* fixedAnnotation_parser_;
    ::fhir::Attachment_pskel* fixedAttachment_parser_;
    ::fhir::CodeableConcept_pskel* fixedCodeableConcept_parser_;
    ::fhir::Coding_pskel* fixedCoding_parser_;
    ::fhir::ContactPoint_pskel* fixedContactPoint_parser_;
    ::fhir::Count_pskel* fixedCount_parser_;
    ::fhir::Distance_pskel* fixedDistance_parser_;
    ::fhir::Duration_pskel* fixedDuration_parser_;
    ::fhir::HumanName_pskel* fixedHumanName_parser_;
    ::fhir::Identifier_pskel* fixedIdentifier_parser_;
    ::fhir::Money_pskel* fixedMoney_parser_;
    ::fhir::Period_pskel* fixedPeriod_parser_;
    ::fhir::Quantity_pskel* fixedQuantity_parser_;
    ::fhir::Range_pskel* fixedRange_parser_;
    ::fhir::Ratio_pskel* fixedRatio_parser_;
    ::fhir::Reference_pskel* fixedReference_parser_;
    ::fhir::SampledData_pskel* fixedSampledData_parser_;
    ::fhir::Signature_pskel* fixedSignature_parser_;
    ::fhir::Timing_pskel* fixedTiming_parser_;
    ::fhir::ContactDetail_pskel* fixedContactDetail_parser_;
    ::fhir::Contributor_pskel* fixedContributor_parser_;
    ::fhir::DataRequirement_pskel* fixedDataRequirement_parser_;
    ::fhir::Expression_pskel* fixedExpression_parser_;
    ::fhir::ParameterDefinition_pskel* fixedParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* fixedRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* fixedTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* fixedUsageContext_parser_;
    ::fhir::Dosage_pskel* fixedDosage_parser_;
    ::fhir::Meta_pskel* fixedMeta_parser_;
    ::fhir::base64Binary_pskel* patternBase64Binary_parser_;
    ::fhir::boolean_pskel* patternBoolean_parser_;
    ::fhir::canonical_pskel* patternCanonical_parser_;
    ::fhir::code_pskel* patternCode_parser_;
    ::fhir::date_pskel* patternDate_parser_;
    ::fhir::dateTime_pskel* patternDateTime_parser_;
    ::fhir::decimal_pskel* patternDecimal_parser_;
    ::fhir::id_pskel* patternId_parser_;
    ::fhir::instant_pskel* patternInstant_parser_;
    ::fhir::integer_pskel* patternInteger_parser_;
    ::fhir::markdown_pskel* patternMarkdown_parser_;
    ::fhir::oid_pskel* patternOid_parser_;
    ::fhir::positiveInt_pskel* patternPositiveInt_parser_;
    ::fhir::string_pskel* patternString_parser_;
    ::fhir::time_pskel* patternTime_parser_;
    ::fhir::unsignedInt_pskel* patternUnsignedInt_parser_;
    ::fhir::uri_pskel* patternUri_parser_;
    ::fhir::url_pskel* patternUrl_parser_;
    ::fhir::uuid_pskel* patternUuid_parser_;
    ::fhir::Address_pskel* patternAddress_parser_;
    ::fhir::Age_pskel* patternAge_parser_;
    ::fhir::Annotation_pskel* patternAnnotation_parser_;
    ::fhir::Attachment_pskel* patternAttachment_parser_;
    ::fhir::CodeableConcept_pskel* patternCodeableConcept_parser_;
    ::fhir::Coding_pskel* patternCoding_parser_;
    ::fhir::ContactPoint_pskel* patternContactPoint_parser_;
    ::fhir::Count_pskel* patternCount_parser_;
    ::fhir::Distance_pskel* patternDistance_parser_;
    ::fhir::Duration_pskel* patternDuration_parser_;
    ::fhir::HumanName_pskel* patternHumanName_parser_;
    ::fhir::Identifier_pskel* patternIdentifier_parser_;
    ::fhir::Money_pskel* patternMoney_parser_;
    ::fhir::Period_pskel* patternPeriod_parser_;
    ::fhir::Quantity_pskel* patternQuantity_parser_;
    ::fhir::Range_pskel* patternRange_parser_;
    ::fhir::Ratio_pskel* patternRatio_parser_;
    ::fhir::Reference_pskel* patternReference_parser_;
    ::fhir::SampledData_pskel* patternSampledData_parser_;
    ::fhir::Signature_pskel* patternSignature_parser_;
    ::fhir::Timing_pskel* patternTiming_parser_;
    ::fhir::ContactDetail_pskel* patternContactDetail_parser_;
    ::fhir::Contributor_pskel* patternContributor_parser_;
    ::fhir::DataRequirement_pskel* patternDataRequirement_parser_;
    ::fhir::Expression_pskel* patternExpression_parser_;
    ::fhir::ParameterDefinition_pskel* patternParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* patternRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* patternTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* patternUsageContext_parser_;
    ::fhir::Dosage_pskel* patternDosage_parser_;
    ::fhir::Meta_pskel* patternMeta_parser_;
    ::fhir::ElementDefinition_Example_pskel* example_parser_;
    ::fhir::date_pskel* minValueDate_parser_;
    ::fhir::dateTime_pskel* minValueDateTime_parser_;
    ::fhir::instant_pskel* minValueInstant_parser_;
    ::fhir::time_pskel* minValueTime_parser_;
    ::fhir::decimal_pskel* minValueDecimal_parser_;
    ::fhir::integer_pskel* minValueInteger_parser_;
    ::fhir::positiveInt_pskel* minValuePositiveInt_parser_;
    ::fhir::unsignedInt_pskel* minValueUnsignedInt_parser_;
    ::fhir::Quantity_pskel* minValueQuantity_parser_;
    ::fhir::date_pskel* maxValueDate_parser_;
    ::fhir::dateTime_pskel* maxValueDateTime_parser_;
    ::fhir::instant_pskel* maxValueInstant_parser_;
    ::fhir::time_pskel* maxValueTime_parser_;
    ::fhir::decimal_pskel* maxValueDecimal_parser_;
    ::fhir::integer_pskel* maxValueInteger_parser_;
    ::fhir::positiveInt_pskel* maxValuePositiveInt_parser_;
    ::fhir::unsignedInt_pskel* maxValueUnsignedInt_parser_;
    ::fhir::Quantity_pskel* maxValueQuantity_parser_;
    ::fhir::integer_pskel* maxLength_parser_;
    ::fhir::id_pskel* condition_parser_;
    ::fhir::ElementDefinition_Constraint_pskel* constraint_parser_;
    ::fhir::boolean_pskel* mustSupport_parser_;
    ::fhir::boolean_pskel* isModifier_parser_;
    ::fhir::string_pskel* isModifierReason_parser_;
    ::fhir::boolean_pskel* isSummary_parser_;
    ::fhir::ElementDefinition_Binding_pskel* binding_parser_;
    ::fhir::ElementDefinition_Mapping_pskel* mapping_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Constraint_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    key ();

    virtual void
    requirements ();

    virtual void
    severity ();

    virtual void
    human ();

    virtual void
    expression ();

    virtual void
    xpath ();

    virtual void
    source ();

    virtual void
    post_ElementDefinition_Constraint ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* key */,
             ::fhir::string_pskel& /* requirements */,
             ::fhir::ConstraintSeverity_pskel& /* severity */,
             ::fhir::string_pskel& /* human */,
             ::fhir::string_pskel& /* expression */,
             ::fhir::string_pskel& /* xpath */,
             ::fhir::canonical_pskel& /* source */);

    // Individual element parsers.
    //
    void
    key_parser (::fhir::id_pskel&);

    void
    requirements_parser (::fhir::string_pskel&);

    void
    severity_parser (::fhir::ConstraintSeverity_pskel&);

    void
    human_parser (::fhir::string_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    void
    xpath_parser (::fhir::string_pskel&);

    void
    source_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Constraint_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Constraint_pskel* ElementDefinition_Constraint_impl_;
    ElementDefinition_Constraint_pskel (ElementDefinition_Constraint_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* key_parser_;
    ::fhir::string_pskel* requirements_parser_;
    ::fhir::ConstraintSeverity_pskel* severity_parser_;
    ::fhir::string_pskel* human_parser_;
    ::fhir::string_pskel* expression_parser_;
    ::fhir::string_pskel* xpath_parser_;
    ::fhir::canonical_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Constraint_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Mapping_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identity ();

    virtual void
    language ();

    virtual void
    map ();

    virtual void
    comment ();

    virtual void
    post_ElementDefinition_Mapping ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* identity */,
             ::fhir::code_pskel& /* language */,
             ::fhir::string_pskel& /* map */,
             ::fhir::string_pskel& /* comment */);

    // Individual element parsers.
    //
    void
    identity_parser (::fhir::id_pskel&);

    void
    language_parser (::fhir::code_pskel&);

    void
    map_parser (::fhir::string_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Mapping_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Mapping_pskel* ElementDefinition_Mapping_impl_;
    ElementDefinition_Mapping_pskel (ElementDefinition_Mapping_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* identity_parser_;
    ::fhir::code_pskel* language_parser_;
    ::fhir::string_pskel* map_parser_;
    ::fhir::string_pskel* comment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Mapping_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Base_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    post_ElementDefinition_Base ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::unsignedInt_pskel& /* min */,
             ::fhir::string_pskel& /* max */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    min_parser (::fhir::unsignedInt_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Base_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Base_pskel* ElementDefinition_Base_impl_;
    ElementDefinition_Base_pskel (ElementDefinition_Base_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::unsignedInt_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Base_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Type_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    profile ();

    virtual void
    targetProfile ();

    virtual void
    aggregation ();

    virtual void
    versioning ();

    virtual void
    post_ElementDefinition_Type ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* code */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::canonical_pskel& /* targetProfile */,
             ::fhir::AggregationMode_pskel& /* aggregation */,
             ::fhir::ReferenceVersionRules_pskel& /* versioning */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::uri_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    targetProfile_parser (::fhir::canonical_pskel&);

    void
    aggregation_parser (::fhir::AggregationMode_pskel&);

    void
    versioning_parser (::fhir::ReferenceVersionRules_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Type_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Type_pskel* ElementDefinition_Type_impl_;
    ElementDefinition_Type_pskel (ElementDefinition_Type_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* code_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::canonical_pskel* targetProfile_parser_;
    ::fhir::AggregationMode_pskel* aggregation_parser_;
    ::fhir::ReferenceVersionRules_pskel* versioning_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Type_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Example_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    label ();

    virtual void
    valueBase64Binary ();

    virtual void
    valueBoolean ();

    virtual void
    valueCanonical ();

    virtual void
    valueCode ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueDecimal ();

    virtual void
    valueId ();

    virtual void
    valueInstant ();

    virtual void
    valueInteger ();

    virtual void
    valueMarkdown ();

    virtual void
    valueOid ();

    virtual void
    valuePositiveInt ();

    virtual void
    valueString ();

    virtual void
    valueTime ();

    virtual void
    valueUnsignedInt ();

    virtual void
    valueUri ();

    virtual void
    valueUrl ();

    virtual void
    valueUuid ();

    virtual void
    valueAddress ();

    virtual void
    valueAge ();

    virtual void
    valueAnnotation ();

    virtual void
    valueAttachment ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueCoding ();

    virtual void
    valueContactPoint ();

    virtual void
    valueCount ();

    virtual void
    valueDistance ();

    virtual void
    valueDuration ();

    virtual void
    valueHumanName ();

    virtual void
    valueIdentifier ();

    virtual void
    valueMoney ();

    virtual void
    valuePeriod ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueRatio ();

    virtual void
    valueReference ();

    virtual void
    valueSampledData ();

    virtual void
    valueSignature ();

    virtual void
    valueTiming ();

    virtual void
    valueContactDetail ();

    virtual void
    valueContributor ();

    virtual void
    valueDataRequirement ();

    virtual void
    valueExpression ();

    virtual void
    valueParameterDefinition ();

    virtual void
    valueRelatedArtifact ();

    virtual void
    valueTriggerDefinition ();

    virtual void
    valueUsageContext ();

    virtual void
    valueDosage ();

    virtual void
    valueMeta ();

    virtual void
    post_ElementDefinition_Example ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* label */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::canonical_pskel& /* valueCanonical */,
             ::fhir::code_pskel& /* valueCode */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::id_pskel& /* valueId */,
             ::fhir::instant_pskel& /* valueInstant */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::markdown_pskel& /* valueMarkdown */,
             ::fhir::oid_pskel& /* valueOid */,
             ::fhir::positiveInt_pskel& /* valuePositiveInt */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::unsignedInt_pskel& /* valueUnsignedInt */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::url_pskel& /* valueUrl */,
             ::fhir::uuid_pskel& /* valueUuid */,
             ::fhir::Address_pskel& /* valueAddress */,
             ::fhir::Age_pskel& /* valueAge */,
             ::fhir::Annotation_pskel& /* valueAnnotation */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::ContactPoint_pskel& /* valueContactPoint */,
             ::fhir::Count_pskel& /* valueCount */,
             ::fhir::Distance_pskel& /* valueDistance */,
             ::fhir::Duration_pskel& /* valueDuration */,
             ::fhir::HumanName_pskel& /* valueHumanName */,
             ::fhir::Identifier_pskel& /* valueIdentifier */,
             ::fhir::Money_pskel& /* valueMoney */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Ratio_pskel& /* valueRatio */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::SampledData_pskel& /* valueSampledData */,
             ::fhir::Signature_pskel& /* valueSignature */,
             ::fhir::Timing_pskel& /* valueTiming */,
             ::fhir::ContactDetail_pskel& /* valueContactDetail */,
             ::fhir::Contributor_pskel& /* valueContributor */,
             ::fhir::DataRequirement_pskel& /* valueDataRequirement */,
             ::fhir::Expression_pskel& /* valueExpression */,
             ::fhir::ParameterDefinition_pskel& /* valueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* valueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* valueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* valueUsageContext */,
             ::fhir::Dosage_pskel& /* valueDosage */,
             ::fhir::Meta_pskel& /* valueMeta */);

    // Individual element parsers.
    //
    void
    label_parser (::fhir::string_pskel&);

    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueCanonical_parser (::fhir::canonical_pskel&);

    void
    valueCode_parser (::fhir::code_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueId_parser (::fhir::id_pskel&);

    void
    valueInstant_parser (::fhir::instant_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueMarkdown_parser (::fhir::markdown_pskel&);

    void
    valueOid_parser (::fhir::oid_pskel&);

    void
    valuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueUrl_parser (::fhir::url_pskel&);

    void
    valueUuid_parser (::fhir::uuid_pskel&);

    void
    valueAddress_parser (::fhir::Address_pskel&);

    void
    valueAge_parser (::fhir::Age_pskel&);

    void
    valueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    valueCount_parser (::fhir::Count_pskel&);

    void
    valueDistance_parser (::fhir::Distance_pskel&);

    void
    valueDuration_parser (::fhir::Duration_pskel&);

    void
    valueHumanName_parser (::fhir::HumanName_pskel&);

    void
    valueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    valueMoney_parser (::fhir::Money_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueRatio_parser (::fhir::Ratio_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    valueSampledData_parser (::fhir::SampledData_pskel&);

    void
    valueSignature_parser (::fhir::Signature_pskel&);

    void
    valueTiming_parser (::fhir::Timing_pskel&);

    void
    valueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    valueContributor_parser (::fhir::Contributor_pskel&);

    void
    valueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    valueExpression_parser (::fhir::Expression_pskel&);

    void
    valueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    valueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    valueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    valueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    valueDosage_parser (::fhir::Dosage_pskel&);

    void
    valueMeta_parser (::fhir::Meta_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Example_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Example_pskel* ElementDefinition_Example_impl_;
    ElementDefinition_Example_pskel (ElementDefinition_Example_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* label_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::canonical_pskel* valueCanonical_parser_;
    ::fhir::code_pskel* valueCode_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::id_pskel* valueId_parser_;
    ::fhir::instant_pskel* valueInstant_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::markdown_pskel* valueMarkdown_parser_;
    ::fhir::oid_pskel* valueOid_parser_;
    ::fhir::positiveInt_pskel* valuePositiveInt_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::unsignedInt_pskel* valueUnsignedInt_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::url_pskel* valueUrl_parser_;
    ::fhir::uuid_pskel* valueUuid_parser_;
    ::fhir::Address_pskel* valueAddress_parser_;
    ::fhir::Age_pskel* valueAge_parser_;
    ::fhir::Annotation_pskel* valueAnnotation_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::ContactPoint_pskel* valueContactPoint_parser_;
    ::fhir::Count_pskel* valueCount_parser_;
    ::fhir::Distance_pskel* valueDistance_parser_;
    ::fhir::Duration_pskel* valueDuration_parser_;
    ::fhir::HumanName_pskel* valueHumanName_parser_;
    ::fhir::Identifier_pskel* valueIdentifier_parser_;
    ::fhir::Money_pskel* valueMoney_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Ratio_pskel* valueRatio_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::SampledData_pskel* valueSampledData_parser_;
    ::fhir::Signature_pskel* valueSignature_parser_;
    ::fhir::Timing_pskel* valueTiming_parser_;
    ::fhir::ContactDetail_pskel* valueContactDetail_parser_;
    ::fhir::Contributor_pskel* valueContributor_parser_;
    ::fhir::DataRequirement_pskel* valueDataRequirement_parser_;
    ::fhir::Expression_pskel* valueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* valueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* valueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* valueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* valueUsageContext_parser_;
    ::fhir::Dosage_pskel* valueDosage_parser_;
    ::fhir::Meta_pskel* valueMeta_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Example_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Slicing_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    discriminator ();

    virtual void
    description ();

    virtual void
    ordered ();

    virtual void
    rules ();

    virtual void
    post_ElementDefinition_Slicing ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ElementDefinition_Discriminator_pskel& /* discriminator */,
             ::fhir::string_pskel& /* description */,
             ::fhir::boolean_pskel& /* ordered */,
             ::fhir::SlicingRules_pskel& /* rules */);

    // Individual element parsers.
    //
    void
    discriminator_parser (::fhir::ElementDefinition_Discriminator_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    ordered_parser (::fhir::boolean_pskel&);

    void
    rules_parser (::fhir::SlicingRules_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Slicing_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Slicing_pskel* ElementDefinition_Slicing_impl_;
    ElementDefinition_Slicing_pskel (ElementDefinition_Slicing_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ElementDefinition_Discriminator_pskel* discriminator_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::boolean_pskel* ordered_parser_;
    ::fhir::SlicingRules_pskel* rules_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Slicing_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Binding_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    strength ();

    virtual void
    description ();

    virtual void
    valueSet ();

    virtual void
    post_ElementDefinition_Binding ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::BindingStrength_pskel& /* strength */,
             ::fhir::string_pskel& /* description */,
             ::fhir::canonical_pskel& /* valueSet */);

    // Individual element parsers.
    //
    void
    strength_parser (::fhir::BindingStrength_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    valueSet_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Binding_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Binding_pskel* ElementDefinition_Binding_impl_;
    ElementDefinition_Binding_pskel (ElementDefinition_Binding_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::BindingStrength_pskel* strength_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::canonical_pskel* valueSet_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Binding_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ElementDefinition_Discriminator_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    path ();

    virtual void
    post_ElementDefinition_Discriminator ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::DiscriminatorType_pskel& /* type */,
             ::fhir::string_pskel& /* path */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::DiscriminatorType_pskel&);

    void
    path_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ElementDefinition_Discriminator_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ElementDefinition_Discriminator_pskel* ElementDefinition_Discriminator_impl_;
    ElementDefinition_Discriminator_pskel (ElementDefinition_Discriminator_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::DiscriminatorType_pskel* type_parser_;
    ::fhir::string_pskel* path_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ElementDefinition_Discriminator_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PropertyRepresentation_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PropertyRepresentation_list ();

    // Constructor.
    //
    PropertyRepresentation_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    PropertyRepresentation_list_pskel* PropertyRepresentation_list_impl_;
    PropertyRepresentation_list_pskel (PropertyRepresentation_list_pskel*, void*);

    protected:
    static const char* const _xsde_PropertyRepresentation_list_pskel_enums_[5UL];
  };

  class PropertyRepresentation_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_PropertyRepresentation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::PropertyRepresentation_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::PropertyRepresentation_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PropertyRepresentation_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    PropertyRepresentation_pskel* PropertyRepresentation_impl_;
    PropertyRepresentation_pskel (PropertyRepresentation_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::PropertyRepresentation_list_pskel* value_parser_;
  };

  class ConstraintSeverity_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConstraintSeverity_list ();

    // Constructor.
    //
    ConstraintSeverity_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConstraintSeverity_list_pskel* ConstraintSeverity_list_impl_;
    ConstraintSeverity_list_pskel (ConstraintSeverity_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConstraintSeverity_list_pskel_enums_[2UL];
  };

  class ConstraintSeverity_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConstraintSeverity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConstraintSeverity_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConstraintSeverity_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConstraintSeverity_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConstraintSeverity_pskel* ConstraintSeverity_impl_;
    ConstraintSeverity_pskel (ConstraintSeverity_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConstraintSeverity_list_pskel* value_parser_;
  };

  class AggregationMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AggregationMode_list ();

    // Constructor.
    //
    AggregationMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AggregationMode_list_pskel* AggregationMode_list_impl_;
    AggregationMode_list_pskel (AggregationMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_AggregationMode_list_pskel_enums_[3UL];
  };

  class AggregationMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AggregationMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AggregationMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AggregationMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AggregationMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AggregationMode_pskel* AggregationMode_impl_;
    AggregationMode_pskel (AggregationMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AggregationMode_list_pskel* value_parser_;
  };

  class ReferenceVersionRules_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ReferenceVersionRules_list ();

    // Constructor.
    //
    ReferenceVersionRules_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ReferenceVersionRules_list_pskel* ReferenceVersionRules_list_impl_;
    ReferenceVersionRules_list_pskel (ReferenceVersionRules_list_pskel*, void*);

    protected:
    static const char* const _xsde_ReferenceVersionRules_list_pskel_enums_[3UL];
  };

  class ReferenceVersionRules_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ReferenceVersionRules ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ReferenceVersionRules_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ReferenceVersionRules_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ReferenceVersionRules_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ReferenceVersionRules_pskel* ReferenceVersionRules_impl_;
    ReferenceVersionRules_pskel (ReferenceVersionRules_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ReferenceVersionRules_list_pskel* value_parser_;
  };

  class SlicingRules_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SlicingRules_list ();

    // Constructor.
    //
    SlicingRules_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SlicingRules_list_pskel* SlicingRules_list_impl_;
    SlicingRules_list_pskel (SlicingRules_list_pskel*, void*);

    protected:
    static const char* const _xsde_SlicingRules_list_pskel_enums_[3UL];
  };

  class SlicingRules_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SlicingRules ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SlicingRules_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SlicingRules_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SlicingRules_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SlicingRules_pskel* SlicingRules_impl_;
    SlicingRules_pskel (SlicingRules_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SlicingRules_list_pskel* value_parser_;
  };

  class BindingStrength_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_BindingStrength_list ();

    // Constructor.
    //
    BindingStrength_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    BindingStrength_list_pskel* BindingStrength_list_impl_;
    BindingStrength_list_pskel (BindingStrength_list_pskel*, void*);

    protected:
    static const char* const _xsde_BindingStrength_list_pskel_enums_[4UL];
  };

  class BindingStrength_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_BindingStrength ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::BindingStrength_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::BindingStrength_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BindingStrength_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    BindingStrength_pskel* BindingStrength_impl_;
    BindingStrength_pskel (BindingStrength_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::BindingStrength_list_pskel* value_parser_;
  };

  class DiscriminatorType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DiscriminatorType_list ();

    // Constructor.
    //
    DiscriminatorType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DiscriminatorType_list_pskel* DiscriminatorType_list_impl_;
    DiscriminatorType_list_pskel (DiscriminatorType_list_pskel*, void*);

    protected:
    static const char* const _xsde_DiscriminatorType_list_pskel_enums_[5UL];
  };

  class DiscriminatorType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DiscriminatorType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DiscriminatorType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DiscriminatorType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DiscriminatorType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DiscriminatorType_pskel* DiscriminatorType_impl_;
    DiscriminatorType_pskel (DiscriminatorType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DiscriminatorType_list_pskel* value_parser_;
  };

  class Resource_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    id ();

    virtual void
    meta ();

    virtual void
    implicitRules ();

    virtual void
    language ();

    virtual void
    post_Resource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */);

    // Individual element parsers.
    //
    void
    id_parser (::fhir::id_pskel&);

    void
    meta_parser (::fhir::Meta_pskel&);

    void
    implicitRules_parser (::fhir::uri_pskel&);

    void
    language_parser (::fhir::code_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Resource_pskel ();

    // Implementation details.
    //
    protected:
    Resource_pskel* Resource_impl_;
    Resource_pskel (Resource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* id_parser_;
    ::fhir::Meta_pskel* meta_parser_;
    ::fhir::uri_pskel* implicitRules_parser_;
    ::fhir::code_pskel* language_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Resource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DomainResource_pskel: public ::fhir::Resource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    text ();

    virtual void
    contained ();

    virtual void
    extension ();

    virtual void
    modifierExtension ();

    virtual void
    post_DomainResource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */);

    // Individual element parsers.
    //
    void
    text_parser (::fhir::Narrative_pskel&);

    void
    contained_parser (::fhir::ResourceContainer_pskel&);

    void
    extension_parser (::fhir::Extension_pskel&);

    void
    modifierExtension_parser (::fhir::Extension_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DomainResource_pskel (::fhir::Resource_pskel* tiein);

    // Implementation details.
    //
    protected:
    DomainResource_pskel* DomainResource_impl_;
    DomainResource_pskel (DomainResource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Narrative_pskel* text_parser_;
    ::fhir::ResourceContainer_pskel* contained_parser_;
    ::fhir::Extension_pskel* extension_parser_;
    ::fhir::Extension_pskel* modifierExtension_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DomainResource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PublicationStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PublicationStatus_list ();

    // Constructor.
    //
    PublicationStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    PublicationStatus_list_pskel* PublicationStatus_list_impl_;
    PublicationStatus_list_pskel (PublicationStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_PublicationStatus_list_pskel_enums_[4UL];
  };

  class PublicationStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_PublicationStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::PublicationStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::PublicationStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PublicationStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    PublicationStatus_pskel* PublicationStatus_impl_;
    PublicationStatus_pskel (PublicationStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::PublicationStatus_list_pskel* value_parser_;
  };

  class SearchParamType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SearchParamType_list ();

    // Constructor.
    //
    SearchParamType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchParamType_list_pskel* SearchParamType_list_impl_;
    SearchParamType_list_pskel (SearchParamType_list_pskel*, void*);

    protected:
    static const char* const _xsde_SearchParamType_list_pskel_enums_[9UL];
  };

  class SearchParamType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SearchParamType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SearchParamType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SearchParamType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SearchParamType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchParamType_pskel* SearchParamType_impl_;
    SearchParamType_pskel (SearchParamType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SearchParamType_list_pskel* value_parser_;
  };

  class AdministrativeGender_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AdministrativeGender_list ();

    // Constructor.
    //
    AdministrativeGender_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AdministrativeGender_list_pskel* AdministrativeGender_list_impl_;
    AdministrativeGender_list_pskel (AdministrativeGender_list_pskel*, void*);

    protected:
    static const char* const _xsde_AdministrativeGender_list_pskel_enums_[4UL];
  };

  class AdministrativeGender_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AdministrativeGender ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AdministrativeGender_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AdministrativeGender_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AdministrativeGender_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AdministrativeGender_pskel* AdministrativeGender_impl_;
    AdministrativeGender_pskel (AdministrativeGender_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AdministrativeGender_list_pskel* value_parser_;
  };

  class FHIRVersion_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FHIRVersion_list ();

    // Constructor.
    //
    FHIRVersion_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    FHIRVersion_list_pskel* FHIRVersion_list_impl_;
    FHIRVersion_list_pskel (FHIRVersion_list_pskel*, void*);

    protected:
    static const char* const _xsde_FHIRVersion_list_pskel_enums_[22UL];
  };

  class FHIRVersion_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_FHIRVersion ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::FHIRVersion_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::FHIRVersion_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FHIRVersion_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    FHIRVersion_pskel* FHIRVersion_impl_;
    FHIRVersion_pskel (FHIRVersion_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::FHIRVersion_list_pskel* value_parser_;
  };

  class NoteType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_NoteType_list ();

    // Constructor.
    //
    NoteType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    NoteType_list_pskel* NoteType_list_impl_;
    NoteType_list_pskel (NoteType_list_pskel*, void*);

    protected:
    static const char* const _xsde_NoteType_list_pskel_enums_[3UL];
  };

  class NoteType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_NoteType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NoteType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::NoteType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NoteType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    NoteType_pskel* NoteType_impl_;
    NoteType_pskel (NoteType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::NoteType_list_pskel* value_parser_;
  };

  class RemittanceOutcome_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RemittanceOutcome_list ();

    // Constructor.
    //
    RemittanceOutcome_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RemittanceOutcome_list_pskel* RemittanceOutcome_list_impl_;
    RemittanceOutcome_list_pskel (RemittanceOutcome_list_pskel*, void*);

    protected:
    static const char* const _xsde_RemittanceOutcome_list_pskel_enums_[4UL];
  };

  class RemittanceOutcome_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RemittanceOutcome ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RemittanceOutcome_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RemittanceOutcome_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RemittanceOutcome_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RemittanceOutcome_pskel* RemittanceOutcome_impl_;
    RemittanceOutcome_pskel (RemittanceOutcome_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RemittanceOutcome_list_pskel* value_parser_;
  };

  class ConceptMapEquivalence_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConceptMapEquivalence_list ();

    // Constructor.
    //
    ConceptMapEquivalence_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMapEquivalence_list_pskel* ConceptMapEquivalence_list_impl_;
    ConceptMapEquivalence_list_pskel (ConceptMapEquivalence_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConceptMapEquivalence_list_pskel_enums_[10UL];
  };

  class ConceptMapEquivalence_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConceptMapEquivalence ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConceptMapEquivalence_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConceptMapEquivalence_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConceptMapEquivalence_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMapEquivalence_pskel* ConceptMapEquivalence_impl_;
    ConceptMapEquivalence_pskel (ConceptMapEquivalence_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConceptMapEquivalence_list_pskel* value_parser_;
  };

  class DocumentReferenceStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DocumentReferenceStatus_list ();

    // Constructor.
    //
    DocumentReferenceStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentReferenceStatus_list_pskel* DocumentReferenceStatus_list_impl_;
    DocumentReferenceStatus_list_pskel (DocumentReferenceStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_DocumentReferenceStatus_list_pskel_enums_[3UL];
  };

  class DocumentReferenceStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DocumentReferenceStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DocumentReferenceStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DocumentReferenceStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentReferenceStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentReferenceStatus_pskel* DocumentReferenceStatus_impl_;
    DocumentReferenceStatus_pskel (DocumentReferenceStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DocumentReferenceStatus_list_pskel* value_parser_;
  };

  class Account_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    name ();

    virtual void
    subject ();

    virtual void
    servicePeriod ();

    virtual void
    coverage ();

    virtual void
    owner ();

    virtual void
    description ();

    virtual void
    guarantor ();

    virtual void
    partOf ();

    virtual void
    post_Account ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::AccountStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Period_pskel& /* servicePeriod */,
             ::fhir::Account_Coverage_pskel& /* coverage */,
             ::fhir::Reference_pskel& /* owner */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Account_Guarantor_pskel& /* guarantor */,
             ::fhir::Reference_pskel& /* partOf */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::AccountStatus_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    servicePeriod_parser (::fhir::Period_pskel&);

    void
    coverage_parser (::fhir::Account_Coverage_pskel&);

    void
    owner_parser (::fhir::Reference_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    guarantor_parser (::fhir::Account_Guarantor_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Account_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Account_pskel* Account_impl_;
    Account_pskel (Account_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::AccountStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Period_pskel* servicePeriod_parser_;
    ::fhir::Account_Coverage_pskel* coverage_parser_;
    ::fhir::Reference_pskel* owner_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Account_Guarantor_pskel* guarantor_parser_;
    ::fhir::Reference_pskel* partOf_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Account_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Account_Coverage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    coverage ();

    virtual void
    priority ();

    virtual void
    post_Account_Coverage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* coverage */,
             ::fhir::positiveInt_pskel& /* priority */);

    // Individual element parsers.
    //
    void
    coverage_parser (::fhir::Reference_pskel&);

    void
    priority_parser (::fhir::positiveInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Account_Coverage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Account_Coverage_pskel* Account_Coverage_impl_;
    Account_Coverage_pskel (Account_Coverage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* coverage_parser_;
    ::fhir::positiveInt_pskel* priority_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Account_Coverage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Account_Guarantor_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    party ();

    virtual void
    onHold ();

    virtual void
    period ();

    virtual void
    post_Account_Guarantor ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* party */,
             ::fhir::boolean_pskel& /* onHold */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    party_parser (::fhir::Reference_pskel&);

    void
    onHold_parser (::fhir::boolean_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Account_Guarantor_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Account_Guarantor_pskel* Account_Guarantor_impl_;
    Account_Guarantor_pskel (Account_Guarantor_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* party_parser_;
    ::fhir::boolean_pskel* onHold_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Account_Guarantor_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AccountStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AccountStatus_list ();

    // Constructor.
    //
    AccountStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AccountStatus_list_pskel* AccountStatus_list_impl_;
    AccountStatus_list_pskel (AccountStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_AccountStatus_list_pskel_enums_[5UL];
  };

  class AccountStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AccountStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AccountStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AccountStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AccountStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AccountStatus_pskel* AccountStatus_impl_;
    AccountStatus_pskel (AccountStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AccountStatus_list_pskel* value_parser_;
  };

  class ActivityDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    subtitle ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    usage ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    library ();

    virtual void
    kind ();

    virtual void
    profile ();

    virtual void
    code ();

    virtual void
    intent ();

    virtual void
    priority ();

    virtual void
    doNotPerform ();

    virtual void
    timingTiming ();

    virtual void
    timingDateTime ();

    virtual void
    timingAge ();

    virtual void
    timingPeriod ();

    virtual void
    timingRange ();

    virtual void
    timingDuration ();

    virtual void
    location ();

    virtual void
    participant ();

    virtual void
    productReference ();

    virtual void
    productCodeableConcept ();

    virtual void
    quantity ();

    virtual void
    dosage ();

    virtual void
    bodySite ();

    virtual void
    specimenRequirement ();

    virtual void
    observationRequirement ();

    virtual void
    observationResultRequirement ();

    virtual void
    transform ();

    virtual void
    dynamicValue ();

    virtual void
    post_ActivityDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::string_pskel& /* usage */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::canonical_pskel& /* library */,
             ::fhir::RequestResourceType_pskel& /* kind */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::RequestIntent_pskel& /* intent */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::boolean_pskel& /* doNotPerform */,
             ::fhir::Timing_pskel& /* timingTiming */,
             ::fhir::dateTime_pskel& /* timingDateTime */,
             ::fhir::Age_pskel& /* timingAge */,
             ::fhir::Period_pskel& /* timingPeriod */,
             ::fhir::Range_pskel& /* timingRange */,
             ::fhir::Duration_pskel& /* timingDuration */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::ActivityDefinition_Participant_pskel& /* participant */,
             ::fhir::Reference_pskel& /* productReference */,
             ::fhir::CodeableConcept_pskel& /* productCodeableConcept */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Dosage_pskel& /* dosage */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::Reference_pskel& /* specimenRequirement */,
             ::fhir::Reference_pskel& /* observationRequirement */,
             ::fhir::Reference_pskel& /* observationResultRequirement */,
             ::fhir::canonical_pskel& /* transform */,
             ::fhir::ActivityDefinition_DynamicValue_pskel& /* dynamicValue */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    usage_parser (::fhir::string_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    library_parser (::fhir::canonical_pskel&);

    void
    kind_parser (::fhir::RequestResourceType_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    intent_parser (::fhir::RequestIntent_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    doNotPerform_parser (::fhir::boolean_pskel&);

    void
    timingTiming_parser (::fhir::Timing_pskel&);

    void
    timingDateTime_parser (::fhir::dateTime_pskel&);

    void
    timingAge_parser (::fhir::Age_pskel&);

    void
    timingPeriod_parser (::fhir::Period_pskel&);

    void
    timingRange_parser (::fhir::Range_pskel&);

    void
    timingDuration_parser (::fhir::Duration_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    participant_parser (::fhir::ActivityDefinition_Participant_pskel&);

    void
    productReference_parser (::fhir::Reference_pskel&);

    void
    productCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    dosage_parser (::fhir::Dosage_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    specimenRequirement_parser (::fhir::Reference_pskel&);

    void
    observationRequirement_parser (::fhir::Reference_pskel&);

    void
    observationResultRequirement_parser (::fhir::Reference_pskel&);

    void
    transform_parser (::fhir::canonical_pskel&);

    void
    dynamicValue_parser (::fhir::ActivityDefinition_DynamicValue_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActivityDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActivityDefinition_pskel* ActivityDefinition_impl_;
    ActivityDefinition_pskel (ActivityDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::string_pskel* usage_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::canonical_pskel* library_parser_;
    ::fhir::RequestResourceType_pskel* kind_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::RequestIntent_pskel* intent_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::boolean_pskel* doNotPerform_parser_;
    ::fhir::Timing_pskel* timingTiming_parser_;
    ::fhir::dateTime_pskel* timingDateTime_parser_;
    ::fhir::Age_pskel* timingAge_parser_;
    ::fhir::Period_pskel* timingPeriod_parser_;
    ::fhir::Range_pskel* timingRange_parser_;
    ::fhir::Duration_pskel* timingDuration_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::ActivityDefinition_Participant_pskel* participant_parser_;
    ::fhir::Reference_pskel* productReference_parser_;
    ::fhir::CodeableConcept_pskel* productCodeableConcept_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Dosage_pskel* dosage_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::Reference_pskel* specimenRequirement_parser_;
    ::fhir::Reference_pskel* observationRequirement_parser_;
    ::fhir::Reference_pskel* observationResultRequirement_parser_;
    ::fhir::canonical_pskel* transform_parser_;
    ::fhir::ActivityDefinition_DynamicValue_pskel* dynamicValue_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ActivityDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ActivityDefinition_Participant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    role ();

    virtual void
    post_ActivityDefinition_Participant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ActionParticipantType_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* role */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::ActionParticipantType_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActivityDefinition_Participant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActivityDefinition_Participant_pskel* ActivityDefinition_Participant_impl_;
    ActivityDefinition_Participant_pskel (ActivityDefinition_Participant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ActionParticipantType_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ActivityDefinition_Participant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ActivityDefinition_DynamicValue_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    expression ();

    virtual void
    post_ActivityDefinition_DynamicValue ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::Expression_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    expression_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActivityDefinition_DynamicValue_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActivityDefinition_DynamicValue_pskel* ActivityDefinition_DynamicValue_impl_;
    ActivityDefinition_DynamicValue_pskel (ActivityDefinition_DynamicValue_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::Expression_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ActivityDefinition_DynamicValue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ActionParticipantType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionParticipantType_list ();

    // Constructor.
    //
    ActionParticipantType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionParticipantType_list_pskel* ActionParticipantType_list_impl_;
    ActionParticipantType_list_pskel (ActionParticipantType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionParticipantType_list_pskel_enums_[4UL];
  };

  class ActionParticipantType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionParticipantType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionParticipantType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionParticipantType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionParticipantType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionParticipantType_pskel* ActionParticipantType_impl_;
    ActionParticipantType_pskel (ActionParticipantType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionParticipantType_list_pskel* value_parser_;
  };

  class RequestIntent_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RequestIntent_list ();

    // Constructor.
    //
    RequestIntent_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestIntent_list_pskel* RequestIntent_list_impl_;
    RequestIntent_list_pskel (RequestIntent_list_pskel*, void*);

    protected:
    static const char* const _xsde_RequestIntent_list_pskel_enums_[9UL];
  };

  class RequestIntent_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RequestIntent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RequestIntent_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RequestIntent_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestIntent_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestIntent_pskel* RequestIntent_impl_;
    RequestIntent_pskel (RequestIntent_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RequestIntent_list_pskel* value_parser_;
  };

  class RequestResourceType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RequestResourceType_list ();

    // Constructor.
    //
    RequestResourceType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestResourceType_list_pskel* RequestResourceType_list_impl_;
    RequestResourceType_list_pskel (RequestResourceType_list_pskel*, void*);

    protected:
    static const char* const _xsde_RequestResourceType_list_pskel_enums_[15UL];
  };

  class RequestResourceType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RequestResourceType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RequestResourceType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RequestResourceType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestResourceType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestResourceType_pskel* RequestResourceType_impl_;
    RequestResourceType_pskel (RequestResourceType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RequestResourceType_list_pskel* value_parser_;
  };

  class RequestPriority_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RequestPriority_list ();

    // Constructor.
    //
    RequestPriority_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestPriority_list_pskel* RequestPriority_list_impl_;
    RequestPriority_list_pskel (RequestPriority_list_pskel*, void*);

    protected:
    static const char* const _xsde_RequestPriority_list_pskel_enums_[4UL];
  };

  class RequestPriority_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RequestPriority ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RequestPriority_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RequestPriority_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestPriority_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestPriority_pskel* RequestPriority_impl_;
    RequestPriority_pskel (RequestPriority_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RequestPriority_list_pskel* value_parser_;
  };

  class AdverseEvent_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    actuality ();

    virtual void
    category ();

    virtual void
    event ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    date ();

    virtual void
    detected ();

    virtual void
    recordedDate ();

    virtual void
    resultingCondition ();

    virtual void
    location ();

    virtual void
    seriousness ();

    virtual void
    severity ();

    virtual void
    outcome ();

    virtual void
    recorder ();

    virtual void
    contributor ();

    virtual void
    suspectEntity ();

    virtual void
    subjectMedicalHistory ();

    virtual void
    referenceDocument ();

    virtual void
    study ();

    virtual void
    post_AdverseEvent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::AdverseEventActuality_pskel& /* actuality */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* event */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::dateTime_pskel& /* detected */,
             ::fhir::dateTime_pskel& /* recordedDate */,
             ::fhir::Reference_pskel& /* resultingCondition */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::CodeableConcept_pskel& /* seriousness */,
             ::fhir::CodeableConcept_pskel& /* severity */,
             ::fhir::CodeableConcept_pskel& /* outcome */,
             ::fhir::Reference_pskel& /* recorder */,
             ::fhir::Reference_pskel& /* contributor */,
             ::fhir::AdverseEvent_SuspectEntity_pskel& /* suspectEntity */,
             ::fhir::Reference_pskel& /* subjectMedicalHistory */,
             ::fhir::Reference_pskel& /* referenceDocument */,
             ::fhir::Reference_pskel& /* study */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    actuality_parser (::fhir::AdverseEventActuality_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    event_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    detected_parser (::fhir::dateTime_pskel&);

    void
    recordedDate_parser (::fhir::dateTime_pskel&);

    void
    resultingCondition_parser (::fhir::Reference_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    seriousness_parser (::fhir::CodeableConcept_pskel&);

    void
    severity_parser (::fhir::CodeableConcept_pskel&);

    void
    outcome_parser (::fhir::CodeableConcept_pskel&);

    void
    recorder_parser (::fhir::Reference_pskel&);

    void
    contributor_parser (::fhir::Reference_pskel&);

    void
    suspectEntity_parser (::fhir::AdverseEvent_SuspectEntity_pskel&);

    void
    subjectMedicalHistory_parser (::fhir::Reference_pskel&);

    void
    referenceDocument_parser (::fhir::Reference_pskel&);

    void
    study_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AdverseEvent_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    AdverseEvent_pskel* AdverseEvent_impl_;
    AdverseEvent_pskel (AdverseEvent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::AdverseEventActuality_pskel* actuality_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* event_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::dateTime_pskel* detected_parser_;
    ::fhir::dateTime_pskel* recordedDate_parser_;
    ::fhir::Reference_pskel* resultingCondition_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::CodeableConcept_pskel* seriousness_parser_;
    ::fhir::CodeableConcept_pskel* severity_parser_;
    ::fhir::CodeableConcept_pskel* outcome_parser_;
    ::fhir::Reference_pskel* recorder_parser_;
    ::fhir::Reference_pskel* contributor_parser_;
    ::fhir::AdverseEvent_SuspectEntity_pskel* suspectEntity_parser_;
    ::fhir::Reference_pskel* subjectMedicalHistory_parser_;
    ::fhir::Reference_pskel* referenceDocument_parser_;
    ::fhir::Reference_pskel* study_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AdverseEvent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AdverseEvent_SuspectEntity_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    instance ();

    virtual void
    causality ();

    virtual void
    post_AdverseEvent_SuspectEntity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* instance */,
             ::fhir::AdverseEvent_Causality_pskel& /* causality */);

    // Individual element parsers.
    //
    void
    instance_parser (::fhir::Reference_pskel&);

    void
    causality_parser (::fhir::AdverseEvent_Causality_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AdverseEvent_SuspectEntity_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AdverseEvent_SuspectEntity_pskel* AdverseEvent_SuspectEntity_impl_;
    AdverseEvent_SuspectEntity_pskel (AdverseEvent_SuspectEntity_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* instance_parser_;
    ::fhir::AdverseEvent_Causality_pskel* causality_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AdverseEvent_SuspectEntity_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AdverseEvent_Causality_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    assessment ();

    virtual void
    productRelatedness ();

    virtual void
    author ();

    virtual void
    method ();

    virtual void
    post_AdverseEvent_Causality ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* assessment */,
             ::fhir::string_pskel& /* productRelatedness */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::CodeableConcept_pskel& /* method */);

    // Individual element parsers.
    //
    void
    assessment_parser (::fhir::CodeableConcept_pskel&);

    void
    productRelatedness_parser (::fhir::string_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    method_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AdverseEvent_Causality_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AdverseEvent_Causality_pskel* AdverseEvent_Causality_impl_;
    AdverseEvent_Causality_pskel (AdverseEvent_Causality_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* assessment_parser_;
    ::fhir::string_pskel* productRelatedness_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::CodeableConcept_pskel* method_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AdverseEvent_Causality_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AdverseEventActuality_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AdverseEventActuality_list ();

    // Constructor.
    //
    AdverseEventActuality_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AdverseEventActuality_list_pskel* AdverseEventActuality_list_impl_;
    AdverseEventActuality_list_pskel (AdverseEventActuality_list_pskel*, void*);

    protected:
    static const char* const _xsde_AdverseEventActuality_list_pskel_enums_[2UL];
  };

  class AdverseEventActuality_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AdverseEventActuality ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AdverseEventActuality_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AdverseEventActuality_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AdverseEventActuality_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AdverseEventActuality_pskel* AdverseEventActuality_impl_;
    AdverseEventActuality_pskel (AdverseEventActuality_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AdverseEventActuality_list_pskel* value_parser_;
  };

  class AllergyIntolerance_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    clinicalStatus ();

    virtual void
    verificationStatus ();

    virtual void
    type ();

    virtual void
    category ();

    virtual void
    criticality ();

    virtual void
    code ();

    virtual void
    patient ();

    virtual void
    encounter ();

    virtual void
    onsetDateTime ();

    virtual void
    onsetAge ();

    virtual void
    onsetPeriod ();

    virtual void
    onsetRange ();

    virtual void
    onsetString ();

    virtual void
    recordedDate ();

    virtual void
    recorder ();

    virtual void
    asserter ();

    virtual void
    lastOccurrence ();

    virtual void
    note ();

    virtual void
    reaction ();

    virtual void
    post_AllergyIntolerance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* clinicalStatus */,
             ::fhir::CodeableConcept_pskel& /* verificationStatus */,
             ::fhir::AllergyIntoleranceType_pskel& /* type */,
             ::fhir::AllergyIntoleranceCategory_pskel& /* category */,
             ::fhir::AllergyIntoleranceCriticality_pskel& /* criticality */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* onsetDateTime */,
             ::fhir::Age_pskel& /* onsetAge */,
             ::fhir::Period_pskel& /* onsetPeriod */,
             ::fhir::Range_pskel& /* onsetRange */,
             ::fhir::string_pskel& /* onsetString */,
             ::fhir::dateTime_pskel& /* recordedDate */,
             ::fhir::Reference_pskel& /* recorder */,
             ::fhir::Reference_pskel& /* asserter */,
             ::fhir::dateTime_pskel& /* lastOccurrence */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::AllergyIntolerance_Reaction_pskel& /* reaction */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    clinicalStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    verificationStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    type_parser (::fhir::AllergyIntoleranceType_pskel&);

    void
    category_parser (::fhir::AllergyIntoleranceCategory_pskel&);

    void
    criticality_parser (::fhir::AllergyIntoleranceCriticality_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    onsetDateTime_parser (::fhir::dateTime_pskel&);

    void
    onsetAge_parser (::fhir::Age_pskel&);

    void
    onsetPeriod_parser (::fhir::Period_pskel&);

    void
    onsetRange_parser (::fhir::Range_pskel&);

    void
    onsetString_parser (::fhir::string_pskel&);

    void
    recordedDate_parser (::fhir::dateTime_pskel&);

    void
    recorder_parser (::fhir::Reference_pskel&);

    void
    asserter_parser (::fhir::Reference_pskel&);

    void
    lastOccurrence_parser (::fhir::dateTime_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    reaction_parser (::fhir::AllergyIntolerance_Reaction_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AllergyIntolerance_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    AllergyIntolerance_pskel* AllergyIntolerance_impl_;
    AllergyIntolerance_pskel (AllergyIntolerance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* clinicalStatus_parser_;
    ::fhir::CodeableConcept_pskel* verificationStatus_parser_;
    ::fhir::AllergyIntoleranceType_pskel* type_parser_;
    ::fhir::AllergyIntoleranceCategory_pskel* category_parser_;
    ::fhir::AllergyIntoleranceCriticality_pskel* criticality_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* onsetDateTime_parser_;
    ::fhir::Age_pskel* onsetAge_parser_;
    ::fhir::Period_pskel* onsetPeriod_parser_;
    ::fhir::Range_pskel* onsetRange_parser_;
    ::fhir::string_pskel* onsetString_parser_;
    ::fhir::dateTime_pskel* recordedDate_parser_;
    ::fhir::Reference_pskel* recorder_parser_;
    ::fhir::Reference_pskel* asserter_parser_;
    ::fhir::dateTime_pskel* lastOccurrence_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::AllergyIntolerance_Reaction_pskel* reaction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AllergyIntolerance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AllergyIntolerance_Reaction_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    substance ();

    virtual void
    manifestation ();

    virtual void
    description ();

    virtual void
    onset ();

    virtual void
    severity ();

    virtual void
    exposureRoute ();

    virtual void
    note ();

    virtual void
    post_AllergyIntolerance_Reaction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* substance */,
             ::fhir::CodeableConcept_pskel& /* manifestation */,
             ::fhir::string_pskel& /* description */,
             ::fhir::dateTime_pskel& /* onset */,
             ::fhir::AllergyIntoleranceSeverity_pskel& /* severity */,
             ::fhir::CodeableConcept_pskel& /* exposureRoute */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    substance_parser (::fhir::CodeableConcept_pskel&);

    void
    manifestation_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    onset_parser (::fhir::dateTime_pskel&);

    void
    severity_parser (::fhir::AllergyIntoleranceSeverity_pskel&);

    void
    exposureRoute_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AllergyIntolerance_Reaction_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AllergyIntolerance_Reaction_pskel* AllergyIntolerance_Reaction_impl_;
    AllergyIntolerance_Reaction_pskel (AllergyIntolerance_Reaction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* substance_parser_;
    ::fhir::CodeableConcept_pskel* manifestation_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::dateTime_pskel* onset_parser_;
    ::fhir::AllergyIntoleranceSeverity_pskel* severity_parser_;
    ::fhir::CodeableConcept_pskel* exposureRoute_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AllergyIntolerance_Reaction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AllergyIntoleranceCriticality_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AllergyIntoleranceCriticality_list ();

    // Constructor.
    //
    AllergyIntoleranceCriticality_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AllergyIntoleranceCriticality_list_pskel* AllergyIntoleranceCriticality_list_impl_;
    AllergyIntoleranceCriticality_list_pskel (AllergyIntoleranceCriticality_list_pskel*, void*);

    protected:
    static const char* const _xsde_AllergyIntoleranceCriticality_list_pskel_enums_[3UL];
  };

  class AllergyIntoleranceCriticality_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AllergyIntoleranceCriticality ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AllergyIntoleranceCriticality_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AllergyIntoleranceCriticality_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AllergyIntoleranceCriticality_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AllergyIntoleranceCriticality_pskel* AllergyIntoleranceCriticality_impl_;
    AllergyIntoleranceCriticality_pskel (AllergyIntoleranceCriticality_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AllergyIntoleranceCriticality_list_pskel* value_parser_;
  };

  class AllergyIntoleranceType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AllergyIntoleranceType_list ();

    // Constructor.
    //
    AllergyIntoleranceType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AllergyIntoleranceType_list_pskel* AllergyIntoleranceType_list_impl_;
    AllergyIntoleranceType_list_pskel (AllergyIntoleranceType_list_pskel*, void*);

    protected:
    static const char* const _xsde_AllergyIntoleranceType_list_pskel_enums_[2UL];
  };

  class AllergyIntoleranceType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AllergyIntoleranceType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AllergyIntoleranceType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AllergyIntoleranceType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AllergyIntoleranceType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AllergyIntoleranceType_pskel* AllergyIntoleranceType_impl_;
    AllergyIntoleranceType_pskel (AllergyIntoleranceType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AllergyIntoleranceType_list_pskel* value_parser_;
  };

  class AllergyIntoleranceCategory_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AllergyIntoleranceCategory_list ();

    // Constructor.
    //
    AllergyIntoleranceCategory_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AllergyIntoleranceCategory_list_pskel* AllergyIntoleranceCategory_list_impl_;
    AllergyIntoleranceCategory_list_pskel (AllergyIntoleranceCategory_list_pskel*, void*);

    protected:
    static const char* const _xsde_AllergyIntoleranceCategory_list_pskel_enums_[4UL];
  };

  class AllergyIntoleranceCategory_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AllergyIntoleranceCategory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AllergyIntoleranceCategory_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AllergyIntoleranceCategory_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AllergyIntoleranceCategory_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AllergyIntoleranceCategory_pskel* AllergyIntoleranceCategory_impl_;
    AllergyIntoleranceCategory_pskel (AllergyIntoleranceCategory_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AllergyIntoleranceCategory_list_pskel* value_parser_;
  };

  class AllergyIntoleranceSeverity_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AllergyIntoleranceSeverity_list ();

    // Constructor.
    //
    AllergyIntoleranceSeverity_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AllergyIntoleranceSeverity_list_pskel* AllergyIntoleranceSeverity_list_impl_;
    AllergyIntoleranceSeverity_list_pskel (AllergyIntoleranceSeverity_list_pskel*, void*);

    protected:
    static const char* const _xsde_AllergyIntoleranceSeverity_list_pskel_enums_[3UL];
  };

  class AllergyIntoleranceSeverity_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AllergyIntoleranceSeverity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AllergyIntoleranceSeverity_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AllergyIntoleranceSeverity_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AllergyIntoleranceSeverity_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AllergyIntoleranceSeverity_pskel* AllergyIntoleranceSeverity_impl_;
    AllergyIntoleranceSeverity_pskel (AllergyIntoleranceSeverity_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AllergyIntoleranceSeverity_list_pskel* value_parser_;
  };

  class Appointment_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    cancelationReason ();

    virtual void
    serviceCategory ();

    virtual void
    serviceType ();

    virtual void
    specialty ();

    virtual void
    appointmentType ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    priority ();

    virtual void
    description ();

    virtual void
    supportingInformation ();

    virtual void
    start ();

    virtual void
    end ();

    virtual void
    minutesDuration ();

    virtual void
    slot ();

    virtual void
    created ();

    virtual void
    comment ();

    virtual void
    patientInstruction ();

    virtual void
    basedOn ();

    virtual void
    participant ();

    virtual void
    requestedPeriod ();

    virtual void
    post_Appointment ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::AppointmentStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* cancelationReason */,
             ::fhir::CodeableConcept_pskel& /* serviceCategory */,
             ::fhir::CodeableConcept_pskel& /* serviceType */,
             ::fhir::CodeableConcept_pskel& /* specialty */,
             ::fhir::CodeableConcept_pskel& /* appointmentType */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::unsignedInt_pskel& /* priority */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Reference_pskel& /* supportingInformation */,
             ::fhir::instant_pskel& /* start */,
             ::fhir::instant_pskel& /* end */,
             ::fhir::positiveInt_pskel& /* minutesDuration */,
             ::fhir::Reference_pskel& /* slot */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::string_pskel& /* patientInstruction */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Appointment_Participant_pskel& /* participant */,
             ::fhir::Period_pskel& /* requestedPeriod */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::AppointmentStatus_pskel&);

    void
    cancelationReason_parser (::fhir::CodeableConcept_pskel&);

    void
    serviceCategory_parser (::fhir::CodeableConcept_pskel&);

    void
    serviceType_parser (::fhir::CodeableConcept_pskel&);

    void
    specialty_parser (::fhir::CodeableConcept_pskel&);

    void
    appointmentType_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    priority_parser (::fhir::unsignedInt_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    supportingInformation_parser (::fhir::Reference_pskel&);

    void
    start_parser (::fhir::instant_pskel&);

    void
    end_parser (::fhir::instant_pskel&);

    void
    minutesDuration_parser (::fhir::positiveInt_pskel&);

    void
    slot_parser (::fhir::Reference_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    void
    patientInstruction_parser (::fhir::string_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    participant_parser (::fhir::Appointment_Participant_pskel&);

    void
    requestedPeriod_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Appointment_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Appointment_pskel* Appointment_impl_;
    Appointment_pskel (Appointment_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::AppointmentStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* cancelationReason_parser_;
    ::fhir::CodeableConcept_pskel* serviceCategory_parser_;
    ::fhir::CodeableConcept_pskel* serviceType_parser_;
    ::fhir::CodeableConcept_pskel* specialty_parser_;
    ::fhir::CodeableConcept_pskel* appointmentType_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::unsignedInt_pskel* priority_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Reference_pskel* supportingInformation_parser_;
    ::fhir::instant_pskel* start_parser_;
    ::fhir::instant_pskel* end_parser_;
    ::fhir::positiveInt_pskel* minutesDuration_parser_;
    ::fhir::Reference_pskel* slot_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::string_pskel* comment_parser_;
    ::fhir::string_pskel* patientInstruction_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Appointment_Participant_pskel* participant_parser_;
    ::fhir::Period_pskel* requestedPeriod_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Appointment_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Appointment_Participant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    actor ();

    virtual void
    required ();

    virtual void
    status ();

    virtual void
    period ();

    virtual void
    post_Appointment_Participant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* actor */,
             ::fhir::ParticipantRequired_pskel& /* required */,
             ::fhir::ParticipationStatus_pskel& /* status */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    void
    required_parser (::fhir::ParticipantRequired_pskel&);

    void
    status_parser (::fhir::ParticipationStatus_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Appointment_Participant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Appointment_Participant_pskel* Appointment_Participant_impl_;
    Appointment_Participant_pskel (Appointment_Participant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* actor_parser_;
    ::fhir::ParticipantRequired_pskel* required_parser_;
    ::fhir::ParticipationStatus_pskel* status_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Appointment_Participant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ParticipantRequired_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ParticipantRequired_list ();

    // Constructor.
    //
    ParticipantRequired_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ParticipantRequired_list_pskel* ParticipantRequired_list_impl_;
    ParticipantRequired_list_pskel (ParticipantRequired_list_pskel*, void*);

    protected:
    static const char* const _xsde_ParticipantRequired_list_pskel_enums_[3UL];
  };

  class ParticipantRequired_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ParticipantRequired ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ParticipantRequired_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ParticipantRequired_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ParticipantRequired_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ParticipantRequired_pskel* ParticipantRequired_impl_;
    ParticipantRequired_pskel (ParticipantRequired_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ParticipantRequired_list_pskel* value_parser_;
  };

  class AppointmentStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AppointmentStatus_list ();

    // Constructor.
    //
    AppointmentStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AppointmentStatus_list_pskel* AppointmentStatus_list_impl_;
    AppointmentStatus_list_pskel (AppointmentStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_AppointmentStatus_list_pskel_enums_[10UL];
  };

  class AppointmentStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AppointmentStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AppointmentStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AppointmentStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AppointmentStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AppointmentStatus_pskel* AppointmentStatus_impl_;
    AppointmentStatus_pskel (AppointmentStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AppointmentStatus_list_pskel* value_parser_;
  };

  class ParticipationStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ParticipationStatus_list ();

    // Constructor.
    //
    ParticipationStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ParticipationStatus_list_pskel* ParticipationStatus_list_impl_;
    ParticipationStatus_list_pskel (ParticipationStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ParticipationStatus_list_pskel_enums_[4UL];
  };

  class ParticipationStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ParticipationStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ParticipationStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ParticipationStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ParticipationStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ParticipationStatus_pskel* ParticipationStatus_impl_;
    ParticipationStatus_pskel (ParticipationStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ParticipationStatus_list_pskel* value_parser_;
  };

  class AppointmentResponse_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    appointment ();

    virtual void
    start ();

    virtual void
    end ();

    virtual void
    participantType ();

    virtual void
    actor ();

    virtual void
    participantStatus ();

    virtual void
    comment ();

    virtual void
    post_AppointmentResponse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* appointment */,
             ::fhir::instant_pskel& /* start */,
             ::fhir::instant_pskel& /* end */,
             ::fhir::CodeableConcept_pskel& /* participantType */,
             ::fhir::Reference_pskel& /* actor */,
             ::fhir::ParticipationStatus_pskel& /* participantStatus */,
             ::fhir::string_pskel& /* comment */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    appointment_parser (::fhir::Reference_pskel&);

    void
    start_parser (::fhir::instant_pskel&);

    void
    end_parser (::fhir::instant_pskel&);

    void
    participantType_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    void
    participantStatus_parser (::fhir::ParticipationStatus_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AppointmentResponse_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    AppointmentResponse_pskel* AppointmentResponse_impl_;
    AppointmentResponse_pskel (AppointmentResponse_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* appointment_parser_;
    ::fhir::instant_pskel* start_parser_;
    ::fhir::instant_pskel* end_parser_;
    ::fhir::CodeableConcept_pskel* participantType_parser_;
    ::fhir::Reference_pskel* actor_parser_;
    ::fhir::ParticipationStatus_pskel* participantStatus_parser_;
    ::fhir::string_pskel* comment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AppointmentResponse_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    subtype ();

    virtual void
    action ();

    virtual void
    period ();

    virtual void
    recorded ();

    virtual void
    outcome ();

    virtual void
    outcomeDesc ();

    virtual void
    purposeOfEvent ();

    virtual void
    agent ();

    virtual void
    source ();

    virtual void
    entity ();

    virtual void
    post_AuditEvent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* type */,
             ::fhir::Coding_pskel& /* subtype */,
             ::fhir::AuditEventAction_pskel& /* action */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::instant_pskel& /* recorded */,
             ::fhir::AuditEventOutcome_pskel& /* outcome */,
             ::fhir::string_pskel& /* outcomeDesc */,
             ::fhir::CodeableConcept_pskel& /* purposeOfEvent */,
             ::fhir::AuditEvent_Agent_pskel& /* agent */,
             ::fhir::AuditEvent_Source_pskel& /* source */,
             ::fhir::AuditEvent_Entity_pskel& /* entity */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::Coding_pskel&);

    void
    subtype_parser (::fhir::Coding_pskel&);

    void
    action_parser (::fhir::AuditEventAction_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    recorded_parser (::fhir::instant_pskel&);

    void
    outcome_parser (::fhir::AuditEventOutcome_pskel&);

    void
    outcomeDesc_parser (::fhir::string_pskel&);

    void
    purposeOfEvent_parser (::fhir::CodeableConcept_pskel&);

    void
    agent_parser (::fhir::AuditEvent_Agent_pskel&);

    void
    source_parser (::fhir::AuditEvent_Source_pskel&);

    void
    entity_parser (::fhir::AuditEvent_Entity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_pskel* AuditEvent_impl_;
    AuditEvent_pskel (AuditEvent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* type_parser_;
    ::fhir::Coding_pskel* subtype_parser_;
    ::fhir::AuditEventAction_pskel* action_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::instant_pskel* recorded_parser_;
    ::fhir::AuditEventOutcome_pskel* outcome_parser_;
    ::fhir::string_pskel* outcomeDesc_parser_;
    ::fhir::CodeableConcept_pskel* purposeOfEvent_parser_;
    ::fhir::AuditEvent_Agent_pskel* agent_parser_;
    ::fhir::AuditEvent_Source_pskel* source_parser_;
    ::fhir::AuditEvent_Entity_pskel* entity_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_Agent_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    role ();

    virtual void
    who ();

    virtual void
    altId ();

    virtual void
    name ();

    virtual void
    requestor ();

    virtual void
    location ();

    virtual void
    policy ();

    virtual void
    media ();

    virtual void
    network ();

    virtual void
    purposeOfUse ();

    virtual void
    post_AuditEvent_Agent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::Reference_pskel& /* who */,
             ::fhir::string_pskel& /* altId */,
             ::fhir::string_pskel& /* name */,
             ::fhir::boolean_pskel& /* requestor */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::uri_pskel& /* policy */,
             ::fhir::Coding_pskel& /* media */,
             ::fhir::AuditEvent_Network_pskel& /* network */,
             ::fhir::CodeableConcept_pskel& /* purposeOfUse */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    who_parser (::fhir::Reference_pskel&);

    void
    altId_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    requestor_parser (::fhir::boolean_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    policy_parser (::fhir::uri_pskel&);

    void
    media_parser (::fhir::Coding_pskel&);

    void
    network_parser (::fhir::AuditEvent_Network_pskel&);

    void
    purposeOfUse_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_Agent_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_Agent_pskel* AuditEvent_Agent_impl_;
    AuditEvent_Agent_pskel (AuditEvent_Agent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::Reference_pskel* who_parser_;
    ::fhir::string_pskel* altId_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::boolean_pskel* requestor_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::uri_pskel* policy_parser_;
    ::fhir::Coding_pskel* media_parser_;
    ::fhir::AuditEvent_Network_pskel* network_parser_;
    ::fhir::CodeableConcept_pskel* purposeOfUse_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_Agent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_Network_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    address ();

    virtual void
    type ();

    virtual void
    post_AuditEvent_Network ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* address */,
             ::fhir::AuditEventAgentNetworkType_pskel& /* type */);

    // Individual element parsers.
    //
    void
    address_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::AuditEventAgentNetworkType_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_Network_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_Network_pskel* AuditEvent_Network_impl_;
    AuditEvent_Network_pskel (AuditEvent_Network_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* address_parser_;
    ::fhir::AuditEventAgentNetworkType_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_Network_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_Source_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    site ();

    virtual void
    observer ();

    virtual void
    type ();

    virtual void
    post_AuditEvent_Source ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* site */,
             ::fhir::Reference_pskel& /* observer */,
             ::fhir::Coding_pskel& /* type */);

    // Individual element parsers.
    //
    void
    site_parser (::fhir::string_pskel&);

    void
    observer_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_Source_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_Source_pskel* AuditEvent_Source_impl_;
    AuditEvent_Source_pskel (AuditEvent_Source_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* site_parser_;
    ::fhir::Reference_pskel* observer_parser_;
    ::fhir::Coding_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_Source_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_Entity_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    what ();

    virtual void
    type ();

    virtual void
    role ();

    virtual void
    lifecycle ();

    virtual void
    securityLabel ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    query ();

    virtual void
    detail ();

    virtual void
    post_AuditEvent_Entity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* what */,
             ::fhir::Coding_pskel& /* type */,
             ::fhir::Coding_pskel& /* role */,
             ::fhir::Coding_pskel& /* lifecycle */,
             ::fhir::Coding_pskel& /* securityLabel */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */,
             ::fhir::base64Binary_pskel& /* query */,
             ::fhir::AuditEvent_Detail_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    what_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::Coding_pskel&);

    void
    role_parser (::fhir::Coding_pskel&);

    void
    lifecycle_parser (::fhir::Coding_pskel&);

    void
    securityLabel_parser (::fhir::Coding_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    query_parser (::fhir::base64Binary_pskel&);

    void
    detail_parser (::fhir::AuditEvent_Detail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_Entity_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_Entity_pskel* AuditEvent_Entity_impl_;
    AuditEvent_Entity_pskel (AuditEvent_Entity_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* what_parser_;
    ::fhir::Coding_pskel* type_parser_;
    ::fhir::Coding_pskel* role_parser_;
    ::fhir::Coding_pskel* lifecycle_parser_;
    ::fhir::Coding_pskel* securityLabel_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::base64Binary_pskel* query_parser_;
    ::fhir::AuditEvent_Detail_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_Entity_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_Detail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    valueString ();

    virtual void
    valueBase64Binary ();

    virtual void
    post_AuditEvent_Detail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* type */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::string_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_Detail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_Detail_pskel* AuditEvent_Detail_impl_;
    AuditEvent_Detail_pskel (AuditEvent_Detail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* type_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_Detail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEventOutcome_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AuditEventOutcome_list ();

    // Constructor.
    //
    AuditEventOutcome_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventOutcome_list_pskel* AuditEventOutcome_list_impl_;
    AuditEventOutcome_list_pskel (AuditEventOutcome_list_pskel*, void*);

    protected:
    static const char* const _xsde_AuditEventOutcome_list_pskel_enums_[4UL];
  };

  class AuditEventOutcome_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AuditEventOutcome ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AuditEventOutcome_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AuditEventOutcome_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEventOutcome_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventOutcome_pskel* AuditEventOutcome_impl_;
    AuditEventOutcome_pskel (AuditEventOutcome_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AuditEventOutcome_list_pskel* value_parser_;
  };

  class AuditEventAction_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AuditEventAction_list ();

    // Constructor.
    //
    AuditEventAction_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventAction_list_pskel* AuditEventAction_list_impl_;
    AuditEventAction_list_pskel (AuditEventAction_list_pskel*, void*);

    protected:
    static const char* const _xsde_AuditEventAction_list_pskel_enums_[5UL];
  };

  class AuditEventAction_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AuditEventAction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AuditEventAction_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AuditEventAction_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEventAction_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventAction_pskel* AuditEventAction_impl_;
    AuditEventAction_pskel (AuditEventAction_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AuditEventAction_list_pskel* value_parser_;
  };

  class AuditEventAgentNetworkType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AuditEventAgentNetworkType_list ();

    // Constructor.
    //
    AuditEventAgentNetworkType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventAgentNetworkType_list_pskel* AuditEventAgentNetworkType_list_impl_;
    AuditEventAgentNetworkType_list_pskel (AuditEventAgentNetworkType_list_pskel*, void*);

    protected:
    static const char* const _xsde_AuditEventAgentNetworkType_list_pskel_enums_[5UL];
  };

  class AuditEventAgentNetworkType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AuditEventAgentNetworkType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AuditEventAgentNetworkType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AuditEventAgentNetworkType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEventAgentNetworkType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventAgentNetworkType_pskel* AuditEventAgentNetworkType_impl_;
    AuditEventAgentNetworkType_pskel (AuditEventAgentNetworkType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AuditEventAgentNetworkType_list_pskel* value_parser_;
  };

  class Basic_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    code ();

    virtual void
    subject ();

    virtual void
    created ();

    virtual void
    author ();

    virtual void
    post_Basic ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::date_pskel& /* created */,
             ::fhir::Reference_pskel& /* author */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    created_parser (::fhir::date_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Basic_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Basic_pskel* Basic_impl_;
    Basic_pskel (Basic_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::date_pskel* created_parser_;
    ::fhir::Reference_pskel* author_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Basic_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Binary_pskel: public ::fhir::Resource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentType ();

    virtual void
    securityContext ();

    virtual void
    data ();

    virtual void
    post_Binary ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::code_pskel& /* contentType */,
             ::fhir::Reference_pskel& /* securityContext */,
             ::fhir::base64Binary_pskel& /* data */);

    // Individual element parsers.
    //
    void
    contentType_parser (::fhir::code_pskel&);

    void
    securityContext_parser (::fhir::Reference_pskel&);

    void
    data_parser (::fhir::base64Binary_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Binary_pskel (::fhir::Resource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Binary_pskel* Binary_impl_;
    Binary_pskel (Binary_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* contentType_parser_;
    ::fhir::Reference_pskel* securityContext_parser_;
    ::fhir::base64Binary_pskel* data_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Binary_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class BiologicallyDerivedProduct_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    productCategory ();

    virtual void
    productCode ();

    virtual void
    status ();

    virtual void
    request ();

    virtual void
    quantity ();

    virtual void
    parent ();

    virtual void
    collection ();

    virtual void
    processing ();

    virtual void
    manipulation ();

    virtual void
    storage ();

    virtual void
    post_BiologicallyDerivedProduct ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::BiologicallyDerivedProductCategory_pskel& /* productCategory */,
             ::fhir::CodeableConcept_pskel& /* productCode */,
             ::fhir::BiologicallyDerivedProductStatus_pskel& /* status */,
             ::fhir::Reference_pskel& /* request */,
             ::fhir::integer_pskel& /* quantity */,
             ::fhir::Reference_pskel& /* parent */,
             ::fhir::BiologicallyDerivedProduct_Collection_pskel& /* collection */,
             ::fhir::BiologicallyDerivedProduct_Processing_pskel& /* processing */,
             ::fhir::BiologicallyDerivedProduct_Manipulation_pskel& /* manipulation */,
             ::fhir::BiologicallyDerivedProduct_Storage_pskel& /* storage */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    productCategory_parser (::fhir::BiologicallyDerivedProductCategory_pskel&);

    void
    productCode_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::BiologicallyDerivedProductStatus_pskel&);

    void
    request_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::integer_pskel&);

    void
    parent_parser (::fhir::Reference_pskel&);

    void
    collection_parser (::fhir::BiologicallyDerivedProduct_Collection_pskel&);

    void
    processing_parser (::fhir::BiologicallyDerivedProduct_Processing_pskel&);

    void
    manipulation_parser (::fhir::BiologicallyDerivedProduct_Manipulation_pskel&);

    void
    storage_parser (::fhir::BiologicallyDerivedProduct_Storage_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BiologicallyDerivedProduct_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProduct_pskel* BiologicallyDerivedProduct_impl_;
    BiologicallyDerivedProduct_pskel (BiologicallyDerivedProduct_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::BiologicallyDerivedProductCategory_pskel* productCategory_parser_;
    ::fhir::CodeableConcept_pskel* productCode_parser_;
    ::fhir::BiologicallyDerivedProductStatus_pskel* status_parser_;
    ::fhir::Reference_pskel* request_parser_;
    ::fhir::integer_pskel* quantity_parser_;
    ::fhir::Reference_pskel* parent_parser_;
    ::fhir::BiologicallyDerivedProduct_Collection_pskel* collection_parser_;
    ::fhir::BiologicallyDerivedProduct_Processing_pskel* processing_parser_;
    ::fhir::BiologicallyDerivedProduct_Manipulation_pskel* manipulation_parser_;
    ::fhir::BiologicallyDerivedProduct_Storage_pskel* storage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::BiologicallyDerivedProduct_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class BiologicallyDerivedProduct_Collection_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    collector ();

    virtual void
    source ();

    virtual void
    collectedDateTime ();

    virtual void
    collectedPeriod ();

    virtual void
    post_BiologicallyDerivedProduct_Collection ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* collector */,
             ::fhir::Reference_pskel& /* source */,
             ::fhir::dateTime_pskel& /* collectedDateTime */,
             ::fhir::Period_pskel& /* collectedPeriod */);

    // Individual element parsers.
    //
    void
    collector_parser (::fhir::Reference_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    void
    collectedDateTime_parser (::fhir::dateTime_pskel&);

    void
    collectedPeriod_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BiologicallyDerivedProduct_Collection_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProduct_Collection_pskel* BiologicallyDerivedProduct_Collection_impl_;
    BiologicallyDerivedProduct_Collection_pskel (BiologicallyDerivedProduct_Collection_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* collector_parser_;
    ::fhir::Reference_pskel* source_parser_;
    ::fhir::dateTime_pskel* collectedDateTime_parser_;
    ::fhir::Period_pskel* collectedPeriod_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::BiologicallyDerivedProduct_Collection_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class BiologicallyDerivedProduct_Processing_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    procedure ();

    virtual void
    additive ();

    virtual void
    timeDateTime ();

    virtual void
    timePeriod ();

    virtual void
    post_BiologicallyDerivedProduct_Processing ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* procedure */,
             ::fhir::Reference_pskel& /* additive */,
             ::fhir::dateTime_pskel& /* timeDateTime */,
             ::fhir::Period_pskel& /* timePeriod */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    procedure_parser (::fhir::CodeableConcept_pskel&);

    void
    additive_parser (::fhir::Reference_pskel&);

    void
    timeDateTime_parser (::fhir::dateTime_pskel&);

    void
    timePeriod_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BiologicallyDerivedProduct_Processing_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProduct_Processing_pskel* BiologicallyDerivedProduct_Processing_impl_;
    BiologicallyDerivedProduct_Processing_pskel (BiologicallyDerivedProduct_Processing_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* procedure_parser_;
    ::fhir::Reference_pskel* additive_parser_;
    ::fhir::dateTime_pskel* timeDateTime_parser_;
    ::fhir::Period_pskel* timePeriod_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::BiologicallyDerivedProduct_Processing_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class BiologicallyDerivedProduct_Manipulation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    timeDateTime ();

    virtual void
    timePeriod ();

    virtual void
    post_BiologicallyDerivedProduct_Manipulation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::dateTime_pskel& /* timeDateTime */,
             ::fhir::Period_pskel& /* timePeriod */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    timeDateTime_parser (::fhir::dateTime_pskel&);

    void
    timePeriod_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BiologicallyDerivedProduct_Manipulation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProduct_Manipulation_pskel* BiologicallyDerivedProduct_Manipulation_impl_;
    BiologicallyDerivedProduct_Manipulation_pskel (BiologicallyDerivedProduct_Manipulation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::dateTime_pskel* timeDateTime_parser_;
    ::fhir::Period_pskel* timePeriod_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::BiologicallyDerivedProduct_Manipulation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class BiologicallyDerivedProduct_Storage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    temperature ();

    virtual void
    scale ();

    virtual void
    duration ();

    virtual void
    post_BiologicallyDerivedProduct_Storage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::decimal_pskel& /* temperature */,
             ::fhir::BiologicallyDerivedProductStorageScale_pskel& /* scale */,
             ::fhir::Period_pskel& /* duration */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    temperature_parser (::fhir::decimal_pskel&);

    void
    scale_parser (::fhir::BiologicallyDerivedProductStorageScale_pskel&);

    void
    duration_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BiologicallyDerivedProduct_Storage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProduct_Storage_pskel* BiologicallyDerivedProduct_Storage_impl_;
    BiologicallyDerivedProduct_Storage_pskel (BiologicallyDerivedProduct_Storage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::decimal_pskel* temperature_parser_;
    ::fhir::BiologicallyDerivedProductStorageScale_pskel* scale_parser_;
    ::fhir::Period_pskel* duration_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::BiologicallyDerivedProduct_Storage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class BiologicallyDerivedProductCategory_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_BiologicallyDerivedProductCategory_list ();

    // Constructor.
    //
    BiologicallyDerivedProductCategory_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProductCategory_list_pskel* BiologicallyDerivedProductCategory_list_impl_;
    BiologicallyDerivedProductCategory_list_pskel (BiologicallyDerivedProductCategory_list_pskel*, void*);

    protected:
    static const char* const _xsde_BiologicallyDerivedProductCategory_list_pskel_enums_[5UL];
  };

  class BiologicallyDerivedProductCategory_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_BiologicallyDerivedProductCategory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::BiologicallyDerivedProductCategory_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::BiologicallyDerivedProductCategory_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BiologicallyDerivedProductCategory_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProductCategory_pskel* BiologicallyDerivedProductCategory_impl_;
    BiologicallyDerivedProductCategory_pskel (BiologicallyDerivedProductCategory_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::BiologicallyDerivedProductCategory_list_pskel* value_parser_;
  };

  class BiologicallyDerivedProductStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_BiologicallyDerivedProductStatus_list ();

    // Constructor.
    //
    BiologicallyDerivedProductStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProductStatus_list_pskel* BiologicallyDerivedProductStatus_list_impl_;
    BiologicallyDerivedProductStatus_list_pskel (BiologicallyDerivedProductStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_BiologicallyDerivedProductStatus_list_pskel_enums_[2UL];
  };

  class BiologicallyDerivedProductStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_BiologicallyDerivedProductStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::BiologicallyDerivedProductStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::BiologicallyDerivedProductStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BiologicallyDerivedProductStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProductStatus_pskel* BiologicallyDerivedProductStatus_impl_;
    BiologicallyDerivedProductStatus_pskel (BiologicallyDerivedProductStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::BiologicallyDerivedProductStatus_list_pskel* value_parser_;
  };

  class BiologicallyDerivedProductStorageScale_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_BiologicallyDerivedProductStorageScale_list ();

    // Constructor.
    //
    BiologicallyDerivedProductStorageScale_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProductStorageScale_list_pskel* BiologicallyDerivedProductStorageScale_list_impl_;
    BiologicallyDerivedProductStorageScale_list_pskel (BiologicallyDerivedProductStorageScale_list_pskel*, void*);

    protected:
    static const char* const _xsde_BiologicallyDerivedProductStorageScale_list_pskel_enums_[3UL];
  };

  class BiologicallyDerivedProductStorageScale_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_BiologicallyDerivedProductStorageScale ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::BiologicallyDerivedProductStorageScale_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::BiologicallyDerivedProductStorageScale_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BiologicallyDerivedProductStorageScale_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    BiologicallyDerivedProductStorageScale_pskel* BiologicallyDerivedProductStorageScale_impl_;
    BiologicallyDerivedProductStorageScale_pskel (BiologicallyDerivedProductStorageScale_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::BiologicallyDerivedProductStorageScale_list_pskel* value_parser_;
  };

  class BodyStructure_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    active ();

    virtual void
    morphology ();

    virtual void
    location ();

    virtual void
    locationQualifier ();

    virtual void
    description ();

    virtual void
    image ();

    virtual void
    patient ();

    virtual void
    post_BodyStructure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::CodeableConcept_pskel& /* morphology */,
             ::fhir::CodeableConcept_pskel& /* location */,
             ::fhir::CodeableConcept_pskel& /* locationQualifier */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Attachment_pskel& /* image */,
             ::fhir::Reference_pskel& /* patient */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    morphology_parser (::fhir::CodeableConcept_pskel&);

    void
    location_parser (::fhir::CodeableConcept_pskel&);

    void
    locationQualifier_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    image_parser (::fhir::Attachment_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BodyStructure_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    BodyStructure_pskel* BodyStructure_impl_;
    BodyStructure_pskel (BodyStructure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::CodeableConcept_pskel* morphology_parser_;
    ::fhir::CodeableConcept_pskel* location_parser_;
    ::fhir::CodeableConcept_pskel* locationQualifier_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Attachment_pskel* image_parser_;
    ::fhir::Reference_pskel* patient_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::BodyStructure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Bundle_pskel: public ::fhir::Resource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    timestamp ();

    virtual void
    total ();

    virtual void
    link ();

    virtual void
    entry ();

    virtual void
    signature ();

    virtual void
    post_Bundle ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::BundleType_pskel& /* type */,
             ::fhir::instant_pskel& /* timestamp */,
             ::fhir::unsignedInt_pskel& /* total */,
             ::fhir::Bundle_Link_pskel& /* link */,
             ::fhir::Bundle_Entry_pskel& /* entry */,
             ::fhir::Signature_pskel& /* signature */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::BundleType_pskel&);

    void
    timestamp_parser (::fhir::instant_pskel&);

    void
    total_parser (::fhir::unsignedInt_pskel&);

    void
    link_parser (::fhir::Bundle_Link_pskel&);

    void
    entry_parser (::fhir::Bundle_Entry_pskel&);

    void
    signature_parser (::fhir::Signature_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Bundle_pskel (::fhir::Resource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Bundle_pskel* Bundle_impl_;
    Bundle_pskel (Bundle_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::BundleType_pskel* type_parser_;
    ::fhir::instant_pskel* timestamp_parser_;
    ::fhir::unsignedInt_pskel* total_parser_;
    ::fhir::Bundle_Link_pskel* link_parser_;
    ::fhir::Bundle_Entry_pskel* entry_parser_;
    ::fhir::Signature_pskel* signature_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Bundle_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Bundle_Link_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    relation ();

    virtual void
    url ();

    virtual void
    post_Bundle_Link ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* relation */,
             ::fhir::uri_pskel& /* url */);

    // Individual element parsers.
    //
    void
    relation_parser (::fhir::string_pskel&);

    void
    url_parser (::fhir::uri_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Bundle_Link_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Bundle_Link_pskel* Bundle_Link_impl_;
    Bundle_Link_pskel (Bundle_Link_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* relation_parser_;
    ::fhir::uri_pskel* url_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Bundle_Link_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Bundle_Entry_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    link ();

    virtual void
    fullUrl ();

    virtual void
    resource ();

    virtual void
    search ();

    virtual void
    request ();

    virtual void
    response ();

    virtual void
    post_Bundle_Entry ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Bundle_Link_pskel& /* link */,
             ::fhir::uri_pskel& /* fullUrl */,
             ::fhir::ResourceContainer_pskel& /* resource */,
             ::fhir::Bundle_Search_pskel& /* search */,
             ::fhir::Bundle_Request_pskel& /* request */,
             ::fhir::Bundle_Response_pskel& /* response */);

    // Individual element parsers.
    //
    void
    link_parser (::fhir::Bundle_Link_pskel&);

    void
    fullUrl_parser (::fhir::uri_pskel&);

    void
    resource_parser (::fhir::ResourceContainer_pskel&);

    void
    search_parser (::fhir::Bundle_Search_pskel&);

    void
    request_parser (::fhir::Bundle_Request_pskel&);

    void
    response_parser (::fhir::Bundle_Response_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Bundle_Entry_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Bundle_Entry_pskel* Bundle_Entry_impl_;
    Bundle_Entry_pskel (Bundle_Entry_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Bundle_Link_pskel* link_parser_;
    ::fhir::uri_pskel* fullUrl_parser_;
    ::fhir::ResourceContainer_pskel* resource_parser_;
    ::fhir::Bundle_Search_pskel* search_parser_;
    ::fhir::Bundle_Request_pskel* request_parser_;
    ::fhir::Bundle_Response_pskel* response_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Bundle_Entry_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Bundle_Search_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    mode ();

    virtual void
    score ();

    virtual void
    post_Bundle_Search ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::SearchEntryMode_pskel& /* mode */,
             ::fhir::decimal_pskel& /* score */);

    // Individual element parsers.
    //
    void
    mode_parser (::fhir::SearchEntryMode_pskel&);

    void
    score_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Bundle_Search_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Bundle_Search_pskel* Bundle_Search_impl_;
    Bundle_Search_pskel (Bundle_Search_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::SearchEntryMode_pskel* mode_parser_;
    ::fhir::decimal_pskel* score_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Bundle_Search_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Bundle_Request_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    method ();

    virtual void
    url ();

    virtual void
    ifNoneMatch ();

    virtual void
    ifModifiedSince ();

    virtual void
    ifMatch ();

    virtual void
    ifNoneExist ();

    virtual void
    post_Bundle_Request ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::HTTPVerb_pskel& /* method */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* ifNoneMatch */,
             ::fhir::instant_pskel& /* ifModifiedSince */,
             ::fhir::string_pskel& /* ifMatch */,
             ::fhir::string_pskel& /* ifNoneExist */);

    // Individual element parsers.
    //
    void
    method_parser (::fhir::HTTPVerb_pskel&);

    void
    url_parser (::fhir::uri_pskel&);

    void
    ifNoneMatch_parser (::fhir::string_pskel&);

    void
    ifModifiedSince_parser (::fhir::instant_pskel&);

    void
    ifMatch_parser (::fhir::string_pskel&);

    void
    ifNoneExist_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Bundle_Request_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Bundle_Request_pskel* Bundle_Request_impl_;
    Bundle_Request_pskel (Bundle_Request_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::HTTPVerb_pskel* method_parser_;
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* ifNoneMatch_parser_;
    ::fhir::instant_pskel* ifModifiedSince_parser_;
    ::fhir::string_pskel* ifMatch_parser_;
    ::fhir::string_pskel* ifNoneExist_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Bundle_Request_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Bundle_Response_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    status ();

    virtual void
    location ();

    virtual void
    etag ();

    virtual void
    lastModified ();

    virtual void
    outcome ();

    virtual void
    post_Bundle_Response ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* status */,
             ::fhir::uri_pskel& /* location */,
             ::fhir::string_pskel& /* etag */,
             ::fhir::instant_pskel& /* lastModified */,
             ::fhir::ResourceContainer_pskel& /* outcome */);

    // Individual element parsers.
    //
    void
    status_parser (::fhir::string_pskel&);

    void
    location_parser (::fhir::uri_pskel&);

    void
    etag_parser (::fhir::string_pskel&);

    void
    lastModified_parser (::fhir::instant_pskel&);

    void
    outcome_parser (::fhir::ResourceContainer_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Bundle_Response_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Bundle_Response_pskel* Bundle_Response_impl_;
    Bundle_Response_pskel (Bundle_Response_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* status_parser_;
    ::fhir::uri_pskel* location_parser_;
    ::fhir::string_pskel* etag_parser_;
    ::fhir::instant_pskel* lastModified_parser_;
    ::fhir::ResourceContainer_pskel* outcome_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Bundle_Response_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class HTTPVerb_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_HTTPVerb_list ();

    // Constructor.
    //
    HTTPVerb_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    HTTPVerb_list_pskel* HTTPVerb_list_impl_;
    HTTPVerb_list_pskel (HTTPVerb_list_pskel*, void*);

    protected:
    static const char* const _xsde_HTTPVerb_list_pskel_enums_[6UL];
  };

  class HTTPVerb_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_HTTPVerb ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::HTTPVerb_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::HTTPVerb_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    HTTPVerb_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    HTTPVerb_pskel* HTTPVerb_impl_;
    HTTPVerb_pskel (HTTPVerb_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::HTTPVerb_list_pskel* value_parser_;
  };

  class BundleType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_BundleType_list ();

    // Constructor.
    //
    BundleType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    BundleType_list_pskel* BundleType_list_impl_;
    BundleType_list_pskel (BundleType_list_pskel*, void*);

    protected:
    static const char* const _xsde_BundleType_list_pskel_enums_[9UL];
  };

  class BundleType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_BundleType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::BundleType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::BundleType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    BundleType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    BundleType_pskel* BundleType_impl_;
    BundleType_pskel (BundleType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::BundleType_list_pskel* value_parser_;
  };

  class SearchEntryMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SearchEntryMode_list ();

    // Constructor.
    //
    SearchEntryMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchEntryMode_list_pskel* SearchEntryMode_list_impl_;
    SearchEntryMode_list_pskel (SearchEntryMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_SearchEntryMode_list_pskel_enums_[3UL];
  };

  class SearchEntryMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SearchEntryMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SearchEntryMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SearchEntryMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SearchEntryMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchEntryMode_pskel* SearchEntryMode_impl_;
    SearchEntryMode_pskel (SearchEntryMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SearchEntryMode_list_pskel* value_parser_;
  };

  class CapabilityStatement_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    kind ();

    virtual void
    instantiates ();

    virtual void
    imports ();

    virtual void
    software ();

    virtual void
    implementation ();

    virtual void
    fhirVersion ();

    virtual void
    format ();

    virtual void
    patchFormat ();

    virtual void
    implementationGuide ();

    virtual void
    rest ();

    virtual void
    messaging ();

    virtual void
    document ();

    virtual void
    post_CapabilityStatement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::CapabilityStatementKind_pskel& /* kind */,
             ::fhir::canonical_pskel& /* instantiates */,
             ::fhir::canonical_pskel& /* imports */,
             ::fhir::CapabilityStatement_Software_pskel& /* software */,
             ::fhir::CapabilityStatement_Implementation_pskel& /* implementation */,
             ::fhir::FHIRVersion_pskel& /* fhirVersion */,
             ::fhir::code_pskel& /* format */,
             ::fhir::code_pskel& /* patchFormat */,
             ::fhir::canonical_pskel& /* implementationGuide */,
             ::fhir::CapabilityStatement_Rest_pskel& /* rest */,
             ::fhir::CapabilityStatement_Messaging_pskel& /* messaging */,
             ::fhir::CapabilityStatement_Document_pskel& /* document */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    kind_parser (::fhir::CapabilityStatementKind_pskel&);

    void
    instantiates_parser (::fhir::canonical_pskel&);

    void
    imports_parser (::fhir::canonical_pskel&);

    void
    software_parser (::fhir::CapabilityStatement_Software_pskel&);

    void
    implementation_parser (::fhir::CapabilityStatement_Implementation_pskel&);

    void
    fhirVersion_parser (::fhir::FHIRVersion_pskel&);

    void
    format_parser (::fhir::code_pskel&);

    void
    patchFormat_parser (::fhir::code_pskel&);

    void
    implementationGuide_parser (::fhir::canonical_pskel&);

    void
    rest_parser (::fhir::CapabilityStatement_Rest_pskel&);

    void
    messaging_parser (::fhir::CapabilityStatement_Messaging_pskel&);

    void
    document_parser (::fhir::CapabilityStatement_Document_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_pskel* CapabilityStatement_impl_;
    CapabilityStatement_pskel (CapabilityStatement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::CapabilityStatementKind_pskel* kind_parser_;
    ::fhir::canonical_pskel* instantiates_parser_;
    ::fhir::canonical_pskel* imports_parser_;
    ::fhir::CapabilityStatement_Software_pskel* software_parser_;
    ::fhir::CapabilityStatement_Implementation_pskel* implementation_parser_;
    ::fhir::FHIRVersion_pskel* fhirVersion_parser_;
    ::fhir::code_pskel* format_parser_;
    ::fhir::code_pskel* patchFormat_parser_;
    ::fhir::canonical_pskel* implementationGuide_parser_;
    ::fhir::CapabilityStatement_Rest_pskel* rest_parser_;
    ::fhir::CapabilityStatement_Messaging_pskel* messaging_parser_;
    ::fhir::CapabilityStatement_Document_pskel* document_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Software_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    version ();

    virtual void
    releaseDate ();

    virtual void
    post_CapabilityStatement_Software ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* version */,
             ::fhir::dateTime_pskel& /* releaseDate */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    releaseDate_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Software_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Software_pskel* CapabilityStatement_Software_impl_;
    CapabilityStatement_Software_pskel (CapabilityStatement_Software_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::dateTime_pskel* releaseDate_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Software_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Implementation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    url ();

    virtual void
    custodian ();

    virtual void
    post_CapabilityStatement_Implementation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::url_pskel& /* url */,
             ::fhir::Reference_pskel& /* custodian */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    url_parser (::fhir::url_pskel&);

    void
    custodian_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Implementation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Implementation_pskel* CapabilityStatement_Implementation_impl_;
    CapabilityStatement_Implementation_pskel (CapabilityStatement_Implementation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::url_pskel* url_parser_;
    ::fhir::Reference_pskel* custodian_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Implementation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Rest_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    mode ();

    virtual void
    documentation ();

    virtual void
    security ();

    virtual void
    resource ();

    virtual void
    interaction ();

    virtual void
    searchParam ();

    virtual void
    operation ();

    virtual void
    compartment ();

    virtual void
    post_CapabilityStatement_Rest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::RestfulCapabilityMode_pskel& /* mode */,
             ::fhir::markdown_pskel& /* documentation */,
             ::fhir::CapabilityStatement_Security_pskel& /* security */,
             ::fhir::CapabilityStatement_Resource_pskel& /* resource */,
             ::fhir::CapabilityStatement_Interaction1_pskel& /* interaction */,
             ::fhir::CapabilityStatement_SearchParam_pskel& /* searchParam */,
             ::fhir::CapabilityStatement_Operation_pskel& /* operation */,
             ::fhir::canonical_pskel& /* compartment */);

    // Individual element parsers.
    //
    void
    mode_parser (::fhir::RestfulCapabilityMode_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    void
    security_parser (::fhir::CapabilityStatement_Security_pskel&);

    void
    resource_parser (::fhir::CapabilityStatement_Resource_pskel&);

    void
    interaction_parser (::fhir::CapabilityStatement_Interaction1_pskel&);

    void
    searchParam_parser (::fhir::CapabilityStatement_SearchParam_pskel&);

    void
    operation_parser (::fhir::CapabilityStatement_Operation_pskel&);

    void
    compartment_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Rest_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Rest_pskel* CapabilityStatement_Rest_impl_;
    CapabilityStatement_Rest_pskel (CapabilityStatement_Rest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::RestfulCapabilityMode_pskel* mode_parser_;
    ::fhir::markdown_pskel* documentation_parser_;
    ::fhir::CapabilityStatement_Security_pskel* security_parser_;
    ::fhir::CapabilityStatement_Resource_pskel* resource_parser_;
    ::fhir::CapabilityStatement_Interaction1_pskel* interaction_parser_;
    ::fhir::CapabilityStatement_SearchParam_pskel* searchParam_parser_;
    ::fhir::CapabilityStatement_Operation_pskel* operation_parser_;
    ::fhir::canonical_pskel* compartment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Rest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Security_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    cors ();

    virtual void
    service ();

    virtual void
    description ();

    virtual void
    post_CapabilityStatement_Security ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* cors */,
             ::fhir::CodeableConcept_pskel& /* service */,
             ::fhir::markdown_pskel& /* description */);

    // Individual element parsers.
    //
    void
    cors_parser (::fhir::boolean_pskel&);

    void
    service_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Security_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Security_pskel* CapabilityStatement_Security_impl_;
    CapabilityStatement_Security_pskel (CapabilityStatement_Security_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* cors_parser_;
    ::fhir::CodeableConcept_pskel* service_parser_;
    ::fhir::markdown_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Security_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Resource_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    profile ();

    virtual void
    supportedProfile ();

    virtual void
    documentation ();

    virtual void
    interaction ();

    virtual void
    versioning ();

    virtual void
    readHistory ();

    virtual void
    updateCreate ();

    virtual void
    conditionalCreate ();

    virtual void
    conditionalRead ();

    virtual void
    conditionalUpdate ();

    virtual void
    conditionalDelete ();

    virtual void
    referencePolicy ();

    virtual void
    searchInclude ();

    virtual void
    searchRevInclude ();

    virtual void
    searchParam ();

    virtual void
    operation ();

    virtual void
    post_CapabilityStatement_Resource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* type */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::canonical_pskel& /* supportedProfile */,
             ::fhir::markdown_pskel& /* documentation */,
             ::fhir::CapabilityStatement_Interaction_pskel& /* interaction */,
             ::fhir::ResourceVersionPolicy_pskel& /* versioning */,
             ::fhir::boolean_pskel& /* readHistory */,
             ::fhir::boolean_pskel& /* updateCreate */,
             ::fhir::boolean_pskel& /* conditionalCreate */,
             ::fhir::ConditionalReadStatus_pskel& /* conditionalRead */,
             ::fhir::boolean_pskel& /* conditionalUpdate */,
             ::fhir::ConditionalDeleteStatus_pskel& /* conditionalDelete */,
             ::fhir::ReferenceHandlingPolicy_pskel& /* referencePolicy */,
             ::fhir::string_pskel& /* searchInclude */,
             ::fhir::string_pskel& /* searchRevInclude */,
             ::fhir::CapabilityStatement_SearchParam_pskel& /* searchParam */,
             ::fhir::CapabilityStatement_Operation_pskel& /* operation */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::code_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    supportedProfile_parser (::fhir::canonical_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    void
    interaction_parser (::fhir::CapabilityStatement_Interaction_pskel&);

    void
    versioning_parser (::fhir::ResourceVersionPolicy_pskel&);

    void
    readHistory_parser (::fhir::boolean_pskel&);

    void
    updateCreate_parser (::fhir::boolean_pskel&);

    void
    conditionalCreate_parser (::fhir::boolean_pskel&);

    void
    conditionalRead_parser (::fhir::ConditionalReadStatus_pskel&);

    void
    conditionalUpdate_parser (::fhir::boolean_pskel&);

    void
    conditionalDelete_parser (::fhir::ConditionalDeleteStatus_pskel&);

    void
    referencePolicy_parser (::fhir::ReferenceHandlingPolicy_pskel&);

    void
    searchInclude_parser (::fhir::string_pskel&);

    void
    searchRevInclude_parser (::fhir::string_pskel&);

    void
    searchParam_parser (::fhir::CapabilityStatement_SearchParam_pskel&);

    void
    operation_parser (::fhir::CapabilityStatement_Operation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Resource_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Resource_pskel* CapabilityStatement_Resource_impl_;
    CapabilityStatement_Resource_pskel (CapabilityStatement_Resource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* type_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::canonical_pskel* supportedProfile_parser_;
    ::fhir::markdown_pskel* documentation_parser_;
    ::fhir::CapabilityStatement_Interaction_pskel* interaction_parser_;
    ::fhir::ResourceVersionPolicy_pskel* versioning_parser_;
    ::fhir::boolean_pskel* readHistory_parser_;
    ::fhir::boolean_pskel* updateCreate_parser_;
    ::fhir::boolean_pskel* conditionalCreate_parser_;
    ::fhir::ConditionalReadStatus_pskel* conditionalRead_parser_;
    ::fhir::boolean_pskel* conditionalUpdate_parser_;
    ::fhir::ConditionalDeleteStatus_pskel* conditionalDelete_parser_;
    ::fhir::ReferenceHandlingPolicy_pskel* referencePolicy_parser_;
    ::fhir::string_pskel* searchInclude_parser_;
    ::fhir::string_pskel* searchRevInclude_parser_;
    ::fhir::CapabilityStatement_SearchParam_pskel* searchParam_parser_;
    ::fhir::CapabilityStatement_Operation_pskel* operation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Resource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Interaction_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    documentation ();

    virtual void
    post_CapabilityStatement_Interaction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TypeRestfulInteraction_pskel& /* code */,
             ::fhir::markdown_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::TypeRestfulInteraction_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Interaction_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Interaction_pskel* CapabilityStatement_Interaction_impl_;
    CapabilityStatement_Interaction_pskel (CapabilityStatement_Interaction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TypeRestfulInteraction_pskel* code_parser_;
    ::fhir::markdown_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Interaction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_SearchParam_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    definition ();

    virtual void
    type ();

    virtual void
    documentation ();

    virtual void
    post_CapabilityStatement_SearchParam ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::canonical_pskel& /* definition */,
             ::fhir::SearchParamType_pskel& /* type */,
             ::fhir::markdown_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    definition_parser (::fhir::canonical_pskel&);

    void
    type_parser (::fhir::SearchParamType_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_SearchParam_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_SearchParam_pskel* CapabilityStatement_SearchParam_impl_;
    CapabilityStatement_SearchParam_pskel (CapabilityStatement_SearchParam_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::canonical_pskel* definition_parser_;
    ::fhir::SearchParamType_pskel* type_parser_;
    ::fhir::markdown_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_SearchParam_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Operation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    definition ();

    virtual void
    documentation ();

    virtual void
    post_CapabilityStatement_Operation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::canonical_pskel& /* definition */,
             ::fhir::markdown_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    definition_parser (::fhir::canonical_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Operation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Operation_pskel* CapabilityStatement_Operation_impl_;
    CapabilityStatement_Operation_pskel (CapabilityStatement_Operation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::canonical_pskel* definition_parser_;
    ::fhir::markdown_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Operation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Interaction1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    documentation ();

    virtual void
    post_CapabilityStatement_Interaction1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::SystemRestfulInteraction_pskel& /* code */,
             ::fhir::markdown_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::SystemRestfulInteraction_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Interaction1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Interaction1_pskel* CapabilityStatement_Interaction1_impl_;
    CapabilityStatement_Interaction1_pskel (CapabilityStatement_Interaction1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::SystemRestfulInteraction_pskel* code_parser_;
    ::fhir::markdown_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Interaction1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Messaging_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    endpoint ();

    virtual void
    reliableCache ();

    virtual void
    documentation ();

    virtual void
    supportedMessage ();

    virtual void
    post_CapabilityStatement_Messaging ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CapabilityStatement_Endpoint_pskel& /* endpoint */,
             ::fhir::unsignedInt_pskel& /* reliableCache */,
             ::fhir::markdown_pskel& /* documentation */,
             ::fhir::CapabilityStatement_SupportedMessage_pskel& /* supportedMessage */);

    // Individual element parsers.
    //
    void
    endpoint_parser (::fhir::CapabilityStatement_Endpoint_pskel&);

    void
    reliableCache_parser (::fhir::unsignedInt_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    void
    supportedMessage_parser (::fhir::CapabilityStatement_SupportedMessage_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Messaging_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Messaging_pskel* CapabilityStatement_Messaging_impl_;
    CapabilityStatement_Messaging_pskel (CapabilityStatement_Messaging_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CapabilityStatement_Endpoint_pskel* endpoint_parser_;
    ::fhir::unsignedInt_pskel* reliableCache_parser_;
    ::fhir::markdown_pskel* documentation_parser_;
    ::fhir::CapabilityStatement_SupportedMessage_pskel* supportedMessage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Messaging_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Endpoint_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    protocol ();

    virtual void
    address ();

    virtual void
    post_CapabilityStatement_Endpoint ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* protocol */,
             ::fhir::url_pskel& /* address */);

    // Individual element parsers.
    //
    void
    protocol_parser (::fhir::Coding_pskel&);

    void
    address_parser (::fhir::url_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Endpoint_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Endpoint_pskel* CapabilityStatement_Endpoint_impl_;
    CapabilityStatement_Endpoint_pskel (CapabilityStatement_Endpoint_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* protocol_parser_;
    ::fhir::url_pskel* address_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Endpoint_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_SupportedMessage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    mode ();

    virtual void
    definition ();

    virtual void
    post_CapabilityStatement_SupportedMessage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::EventCapabilityMode_pskel& /* mode */,
             ::fhir::canonical_pskel& /* definition */);

    // Individual element parsers.
    //
    void
    mode_parser (::fhir::EventCapabilityMode_pskel&);

    void
    definition_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_SupportedMessage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_SupportedMessage_pskel* CapabilityStatement_SupportedMessage_impl_;
    CapabilityStatement_SupportedMessage_pskel (CapabilityStatement_SupportedMessage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::EventCapabilityMode_pskel* mode_parser_;
    ::fhir::canonical_pskel* definition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_SupportedMessage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Document_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    mode ();

    virtual void
    documentation ();

    virtual void
    profile ();

    virtual void
    post_CapabilityStatement_Document ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::DocumentMode_pskel& /* mode */,
             ::fhir::markdown_pskel& /* documentation */,
             ::fhir::canonical_pskel& /* profile */);

    // Individual element parsers.
    //
    void
    mode_parser (::fhir::DocumentMode_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Document_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Document_pskel* CapabilityStatement_Document_impl_;
    CapabilityStatement_Document_pskel (CapabilityStatement_Document_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::DocumentMode_pskel* mode_parser_;
    ::fhir::markdown_pskel* documentation_parser_;
    ::fhir::canonical_pskel* profile_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Document_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatementKind_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CapabilityStatementKind_list ();

    // Constructor.
    //
    CapabilityStatementKind_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatementKind_list_pskel* CapabilityStatementKind_list_impl_;
    CapabilityStatementKind_list_pskel (CapabilityStatementKind_list_pskel*, void*);

    protected:
    static const char* const _xsde_CapabilityStatementKind_list_pskel_enums_[3UL];
  };

  class CapabilityStatementKind_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CapabilityStatementKind ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CapabilityStatementKind_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CapabilityStatementKind_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatementKind_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatementKind_pskel* CapabilityStatementKind_impl_;
    CapabilityStatementKind_pskel (CapabilityStatementKind_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CapabilityStatementKind_list_pskel* value_parser_;
  };

  class EventCapabilityMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EventCapabilityMode_list ();

    // Constructor.
    //
    EventCapabilityMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventCapabilityMode_list_pskel* EventCapabilityMode_list_impl_;
    EventCapabilityMode_list_pskel (EventCapabilityMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_EventCapabilityMode_list_pskel_enums_[2UL];
  };

  class EventCapabilityMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EventCapabilityMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EventCapabilityMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EventCapabilityMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EventCapabilityMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventCapabilityMode_pskel* EventCapabilityMode_impl_;
    EventCapabilityMode_pskel (EventCapabilityMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EventCapabilityMode_list_pskel* value_parser_;
  };

  class ResourceVersionPolicy_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ResourceVersionPolicy_list ();

    // Constructor.
    //
    ResourceVersionPolicy_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResourceVersionPolicy_list_pskel* ResourceVersionPolicy_list_impl_;
    ResourceVersionPolicy_list_pskel (ResourceVersionPolicy_list_pskel*, void*);

    protected:
    static const char* const _xsde_ResourceVersionPolicy_list_pskel_enums_[3UL];
  };

  class ResourceVersionPolicy_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ResourceVersionPolicy ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ResourceVersionPolicy_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ResourceVersionPolicy_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResourceVersionPolicy_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResourceVersionPolicy_pskel* ResourceVersionPolicy_impl_;
    ResourceVersionPolicy_pskel (ResourceVersionPolicy_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ResourceVersionPolicy_list_pskel* value_parser_;
  };

  class DocumentMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DocumentMode_list ();

    // Constructor.
    //
    DocumentMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentMode_list_pskel* DocumentMode_list_impl_;
    DocumentMode_list_pskel (DocumentMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_DocumentMode_list_pskel_enums_[2UL];
  };

  class DocumentMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DocumentMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DocumentMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DocumentMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentMode_pskel* DocumentMode_impl_;
    DocumentMode_pskel (DocumentMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DocumentMode_list_pskel* value_parser_;
  };

  class RestfulCapabilityMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RestfulCapabilityMode_list ();

    // Constructor.
    //
    RestfulCapabilityMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RestfulCapabilityMode_list_pskel* RestfulCapabilityMode_list_impl_;
    RestfulCapabilityMode_list_pskel (RestfulCapabilityMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_RestfulCapabilityMode_list_pskel_enums_[2UL];
  };

  class RestfulCapabilityMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RestfulCapabilityMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RestfulCapabilityMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RestfulCapabilityMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RestfulCapabilityMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RestfulCapabilityMode_pskel* RestfulCapabilityMode_impl_;
    RestfulCapabilityMode_pskel (RestfulCapabilityMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RestfulCapabilityMode_list_pskel* value_parser_;
  };

  class TypeRestfulInteraction_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TypeRestfulInteraction_list ();

    // Constructor.
    //
    TypeRestfulInteraction_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TypeRestfulInteraction_list_pskel* TypeRestfulInteraction_list_impl_;
    TypeRestfulInteraction_list_pskel (TypeRestfulInteraction_list_pskel*, void*);

    protected:
    static const char* const _xsde_TypeRestfulInteraction_list_pskel_enums_[9UL];
  };

  class TypeRestfulInteraction_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TypeRestfulInteraction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TypeRestfulInteraction_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TypeRestfulInteraction_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TypeRestfulInteraction_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TypeRestfulInteraction_pskel* TypeRestfulInteraction_impl_;
    TypeRestfulInteraction_pskel (TypeRestfulInteraction_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TypeRestfulInteraction_list_pskel* value_parser_;
  };

  class SystemRestfulInteraction_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SystemRestfulInteraction_list ();

    // Constructor.
    //
    SystemRestfulInteraction_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SystemRestfulInteraction_list_pskel* SystemRestfulInteraction_list_impl_;
    SystemRestfulInteraction_list_pskel (SystemRestfulInteraction_list_pskel*, void*);

    protected:
    static const char* const _xsde_SystemRestfulInteraction_list_pskel_enums_[4UL];
  };

  class SystemRestfulInteraction_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SystemRestfulInteraction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SystemRestfulInteraction_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SystemRestfulInteraction_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SystemRestfulInteraction_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SystemRestfulInteraction_pskel* SystemRestfulInteraction_impl_;
    SystemRestfulInteraction_pskel (SystemRestfulInteraction_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SystemRestfulInteraction_list_pskel* value_parser_;
  };

  class ConditionalReadStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConditionalReadStatus_list ();

    // Constructor.
    //
    ConditionalReadStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConditionalReadStatus_list_pskel* ConditionalReadStatus_list_impl_;
    ConditionalReadStatus_list_pskel (ConditionalReadStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConditionalReadStatus_list_pskel_enums_[4UL];
  };

  class ConditionalReadStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConditionalReadStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConditionalReadStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConditionalReadStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConditionalReadStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConditionalReadStatus_pskel* ConditionalReadStatus_impl_;
    ConditionalReadStatus_pskel (ConditionalReadStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConditionalReadStatus_list_pskel* value_parser_;
  };

  class ReferenceHandlingPolicy_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ReferenceHandlingPolicy_list ();

    // Constructor.
    //
    ReferenceHandlingPolicy_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ReferenceHandlingPolicy_list_pskel* ReferenceHandlingPolicy_list_impl_;
    ReferenceHandlingPolicy_list_pskel (ReferenceHandlingPolicy_list_pskel*, void*);

    protected:
    static const char* const _xsde_ReferenceHandlingPolicy_list_pskel_enums_[5UL];
  };

  class ReferenceHandlingPolicy_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ReferenceHandlingPolicy ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ReferenceHandlingPolicy_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ReferenceHandlingPolicy_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ReferenceHandlingPolicy_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ReferenceHandlingPolicy_pskel* ReferenceHandlingPolicy_impl_;
    ReferenceHandlingPolicy_pskel (ReferenceHandlingPolicy_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ReferenceHandlingPolicy_list_pskel* value_parser_;
  };

  class ConditionalDeleteStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConditionalDeleteStatus_list ();

    // Constructor.
    //
    ConditionalDeleteStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConditionalDeleteStatus_list_pskel* ConditionalDeleteStatus_list_impl_;
    ConditionalDeleteStatus_list_pskel (ConditionalDeleteStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConditionalDeleteStatus_list_pskel_enums_[3UL];
  };

  class ConditionalDeleteStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConditionalDeleteStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConditionalDeleteStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConditionalDeleteStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConditionalDeleteStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConditionalDeleteStatus_pskel* ConditionalDeleteStatus_impl_;
    ConditionalDeleteStatus_pskel (ConditionalDeleteStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConditionalDeleteStatus_list_pskel* value_parser_;
  };

  class CarePlan_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    basedOn ();

    virtual void
    replaces ();

    virtual void
    partOf ();

    virtual void
    status ();

    virtual void
    intent ();

    virtual void
    category ();

    virtual void
    title ();

    virtual void
    description ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    period ();

    virtual void
    created ();

    virtual void
    author ();

    virtual void
    contributor ();

    virtual void
    careTeam ();

    virtual void
    addresses ();

    virtual void
    supportingInfo ();

    virtual void
    goal ();

    virtual void
    activity ();

    virtual void
    note ();

    virtual void
    post_CarePlan ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* replaces */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::RequestStatus_pskel& /* status */,
             ::fhir::CarePlanIntent_pskel& /* intent */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::Reference_pskel& /* contributor */,
             ::fhir::Reference_pskel& /* careTeam */,
             ::fhir::Reference_pskel& /* addresses */,
             ::fhir::Reference_pskel& /* supportingInfo */,
             ::fhir::Reference_pskel& /* goal */,
             ::fhir::CarePlan_Activity_pskel& /* activity */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    replaces_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::RequestStatus_pskel&);

    void
    intent_parser (::fhir::CarePlanIntent_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    contributor_parser (::fhir::Reference_pskel&);

    void
    careTeam_parser (::fhir::Reference_pskel&);

    void
    addresses_parser (::fhir::Reference_pskel&);

    void
    supportingInfo_parser (::fhir::Reference_pskel&);

    void
    goal_parser (::fhir::Reference_pskel&);

    void
    activity_parser (::fhir::CarePlan_Activity_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CarePlan_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CarePlan_pskel* CarePlan_impl_;
    CarePlan_pskel (CarePlan_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* replaces_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::RequestStatus_pskel* status_parser_;
    ::fhir::CarePlanIntent_pskel* intent_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::Reference_pskel* contributor_parser_;
    ::fhir::Reference_pskel* careTeam_parser_;
    ::fhir::Reference_pskel* addresses_parser_;
    ::fhir::Reference_pskel* supportingInfo_parser_;
    ::fhir::Reference_pskel* goal_parser_;
    ::fhir::CarePlan_Activity_pskel* activity_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CarePlan_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CarePlan_Activity_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    outcomeCodeableConcept ();

    virtual void
    outcomeReference ();

    virtual void
    progress ();

    virtual void
    reference ();

    virtual void
    detail ();

    virtual void
    post_CarePlan_Activity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* outcomeCodeableConcept */,
             ::fhir::Reference_pskel& /* outcomeReference */,
             ::fhir::Annotation_pskel& /* progress */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::CarePlan_Detail_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    outcomeCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    outcomeReference_parser (::fhir::Reference_pskel&);

    void
    progress_parser (::fhir::Annotation_pskel&);

    void
    reference_parser (::fhir::Reference_pskel&);

    void
    detail_parser (::fhir::CarePlan_Detail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CarePlan_Activity_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CarePlan_Activity_pskel* CarePlan_Activity_impl_;
    CarePlan_Activity_pskel (CarePlan_Activity_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* outcomeCodeableConcept_parser_;
    ::fhir::Reference_pskel* outcomeReference_parser_;
    ::fhir::Annotation_pskel* progress_parser_;
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::CarePlan_Detail_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CarePlan_Activity_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CarePlan_Detail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    kind ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    code ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    goal ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    doNotPerform ();

    virtual void
    scheduledTiming ();

    virtual void
    scheduledPeriod ();

    virtual void
    scheduledString ();

    virtual void
    location ();

    virtual void
    performer ();

    virtual void
    productCodeableConcept ();

    virtual void
    productReference ();

    virtual void
    dailyAmount ();

    virtual void
    quantity ();

    virtual void
    description ();

    virtual void
    post_CarePlan_Detail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CarePlanActivityKind_pskel& /* kind */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Reference_pskel& /* goal */,
             ::fhir::CarePlanActivityStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::boolean_pskel& /* doNotPerform */,
             ::fhir::Timing_pskel& /* scheduledTiming */,
             ::fhir::Period_pskel& /* scheduledPeriod */,
             ::fhir::string_pskel& /* scheduledString */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::CodeableConcept_pskel& /* productCodeableConcept */,
             ::fhir::Reference_pskel& /* productReference */,
             ::fhir::Quantity_pskel& /* dailyAmount */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::string_pskel& /* description */);

    // Individual element parsers.
    //
    void
    kind_parser (::fhir::CarePlanActivityKind_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    goal_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::CarePlanActivityStatus_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    doNotPerform_parser (::fhir::boolean_pskel&);

    void
    scheduledTiming_parser (::fhir::Timing_pskel&);

    void
    scheduledPeriod_parser (::fhir::Period_pskel&);

    void
    scheduledString_parser (::fhir::string_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    productCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    productReference_parser (::fhir::Reference_pskel&);

    void
    dailyAmount_parser (::fhir::Quantity_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CarePlan_Detail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CarePlan_Detail_pskel* CarePlan_Detail_impl_;
    CarePlan_Detail_pskel (CarePlan_Detail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CarePlanActivityKind_pskel* kind_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Reference_pskel* goal_parser_;
    ::fhir::CarePlanActivityStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::boolean_pskel* doNotPerform_parser_;
    ::fhir::Timing_pskel* scheduledTiming_parser_;
    ::fhir::Period_pskel* scheduledPeriod_parser_;
    ::fhir::string_pskel* scheduledString_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::CodeableConcept_pskel* productCodeableConcept_parser_;
    ::fhir::Reference_pskel* productReference_parser_;
    ::fhir::Quantity_pskel* dailyAmount_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::string_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CarePlan_Detail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CarePlanActivityKind_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CarePlanActivityKind_list ();

    // Constructor.
    //
    CarePlanActivityKind_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CarePlanActivityKind_list_pskel* CarePlanActivityKind_list_impl_;
    CarePlanActivityKind_list_pskel (CarePlanActivityKind_list_pskel*, void*);

    protected:
    static const char* const _xsde_CarePlanActivityKind_list_pskel_enums_[8UL];
  };

  class CarePlanActivityKind_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CarePlanActivityKind ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CarePlanActivityKind_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CarePlanActivityKind_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CarePlanActivityKind_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CarePlanActivityKind_pskel* CarePlanActivityKind_impl_;
    CarePlanActivityKind_pskel (CarePlanActivityKind_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CarePlanActivityKind_list_pskel* value_parser_;
  };

  class CarePlanActivityStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CarePlanActivityStatus_list ();

    // Constructor.
    //
    CarePlanActivityStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CarePlanActivityStatus_list_pskel* CarePlanActivityStatus_list_impl_;
    CarePlanActivityStatus_list_pskel (CarePlanActivityStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_CarePlanActivityStatus_list_pskel_enums_[9UL];
  };

  class CarePlanActivityStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CarePlanActivityStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CarePlanActivityStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CarePlanActivityStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CarePlanActivityStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CarePlanActivityStatus_pskel* CarePlanActivityStatus_impl_;
    CarePlanActivityStatus_pskel (CarePlanActivityStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CarePlanActivityStatus_list_pskel* value_parser_;
  };

  class CarePlanIntent_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CarePlanIntent_list ();

    // Constructor.
    //
    CarePlanIntent_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CarePlanIntent_list_pskel* CarePlanIntent_list_impl_;
    CarePlanIntent_list_pskel (CarePlanIntent_list_pskel*, void*);

    protected:
    static const char* const _xsde_CarePlanIntent_list_pskel_enums_[4UL];
  };

  class CarePlanIntent_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CarePlanIntent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CarePlanIntent_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CarePlanIntent_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CarePlanIntent_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CarePlanIntent_pskel* CarePlanIntent_impl_;
    CarePlanIntent_pskel (CarePlanIntent_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CarePlanIntent_list_pskel* value_parser_;
  };

  class RequestStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RequestStatus_list ();

    // Constructor.
    //
    RequestStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestStatus_list_pskel* RequestStatus_list_impl_;
    RequestStatus_list_pskel (RequestStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_RequestStatus_list_pskel_enums_[7UL];
  };

  class RequestStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RequestStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RequestStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RequestStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestStatus_pskel* RequestStatus_impl_;
    RequestStatus_pskel (RequestStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RequestStatus_list_pskel* value_parser_;
  };

  class CareTeam_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    category ();

    virtual void
    name ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    period ();

    virtual void
    participant ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    managingOrganization ();

    virtual void
    telecom ();

    virtual void
    note ();

    virtual void
    post_CareTeam ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CareTeamStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::string_pskel& /* name */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::CareTeam_Participant_pskel& /* participant */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Reference_pskel& /* managingOrganization */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::CareTeamStatus_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    participant_parser (::fhir::CareTeam_Participant_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    managingOrganization_parser (::fhir::Reference_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CareTeam_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CareTeam_pskel* CareTeam_impl_;
    CareTeam_pskel (CareTeam_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CareTeamStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::CareTeam_Participant_pskel* participant_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Reference_pskel* managingOrganization_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CareTeam_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CareTeam_Participant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    role ();

    virtual void
    member ();

    virtual void
    onBehalfOf ();

    virtual void
    period ();

    virtual void
    post_CareTeam_Participant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::Reference_pskel& /* member */,
             ::fhir::Reference_pskel& /* onBehalfOf */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    member_parser (::fhir::Reference_pskel&);

    void
    onBehalfOf_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CareTeam_Participant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CareTeam_Participant_pskel* CareTeam_Participant_impl_;
    CareTeam_Participant_pskel (CareTeam_Participant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::Reference_pskel* member_parser_;
    ::fhir::Reference_pskel* onBehalfOf_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CareTeam_Participant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CareTeamStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CareTeamStatus_list ();

    // Constructor.
    //
    CareTeamStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CareTeamStatus_list_pskel* CareTeamStatus_list_impl_;
    CareTeamStatus_list_pskel (CareTeamStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_CareTeamStatus_list_pskel_enums_[5UL];
  };

  class CareTeamStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CareTeamStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CareTeamStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CareTeamStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CareTeamStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CareTeamStatus_pskel* CareTeamStatus_impl_;
    CareTeamStatus_pskel (CareTeamStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CareTeamStatus_list_pskel* value_parser_;
  };

  class CatalogEntry_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    orderable ();

    virtual void
    referencedItem ();

    virtual void
    additionalIdentifier ();

    virtual void
    classification ();

    virtual void
    status ();

    virtual void
    validityPeriod ();

    virtual void
    validTo ();

    virtual void
    lastUpdated ();

    virtual void
    additionalCharacteristic ();

    virtual void
    additionalClassification ();

    virtual void
    relatedEntry ();

    virtual void
    post_CatalogEntry ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::boolean_pskel& /* orderable */,
             ::fhir::Reference_pskel& /* referencedItem */,
             ::fhir::Identifier_pskel& /* additionalIdentifier */,
             ::fhir::CodeableConcept_pskel& /* classification */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::Period_pskel& /* validityPeriod */,
             ::fhir::dateTime_pskel& /* validTo */,
             ::fhir::dateTime_pskel& /* lastUpdated */,
             ::fhir::CodeableConcept_pskel& /* additionalCharacteristic */,
             ::fhir::CodeableConcept_pskel& /* additionalClassification */,
             ::fhir::CatalogEntry_RelatedEntry_pskel& /* relatedEntry */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    orderable_parser (::fhir::boolean_pskel&);

    void
    referencedItem_parser (::fhir::Reference_pskel&);

    void
    additionalIdentifier_parser (::fhir::Identifier_pskel&);

    void
    classification_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    validityPeriod_parser (::fhir::Period_pskel&);

    void
    validTo_parser (::fhir::dateTime_pskel&);

    void
    lastUpdated_parser (::fhir::dateTime_pskel&);

    void
    additionalCharacteristic_parser (::fhir::CodeableConcept_pskel&);

    void
    additionalClassification_parser (::fhir::CodeableConcept_pskel&);

    void
    relatedEntry_parser (::fhir::CatalogEntry_RelatedEntry_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CatalogEntry_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CatalogEntry_pskel* CatalogEntry_impl_;
    CatalogEntry_pskel (CatalogEntry_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::boolean_pskel* orderable_parser_;
    ::fhir::Reference_pskel* referencedItem_parser_;
    ::fhir::Identifier_pskel* additionalIdentifier_parser_;
    ::fhir::CodeableConcept_pskel* classification_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::Period_pskel* validityPeriod_parser_;
    ::fhir::dateTime_pskel* validTo_parser_;
    ::fhir::dateTime_pskel* lastUpdated_parser_;
    ::fhir::CodeableConcept_pskel* additionalCharacteristic_parser_;
    ::fhir::CodeableConcept_pskel* additionalClassification_parser_;
    ::fhir::CatalogEntry_RelatedEntry_pskel* relatedEntry_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CatalogEntry_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CatalogEntry_RelatedEntry_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    relationtype ();

    virtual void
    item ();

    virtual void
    post_CatalogEntry_RelatedEntry ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CatalogEntryRelationType_pskel& /* relationtype */,
             ::fhir::Reference_pskel& /* item */);

    // Individual element parsers.
    //
    void
    relationtype_parser (::fhir::CatalogEntryRelationType_pskel&);

    void
    item_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CatalogEntry_RelatedEntry_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CatalogEntry_RelatedEntry_pskel* CatalogEntry_RelatedEntry_impl_;
    CatalogEntry_RelatedEntry_pskel (CatalogEntry_RelatedEntry_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CatalogEntryRelationType_pskel* relationtype_parser_;
    ::fhir::Reference_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CatalogEntry_RelatedEntry_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CatalogEntryRelationType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CatalogEntryRelationType_list ();

    // Constructor.
    //
    CatalogEntryRelationType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CatalogEntryRelationType_list_pskel* CatalogEntryRelationType_list_impl_;
    CatalogEntryRelationType_list_pskel (CatalogEntryRelationType_list_pskel*, void*);

    protected:
    static const char* const _xsde_CatalogEntryRelationType_list_pskel_enums_[2UL];
  };

  class CatalogEntryRelationType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CatalogEntryRelationType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CatalogEntryRelationType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CatalogEntryRelationType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CatalogEntryRelationType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CatalogEntryRelationType_pskel* CatalogEntryRelationType_impl_;
    CatalogEntryRelationType_pskel (CatalogEntryRelationType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CatalogEntryRelationType_list_pskel* value_parser_;
  };

  class ChargeItem_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    definitionUri ();

    virtual void
    definitionCanonical ();

    virtual void
    status ();

    virtual void
    partOf ();

    virtual void
    code ();

    virtual void
    subject ();

    virtual void
    context ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrencePeriod ();

    virtual void
    occurrenceTiming ();

    virtual void
    performer ();

    virtual void
    performingOrganization ();

    virtual void
    requestingOrganization ();

    virtual void
    costCenter ();

    virtual void
    quantity ();

    virtual void
    bodysite ();

    virtual void
    factorOverride ();

    virtual void
    priceOverride ();

    virtual void
    overrideReason ();

    virtual void
    enterer ();

    virtual void
    enteredDate ();

    virtual void
    reason ();

    virtual void
    service ();

    virtual void
    productReference ();

    virtual void
    productCodeableConcept ();

    virtual void
    account ();

    virtual void
    note ();

    virtual void
    supportingInformation ();

    virtual void
    post_ChargeItem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::uri_pskel& /* definitionUri */,
             ::fhir::canonical_pskel& /* definitionCanonical */,
             ::fhir::ChargeItemStatus_pskel& /* status */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* context */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::Period_pskel& /* occurrencePeriod */,
             ::fhir::Timing_pskel& /* occurrenceTiming */,
             ::fhir::ChargeItem_Performer_pskel& /* performer */,
             ::fhir::Reference_pskel& /* performingOrganization */,
             ::fhir::Reference_pskel& /* requestingOrganization */,
             ::fhir::Reference_pskel& /* costCenter */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::CodeableConcept_pskel& /* bodysite */,
             ::fhir::decimal_pskel& /* factorOverride */,
             ::fhir::Money_pskel& /* priceOverride */,
             ::fhir::string_pskel& /* overrideReason */,
             ::fhir::Reference_pskel& /* enterer */,
             ::fhir::dateTime_pskel& /* enteredDate */,
             ::fhir::CodeableConcept_pskel& /* reason */,
             ::fhir::Reference_pskel& /* service */,
             ::fhir::Reference_pskel& /* productReference */,
             ::fhir::CodeableConcept_pskel& /* productCodeableConcept */,
             ::fhir::Reference_pskel& /* account */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::Reference_pskel& /* supportingInformation */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    definitionUri_parser (::fhir::uri_pskel&);

    void
    definitionCanonical_parser (::fhir::canonical_pskel&);

    void
    status_parser (::fhir::ChargeItemStatus_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    context_parser (::fhir::Reference_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrencePeriod_parser (::fhir::Period_pskel&);

    void
    occurrenceTiming_parser (::fhir::Timing_pskel&);

    void
    performer_parser (::fhir::ChargeItem_Performer_pskel&);

    void
    performingOrganization_parser (::fhir::Reference_pskel&);

    void
    requestingOrganization_parser (::fhir::Reference_pskel&);

    void
    costCenter_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    bodysite_parser (::fhir::CodeableConcept_pskel&);

    void
    factorOverride_parser (::fhir::decimal_pskel&);

    void
    priceOverride_parser (::fhir::Money_pskel&);

    void
    overrideReason_parser (::fhir::string_pskel&);

    void
    enterer_parser (::fhir::Reference_pskel&);

    void
    enteredDate_parser (::fhir::dateTime_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    void
    service_parser (::fhir::Reference_pskel&);

    void
    productReference_parser (::fhir::Reference_pskel&);

    void
    productCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    account_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    supportingInformation_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ChargeItem_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ChargeItem_pskel* ChargeItem_impl_;
    ChargeItem_pskel (ChargeItem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::uri_pskel* definitionUri_parser_;
    ::fhir::canonical_pskel* definitionCanonical_parser_;
    ::fhir::ChargeItemStatus_pskel* status_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* context_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::Period_pskel* occurrencePeriod_parser_;
    ::fhir::Timing_pskel* occurrenceTiming_parser_;
    ::fhir::ChargeItem_Performer_pskel* performer_parser_;
    ::fhir::Reference_pskel* performingOrganization_parser_;
    ::fhir::Reference_pskel* requestingOrganization_parser_;
    ::fhir::Reference_pskel* costCenter_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::CodeableConcept_pskel* bodysite_parser_;
    ::fhir::decimal_pskel* factorOverride_parser_;
    ::fhir::Money_pskel* priceOverride_parser_;
    ::fhir::string_pskel* overrideReason_parser_;
    ::fhir::Reference_pskel* enterer_parser_;
    ::fhir::dateTime_pskel* enteredDate_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;
    ::fhir::Reference_pskel* service_parser_;
    ::fhir::Reference_pskel* productReference_parser_;
    ::fhir::CodeableConcept_pskel* productCodeableConcept_parser_;
    ::fhir::Reference_pskel* account_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::Reference_pskel* supportingInformation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ChargeItem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ChargeItem_Performer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    function ();

    virtual void
    actor ();

    virtual void
    post_ChargeItem_Performer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* function */,
             ::fhir::Reference_pskel& /* actor */);

    // Individual element parsers.
    //
    void
    function_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ChargeItem_Performer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ChargeItem_Performer_pskel* ChargeItem_Performer_impl_;
    ChargeItem_Performer_pskel (ChargeItem_Performer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* function_parser_;
    ::fhir::Reference_pskel* actor_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ChargeItem_Performer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ChargeItemStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ChargeItemStatus_list ();

    // Constructor.
    //
    ChargeItemStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ChargeItemStatus_list_pskel* ChargeItemStatus_list_impl_;
    ChargeItemStatus_list_pskel (ChargeItemStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ChargeItemStatus_list_pskel_enums_[7UL];
  };

  class ChargeItemStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ChargeItemStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ChargeItemStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ChargeItemStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ChargeItemStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ChargeItemStatus_pskel* ChargeItemStatus_impl_;
    ChargeItemStatus_pskel (ChargeItemStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ChargeItemStatus_list_pskel* value_parser_;
  };

  class ChargeItemDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    title ();

    virtual void
    derivedFromUri ();

    virtual void
    partOf ();

    virtual void
    replaces ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    code ();

    virtual void
    instance ();

    virtual void
    applicability ();

    virtual void
    propertyGroup ();

    virtual void
    post_ChargeItemDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* title */,
             ::fhir::uri_pskel& /* derivedFromUri */,
             ::fhir::canonical_pskel& /* partOf */,
             ::fhir::canonical_pskel& /* replaces */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* instance */,
             ::fhir::ChargeItemDefinition_Applicability_pskel& /* applicability */,
             ::fhir::ChargeItemDefinition_PropertyGroup_pskel& /* propertyGroup */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    derivedFromUri_parser (::fhir::uri_pskel&);

    void
    partOf_parser (::fhir::canonical_pskel&);

    void
    replaces_parser (::fhir::canonical_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    instance_parser (::fhir::Reference_pskel&);

    void
    applicability_parser (::fhir::ChargeItemDefinition_Applicability_pskel&);

    void
    propertyGroup_parser (::fhir::ChargeItemDefinition_PropertyGroup_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ChargeItemDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ChargeItemDefinition_pskel* ChargeItemDefinition_impl_;
    ChargeItemDefinition_pskel (ChargeItemDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::uri_pskel* derivedFromUri_parser_;
    ::fhir::canonical_pskel* partOf_parser_;
    ::fhir::canonical_pskel* replaces_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* instance_parser_;
    ::fhir::ChargeItemDefinition_Applicability_pskel* applicability_parser_;
    ::fhir::ChargeItemDefinition_PropertyGroup_pskel* propertyGroup_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ChargeItemDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ChargeItemDefinition_Applicability_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    language ();

    virtual void
    expression ();

    virtual void
    post_ChargeItemDefinition_Applicability ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::string_pskel& /* language */,
             ::fhir::string_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    language_parser (::fhir::string_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ChargeItemDefinition_Applicability_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ChargeItemDefinition_Applicability_pskel* ChargeItemDefinition_Applicability_impl_;
    ChargeItemDefinition_Applicability_pskel (ChargeItemDefinition_Applicability_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::string_pskel* language_parser_;
    ::fhir::string_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ChargeItemDefinition_Applicability_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ChargeItemDefinition_PropertyGroup_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    applicability ();

    virtual void
    priceComponent ();

    virtual void
    post_ChargeItemDefinition_PropertyGroup ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ChargeItemDefinition_Applicability_pskel& /* applicability */,
             ::fhir::ChargeItemDefinition_PriceComponent_pskel& /* priceComponent */);

    // Individual element parsers.
    //
    void
    applicability_parser (::fhir::ChargeItemDefinition_Applicability_pskel&);

    void
    priceComponent_parser (::fhir::ChargeItemDefinition_PriceComponent_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ChargeItemDefinition_PropertyGroup_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ChargeItemDefinition_PropertyGroup_pskel* ChargeItemDefinition_PropertyGroup_impl_;
    ChargeItemDefinition_PropertyGroup_pskel (ChargeItemDefinition_PropertyGroup_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ChargeItemDefinition_Applicability_pskel* applicability_parser_;
    ::fhir::ChargeItemDefinition_PriceComponent_pskel* priceComponent_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ChargeItemDefinition_PropertyGroup_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ChargeItemDefinition_PriceComponent_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    code ();

    virtual void
    factor ();

    virtual void
    amount ();

    virtual void
    post_ChargeItemDefinition_PriceComponent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::InvoicePriceComponentType_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::InvoicePriceComponentType_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    amount_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ChargeItemDefinition_PriceComponent_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ChargeItemDefinition_PriceComponent_pskel* ChargeItemDefinition_PriceComponent_impl_;
    ChargeItemDefinition_PriceComponent_pskel (ChargeItemDefinition_PriceComponent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::InvoicePriceComponentType_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ChargeItemDefinition_PriceComponent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InvoicePriceComponentType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_InvoicePriceComponentType_list ();

    // Constructor.
    //
    InvoicePriceComponentType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    InvoicePriceComponentType_list_pskel* InvoicePriceComponentType_list_impl_;
    InvoicePriceComponentType_list_pskel (InvoicePriceComponentType_list_pskel*, void*);

    protected:
    static const char* const _xsde_InvoicePriceComponentType_list_pskel_enums_[6UL];
  };

  class InvoicePriceComponentType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_InvoicePriceComponentType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::InvoicePriceComponentType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::InvoicePriceComponentType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InvoicePriceComponentType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    InvoicePriceComponentType_pskel* InvoicePriceComponentType_impl_;
    InvoicePriceComponentType_pskel (InvoicePriceComponentType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::InvoicePriceComponentType_list_pskel* value_parser_;
  };

  class Claim_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    subType ();

    virtual void
    use ();

    virtual void
    patient ();

    virtual void
    billablePeriod ();

    virtual void
    created ();

    virtual void
    enterer ();

    virtual void
    insurer ();

    virtual void
    provider ();

    virtual void
    priority ();

    virtual void
    fundsReserve ();

    virtual void
    related ();

    virtual void
    prescription ();

    virtual void
    originalPrescription ();

    virtual void
    payee ();

    virtual void
    referral ();

    virtual void
    facility ();

    virtual void
    careTeam ();

    virtual void
    supportingInfo ();

    virtual void
    diagnosis ();

    virtual void
    procedure ();

    virtual void
    insurance ();

    virtual void
    accident ();

    virtual void
    item ();

    virtual void
    total ();

    virtual void
    post_Claim ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subType */,
             ::fhir::Use_pskel& /* use */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Period_pskel& /* billablePeriod */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* enterer */,
             ::fhir::Reference_pskel& /* insurer */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::CodeableConcept_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* fundsReserve */,
             ::fhir::Claim_Related_pskel& /* related */,
             ::fhir::Reference_pskel& /* prescription */,
             ::fhir::Reference_pskel& /* originalPrescription */,
             ::fhir::Claim_Payee_pskel& /* payee */,
             ::fhir::Reference_pskel& /* referral */,
             ::fhir::Reference_pskel& /* facility */,
             ::fhir::Claim_CareTeam_pskel& /* careTeam */,
             ::fhir::Claim_SupportingInfo_pskel& /* supportingInfo */,
             ::fhir::Claim_Diagnosis_pskel& /* diagnosis */,
             ::fhir::Claim_Procedure_pskel& /* procedure */,
             ::fhir::Claim_Insurance_pskel& /* insurance */,
             ::fhir::Claim_Accident_pskel& /* accident */,
             ::fhir::Claim_Item_pskel& /* item */,
             ::fhir::Money_pskel& /* total */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subType_parser (::fhir::CodeableConcept_pskel&);

    void
    use_parser (::fhir::Use_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    billablePeriod_parser (::fhir::Period_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    enterer_parser (::fhir::Reference_pskel&);

    void
    insurer_parser (::fhir::Reference_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    priority_parser (::fhir::CodeableConcept_pskel&);

    void
    fundsReserve_parser (::fhir::CodeableConcept_pskel&);

    void
    related_parser (::fhir::Claim_Related_pskel&);

    void
    prescription_parser (::fhir::Reference_pskel&);

    void
    originalPrescription_parser (::fhir::Reference_pskel&);

    void
    payee_parser (::fhir::Claim_Payee_pskel&);

    void
    referral_parser (::fhir::Reference_pskel&);

    void
    facility_parser (::fhir::Reference_pskel&);

    void
    careTeam_parser (::fhir::Claim_CareTeam_pskel&);

    void
    supportingInfo_parser (::fhir::Claim_SupportingInfo_pskel&);

    void
    diagnosis_parser (::fhir::Claim_Diagnosis_pskel&);

    void
    procedure_parser (::fhir::Claim_Procedure_pskel&);

    void
    insurance_parser (::fhir::Claim_Insurance_pskel&);

    void
    accident_parser (::fhir::Claim_Accident_pskel&);

    void
    item_parser (::fhir::Claim_Item_pskel&);

    void
    total_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_pskel* Claim_impl_;
    Claim_pskel (Claim_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subType_parser_;
    ::fhir::Use_pskel* use_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Period_pskel* billablePeriod_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* enterer_parser_;
    ::fhir::Reference_pskel* insurer_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::CodeableConcept_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* fundsReserve_parser_;
    ::fhir::Claim_Related_pskel* related_parser_;
    ::fhir::Reference_pskel* prescription_parser_;
    ::fhir::Reference_pskel* originalPrescription_parser_;
    ::fhir::Claim_Payee_pskel* payee_parser_;
    ::fhir::Reference_pskel* referral_parser_;
    ::fhir::Reference_pskel* facility_parser_;
    ::fhir::Claim_CareTeam_pskel* careTeam_parser_;
    ::fhir::Claim_SupportingInfo_pskel* supportingInfo_parser_;
    ::fhir::Claim_Diagnosis_pskel* diagnosis_parser_;
    ::fhir::Claim_Procedure_pskel* procedure_parser_;
    ::fhir::Claim_Insurance_pskel* insurance_parser_;
    ::fhir::Claim_Accident_pskel* accident_parser_;
    ::fhir::Claim_Item_pskel* item_parser_;
    ::fhir::Money_pskel* total_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Related_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    claim ();

    virtual void
    relationship ();

    virtual void
    reference ();

    virtual void
    post_Claim_Related ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* claim */,
             ::fhir::CodeableConcept_pskel& /* relationship */,
             ::fhir::Identifier_pskel& /* reference */);

    // Individual element parsers.
    //
    void
    claim_parser (::fhir::Reference_pskel&);

    void
    relationship_parser (::fhir::CodeableConcept_pskel&);

    void
    reference_parser (::fhir::Identifier_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Related_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Related_pskel* Claim_Related_impl_;
    Claim_Related_pskel (Claim_Related_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* claim_parser_;
    ::fhir::CodeableConcept_pskel* relationship_parser_;
    ::fhir::Identifier_pskel* reference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Related_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Payee_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    party ();

    virtual void
    post_Claim_Payee ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* party */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    party_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Payee_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Payee_pskel* Claim_Payee_impl_;
    Claim_Payee_pskel (Claim_Payee_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* party_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Payee_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_CareTeam_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    provider ();

    virtual void
    responsible ();

    virtual void
    role ();

    virtual void
    qualification ();

    virtual void
    post_Claim_CareTeam ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::boolean_pskel& /* responsible */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::CodeableConcept_pskel& /* qualification */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    responsible_parser (::fhir::boolean_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    qualification_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_CareTeam_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_CareTeam_pskel* Claim_CareTeam_impl_;
    Claim_CareTeam_pskel (Claim_CareTeam_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::boolean_pskel* responsible_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::CodeableConcept_pskel* qualification_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_CareTeam_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_SupportingInfo_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    category ();

    virtual void
    code ();

    virtual void
    timingDate ();

    virtual void
    timingPeriod ();

    virtual void
    valueBoolean ();

    virtual void
    valueString ();

    virtual void
    valueQuantity ();

    virtual void
    valueAttachment ();

    virtual void
    valueReference ();

    virtual void
    reason ();

    virtual void
    post_Claim_SupportingInfo ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::date_pskel& /* timingDate */,
             ::fhir::Period_pskel& /* timingPeriod */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::CodeableConcept_pskel& /* reason */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    timingDate_parser (::fhir::date_pskel&);

    void
    timingPeriod_parser (::fhir::Period_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_SupportingInfo_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_SupportingInfo_pskel* Claim_SupportingInfo_impl_;
    Claim_SupportingInfo_pskel (Claim_SupportingInfo_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::date_pskel* timingDate_parser_;
    ::fhir::Period_pskel* timingPeriod_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_SupportingInfo_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Diagnosis_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    diagnosisCodeableConcept ();

    virtual void
    diagnosisReference ();

    virtual void
    type ();

    virtual void
    onAdmission ();

    virtual void
    packageCode ();

    virtual void
    post_Claim_Diagnosis ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* diagnosisCodeableConcept */,
             ::fhir::Reference_pskel& /* diagnosisReference */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* onAdmission */,
             ::fhir::CodeableConcept_pskel& /* packageCode */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    diagnosisCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    diagnosisReference_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    onAdmission_parser (::fhir::CodeableConcept_pskel&);

    void
    packageCode_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Diagnosis_pskel* Claim_Diagnosis_impl_;
    Claim_Diagnosis_pskel (Claim_Diagnosis_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* diagnosisCodeableConcept_parser_;
    ::fhir::Reference_pskel* diagnosisReference_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* onAdmission_parser_;
    ::fhir::CodeableConcept_pskel* packageCode_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Diagnosis_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Procedure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    type ();

    virtual void
    date ();

    virtual void
    procedureCodeableConcept ();

    virtual void
    procedureReference ();

    virtual void
    udi ();

    virtual void
    post_Claim_Procedure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::CodeableConcept_pskel& /* procedureCodeableConcept */,
             ::fhir::Reference_pskel& /* procedureReference */,
             ::fhir::Reference_pskel& /* udi */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    procedureCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    procedureReference_parser (::fhir::Reference_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Procedure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Procedure_pskel* Claim_Procedure_impl_;
    Claim_Procedure_pskel (Claim_Procedure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::CodeableConcept_pskel* procedureCodeableConcept_parser_;
    ::fhir::Reference_pskel* procedureReference_parser_;
    ::fhir::Reference_pskel* udi_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Procedure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Insurance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    focal ();

    virtual void
    identifier ();

    virtual void
    coverage ();

    virtual void
    businessArrangement ();

    virtual void
    preAuthRef ();

    virtual void
    claimResponse ();

    virtual void
    post_Claim_Insurance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::boolean_pskel& /* focal */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* coverage */,
             ::fhir::string_pskel& /* businessArrangement */,
             ::fhir::string_pskel& /* preAuthRef */,
             ::fhir::Reference_pskel& /* claimResponse */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    focal_parser (::fhir::boolean_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    coverage_parser (::fhir::Reference_pskel&);

    void
    businessArrangement_parser (::fhir::string_pskel&);

    void
    preAuthRef_parser (::fhir::string_pskel&);

    void
    claimResponse_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Insurance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Insurance_pskel* Claim_Insurance_impl_;
    Claim_Insurance_pskel (Claim_Insurance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::boolean_pskel* focal_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* coverage_parser_;
    ::fhir::string_pskel* businessArrangement_parser_;
    ::fhir::string_pskel* preAuthRef_parser_;
    ::fhir::Reference_pskel* claimResponse_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Insurance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Accident_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    date ();

    virtual void
    type ();

    virtual void
    locationAddress ();

    virtual void
    locationReference ();

    virtual void
    post_Claim_Accident ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::date_pskel& /* date */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Address_pskel& /* locationAddress */,
             ::fhir::Reference_pskel& /* locationReference */);

    // Individual element parsers.
    //
    void
    date_parser (::fhir::date_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    locationAddress_parser (::fhir::Address_pskel&);

    void
    locationReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Accident_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Accident_pskel* Claim_Accident_impl_;
    Claim_Accident_pskel (Claim_Accident_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::date_pskel* date_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Address_pskel* locationAddress_parser_;
    ::fhir::Reference_pskel* locationReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Accident_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Item_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    careTeamSequence ();

    virtual void
    diagnosisSequence ();

    virtual void
    procedureSequence ();

    virtual void
    informationSequence ();

    virtual void
    revenue ();

    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    servicedDate ();

    virtual void
    servicedPeriod ();

    virtual void
    locationCodeableConcept ();

    virtual void
    locationAddress ();

    virtual void
    locationReference ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    udi ();

    virtual void
    bodySite ();

    virtual void
    subSite ();

    virtual void
    encounter ();

    virtual void
    detail ();

    virtual void
    post_Claim_Item ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::positiveInt_pskel& /* careTeamSequence */,
             ::fhir::positiveInt_pskel& /* diagnosisSequence */,
             ::fhir::positiveInt_pskel& /* procedureSequence */,
             ::fhir::positiveInt_pskel& /* informationSequence */,
             ::fhir::CodeableConcept_pskel& /* revenue */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::date_pskel& /* servicedDate */,
             ::fhir::Period_pskel& /* servicedPeriod */,
             ::fhir::CodeableConcept_pskel& /* locationCodeableConcept */,
             ::fhir::Address_pskel& /* locationAddress */,
             ::fhir::Reference_pskel& /* locationReference */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::Reference_pskel& /* udi */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::CodeableConcept_pskel& /* subSite */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::Claim_Detail_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    careTeamSequence_parser (::fhir::positiveInt_pskel&);

    void
    diagnosisSequence_parser (::fhir::positiveInt_pskel&);

    void
    procedureSequence_parser (::fhir::positiveInt_pskel&);

    void
    informationSequence_parser (::fhir::positiveInt_pskel&);

    void
    revenue_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    servicedDate_parser (::fhir::date_pskel&);

    void
    servicedPeriod_parser (::fhir::Period_pskel&);

    void
    locationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    locationAddress_parser (::fhir::Address_pskel&);

    void
    locationReference_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    subSite_parser (::fhir::CodeableConcept_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    detail_parser (::fhir::Claim_Detail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Item_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Item_pskel* Claim_Item_impl_;
    Claim_Item_pskel (Claim_Item_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::positiveInt_pskel* careTeamSequence_parser_;
    ::fhir::positiveInt_pskel* diagnosisSequence_parser_;
    ::fhir::positiveInt_pskel* procedureSequence_parser_;
    ::fhir::positiveInt_pskel* informationSequence_parser_;
    ::fhir::CodeableConcept_pskel* revenue_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::date_pskel* servicedDate_parser_;
    ::fhir::Period_pskel* servicedPeriod_parser_;
    ::fhir::CodeableConcept_pskel* locationCodeableConcept_parser_;
    ::fhir::Address_pskel* locationAddress_parser_;
    ::fhir::Reference_pskel* locationReference_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::Reference_pskel* udi_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::CodeableConcept_pskel* subSite_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::Claim_Detail_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_Detail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    revenue ();

    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    udi ();

    virtual void
    subDetail ();

    virtual void
    post_Claim_Detail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* revenue */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::Reference_pskel& /* udi */,
             ::fhir::Claim_SubDetail_pskel& /* subDetail */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    revenue_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    void
    subDetail_parser (::fhir::Claim_SubDetail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_Detail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_Detail_pskel* Claim_Detail_impl_;
    Claim_Detail_pskel (Claim_Detail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* revenue_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::Reference_pskel* udi_parser_;
    ::fhir::Claim_SubDetail_pskel* subDetail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_Detail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Claim_SubDetail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    revenue ();

    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    udi ();

    virtual void
    post_Claim_SubDetail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* revenue */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::Reference_pskel& /* udi */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    revenue_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Claim_SubDetail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Claim_SubDetail_pskel* Claim_SubDetail_impl_;
    Claim_SubDetail_pskel (Claim_SubDetail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* revenue_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::Reference_pskel* udi_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Claim_SubDetail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Use_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Use_list ();

    // Constructor.
    //
    Use_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    Use_list_pskel* Use_list_impl_;
    Use_list_pskel (Use_list_pskel*, void*);

    protected:
    static const char* const _xsde_Use_list_pskel_enums_[3UL];
  };

  class Use_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_Use ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Use_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::Use_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Use_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    Use_pskel* Use_impl_;
    Use_pskel (Use_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::Use_list_pskel* value_parser_;
  };

  class FinancialResourceStatusCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FinancialResourceStatusCodes_list ();

    // Constructor.
    //
    FinancialResourceStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    FinancialResourceStatusCodes_list_pskel* FinancialResourceStatusCodes_list_impl_;
    FinancialResourceStatusCodes_list_pskel (FinancialResourceStatusCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_FinancialResourceStatusCodes_list_pskel_enums_[4UL];
  };

  class FinancialResourceStatusCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_FinancialResourceStatusCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::FinancialResourceStatusCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::FinancialResourceStatusCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FinancialResourceStatusCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    FinancialResourceStatusCodes_pskel* FinancialResourceStatusCodes_impl_;
    FinancialResourceStatusCodes_pskel (FinancialResourceStatusCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::FinancialResourceStatusCodes_list_pskel* value_parser_;
  };

  class ClaimResponse_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    subType ();

    virtual void
    use ();

    virtual void
    patient ();

    virtual void
    created ();

    virtual void
    insurer ();

    virtual void
    requestor ();

    virtual void
    request ();

    virtual void
    outcome ();

    virtual void
    disposition ();

    virtual void
    preAuthRef ();

    virtual void
    preAuthPeriod ();

    virtual void
    payeeType ();

    virtual void
    item ();

    virtual void
    addItem ();

    virtual void
    adjudication ();

    virtual void
    total ();

    virtual void
    payment ();

    virtual void
    fundsReserve ();

    virtual void
    formCode ();

    virtual void
    form ();

    virtual void
    processNote ();

    virtual void
    communicationRequest ();

    virtual void
    insurance ();

    virtual void
    error ();

    virtual void
    post_ClaimResponse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subType */,
             ::fhir::Use_pskel& /* use */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* insurer */,
             ::fhir::Reference_pskel& /* requestor */,
             ::fhir::Reference_pskel& /* request */,
             ::fhir::ClaimProcessingCodes_pskel& /* outcome */,
             ::fhir::string_pskel& /* disposition */,
             ::fhir::string_pskel& /* preAuthRef */,
             ::fhir::Period_pskel& /* preAuthPeriod */,
             ::fhir::CodeableConcept_pskel& /* payeeType */,
             ::fhir::ClaimResponse_Item_pskel& /* item */,
             ::fhir::ClaimResponse_AddItem_pskel& /* addItem */,
             ::fhir::ClaimResponse_Adjudication_pskel& /* adjudication */,
             ::fhir::ClaimResponse_Total_pskel& /* total */,
             ::fhir::ClaimResponse_Payment_pskel& /* payment */,
             ::fhir::CodeableConcept_pskel& /* fundsReserve */,
             ::fhir::CodeableConcept_pskel& /* formCode */,
             ::fhir::Attachment_pskel& /* form */,
             ::fhir::ClaimResponse_ProcessNote_pskel& /* processNote */,
             ::fhir::Reference_pskel& /* communicationRequest */,
             ::fhir::ClaimResponse_Insurance_pskel& /* insurance */,
             ::fhir::ClaimResponse_Error_pskel& /* error */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subType_parser (::fhir::CodeableConcept_pskel&);

    void
    use_parser (::fhir::Use_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    insurer_parser (::fhir::Reference_pskel&);

    void
    requestor_parser (::fhir::Reference_pskel&);

    void
    request_parser (::fhir::Reference_pskel&);

    void
    outcome_parser (::fhir::ClaimProcessingCodes_pskel&);

    void
    disposition_parser (::fhir::string_pskel&);

    void
    preAuthRef_parser (::fhir::string_pskel&);

    void
    preAuthPeriod_parser (::fhir::Period_pskel&);

    void
    payeeType_parser (::fhir::CodeableConcept_pskel&);

    void
    item_parser (::fhir::ClaimResponse_Item_pskel&);

    void
    addItem_parser (::fhir::ClaimResponse_AddItem_pskel&);

    void
    adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel&);

    void
    total_parser (::fhir::ClaimResponse_Total_pskel&);

    void
    payment_parser (::fhir::ClaimResponse_Payment_pskel&);

    void
    fundsReserve_parser (::fhir::CodeableConcept_pskel&);

    void
    formCode_parser (::fhir::CodeableConcept_pskel&);

    void
    form_parser (::fhir::Attachment_pskel&);

    void
    processNote_parser (::fhir::ClaimResponse_ProcessNote_pskel&);

    void
    communicationRequest_parser (::fhir::Reference_pskel&);

    void
    insurance_parser (::fhir::ClaimResponse_Insurance_pskel&);

    void
    error_parser (::fhir::ClaimResponse_Error_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_pskel* ClaimResponse_impl_;
    ClaimResponse_pskel (ClaimResponse_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subType_parser_;
    ::fhir::Use_pskel* use_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* insurer_parser_;
    ::fhir::Reference_pskel* requestor_parser_;
    ::fhir::Reference_pskel* request_parser_;
    ::fhir::ClaimProcessingCodes_pskel* outcome_parser_;
    ::fhir::string_pskel* disposition_parser_;
    ::fhir::string_pskel* preAuthRef_parser_;
    ::fhir::Period_pskel* preAuthPeriod_parser_;
    ::fhir::CodeableConcept_pskel* payeeType_parser_;
    ::fhir::ClaimResponse_Item_pskel* item_parser_;
    ::fhir::ClaimResponse_AddItem_pskel* addItem_parser_;
    ::fhir::ClaimResponse_Adjudication_pskel* adjudication_parser_;
    ::fhir::ClaimResponse_Total_pskel* total_parser_;
    ::fhir::ClaimResponse_Payment_pskel* payment_parser_;
    ::fhir::CodeableConcept_pskel* fundsReserve_parser_;
    ::fhir::CodeableConcept_pskel* formCode_parser_;
    ::fhir::Attachment_pskel* form_parser_;
    ::fhir::ClaimResponse_ProcessNote_pskel* processNote_parser_;
    ::fhir::Reference_pskel* communicationRequest_parser_;
    ::fhir::ClaimResponse_Insurance_pskel* insurance_parser_;
    ::fhir::ClaimResponse_Error_pskel* error_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_Item_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    itemSequence ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    detail ();

    virtual void
    post_ClaimResponse_Item ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* itemSequence */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ClaimResponse_Adjudication_pskel& /* adjudication */,
             ::fhir::ClaimResponse_Detail_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    itemSequence_parser (::fhir::positiveInt_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel&);

    void
    detail_parser (::fhir::ClaimResponse_Detail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_Item_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_Item_pskel* ClaimResponse_Item_impl_;
    ClaimResponse_Item_pskel (ClaimResponse_Item_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* itemSequence_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ClaimResponse_Adjudication_pskel* adjudication_parser_;
    ::fhir::ClaimResponse_Detail_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_Adjudication_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    reason ();

    virtual void
    amount ();

    virtual void
    value ();

    virtual void
    post_ClaimResponse_Adjudication ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* reason */,
             ::fhir::Money_pskel& /* amount */,
             ::fhir::decimal_pskel& /* value */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Money_pskel&);

    void
    value_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_Adjudication_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_Adjudication_pskel* ClaimResponse_Adjudication_impl_;
    ClaimResponse_Adjudication_pskel (ClaimResponse_Adjudication_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;
    ::fhir::Money_pskel* amount_parser_;
    ::fhir::decimal_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_Adjudication_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_Detail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    detailSequence ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    subDetail ();

    virtual void
    post_ClaimResponse_Detail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* detailSequence */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ClaimResponse_Adjudication_pskel& /* adjudication */,
             ::fhir::ClaimResponse_SubDetail_pskel& /* subDetail */);

    // Individual element parsers.
    //
    void
    detailSequence_parser (::fhir::positiveInt_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel&);

    void
    subDetail_parser (::fhir::ClaimResponse_SubDetail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_Detail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_Detail_pskel* ClaimResponse_Detail_impl_;
    ClaimResponse_Detail_pskel (ClaimResponse_Detail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* detailSequence_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ClaimResponse_Adjudication_pskel* adjudication_parser_;
    ::fhir::ClaimResponse_SubDetail_pskel* subDetail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_Detail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_SubDetail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    subDetailSequence ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    post_ClaimResponse_SubDetail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* subDetailSequence */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ClaimResponse_Adjudication_pskel& /* adjudication */);

    // Individual element parsers.
    //
    void
    subDetailSequence_parser (::fhir::positiveInt_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_SubDetail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_SubDetail_pskel* ClaimResponse_SubDetail_impl_;
    ClaimResponse_SubDetail_pskel (ClaimResponse_SubDetail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* subDetailSequence_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ClaimResponse_Adjudication_pskel* adjudication_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_SubDetail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_AddItem_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    itemSequence ();

    virtual void
    detailSequence ();

    virtual void
    subdetailSequence ();

    virtual void
    provider ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    servicedDate ();

    virtual void
    servicedPeriod ();

    virtual void
    locationCodeableConcept ();

    virtual void
    locationAddress ();

    virtual void
    locationReference ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    bodySite ();

    virtual void
    subSite ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    detail ();

    virtual void
    post_ClaimResponse_AddItem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* itemSequence */,
             ::fhir::positiveInt_pskel& /* detailSequence */,
             ::fhir::positiveInt_pskel& /* subdetailSequence */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::date_pskel& /* servicedDate */,
             ::fhir::Period_pskel& /* servicedPeriod */,
             ::fhir::CodeableConcept_pskel& /* locationCodeableConcept */,
             ::fhir::Address_pskel& /* locationAddress */,
             ::fhir::Reference_pskel& /* locationReference */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::CodeableConcept_pskel& /* subSite */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ClaimResponse_Adjudication_pskel& /* adjudication */,
             ::fhir::ClaimResponse_Detail1_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    itemSequence_parser (::fhir::positiveInt_pskel&);

    void
    detailSequence_parser (::fhir::positiveInt_pskel&);

    void
    subdetailSequence_parser (::fhir::positiveInt_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    servicedDate_parser (::fhir::date_pskel&);

    void
    servicedPeriod_parser (::fhir::Period_pskel&);

    void
    locationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    locationAddress_parser (::fhir::Address_pskel&);

    void
    locationReference_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    subSite_parser (::fhir::CodeableConcept_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel&);

    void
    detail_parser (::fhir::ClaimResponse_Detail1_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_AddItem_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_AddItem_pskel* ClaimResponse_AddItem_impl_;
    ClaimResponse_AddItem_pskel (ClaimResponse_AddItem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* itemSequence_parser_;
    ::fhir::positiveInt_pskel* detailSequence_parser_;
    ::fhir::positiveInt_pskel* subdetailSequence_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::date_pskel* servicedDate_parser_;
    ::fhir::Period_pskel* servicedPeriod_parser_;
    ::fhir::CodeableConcept_pskel* locationCodeableConcept_parser_;
    ::fhir::Address_pskel* locationAddress_parser_;
    ::fhir::Reference_pskel* locationReference_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::CodeableConcept_pskel* subSite_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ClaimResponse_Adjudication_pskel* adjudication_parser_;
    ::fhir::ClaimResponse_Detail1_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_AddItem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_Detail1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    subDetail ();

    virtual void
    post_ClaimResponse_Detail1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ClaimResponse_Adjudication_pskel& /* adjudication */,
             ::fhir::ClaimResponse_SubDetail1_pskel& /* subDetail */);

    // Individual element parsers.
    //
    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel&);

    void
    subDetail_parser (::fhir::ClaimResponse_SubDetail1_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_Detail1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_Detail1_pskel* ClaimResponse_Detail1_impl_;
    ClaimResponse_Detail1_pskel (ClaimResponse_Detail1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ClaimResponse_Adjudication_pskel* adjudication_parser_;
    ::fhir::ClaimResponse_SubDetail1_pskel* subDetail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_Detail1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_SubDetail1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    post_ClaimResponse_SubDetail1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ClaimResponse_Adjudication_pskel& /* adjudication */);

    // Individual element parsers.
    //
    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ClaimResponse_Adjudication_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_SubDetail1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_SubDetail1_pskel* ClaimResponse_SubDetail1_impl_;
    ClaimResponse_SubDetail1_pskel (ClaimResponse_SubDetail1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ClaimResponse_Adjudication_pskel* adjudication_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_SubDetail1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_Total_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    amount ();

    virtual void
    post_ClaimResponse_Total ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::Money_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_Total_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_Total_pskel* ClaimResponse_Total_impl_;
    ClaimResponse_Total_pskel (ClaimResponse_Total_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::Money_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_Total_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_Payment_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    adjustment ();

    virtual void
    adjustmentReason ();

    virtual void
    date ();

    virtual void
    amount ();

    virtual void
    identifier ();

    virtual void
    post_ClaimResponse_Payment ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Money_pskel& /* adjustment */,
             ::fhir::CodeableConcept_pskel& /* adjustmentReason */,
             ::fhir::date_pskel& /* date */,
             ::fhir::Money_pskel& /* amount */,
             ::fhir::Identifier_pskel& /* identifier */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    adjustment_parser (::fhir::Money_pskel&);

    void
    adjustmentReason_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::date_pskel&);

    void
    amount_parser (::fhir::Money_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_Payment_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_Payment_pskel* ClaimResponse_Payment_impl_;
    ClaimResponse_Payment_pskel (ClaimResponse_Payment_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Money_pskel* adjustment_parser_;
    ::fhir::CodeableConcept_pskel* adjustmentReason_parser_;
    ::fhir::date_pskel* date_parser_;
    ::fhir::Money_pskel* amount_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_Payment_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_ProcessNote_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    number ();

    virtual void
    type ();

    virtual void
    text ();

    virtual void
    language ();

    virtual void
    post_ClaimResponse_ProcessNote ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* number */,
             ::fhir::NoteType_pskel& /* type */,
             ::fhir::string_pskel& /* text */,
             ::fhir::CodeableConcept_pskel& /* language */);

    // Individual element parsers.
    //
    void
    number_parser (::fhir::positiveInt_pskel&);

    void
    type_parser (::fhir::NoteType_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    language_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_ProcessNote_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_ProcessNote_pskel* ClaimResponse_ProcessNote_impl_;
    ClaimResponse_ProcessNote_pskel (ClaimResponse_ProcessNote_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* number_parser_;
    ::fhir::NoteType_pskel* type_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::CodeableConcept_pskel* language_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_ProcessNote_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_Insurance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    focal ();

    virtual void
    coverage ();

    virtual void
    businessArrangement ();

    virtual void
    claimResponse ();

    virtual void
    post_ClaimResponse_Insurance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::boolean_pskel& /* focal */,
             ::fhir::Reference_pskel& /* coverage */,
             ::fhir::string_pskel& /* businessArrangement */,
             ::fhir::Reference_pskel& /* claimResponse */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    focal_parser (::fhir::boolean_pskel&);

    void
    coverage_parser (::fhir::Reference_pskel&);

    void
    businessArrangement_parser (::fhir::string_pskel&);

    void
    claimResponse_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_Insurance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_Insurance_pskel* ClaimResponse_Insurance_impl_;
    ClaimResponse_Insurance_pskel (ClaimResponse_Insurance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::boolean_pskel* focal_parser_;
    ::fhir::Reference_pskel* coverage_parser_;
    ::fhir::string_pskel* businessArrangement_parser_;
    ::fhir::Reference_pskel* claimResponse_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_Insurance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimResponse_Error_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    itemSequence ();

    virtual void
    detailSequence ();

    virtual void
    subDetailSequence ();

    virtual void
    code ();

    virtual void
    post_ClaimResponse_Error ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* itemSequence */,
             ::fhir::positiveInt_pskel& /* detailSequence */,
             ::fhir::positiveInt_pskel& /* subDetailSequence */,
             ::fhir::CodeableConcept_pskel& /* code */);

    // Individual element parsers.
    //
    void
    itemSequence_parser (::fhir::positiveInt_pskel&);

    void
    detailSequence_parser (::fhir::positiveInt_pskel&);

    void
    subDetailSequence_parser (::fhir::positiveInt_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimResponse_Error_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimResponse_Error_pskel* ClaimResponse_Error_impl_;
    ClaimResponse_Error_pskel (ClaimResponse_Error_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* itemSequence_parser_;
    ::fhir::positiveInt_pskel* detailSequence_parser_;
    ::fhir::positiveInt_pskel* subDetailSequence_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClaimResponse_Error_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClaimProcessingCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ClaimProcessingCodes_list ();

    // Constructor.
    //
    ClaimProcessingCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimProcessingCodes_list_pskel* ClaimProcessingCodes_list_impl_;
    ClaimProcessingCodes_list_pskel (ClaimProcessingCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_ClaimProcessingCodes_list_pskel_enums_[4UL];
  };

  class ClaimProcessingCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ClaimProcessingCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ClaimProcessingCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ClaimProcessingCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClaimProcessingCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClaimProcessingCodes_pskel* ClaimProcessingCodes_impl_;
    ClaimProcessingCodes_pskel (ClaimProcessingCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ClaimProcessingCodes_list_pskel* value_parser_;
  };

  class ClinicalImpression_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    code ();

    virtual void
    description ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    effectiveDateTime ();

    virtual void
    effectivePeriod ();

    virtual void
    date ();

    virtual void
    assessor ();

    virtual void
    previous ();

    virtual void
    problem ();

    virtual void
    investigation ();

    virtual void
    protocol ();

    virtual void
    summary ();

    virtual void
    finding ();

    virtual void
    prognosisCodeableConcept ();

    virtual void
    prognosisReference ();

    virtual void
    supportingInfo ();

    virtual void
    note ();

    virtual void
    post_ClinicalImpression ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ClinicalImpressionStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* effectiveDateTime */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* assessor */,
             ::fhir::Reference_pskel& /* previous */,
             ::fhir::Reference_pskel& /* problem */,
             ::fhir::ClinicalImpression_Investigation_pskel& /* investigation */,
             ::fhir::uri_pskel& /* protocol */,
             ::fhir::string_pskel& /* summary */,
             ::fhir::ClinicalImpression_Finding_pskel& /* finding */,
             ::fhir::CodeableConcept_pskel& /* prognosisCodeableConcept */,
             ::fhir::Reference_pskel& /* prognosisReference */,
             ::fhir::Reference_pskel& /* supportingInfo */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::ClinicalImpressionStatus_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    effectiveDateTime_parser (::fhir::dateTime_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    assessor_parser (::fhir::Reference_pskel&);

    void
    previous_parser (::fhir::Reference_pskel&);

    void
    problem_parser (::fhir::Reference_pskel&);

    void
    investigation_parser (::fhir::ClinicalImpression_Investigation_pskel&);

    void
    protocol_parser (::fhir::uri_pskel&);

    void
    summary_parser (::fhir::string_pskel&);

    void
    finding_parser (::fhir::ClinicalImpression_Finding_pskel&);

    void
    prognosisCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    prognosisReference_parser (::fhir::Reference_pskel&);

    void
    supportingInfo_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClinicalImpression_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClinicalImpression_pskel* ClinicalImpression_impl_;
    ClinicalImpression_pskel (ClinicalImpression_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ClinicalImpressionStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* effectiveDateTime_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* assessor_parser_;
    ::fhir::Reference_pskel* previous_parser_;
    ::fhir::Reference_pskel* problem_parser_;
    ::fhir::ClinicalImpression_Investigation_pskel* investigation_parser_;
    ::fhir::uri_pskel* protocol_parser_;
    ::fhir::string_pskel* summary_parser_;
    ::fhir::ClinicalImpression_Finding_pskel* finding_parser_;
    ::fhir::CodeableConcept_pskel* prognosisCodeableConcept_parser_;
    ::fhir::Reference_pskel* prognosisReference_parser_;
    ::fhir::Reference_pskel* supportingInfo_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClinicalImpression_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClinicalImpression_Investigation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    item ();

    virtual void
    post_ClinicalImpression_Investigation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* item */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    item_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClinicalImpression_Investigation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClinicalImpression_Investigation_pskel* ClinicalImpression_Investigation_impl_;
    ClinicalImpression_Investigation_pskel (ClinicalImpression_Investigation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClinicalImpression_Investigation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClinicalImpression_Finding_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    itemCodeableConcept ();

    virtual void
    itemReference ();

    virtual void
    basis ();

    virtual void
    post_ClinicalImpression_Finding ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* itemCodeableConcept */,
             ::fhir::Reference_pskel& /* itemReference */,
             ::fhir::string_pskel& /* basis */);

    // Individual element parsers.
    //
    void
    itemCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    itemReference_parser (::fhir::Reference_pskel&);

    void
    basis_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClinicalImpression_Finding_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClinicalImpression_Finding_pskel* ClinicalImpression_Finding_impl_;
    ClinicalImpression_Finding_pskel (ClinicalImpression_Finding_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* itemCodeableConcept_parser_;
    ::fhir::Reference_pskel* itemReference_parser_;
    ::fhir::string_pskel* basis_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ClinicalImpression_Finding_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ClinicalImpressionStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ClinicalImpressionStatus_list ();

    // Constructor.
    //
    ClinicalImpressionStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClinicalImpressionStatus_list_pskel* ClinicalImpressionStatus_list_impl_;
    ClinicalImpressionStatus_list_pskel (ClinicalImpressionStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ClinicalImpressionStatus_list_pskel_enums_[3UL];
  };

  class ClinicalImpressionStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ClinicalImpressionStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ClinicalImpressionStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ClinicalImpressionStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ClinicalImpressionStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ClinicalImpressionStatus_pskel* ClinicalImpressionStatus_impl_;
    ClinicalImpressionStatus_pskel (ClinicalImpressionStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ClinicalImpressionStatus_list_pskel* value_parser_;
  };

  class CodeSystem_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    caseSensitive ();

    virtual void
    valueSet ();

    virtual void
    hierarchyMeaning ();

    virtual void
    compositional ();

    virtual void
    versionNeeded ();

    virtual void
    content ();

    virtual void
    supplements ();

    virtual void
    count ();

    virtual void
    filter ();

    virtual void
    property ();

    virtual void
    concept ();

    virtual void
    post_CodeSystem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::boolean_pskel& /* caseSensitive */,
             ::fhir::canonical_pskel& /* valueSet */,
             ::fhir::CodeSystemHierarchyMeaning_pskel& /* hierarchyMeaning */,
             ::fhir::boolean_pskel& /* compositional */,
             ::fhir::boolean_pskel& /* versionNeeded */,
             ::fhir::CodeSystemContentMode_pskel& /* content */,
             ::fhir::canonical_pskel& /* supplements */,
             ::fhir::unsignedInt_pskel& /* count */,
             ::fhir::CodeSystem_Filter_pskel& /* filter */,
             ::fhir::CodeSystem_Property_pskel& /* property */,
             ::fhir::CodeSystem_Concept_pskel& /* concept */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    caseSensitive_parser (::fhir::boolean_pskel&);

    void
    valueSet_parser (::fhir::canonical_pskel&);

    void
    hierarchyMeaning_parser (::fhir::CodeSystemHierarchyMeaning_pskel&);

    void
    compositional_parser (::fhir::boolean_pskel&);

    void
    versionNeeded_parser (::fhir::boolean_pskel&);

    void
    content_parser (::fhir::CodeSystemContentMode_pskel&);

    void
    supplements_parser (::fhir::canonical_pskel&);

    void
    count_parser (::fhir::unsignedInt_pskel&);

    void
    filter_parser (::fhir::CodeSystem_Filter_pskel&);

    void
    property_parser (::fhir::CodeSystem_Property_pskel&);

    void
    concept_parser (::fhir::CodeSystem_Concept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeSystem_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSystem_pskel* CodeSystem_impl_;
    CodeSystem_pskel (CodeSystem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::boolean_pskel* caseSensitive_parser_;
    ::fhir::canonical_pskel* valueSet_parser_;
    ::fhir::CodeSystemHierarchyMeaning_pskel* hierarchyMeaning_parser_;
    ::fhir::boolean_pskel* compositional_parser_;
    ::fhir::boolean_pskel* versionNeeded_parser_;
    ::fhir::CodeSystemContentMode_pskel* content_parser_;
    ::fhir::canonical_pskel* supplements_parser_;
    ::fhir::unsignedInt_pskel* count_parser_;
    ::fhir::CodeSystem_Filter_pskel* filter_parser_;
    ::fhir::CodeSystem_Property_pskel* property_parser_;
    ::fhir::CodeSystem_Concept_pskel* concept_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CodeSystem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CodeSystem_Filter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    description ();

    virtual void
    operator_ ();

    virtual void
    value ();

    virtual void
    post_CodeSystem_Filter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* description */,
             ::fhir::FilterOperator_pskel& /* operator */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    operator__parser (::fhir::FilterOperator_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeSystem_Filter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSystem_Filter_pskel* CodeSystem_Filter_impl_;
    CodeSystem_Filter_pskel (CodeSystem_Filter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::FilterOperator_pskel* operator__parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CodeSystem_Filter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CodeSystem_Property_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    uri ();

    virtual void
    description ();

    virtual void
    type ();

    virtual void
    post_CodeSystem_Property ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::uri_pskel& /* uri */,
             ::fhir::string_pskel& /* description */,
             ::fhir::PropertyType_pskel& /* type */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    uri_parser (::fhir::uri_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::PropertyType_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeSystem_Property_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSystem_Property_pskel* CodeSystem_Property_impl_;
    CodeSystem_Property_pskel (CodeSystem_Property_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::uri_pskel* uri_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::PropertyType_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CodeSystem_Property_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CodeSystem_Concept_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    display ();

    virtual void
    definition ();

    virtual void
    designation ();

    virtual void
    property ();

    virtual void
    concept ();

    virtual void
    post_CodeSystem_Concept ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* display */,
             ::fhir::string_pskel& /* definition */,
             ::fhir::CodeSystem_Designation_pskel& /* designation */,
             ::fhir::CodeSystem_Property1_pskel& /* property */,
             ::fhir::CodeSystem_Concept_pskel& /* concept */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    void
    definition_parser (::fhir::string_pskel&);

    void
    designation_parser (::fhir::CodeSystem_Designation_pskel&);

    void
    property_parser (::fhir::CodeSystem_Property1_pskel&);

    void
    concept_parser (::fhir::CodeSystem_Concept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeSystem_Concept_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSystem_Concept_pskel* CodeSystem_Concept_impl_;
    CodeSystem_Concept_pskel (CodeSystem_Concept_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* display_parser_;
    ::fhir::string_pskel* definition_parser_;
    ::fhir::CodeSystem_Designation_pskel* designation_parser_;
    ::fhir::CodeSystem_Property1_pskel* property_parser_;
    ::fhir::CodeSystem_Concept_pskel* concept_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CodeSystem_Concept_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CodeSystem_Designation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    language ();

    virtual void
    use ();

    virtual void
    value ();

    virtual void
    post_CodeSystem_Designation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Coding_pskel& /* use */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    language_parser (::fhir::code_pskel&);

    void
    use_parser (::fhir::Coding_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeSystem_Designation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSystem_Designation_pskel* CodeSystem_Designation_impl_;
    CodeSystem_Designation_pskel (CodeSystem_Designation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* language_parser_;
    ::fhir::Coding_pskel* use_parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CodeSystem_Designation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CodeSystem_Property1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    valueCode ();

    virtual void
    valueCoding ();

    virtual void
    valueString ();

    virtual void
    valueInteger ();

    virtual void
    valueBoolean ();

    virtual void
    valueDateTime ();

    virtual void
    valueDecimal ();

    virtual void
    post_CodeSystem_Property1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::code_pskel& /* valueCode */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::decimal_pskel& /* valueDecimal */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    valueCode_parser (::fhir::code_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeSystem_Property1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSystem_Property1_pskel* CodeSystem_Property1_impl_;
    CodeSystem_Property1_pskel (CodeSystem_Property1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::code_pskel* valueCode_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CodeSystem_Property1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class FilterOperator_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FilterOperator_list ();

    // Constructor.
    //
    FilterOperator_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    FilterOperator_list_pskel* FilterOperator_list_impl_;
    FilterOperator_list_pskel (FilterOperator_list_pskel*, void*);

    protected:
    static const char* const _xsde_FilterOperator_list_pskel_enums_[9UL];
  };

  class FilterOperator_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_FilterOperator ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::FilterOperator_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::FilterOperator_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FilterOperator_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    FilterOperator_pskel* FilterOperator_impl_;
    FilterOperator_pskel (FilterOperator_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::FilterOperator_list_pskel* value_parser_;
  };

  class PropertyType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PropertyType_list ();

    // Constructor.
    //
    PropertyType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    PropertyType_list_pskel* PropertyType_list_impl_;
    PropertyType_list_pskel (PropertyType_list_pskel*, void*);

    protected:
    static const char* const _xsde_PropertyType_list_pskel_enums_[7UL];
  };

  class PropertyType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_PropertyType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::PropertyType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::PropertyType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PropertyType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    PropertyType_pskel* PropertyType_impl_;
    PropertyType_pskel (PropertyType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::PropertyType_list_pskel* value_parser_;
  };

  class CodeSystemHierarchyMeaning_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CodeSystemHierarchyMeaning_list ();

    // Constructor.
    //
    CodeSystemHierarchyMeaning_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSystemHierarchyMeaning_list_pskel* CodeSystemHierarchyMeaning_list_impl_;
    CodeSystemHierarchyMeaning_list_pskel (CodeSystemHierarchyMeaning_list_pskel*, void*);

    protected:
    static const char* const _xsde_CodeSystemHierarchyMeaning_list_pskel_enums_[4UL];
  };

  class CodeSystemHierarchyMeaning_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CodeSystemHierarchyMeaning ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CodeSystemHierarchyMeaning_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CodeSystemHierarchyMeaning_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeSystemHierarchyMeaning_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSystemHierarchyMeaning_pskel* CodeSystemHierarchyMeaning_impl_;
    CodeSystemHierarchyMeaning_pskel (CodeSystemHierarchyMeaning_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CodeSystemHierarchyMeaning_list_pskel* value_parser_;
  };

  class CodeSystemContentMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CodeSystemContentMode_list ();

    // Constructor.
    //
    CodeSystemContentMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSystemContentMode_list_pskel* CodeSystemContentMode_list_impl_;
    CodeSystemContentMode_list_pskel (CodeSystemContentMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_CodeSystemContentMode_list_pskel_enums_[5UL];
  };

  class CodeSystemContentMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CodeSystemContentMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CodeSystemContentMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CodeSystemContentMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeSystemContentMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSystemContentMode_pskel* CodeSystemContentMode_impl_;
    CodeSystemContentMode_pskel (CodeSystemContentMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CodeSystemContentMode_list_pskel* value_parser_;
  };

  class Communication_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    basedOn ();

    virtual void
    partOf ();

    virtual void
    inResponseTo ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    category ();

    virtual void
    priority ();

    virtual void
    medium ();

    virtual void
    subject ();

    virtual void
    topic ();

    virtual void
    about ();

    virtual void
    encounter ();

    virtual void
    sent ();

    virtual void
    received ();

    virtual void
    recipient ();

    virtual void
    sender ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    payload ();

    virtual void
    note ();

    virtual void
    post_Communication ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::Reference_pskel& /* inResponseTo */,
             ::fhir::EventStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* medium */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::Reference_pskel& /* about */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* sent */,
             ::fhir::dateTime_pskel& /* received */,
             ::fhir::Reference_pskel& /* recipient */,
             ::fhir::Reference_pskel& /* sender */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Communication_Payload_pskel& /* payload */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    inResponseTo_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::EventStatus_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    medium_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    about_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    sent_parser (::fhir::dateTime_pskel&);

    void
    received_parser (::fhir::dateTime_pskel&);

    void
    recipient_parser (::fhir::Reference_pskel&);

    void
    sender_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    payload_parser (::fhir::Communication_Payload_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Communication_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Communication_pskel* Communication_impl_;
    Communication_pskel (Communication_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::Reference_pskel* inResponseTo_parser_;
    ::fhir::EventStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* medium_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::Reference_pskel* about_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* sent_parser_;
    ::fhir::dateTime_pskel* received_parser_;
    ::fhir::Reference_pskel* recipient_parser_;
    ::fhir::Reference_pskel* sender_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Communication_Payload_pskel* payload_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Communication_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Communication_Payload_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentString ();

    virtual void
    contentAttachment ();

    virtual void
    contentReference ();

    virtual void
    post_Communication_Payload ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* contentString */,
             ::fhir::Attachment_pskel& /* contentAttachment */,
             ::fhir::Reference_pskel& /* contentReference */);

    // Individual element parsers.
    //
    void
    contentString_parser (::fhir::string_pskel&);

    void
    contentAttachment_parser (::fhir::Attachment_pskel&);

    void
    contentReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Communication_Payload_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Communication_Payload_pskel* Communication_Payload_impl_;
    Communication_Payload_pskel (Communication_Payload_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* contentString_parser_;
    ::fhir::Attachment_pskel* contentAttachment_parser_;
    ::fhir::Reference_pskel* contentReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Communication_Payload_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EventStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EventStatus_list ();

    // Constructor.
    //
    EventStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventStatus_list_pskel* EventStatus_list_impl_;
    EventStatus_list_pskel (EventStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_EventStatus_list_pskel_enums_[8UL];
  };

  class EventStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EventStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EventStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EventStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EventStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventStatus_pskel* EventStatus_impl_;
    EventStatus_pskel (EventStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EventStatus_list_pskel* value_parser_;
  };

  class CommunicationRequest_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    basedOn ();

    virtual void
    replaces ();

    virtual void
    groupIdentifier ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    category ();

    virtual void
    priority ();

    virtual void
    doNotPerform ();

    virtual void
    medium ();

    virtual void
    subject ();

    virtual void
    about ();

    virtual void
    encounter ();

    virtual void
    payload ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrencePeriod ();

    virtual void
    authoredOn ();

    virtual void
    requester ();

    virtual void
    recipient ();

    virtual void
    sender ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    note ();

    virtual void
    post_CommunicationRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* replaces */,
             ::fhir::Identifier_pskel& /* groupIdentifier */,
             ::fhir::RequestStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::boolean_pskel& /* doNotPerform */,
             ::fhir::CodeableConcept_pskel& /* medium */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* about */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::CommunicationRequest_Payload_pskel& /* payload */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::Period_pskel& /* occurrencePeriod */,
             ::fhir::dateTime_pskel& /* authoredOn */,
             ::fhir::Reference_pskel& /* requester */,
             ::fhir::Reference_pskel& /* recipient */,
             ::fhir::Reference_pskel& /* sender */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    replaces_parser (::fhir::Reference_pskel&);

    void
    groupIdentifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::RequestStatus_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    doNotPerform_parser (::fhir::boolean_pskel&);

    void
    medium_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    about_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    payload_parser (::fhir::CommunicationRequest_Payload_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrencePeriod_parser (::fhir::Period_pskel&);

    void
    authoredOn_parser (::fhir::dateTime_pskel&);

    void
    requester_parser (::fhir::Reference_pskel&);

    void
    recipient_parser (::fhir::Reference_pskel&);

    void
    sender_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CommunicationRequest_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CommunicationRequest_pskel* CommunicationRequest_impl_;
    CommunicationRequest_pskel (CommunicationRequest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* replaces_parser_;
    ::fhir::Identifier_pskel* groupIdentifier_parser_;
    ::fhir::RequestStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::boolean_pskel* doNotPerform_parser_;
    ::fhir::CodeableConcept_pskel* medium_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* about_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::CommunicationRequest_Payload_pskel* payload_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::Period_pskel* occurrencePeriod_parser_;
    ::fhir::dateTime_pskel* authoredOn_parser_;
    ::fhir::Reference_pskel* requester_parser_;
    ::fhir::Reference_pskel* recipient_parser_;
    ::fhir::Reference_pskel* sender_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CommunicationRequest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CommunicationRequest_Payload_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentString ();

    virtual void
    contentAttachment ();

    virtual void
    contentReference ();

    virtual void
    post_CommunicationRequest_Payload ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* contentString */,
             ::fhir::Attachment_pskel& /* contentAttachment */,
             ::fhir::Reference_pskel& /* contentReference */);

    // Individual element parsers.
    //
    void
    contentString_parser (::fhir::string_pskel&);

    void
    contentAttachment_parser (::fhir::Attachment_pskel&);

    void
    contentReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CommunicationRequest_Payload_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CommunicationRequest_Payload_pskel* CommunicationRequest_Payload_impl_;
    CommunicationRequest_Payload_pskel (CommunicationRequest_Payload_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* contentString_parser_;
    ::fhir::Attachment_pskel* contentAttachment_parser_;
    ::fhir::Reference_pskel* contentReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CommunicationRequest_Payload_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CompartmentDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    purpose ();

    virtual void
    code ();

    virtual void
    search ();

    virtual void
    resource ();

    virtual void
    post_CompartmentDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::CompartmentType_pskel& /* code */,
             ::fhir::boolean_pskel& /* search */,
             ::fhir::CompartmentDefinition_Resource_pskel& /* resource */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    code_parser (::fhir::CompartmentType_pskel&);

    void
    search_parser (::fhir::boolean_pskel&);

    void
    resource_parser (::fhir::CompartmentDefinition_Resource_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CompartmentDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CompartmentDefinition_pskel* CompartmentDefinition_impl_;
    CompartmentDefinition_pskel (CompartmentDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::CompartmentType_pskel* code_parser_;
    ::fhir::boolean_pskel* search_parser_;
    ::fhir::CompartmentDefinition_Resource_pskel* resource_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CompartmentDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CompartmentDefinition_Resource_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    param ();

    virtual void
    documentation ();

    virtual void
    post_CompartmentDefinition_Resource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* param */,
             ::fhir::string_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    param_parser (::fhir::string_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CompartmentDefinition_Resource_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CompartmentDefinition_Resource_pskel* CompartmentDefinition_Resource_impl_;
    CompartmentDefinition_Resource_pskel (CompartmentDefinition_Resource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* param_parser_;
    ::fhir::string_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CompartmentDefinition_Resource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CompartmentType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CompartmentType_list ();

    // Constructor.
    //
    CompartmentType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CompartmentType_list_pskel* CompartmentType_list_impl_;
    CompartmentType_list_pskel (CompartmentType_list_pskel*, void*);

    protected:
    static const char* const _xsde_CompartmentType_list_pskel_enums_[5UL];
  };

  class CompartmentType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CompartmentType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CompartmentType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CompartmentType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CompartmentType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CompartmentType_pskel* CompartmentType_impl_;
    CompartmentType_pskel (CompartmentType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CompartmentType_list_pskel* value_parser_;
  };

  class Composition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    category ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    date ();

    virtual void
    author ();

    virtual void
    title ();

    virtual void
    confidentiality ();

    virtual void
    attester ();

    virtual void
    custodian ();

    virtual void
    relatesTo ();

    virtual void
    event ();

    virtual void
    section ();

    virtual void
    post_Composition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CompositionStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::string_pskel& /* title */,
             ::fhir::vConfidentialityClassification_pskel& /* confidentiality */,
             ::fhir::Composition_Attester_pskel& /* attester */,
             ::fhir::Reference_pskel& /* custodian */,
             ::fhir::Composition_RelatesTo_pskel& /* relatesTo */,
             ::fhir::Composition_Event_pskel& /* event */,
             ::fhir::Composition_Section_pskel& /* section */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::CompositionStatus_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    confidentiality_parser (::fhir::vConfidentialityClassification_pskel&);

    void
    attester_parser (::fhir::Composition_Attester_pskel&);

    void
    custodian_parser (::fhir::Reference_pskel&);

    void
    relatesTo_parser (::fhir::Composition_RelatesTo_pskel&);

    void
    event_parser (::fhir::Composition_Event_pskel&);

    void
    section_parser (::fhir::Composition_Section_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Composition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Composition_pskel* Composition_impl_;
    Composition_pskel (Composition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CompositionStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::vConfidentialityClassification_pskel* confidentiality_parser_;
    ::fhir::Composition_Attester_pskel* attester_parser_;
    ::fhir::Reference_pskel* custodian_parser_;
    ::fhir::Composition_RelatesTo_pskel* relatesTo_parser_;
    ::fhir::Composition_Event_pskel* event_parser_;
    ::fhir::Composition_Section_pskel* section_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Composition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Composition_Attester_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    mode ();

    virtual void
    time ();

    virtual void
    party ();

    virtual void
    post_Composition_Attester ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CompositionAttestationMode_pskel& /* mode */,
             ::fhir::dateTime_pskel& /* time */,
             ::fhir::Reference_pskel& /* party */);

    // Individual element parsers.
    //
    void
    mode_parser (::fhir::CompositionAttestationMode_pskel&);

    void
    time_parser (::fhir::dateTime_pskel&);

    void
    party_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Composition_Attester_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Composition_Attester_pskel* Composition_Attester_impl_;
    Composition_Attester_pskel (Composition_Attester_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CompositionAttestationMode_pskel* mode_parser_;
    ::fhir::dateTime_pskel* time_parser_;
    ::fhir::Reference_pskel* party_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Composition_Attester_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Composition_RelatesTo_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    targetIdentifier ();

    virtual void
    targetReference ();

    virtual void
    post_Composition_RelatesTo ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::DocumentRelationshipType_pskel& /* code */,
             ::fhir::Identifier_pskel& /* targetIdentifier */,
             ::fhir::Reference_pskel& /* targetReference */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::DocumentRelationshipType_pskel&);

    void
    targetIdentifier_parser (::fhir::Identifier_pskel&);

    void
    targetReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Composition_RelatesTo_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Composition_RelatesTo_pskel* Composition_RelatesTo_impl_;
    Composition_RelatesTo_pskel (Composition_RelatesTo_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::DocumentRelationshipType_pskel* code_parser_;
    ::fhir::Identifier_pskel* targetIdentifier_parser_;
    ::fhir::Reference_pskel* targetReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Composition_RelatesTo_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Composition_Event_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    period ();

    virtual void
    detail ();

    virtual void
    post_Composition_Event ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    detail_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Composition_Event_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Composition_Event_pskel* Composition_Event_impl_;
    Composition_Event_pskel (Composition_Event_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Composition_Event_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Composition_Section_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    title ();

    virtual void
    code ();

    virtual void
    author ();

    virtual void
    focus ();

    virtual void
    text ();

    virtual void
    mode ();

    virtual void
    orderedBy ();

    virtual void
    entry ();

    virtual void
    emptyReason ();

    virtual void
    section ();

    virtual void
    post_Composition_Section ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* title */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::Reference_pskel& /* focus */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ListMode_pskel& /* mode */,
             ::fhir::CodeableConcept_pskel& /* orderedBy */,
             ::fhir::Reference_pskel& /* entry */,
             ::fhir::CodeableConcept_pskel& /* emptyReason */,
             ::fhir::Composition_Section_pskel& /* section */);

    // Individual element parsers.
    //
    void
    title_parser (::fhir::string_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    focus_parser (::fhir::Reference_pskel&);

    void
    text_parser (::fhir::Narrative_pskel&);

    void
    mode_parser (::fhir::ListMode_pskel&);

    void
    orderedBy_parser (::fhir::CodeableConcept_pskel&);

    void
    entry_parser (::fhir::Reference_pskel&);

    void
    emptyReason_parser (::fhir::CodeableConcept_pskel&);

    void
    section_parser (::fhir::Composition_Section_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Composition_Section_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Composition_Section_pskel* Composition_Section_impl_;
    Composition_Section_pskel (Composition_Section_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* title_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::Reference_pskel* focus_parser_;
    ::fhir::Narrative_pskel* text_parser_;
    ::fhir::ListMode_pskel* mode_parser_;
    ::fhir::CodeableConcept_pskel* orderedBy_parser_;
    ::fhir::Reference_pskel* entry_parser_;
    ::fhir::CodeableConcept_pskel* emptyReason_parser_;
    ::fhir::Composition_Section_pskel* section_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Composition_Section_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class vConfidentialityClassification_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_vConfidentialityClassification_list ();

    // Constructor.
    //
    vConfidentialityClassification_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    vConfidentialityClassification_list_pskel* vConfidentialityClassification_list_impl_;
    vConfidentialityClassification_list_pskel (vConfidentialityClassification_list_pskel*, void*);

    protected:
    static const char* const _xsde_vConfidentialityClassification_list_pskel_enums_[6UL];
  };

  class vConfidentialityClassification_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_vConfidentialityClassification ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::vConfidentialityClassification_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::vConfidentialityClassification_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    vConfidentialityClassification_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    vConfidentialityClassification_pskel* vConfidentialityClassification_impl_;
    vConfidentialityClassification_pskel (vConfidentialityClassification_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::vConfidentialityClassification_list_pskel* value_parser_;
  };

  class CompositionStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CompositionStatus_list ();

    // Constructor.
    //
    CompositionStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CompositionStatus_list_pskel* CompositionStatus_list_impl_;
    CompositionStatus_list_pskel (CompositionStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_CompositionStatus_list_pskel_enums_[4UL];
  };

  class CompositionStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CompositionStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CompositionStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CompositionStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CompositionStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CompositionStatus_pskel* CompositionStatus_impl_;
    CompositionStatus_pskel (CompositionStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CompositionStatus_list_pskel* value_parser_;
  };

  class DocumentRelationshipType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DocumentRelationshipType_list ();

    // Constructor.
    //
    DocumentRelationshipType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentRelationshipType_list_pskel* DocumentRelationshipType_list_impl_;
    DocumentRelationshipType_list_pskel (DocumentRelationshipType_list_pskel*, void*);

    protected:
    static const char* const _xsde_DocumentRelationshipType_list_pskel_enums_[4UL];
  };

  class DocumentRelationshipType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DocumentRelationshipType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DocumentRelationshipType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DocumentRelationshipType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentRelationshipType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentRelationshipType_pskel* DocumentRelationshipType_impl_;
    DocumentRelationshipType_pskel (DocumentRelationshipType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DocumentRelationshipType_list_pskel* value_parser_;
  };

  class CompositionAttestationMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CompositionAttestationMode_list ();

    // Constructor.
    //
    CompositionAttestationMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CompositionAttestationMode_list_pskel* CompositionAttestationMode_list_impl_;
    CompositionAttestationMode_list_pskel (CompositionAttestationMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_CompositionAttestationMode_list_pskel_enums_[4UL];
  };

  class CompositionAttestationMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CompositionAttestationMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CompositionAttestationMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CompositionAttestationMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CompositionAttestationMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CompositionAttestationMode_pskel* CompositionAttestationMode_impl_;
    CompositionAttestationMode_pskel (CompositionAttestationMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CompositionAttestationMode_list_pskel* value_parser_;
  };

  class ListMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ListMode_list ();

    // Constructor.
    //
    ListMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ListMode_list_pskel* ListMode_list_impl_;
    ListMode_list_pskel (ListMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_ListMode_list_pskel_enums_[3UL];
  };

  class ListMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ListMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ListMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ListMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ListMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ListMode_pskel* ListMode_impl_;
    ListMode_pskel (ListMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ListMode_list_pskel* value_parser_;
  };

  class ConceptMap_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    sourceUri ();

    virtual void
    sourceCanonical ();

    virtual void
    targetUri ();

    virtual void
    targetCanonical ();

    virtual void
    group ();

    virtual void
    post_ConceptMap ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::uri_pskel& /* sourceUri */,
             ::fhir::canonical_pskel& /* sourceCanonical */,
             ::fhir::uri_pskel& /* targetUri */,
             ::fhir::canonical_pskel& /* targetCanonical */,
             ::fhir::ConceptMap_Group_pskel& /* group */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    sourceUri_parser (::fhir::uri_pskel&);

    void
    sourceCanonical_parser (::fhir::canonical_pskel&);

    void
    targetUri_parser (::fhir::uri_pskel&);

    void
    targetCanonical_parser (::fhir::canonical_pskel&);

    void
    group_parser (::fhir::ConceptMap_Group_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConceptMap_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMap_pskel* ConceptMap_impl_;
    ConceptMap_pskel (ConceptMap_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::uri_pskel* sourceUri_parser_;
    ::fhir::canonical_pskel* sourceCanonical_parser_;
    ::fhir::uri_pskel* targetUri_parser_;
    ::fhir::canonical_pskel* targetCanonical_parser_;
    ::fhir::ConceptMap_Group_pskel* group_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ConceptMap_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ConceptMap_Group_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    source ();

    virtual void
    sourceVersion ();

    virtual void
    target ();

    virtual void
    targetVersion ();

    virtual void
    element ();

    virtual void
    unmapped ();

    virtual void
    post_ConceptMap_Group ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* source */,
             ::fhir::string_pskel& /* sourceVersion */,
             ::fhir::uri_pskel& /* target */,
             ::fhir::string_pskel& /* targetVersion */,
             ::fhir::ConceptMap_Element_pskel& /* element */,
             ::fhir::ConceptMap_Unmapped_pskel& /* unmapped */);

    // Individual element parsers.
    //
    void
    source_parser (::fhir::uri_pskel&);

    void
    sourceVersion_parser (::fhir::string_pskel&);

    void
    target_parser (::fhir::uri_pskel&);

    void
    targetVersion_parser (::fhir::string_pskel&);

    void
    element_parser (::fhir::ConceptMap_Element_pskel&);

    void
    unmapped_parser (::fhir::ConceptMap_Unmapped_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConceptMap_Group_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMap_Group_pskel* ConceptMap_Group_impl_;
    ConceptMap_Group_pskel (ConceptMap_Group_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* source_parser_;
    ::fhir::string_pskel* sourceVersion_parser_;
    ::fhir::uri_pskel* target_parser_;
    ::fhir::string_pskel* targetVersion_parser_;
    ::fhir::ConceptMap_Element_pskel* element_parser_;
    ::fhir::ConceptMap_Unmapped_pskel* unmapped_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ConceptMap_Group_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ConceptMap_Element_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    display ();

    virtual void
    target ();

    virtual void
    post_ConceptMap_Element ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* display */,
             ::fhir::ConceptMap_Target_pskel& /* target */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    void
    target_parser (::fhir::ConceptMap_Target_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConceptMap_Element_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMap_Element_pskel* ConceptMap_Element_impl_;
    ConceptMap_Element_pskel (ConceptMap_Element_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* display_parser_;
    ::fhir::ConceptMap_Target_pskel* target_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ConceptMap_Element_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ConceptMap_Target_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    display ();

    virtual void
    equivalence ();

    virtual void
    comment ();

    virtual void
    dependsOn ();

    virtual void
    product ();

    virtual void
    post_ConceptMap_Target ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* display */,
             ::fhir::ConceptMapEquivalence_pskel& /* equivalence */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::ConceptMap_DependsOn_pskel& /* dependsOn */,
             ::fhir::ConceptMap_DependsOn_pskel& /* product */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    void
    equivalence_parser (::fhir::ConceptMapEquivalence_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    void
    dependsOn_parser (::fhir::ConceptMap_DependsOn_pskel&);

    void
    product_parser (::fhir::ConceptMap_DependsOn_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConceptMap_Target_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMap_Target_pskel* ConceptMap_Target_impl_;
    ConceptMap_Target_pskel (ConceptMap_Target_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* display_parser_;
    ::fhir::ConceptMapEquivalence_pskel* equivalence_parser_;
    ::fhir::string_pskel* comment_parser_;
    ::fhir::ConceptMap_DependsOn_pskel* dependsOn_parser_;
    ::fhir::ConceptMap_DependsOn_pskel* product_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ConceptMap_Target_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ConceptMap_DependsOn_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    property ();

    virtual void
    system ();

    virtual void
    value ();

    virtual void
    display ();

    virtual void
    post_ConceptMap_DependsOn ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* property */,
             ::fhir::canonical_pskel& /* system */,
             ::fhir::string_pskel& /* value */,
             ::fhir::string_pskel& /* display */);

    // Individual element parsers.
    //
    void
    property_parser (::fhir::uri_pskel&);

    void
    system_parser (::fhir::canonical_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConceptMap_DependsOn_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMap_DependsOn_pskel* ConceptMap_DependsOn_impl_;
    ConceptMap_DependsOn_pskel (ConceptMap_DependsOn_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* property_parser_;
    ::fhir::canonical_pskel* system_parser_;
    ::fhir::string_pskel* value_parser_;
    ::fhir::string_pskel* display_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ConceptMap_DependsOn_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ConceptMap_Unmapped_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    mode ();

    virtual void
    code ();

    virtual void
    display ();

    virtual void
    url ();

    virtual void
    post_ConceptMap_Unmapped ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ConceptMapGroupUnmappedMode_pskel& /* mode */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* display */,
             ::fhir::canonical_pskel& /* url */);

    // Individual element parsers.
    //
    void
    mode_parser (::fhir::ConceptMapGroupUnmappedMode_pskel&);

    void
    code_parser (::fhir::code_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    void
    url_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConceptMap_Unmapped_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMap_Unmapped_pskel* ConceptMap_Unmapped_impl_;
    ConceptMap_Unmapped_pskel (ConceptMap_Unmapped_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ConceptMapGroupUnmappedMode_pskel* mode_parser_;
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* display_parser_;
    ::fhir::canonical_pskel* url_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ConceptMap_Unmapped_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ConceptMapGroupUnmappedMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConceptMapGroupUnmappedMode_list ();

    // Constructor.
    //
    ConceptMapGroupUnmappedMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMapGroupUnmappedMode_list_pskel* ConceptMapGroupUnmappedMode_list_impl_;
    ConceptMapGroupUnmappedMode_list_pskel (ConceptMapGroupUnmappedMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConceptMapGroupUnmappedMode_list_pskel_enums_[3UL];
  };

  class ConceptMapGroupUnmappedMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConceptMapGroupUnmappedMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConceptMapGroupUnmappedMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConceptMapGroupUnmappedMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConceptMapGroupUnmappedMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConceptMapGroupUnmappedMode_pskel* ConceptMapGroupUnmappedMode_impl_;
    ConceptMapGroupUnmappedMode_pskel (ConceptMapGroupUnmappedMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConceptMapGroupUnmappedMode_list_pskel* value_parser_;
  };

  class Condition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    clinicalStatus ();

    virtual void
    verificationStatus ();

    virtual void
    category ();

    virtual void
    severity ();

    virtual void
    code ();

    virtual void
    bodySite ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    onsetDateTime ();

    virtual void
    onsetAge ();

    virtual void
    onsetPeriod ();

    virtual void
    onsetRange ();

    virtual void
    onsetString ();

    virtual void
    abatementDateTime ();

    virtual void
    abatementAge ();

    virtual void
    abatementPeriod ();

    virtual void
    abatementRange ();

    virtual void
    abatementString ();

    virtual void
    recordedDate ();

    virtual void
    recorder ();

    virtual void
    asserter ();

    virtual void
    stage ();

    virtual void
    evidence ();

    virtual void
    note ();

    virtual void
    post_Condition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* clinicalStatus */,
             ::fhir::CodeableConcept_pskel& /* verificationStatus */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* severity */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* onsetDateTime */,
             ::fhir::Age_pskel& /* onsetAge */,
             ::fhir::Period_pskel& /* onsetPeriod */,
             ::fhir::Range_pskel& /* onsetRange */,
             ::fhir::string_pskel& /* onsetString */,
             ::fhir::dateTime_pskel& /* abatementDateTime */,
             ::fhir::Age_pskel& /* abatementAge */,
             ::fhir::Period_pskel& /* abatementPeriod */,
             ::fhir::Range_pskel& /* abatementRange */,
             ::fhir::string_pskel& /* abatementString */,
             ::fhir::dateTime_pskel& /* recordedDate */,
             ::fhir::Reference_pskel& /* recorder */,
             ::fhir::Reference_pskel& /* asserter */,
             ::fhir::Condition_Stage_pskel& /* stage */,
             ::fhir::Condition_Evidence_pskel& /* evidence */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    clinicalStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    verificationStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    severity_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    onsetDateTime_parser (::fhir::dateTime_pskel&);

    void
    onsetAge_parser (::fhir::Age_pskel&);

    void
    onsetPeriod_parser (::fhir::Period_pskel&);

    void
    onsetRange_parser (::fhir::Range_pskel&);

    void
    onsetString_parser (::fhir::string_pskel&);

    void
    abatementDateTime_parser (::fhir::dateTime_pskel&);

    void
    abatementAge_parser (::fhir::Age_pskel&);

    void
    abatementPeriod_parser (::fhir::Period_pskel&);

    void
    abatementRange_parser (::fhir::Range_pskel&);

    void
    abatementString_parser (::fhir::string_pskel&);

    void
    recordedDate_parser (::fhir::dateTime_pskel&);

    void
    recorder_parser (::fhir::Reference_pskel&);

    void
    asserter_parser (::fhir::Reference_pskel&);

    void
    stage_parser (::fhir::Condition_Stage_pskel&);

    void
    evidence_parser (::fhir::Condition_Evidence_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Condition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Condition_pskel* Condition_impl_;
    Condition_pskel (Condition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* clinicalStatus_parser_;
    ::fhir::CodeableConcept_pskel* verificationStatus_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* severity_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* onsetDateTime_parser_;
    ::fhir::Age_pskel* onsetAge_parser_;
    ::fhir::Period_pskel* onsetPeriod_parser_;
    ::fhir::Range_pskel* onsetRange_parser_;
    ::fhir::string_pskel* onsetString_parser_;
    ::fhir::dateTime_pskel* abatementDateTime_parser_;
    ::fhir::Age_pskel* abatementAge_parser_;
    ::fhir::Period_pskel* abatementPeriod_parser_;
    ::fhir::Range_pskel* abatementRange_parser_;
    ::fhir::string_pskel* abatementString_parser_;
    ::fhir::dateTime_pskel* recordedDate_parser_;
    ::fhir::Reference_pskel* recorder_parser_;
    ::fhir::Reference_pskel* asserter_parser_;
    ::fhir::Condition_Stage_pskel* stage_parser_;
    ::fhir::Condition_Evidence_pskel* evidence_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Condition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Condition_Stage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    summary ();

    virtual void
    assessment ();

    virtual void
    type ();

    virtual void
    post_Condition_Stage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* summary */,
             ::fhir::Reference_pskel& /* assessment */,
             ::fhir::CodeableConcept_pskel& /* type */);

    // Individual element parsers.
    //
    void
    summary_parser (::fhir::CodeableConcept_pskel&);

    void
    assessment_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Condition_Stage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Condition_Stage_pskel* Condition_Stage_impl_;
    Condition_Stage_pskel (Condition_Stage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* summary_parser_;
    ::fhir::Reference_pskel* assessment_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Condition_Stage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Condition_Evidence_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    detail ();

    virtual void
    post_Condition_Evidence ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    detail_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Condition_Evidence_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Condition_Evidence_pskel* Condition_Evidence_impl_;
    Condition_Evidence_pskel (Condition_Evidence_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Condition_Evidence_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Consent_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    scope ();

    virtual void
    category ();

    virtual void
    patient ();

    virtual void
    dateTime ();

    virtual void
    performer ();

    virtual void
    organization ();

    virtual void
    sourceAttachment ();

    virtual void
    sourceReference ();

    virtual void
    policy ();

    virtual void
    policyRule ();

    virtual void
    verification ();

    virtual void
    provision ();

    virtual void
    post_Consent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ConsentState_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* scope */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::dateTime_pskel& /* dateTime */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::Reference_pskel& /* organization */,
             ::fhir::Attachment_pskel& /* sourceAttachment */,
             ::fhir::Reference_pskel& /* sourceReference */,
             ::fhir::Consent_Policy_pskel& /* policy */,
             ::fhir::CodeableConcept_pskel& /* policyRule */,
             ::fhir::Consent_Verification_pskel& /* verification */,
             ::fhir::Consent_Provision_pskel& /* provision */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::ConsentState_pskel&);

    void
    scope_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    dateTime_parser (::fhir::dateTime_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    organization_parser (::fhir::Reference_pskel&);

    void
    sourceAttachment_parser (::fhir::Attachment_pskel&);

    void
    sourceReference_parser (::fhir::Reference_pskel&);

    void
    policy_parser (::fhir::Consent_Policy_pskel&);

    void
    policyRule_parser (::fhir::CodeableConcept_pskel&);

    void
    verification_parser (::fhir::Consent_Verification_pskel&);

    void
    provision_parser (::fhir::Consent_Provision_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Consent_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Consent_pskel* Consent_impl_;
    Consent_pskel (Consent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ConsentState_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* scope_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::dateTime_pskel* dateTime_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::Reference_pskel* organization_parser_;
    ::fhir::Attachment_pskel* sourceAttachment_parser_;
    ::fhir::Reference_pskel* sourceReference_parser_;
    ::fhir::Consent_Policy_pskel* policy_parser_;
    ::fhir::CodeableConcept_pskel* policyRule_parser_;
    ::fhir::Consent_Verification_pskel* verification_parser_;
    ::fhir::Consent_Provision_pskel* provision_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Consent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Consent_Policy_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    authority ();

    virtual void
    uri ();

    virtual void
    post_Consent_Policy ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* authority */,
             ::fhir::uri_pskel& /* uri */);

    // Individual element parsers.
    //
    void
    authority_parser (::fhir::uri_pskel&);

    void
    uri_parser (::fhir::uri_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Consent_Policy_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Consent_Policy_pskel* Consent_Policy_impl_;
    Consent_Policy_pskel (Consent_Policy_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* authority_parser_;
    ::fhir::uri_pskel* uri_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Consent_Policy_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Consent_Verification_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    verified ();

    virtual void
    verifiedWith ();

    virtual void
    verificationDate ();

    virtual void
    post_Consent_Verification ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* verified */,
             ::fhir::Reference_pskel& /* verifiedWith */,
             ::fhir::dateTime_pskel& /* verificationDate */);

    // Individual element parsers.
    //
    void
    verified_parser (::fhir::boolean_pskel&);

    void
    verifiedWith_parser (::fhir::Reference_pskel&);

    void
    verificationDate_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Consent_Verification_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Consent_Verification_pskel* Consent_Verification_impl_;
    Consent_Verification_pskel (Consent_Verification_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* verified_parser_;
    ::fhir::Reference_pskel* verifiedWith_parser_;
    ::fhir::dateTime_pskel* verificationDate_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Consent_Verification_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Consent_Provision_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    period ();

    virtual void
    actor ();

    virtual void
    action ();

    virtual void
    securityLabel ();

    virtual void
    purpose ();

    virtual void
    class_ ();

    virtual void
    code ();

    virtual void
    dataPeriod ();

    virtual void
    data ();

    virtual void
    provision ();

    virtual void
    post_Consent_Provision ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ConsentProvisionType_pskel& /* type */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Consent_Actor_pskel& /* actor */,
             ::fhir::CodeableConcept_pskel& /* action */,
             ::fhir::Coding_pskel& /* securityLabel */,
             ::fhir::Coding_pskel& /* purpose */,
             ::fhir::Coding_pskel& /* class */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Period_pskel& /* dataPeriod */,
             ::fhir::Consent_Data_pskel& /* data */,
             ::fhir::Consent_Provision_pskel& /* provision */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::ConsentProvisionType_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    actor_parser (::fhir::Consent_Actor_pskel&);

    void
    action_parser (::fhir::CodeableConcept_pskel&);

    void
    securityLabel_parser (::fhir::Coding_pskel&);

    void
    purpose_parser (::fhir::Coding_pskel&);

    void
    class__parser (::fhir::Coding_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    dataPeriod_parser (::fhir::Period_pskel&);

    void
    data_parser (::fhir::Consent_Data_pskel&);

    void
    provision_parser (::fhir::Consent_Provision_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Consent_Provision_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Consent_Provision_pskel* Consent_Provision_impl_;
    Consent_Provision_pskel (Consent_Provision_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ConsentProvisionType_pskel* type_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Consent_Actor_pskel* actor_parser_;
    ::fhir::CodeableConcept_pskel* action_parser_;
    ::fhir::Coding_pskel* securityLabel_parser_;
    ::fhir::Coding_pskel* purpose_parser_;
    ::fhir::Coding_pskel* class__parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Period_pskel* dataPeriod_parser_;
    ::fhir::Consent_Data_pskel* data_parser_;
    ::fhir::Consent_Provision_pskel* provision_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Consent_Provision_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Consent_Actor_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    role ();

    virtual void
    reference ();

    virtual void
    post_Consent_Actor ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::Reference_pskel& /* reference */);

    // Individual element parsers.
    //
    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    reference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Consent_Actor_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Consent_Actor_pskel* Consent_Actor_impl_;
    Consent_Actor_pskel (Consent_Actor_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::Reference_pskel* reference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Consent_Actor_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Consent_Data_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    meaning ();

    virtual void
    reference ();

    virtual void
    post_Consent_Data ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ConsentDataMeaning_pskel& /* meaning */,
             ::fhir::Reference_pskel& /* reference */);

    // Individual element parsers.
    //
    void
    meaning_parser (::fhir::ConsentDataMeaning_pskel&);

    void
    reference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Consent_Data_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Consent_Data_pskel* Consent_Data_impl_;
    Consent_Data_pskel (Consent_Data_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ConsentDataMeaning_pskel* meaning_parser_;
    ::fhir::Reference_pskel* reference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Consent_Data_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ConsentProvisionType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConsentProvisionType_list ();

    // Constructor.
    //
    ConsentProvisionType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConsentProvisionType_list_pskel* ConsentProvisionType_list_impl_;
    ConsentProvisionType_list_pskel (ConsentProvisionType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConsentProvisionType_list_pskel_enums_[2UL];
  };

  class ConsentProvisionType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConsentProvisionType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConsentProvisionType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConsentProvisionType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConsentProvisionType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConsentProvisionType_pskel* ConsentProvisionType_impl_;
    ConsentProvisionType_pskel (ConsentProvisionType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConsentProvisionType_list_pskel* value_parser_;
  };

  class ConsentDataMeaning_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConsentDataMeaning_list ();

    // Constructor.
    //
    ConsentDataMeaning_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConsentDataMeaning_list_pskel* ConsentDataMeaning_list_impl_;
    ConsentDataMeaning_list_pskel (ConsentDataMeaning_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConsentDataMeaning_list_pskel_enums_[4UL];
  };

  class ConsentDataMeaning_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConsentDataMeaning ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConsentDataMeaning_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConsentDataMeaning_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConsentDataMeaning_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConsentDataMeaning_pskel* ConsentDataMeaning_impl_;
    ConsentDataMeaning_pskel (ConsentDataMeaning_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConsentDataMeaning_list_pskel* value_parser_;
  };

  class ConsentState_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConsentState_list ();

    // Constructor.
    //
    ConsentState_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConsentState_list_pskel* ConsentState_list_impl_;
    ConsentState_list_pskel (ConsentState_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConsentState_list_pskel_enums_[6UL];
  };

  class ConsentState_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConsentState ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConsentState_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConsentState_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConsentState_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConsentState_pskel* ConsentState_impl_;
    ConsentState_pskel (ConsentState_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConsentState_list_pskel* value_parser_;
  };

  class Contract_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    url ();

    virtual void
    version ();

    virtual void
    status ();

    virtual void
    legalState ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    contentDerivative ();

    virtual void
    issued ();

    virtual void
    applies ();

    virtual void
    expirationType ();

    virtual void
    subject ();

    virtual void
    authority ();

    virtual void
    domain ();

    virtual void
    site ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    subtitle ();

    virtual void
    alias ();

    virtual void
    author ();

    virtual void
    scope ();

    virtual void
    topicCodeableConcept ();

    virtual void
    topicReference ();

    virtual void
    type ();

    virtual void
    subType ();

    virtual void
    contentDefinition ();

    virtual void
    term ();

    virtual void
    supportingInfo ();

    virtual void
    relevantHistory ();

    virtual void
    signer ();

    virtual void
    friendly ();

    virtual void
    legal ();

    virtual void
    rule ();

    virtual void
    legallyBindingAttachment ();

    virtual void
    legallyBindingReference ();

    virtual void
    post_Contract ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::ContractResourceStatusCodes_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* legalState */,
             ::fhir::Reference_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::CodeableConcept_pskel& /* contentDerivative */,
             ::fhir::dateTime_pskel& /* issued */,
             ::fhir::Period_pskel& /* applies */,
             ::fhir::CodeableConcept_pskel& /* expirationType */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* authority */,
             ::fhir::Reference_pskel& /* domain */,
             ::fhir::Reference_pskel& /* site */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::string_pskel& /* alias */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::CodeableConcept_pskel& /* scope */,
             ::fhir::CodeableConcept_pskel& /* topicCodeableConcept */,
             ::fhir::Reference_pskel& /* topicReference */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subType */,
             ::fhir::Contract_ContentDefinition_pskel& /* contentDefinition */,
             ::fhir::Contract_Term_pskel& /* term */,
             ::fhir::Reference_pskel& /* supportingInfo */,
             ::fhir::Reference_pskel& /* relevantHistory */,
             ::fhir::Contract_Signer_pskel& /* signer */,
             ::fhir::Contract_Friendly_pskel& /* friendly */,
             ::fhir::Contract_Legal_pskel& /* legal */,
             ::fhir::Contract_Rule_pskel& /* rule */,
             ::fhir::Attachment_pskel& /* legallyBindingAttachment */,
             ::fhir::Reference_pskel& /* legallyBindingReference */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::ContractResourceStatusCodes_pskel&);

    void
    legalState_parser (::fhir::CodeableConcept_pskel&);

    void
    instantiatesCanonical_parser (::fhir::Reference_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    contentDerivative_parser (::fhir::CodeableConcept_pskel&);

    void
    issued_parser (::fhir::dateTime_pskel&);

    void
    applies_parser (::fhir::Period_pskel&);

    void
    expirationType_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    authority_parser (::fhir::Reference_pskel&);

    void
    domain_parser (::fhir::Reference_pskel&);

    void
    site_parser (::fhir::Reference_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    alias_parser (::fhir::string_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    scope_parser (::fhir::CodeableConcept_pskel&);

    void
    topicCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    topicReference_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subType_parser (::fhir::CodeableConcept_pskel&);

    void
    contentDefinition_parser (::fhir::Contract_ContentDefinition_pskel&);

    void
    term_parser (::fhir::Contract_Term_pskel&);

    void
    supportingInfo_parser (::fhir::Reference_pskel&);

    void
    relevantHistory_parser (::fhir::Reference_pskel&);

    void
    signer_parser (::fhir::Contract_Signer_pskel&);

    void
    friendly_parser (::fhir::Contract_Friendly_pskel&);

    void
    legal_parser (::fhir::Contract_Legal_pskel&);

    void
    rule_parser (::fhir::Contract_Rule_pskel&);

    void
    legallyBindingAttachment_parser (::fhir::Attachment_pskel&);

    void
    legallyBindingReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_pskel* Contract_impl_;
    Contract_pskel (Contract_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::ContractResourceStatusCodes_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* legalState_parser_;
    ::fhir::Reference_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::CodeableConcept_pskel* contentDerivative_parser_;
    ::fhir::dateTime_pskel* issued_parser_;
    ::fhir::Period_pskel* applies_parser_;
    ::fhir::CodeableConcept_pskel* expirationType_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* authority_parser_;
    ::fhir::Reference_pskel* domain_parser_;
    ::fhir::Reference_pskel* site_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::string_pskel* alias_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::CodeableConcept_pskel* scope_parser_;
    ::fhir::CodeableConcept_pskel* topicCodeableConcept_parser_;
    ::fhir::Reference_pskel* topicReference_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subType_parser_;
    ::fhir::Contract_ContentDefinition_pskel* contentDefinition_parser_;
    ::fhir::Contract_Term_pskel* term_parser_;
    ::fhir::Reference_pskel* supportingInfo_parser_;
    ::fhir::Reference_pskel* relevantHistory_parser_;
    ::fhir::Contract_Signer_pskel* signer_parser_;
    ::fhir::Contract_Friendly_pskel* friendly_parser_;
    ::fhir::Contract_Legal_pskel* legal_parser_;
    ::fhir::Contract_Rule_pskel* rule_parser_;
    ::fhir::Attachment_pskel* legallyBindingAttachment_parser_;
    ::fhir::Reference_pskel* legallyBindingReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_ContentDefinition_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    subType ();

    virtual void
    publisher ();

    virtual void
    publicationDate ();

    virtual void
    publicationStatus ();

    virtual void
    copyright ();

    virtual void
    post_Contract_ContentDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subType */,
             ::fhir::Reference_pskel& /* publisher */,
             ::fhir::dateTime_pskel& /* publicationDate */,
             ::fhir::ContractResourcePublicationStatusCodes_pskel& /* publicationStatus */,
             ::fhir::markdown_pskel& /* copyright */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subType_parser (::fhir::CodeableConcept_pskel&);

    void
    publisher_parser (::fhir::Reference_pskel&);

    void
    publicationDate_parser (::fhir::dateTime_pskel&);

    void
    publicationStatus_parser (::fhir::ContractResourcePublicationStatusCodes_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_ContentDefinition_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_ContentDefinition_pskel* Contract_ContentDefinition_impl_;
    Contract_ContentDefinition_pskel (Contract_ContentDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subType_parser_;
    ::fhir::Reference_pskel* publisher_parser_;
    ::fhir::dateTime_pskel* publicationDate_parser_;
    ::fhir::ContractResourcePublicationStatusCodes_pskel* publicationStatus_parser_;
    ::fhir::markdown_pskel* copyright_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_ContentDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Term_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    issued ();

    virtual void
    applies ();

    virtual void
    topicCodeableConcept ();

    virtual void
    topicReference ();

    virtual void
    type ();

    virtual void
    subType ();

    virtual void
    text ();

    virtual void
    securityLabel ();

    virtual void
    offer ();

    virtual void
    asset ();

    virtual void
    action ();

    virtual void
    group ();

    virtual void
    post_Contract_Term ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::dateTime_pskel& /* issued */,
             ::fhir::Period_pskel& /* applies */,
             ::fhir::CodeableConcept_pskel& /* topicCodeableConcept */,
             ::fhir::Reference_pskel& /* topicReference */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subType */,
             ::fhir::string_pskel& /* text */,
             ::fhir::Contract_SecurityLabel_pskel& /* securityLabel */,
             ::fhir::Contract_Offer_pskel& /* offer */,
             ::fhir::Contract_Asset_pskel& /* asset */,
             ::fhir::Contract_Action_pskel& /* action */,
             ::fhir::Contract_Term_pskel& /* group */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    issued_parser (::fhir::dateTime_pskel&);

    void
    applies_parser (::fhir::Period_pskel&);

    void
    topicCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    topicReference_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subType_parser (::fhir::CodeableConcept_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    securityLabel_parser (::fhir::Contract_SecurityLabel_pskel&);

    void
    offer_parser (::fhir::Contract_Offer_pskel&);

    void
    asset_parser (::fhir::Contract_Asset_pskel&);

    void
    action_parser (::fhir::Contract_Action_pskel&);

    void
    group_parser (::fhir::Contract_Term_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Term_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Term_pskel* Contract_Term_impl_;
    Contract_Term_pskel (Contract_Term_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::dateTime_pskel* issued_parser_;
    ::fhir::Period_pskel* applies_parser_;
    ::fhir::CodeableConcept_pskel* topicCodeableConcept_parser_;
    ::fhir::Reference_pskel* topicReference_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subType_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::Contract_SecurityLabel_pskel* securityLabel_parser_;
    ::fhir::Contract_Offer_pskel* offer_parser_;
    ::fhir::Contract_Asset_pskel* asset_parser_;
    ::fhir::Contract_Action_pskel* action_parser_;
    ::fhir::Contract_Term_pskel* group_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Term_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_SecurityLabel_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    number ();

    virtual void
    classification ();

    virtual void
    category ();

    virtual void
    control ();

    virtual void
    post_Contract_SecurityLabel ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::unsignedInt_pskel& /* number */,
             ::fhir::Coding_pskel& /* classification */,
             ::fhir::Coding_pskel& /* category */,
             ::fhir::Coding_pskel& /* control */);

    // Individual element parsers.
    //
    void
    number_parser (::fhir::unsignedInt_pskel&);

    void
    classification_parser (::fhir::Coding_pskel&);

    void
    category_parser (::fhir::Coding_pskel&);

    void
    control_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_SecurityLabel_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_SecurityLabel_pskel* Contract_SecurityLabel_impl_;
    Contract_SecurityLabel_pskel (Contract_SecurityLabel_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::unsignedInt_pskel* number_parser_;
    ::fhir::Coding_pskel* classification_parser_;
    ::fhir::Coding_pskel* category_parser_;
    ::fhir::Coding_pskel* control_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_SecurityLabel_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Offer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    party ();

    virtual void
    topic ();

    virtual void
    type ();

    virtual void
    decision ();

    virtual void
    decisionMode ();

    virtual void
    answer ();

    virtual void
    text ();

    virtual void
    linkId ();

    virtual void
    securityLabelNumber ();

    virtual void
    post_Contract_Offer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Contract_Party_pskel& /* party */,
             ::fhir::Reference_pskel& /* topic */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* decision */,
             ::fhir::CodeableConcept_pskel& /* decisionMode */,
             ::fhir::Contract_Answer_pskel& /* answer */,
             ::fhir::string_pskel& /* text */,
             ::fhir::string_pskel& /* linkId */,
             ::fhir::unsignedInt_pskel& /* securityLabelNumber */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    party_parser (::fhir::Contract_Party_pskel&);

    void
    topic_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    decision_parser (::fhir::CodeableConcept_pskel&);

    void
    decisionMode_parser (::fhir::CodeableConcept_pskel&);

    void
    answer_parser (::fhir::Contract_Answer_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    linkId_parser (::fhir::string_pskel&);

    void
    securityLabelNumber_parser (::fhir::unsignedInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Offer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Offer_pskel* Contract_Offer_impl_;
    Contract_Offer_pskel (Contract_Offer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Contract_Party_pskel* party_parser_;
    ::fhir::Reference_pskel* topic_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* decision_parser_;
    ::fhir::CodeableConcept_pskel* decisionMode_parser_;
    ::fhir::Contract_Answer_pskel* answer_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::string_pskel* linkId_parser_;
    ::fhir::unsignedInt_pskel* securityLabelNumber_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Offer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Party_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    role ();

    virtual void
    post_Contract_Party ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::CodeableConcept_pskel& /* role */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::Reference_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Party_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Party_pskel* Contract_Party_impl_;
    Contract_Party_pskel (Contract_Party_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Party_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Answer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    valueBoolean ();

    virtual void
    valueDecimal ();

    virtual void
    valueInteger ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueTime ();

    virtual void
    valueString ();

    virtual void
    valueUri ();

    virtual void
    valueAttachment ();

    virtual void
    valueCoding ();

    virtual void
    valueQuantity ();

    virtual void
    valueReference ();

    virtual void
    post_Contract_Answer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Reference_pskel& /* valueReference */);

    // Individual element parsers.
    //
    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Answer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Answer_pskel* Contract_Answer_impl_;
    Contract_Answer_pskel (Contract_Answer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Answer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Asset_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    scope ();

    virtual void
    type ();

    virtual void
    typeReference ();

    virtual void
    subtype ();

    virtual void
    relationship ();

    virtual void
    context ();

    virtual void
    condition ();

    virtual void
    periodType ();

    virtual void
    period ();

    virtual void
    usePeriod ();

    virtual void
    text ();

    virtual void
    linkId ();

    virtual void
    answer ();

    virtual void
    securityLabelNumber ();

    virtual void
    valuedItem ();

    virtual void
    post_Contract_Asset ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* scope */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* typeReference */,
             ::fhir::CodeableConcept_pskel& /* subtype */,
             ::fhir::Coding_pskel& /* relationship */,
             ::fhir::Contract_Context_pskel& /* context */,
             ::fhir::string_pskel& /* condition */,
             ::fhir::CodeableConcept_pskel& /* periodType */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Period_pskel& /* usePeriod */,
             ::fhir::string_pskel& /* text */,
             ::fhir::string_pskel& /* linkId */,
             ::fhir::Contract_Answer_pskel& /* answer */,
             ::fhir::unsignedInt_pskel& /* securityLabelNumber */,
             ::fhir::Contract_ValuedItem_pskel& /* valuedItem */);

    // Individual element parsers.
    //
    void
    scope_parser (::fhir::CodeableConcept_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    typeReference_parser (::fhir::Reference_pskel&);

    void
    subtype_parser (::fhir::CodeableConcept_pskel&);

    void
    relationship_parser (::fhir::Coding_pskel&);

    void
    context_parser (::fhir::Contract_Context_pskel&);

    void
    condition_parser (::fhir::string_pskel&);

    void
    periodType_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    usePeriod_parser (::fhir::Period_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    linkId_parser (::fhir::string_pskel&);

    void
    answer_parser (::fhir::Contract_Answer_pskel&);

    void
    securityLabelNumber_parser (::fhir::unsignedInt_pskel&);

    void
    valuedItem_parser (::fhir::Contract_ValuedItem_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Asset_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Asset_pskel* Contract_Asset_impl_;
    Contract_Asset_pskel (Contract_Asset_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* scope_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* typeReference_parser_;
    ::fhir::CodeableConcept_pskel* subtype_parser_;
    ::fhir::Coding_pskel* relationship_parser_;
    ::fhir::Contract_Context_pskel* context_parser_;
    ::fhir::string_pskel* condition_parser_;
    ::fhir::CodeableConcept_pskel* periodType_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Period_pskel* usePeriod_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::string_pskel* linkId_parser_;
    ::fhir::Contract_Answer_pskel* answer_parser_;
    ::fhir::unsignedInt_pskel* securityLabelNumber_parser_;
    ::fhir::Contract_ValuedItem_pskel* valuedItem_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Asset_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Context_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    code ();

    virtual void
    text ();

    virtual void
    post_Contract_Context ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* text */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::Reference_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Context_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Context_pskel* Contract_Context_impl_;
    Contract_Context_pskel (Contract_Context_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* text_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Context_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_ValuedItem_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    entityCodeableConcept ();

    virtual void
    entityReference ();

    virtual void
    identifier ();

    virtual void
    effectiveTime ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    points ();

    virtual void
    net ();

    virtual void
    payment ();

    virtual void
    paymentDate ();

    virtual void
    responsible ();

    virtual void
    recipient ();

    virtual void
    linkId ();

    virtual void
    securityLabelNumber ();

    virtual void
    post_Contract_ValuedItem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* entityCodeableConcept */,
             ::fhir::Reference_pskel& /* entityReference */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::dateTime_pskel& /* effectiveTime */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::decimal_pskel& /* points */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::string_pskel& /* payment */,
             ::fhir::dateTime_pskel& /* paymentDate */,
             ::fhir::Reference_pskel& /* responsible */,
             ::fhir::Reference_pskel& /* recipient */,
             ::fhir::string_pskel& /* linkId */,
             ::fhir::unsignedInt_pskel& /* securityLabelNumber */);

    // Individual element parsers.
    //
    void
    entityCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    entityReference_parser (::fhir::Reference_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    effectiveTime_parser (::fhir::dateTime_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    points_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    payment_parser (::fhir::string_pskel&);

    void
    paymentDate_parser (::fhir::dateTime_pskel&);

    void
    responsible_parser (::fhir::Reference_pskel&);

    void
    recipient_parser (::fhir::Reference_pskel&);

    void
    linkId_parser (::fhir::string_pskel&);

    void
    securityLabelNumber_parser (::fhir::unsignedInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_ValuedItem_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_ValuedItem_pskel* Contract_ValuedItem_impl_;
    Contract_ValuedItem_pskel (Contract_ValuedItem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* entityCodeableConcept_parser_;
    ::fhir::Reference_pskel* entityReference_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::dateTime_pskel* effectiveTime_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::decimal_pskel* points_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::string_pskel* payment_parser_;
    ::fhir::dateTime_pskel* paymentDate_parser_;
    ::fhir::Reference_pskel* responsible_parser_;
    ::fhir::Reference_pskel* recipient_parser_;
    ::fhir::string_pskel* linkId_parser_;
    ::fhir::unsignedInt_pskel* securityLabelNumber_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_ValuedItem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Action_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    doNotPerform ();

    virtual void
    type ();

    virtual void
    subject ();

    virtual void
    intent ();

    virtual void
    linkId ();

    virtual void
    status ();

    virtual void
    context ();

    virtual void
    contextLinkId ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrencePeriod ();

    virtual void
    occurrenceTiming ();

    virtual void
    requester ();

    virtual void
    requesterLinkId ();

    virtual void
    performerType ();

    virtual void
    performerRole ();

    virtual void
    performer ();

    virtual void
    performerLinkId ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    reason ();

    virtual void
    reasonLinkId ();

    virtual void
    note ();

    virtual void
    securityLabelNumber ();

    virtual void
    post_Contract_Action ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* doNotPerform */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Contract_Subject_pskel& /* subject */,
             ::fhir::CodeableConcept_pskel& /* intent */,
             ::fhir::string_pskel& /* linkId */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::Reference_pskel& /* context */,
             ::fhir::string_pskel& /* contextLinkId */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::Period_pskel& /* occurrencePeriod */,
             ::fhir::Timing_pskel& /* occurrenceTiming */,
             ::fhir::Reference_pskel& /* requester */,
             ::fhir::string_pskel& /* requesterLinkId */,
             ::fhir::CodeableConcept_pskel& /* performerType */,
             ::fhir::CodeableConcept_pskel& /* performerRole */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::string_pskel& /* performerLinkId */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::string_pskel& /* reason */,
             ::fhir::string_pskel& /* reasonLinkId */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::unsignedInt_pskel& /* securityLabelNumber */);

    // Individual element parsers.
    //
    void
    doNotPerform_parser (::fhir::boolean_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Contract_Subject_pskel&);

    void
    intent_parser (::fhir::CodeableConcept_pskel&);

    void
    linkId_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    context_parser (::fhir::Reference_pskel&);

    void
    contextLinkId_parser (::fhir::string_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrencePeriod_parser (::fhir::Period_pskel&);

    void
    occurrenceTiming_parser (::fhir::Timing_pskel&);

    void
    requester_parser (::fhir::Reference_pskel&);

    void
    requesterLinkId_parser (::fhir::string_pskel&);

    void
    performerType_parser (::fhir::CodeableConcept_pskel&);

    void
    performerRole_parser (::fhir::CodeableConcept_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    performerLinkId_parser (::fhir::string_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    reason_parser (::fhir::string_pskel&);

    void
    reasonLinkId_parser (::fhir::string_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    securityLabelNumber_parser (::fhir::unsignedInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Action_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Action_pskel* Contract_Action_impl_;
    Contract_Action_pskel (Contract_Action_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* doNotPerform_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Contract_Subject_pskel* subject_parser_;
    ::fhir::CodeableConcept_pskel* intent_parser_;
    ::fhir::string_pskel* linkId_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::Reference_pskel* context_parser_;
    ::fhir::string_pskel* contextLinkId_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::Period_pskel* occurrencePeriod_parser_;
    ::fhir::Timing_pskel* occurrenceTiming_parser_;
    ::fhir::Reference_pskel* requester_parser_;
    ::fhir::string_pskel* requesterLinkId_parser_;
    ::fhir::CodeableConcept_pskel* performerType_parser_;
    ::fhir::CodeableConcept_pskel* performerRole_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::string_pskel* performerLinkId_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::string_pskel* reason_parser_;
    ::fhir::string_pskel* reasonLinkId_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::unsignedInt_pskel* securityLabelNumber_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Action_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Subject_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    role ();

    virtual void
    post_Contract_Subject ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::CodeableConcept_pskel& /* role */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::Reference_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Subject_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Subject_pskel* Contract_Subject_impl_;
    Contract_Subject_pskel (Contract_Subject_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Subject_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Signer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    party ();

    virtual void
    signature ();

    virtual void
    post_Contract_Signer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* type */,
             ::fhir::Reference_pskel& /* party */,
             ::fhir::Signature_pskel& /* signature */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::Coding_pskel&);

    void
    party_parser (::fhir::Reference_pskel&);

    void
    signature_parser (::fhir::Signature_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Signer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Signer_pskel* Contract_Signer_impl_;
    Contract_Signer_pskel (Contract_Signer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* type_parser_;
    ::fhir::Reference_pskel* party_parser_;
    ::fhir::Signature_pskel* signature_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Signer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Friendly_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentAttachment ();

    virtual void
    contentReference ();

    virtual void
    post_Contract_Friendly ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Attachment_pskel& /* contentAttachment */,
             ::fhir::Reference_pskel& /* contentReference */);

    // Individual element parsers.
    //
    void
    contentAttachment_parser (::fhir::Attachment_pskel&);

    void
    contentReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Friendly_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Friendly_pskel* Contract_Friendly_impl_;
    Contract_Friendly_pskel (Contract_Friendly_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Attachment_pskel* contentAttachment_parser_;
    ::fhir::Reference_pskel* contentReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Friendly_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Legal_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentAttachment ();

    virtual void
    contentReference ();

    virtual void
    post_Contract_Legal ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Attachment_pskel& /* contentAttachment */,
             ::fhir::Reference_pskel& /* contentReference */);

    // Individual element parsers.
    //
    void
    contentAttachment_parser (::fhir::Attachment_pskel&);

    void
    contentReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Legal_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Legal_pskel* Contract_Legal_impl_;
    Contract_Legal_pskel (Contract_Legal_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Attachment_pskel* contentAttachment_parser_;
    ::fhir::Reference_pskel* contentReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Legal_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Rule_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentAttachment ();

    virtual void
    contentReference ();

    virtual void
    post_Contract_Rule ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Attachment_pskel& /* contentAttachment */,
             ::fhir::Reference_pskel& /* contentReference */);

    // Individual element parsers.
    //
    void
    contentAttachment_parser (::fhir::Attachment_pskel&);

    void
    contentReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Rule_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Rule_pskel* Contract_Rule_impl_;
    Contract_Rule_pskel (Contract_Rule_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Attachment_pskel* contentAttachment_parser_;
    ::fhir::Reference_pskel* contentReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Rule_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ContractResourceStatusCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContractResourceStatusCodes_list ();

    // Constructor.
    //
    ContractResourceStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContractResourceStatusCodes_list_pskel* ContractResourceStatusCodes_list_impl_;
    ContractResourceStatusCodes_list_pskel (ContractResourceStatusCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_ContractResourceStatusCodes_list_pskel_enums_[15UL];
  };

  class ContractResourceStatusCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ContractResourceStatusCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContractResourceStatusCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ContractResourceStatusCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContractResourceStatusCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContractResourceStatusCodes_pskel* ContractResourceStatusCodes_impl_;
    ContractResourceStatusCodes_pskel (ContractResourceStatusCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ContractResourceStatusCodes_list_pskel* value_parser_;
  };

  class ContractResourcePublicationStatusCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContractResourcePublicationStatusCodes_list ();

    // Constructor.
    //
    ContractResourcePublicationStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContractResourcePublicationStatusCodes_list_pskel* ContractResourcePublicationStatusCodes_list_impl_;
    ContractResourcePublicationStatusCodes_list_pskel (ContractResourcePublicationStatusCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_ContractResourcePublicationStatusCodes_list_pskel_enums_[15UL];
  };

  class ContractResourcePublicationStatusCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ContractResourcePublicationStatusCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContractResourcePublicationStatusCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ContractResourcePublicationStatusCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContractResourcePublicationStatusCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContractResourcePublicationStatusCodes_pskel* ContractResourcePublicationStatusCodes_impl_;
    ContractResourcePublicationStatusCodes_pskel (ContractResourcePublicationStatusCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ContractResourcePublicationStatusCodes_list_pskel* value_parser_;
  };

  class Coverage_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    policyHolder ();

    virtual void
    subscriber ();

    virtual void
    subscriberId ();

    virtual void
    beneficiary ();

    virtual void
    dependent ();

    virtual void
    relationship ();

    virtual void
    period ();

    virtual void
    payor ();

    virtual void
    class_ ();

    virtual void
    order ();

    virtual void
    network ();

    virtual void
    costToBeneficiary ();

    virtual void
    subrogation ();

    virtual void
    contract ();

    virtual void
    post_Coverage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* policyHolder */,
             ::fhir::Reference_pskel& /* subscriber */,
             ::fhir::string_pskel& /* subscriberId */,
             ::fhir::Reference_pskel& /* beneficiary */,
             ::fhir::string_pskel& /* dependent */,
             ::fhir::CodeableConcept_pskel& /* relationship */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* payor */,
             ::fhir::Coverage_Class_pskel& /* class */,
             ::fhir::positiveInt_pskel& /* order */,
             ::fhir::string_pskel& /* network */,
             ::fhir::Coverage_CostToBeneficiary_pskel& /* costToBeneficiary */,
             ::fhir::boolean_pskel& /* subrogation */,
             ::fhir::Reference_pskel& /* contract */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    policyHolder_parser (::fhir::Reference_pskel&);

    void
    subscriber_parser (::fhir::Reference_pskel&);

    void
    subscriberId_parser (::fhir::string_pskel&);

    void
    beneficiary_parser (::fhir::Reference_pskel&);

    void
    dependent_parser (::fhir::string_pskel&);

    void
    relationship_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    payor_parser (::fhir::Reference_pskel&);

    void
    class__parser (::fhir::Coverage_Class_pskel&);

    void
    order_parser (::fhir::positiveInt_pskel&);

    void
    network_parser (::fhir::string_pskel&);

    void
    costToBeneficiary_parser (::fhir::Coverage_CostToBeneficiary_pskel&);

    void
    subrogation_parser (::fhir::boolean_pskel&);

    void
    contract_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Coverage_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Coverage_pskel* Coverage_impl_;
    Coverage_pskel (Coverage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* policyHolder_parser_;
    ::fhir::Reference_pskel* subscriber_parser_;
    ::fhir::string_pskel* subscriberId_parser_;
    ::fhir::Reference_pskel* beneficiary_parser_;
    ::fhir::string_pskel* dependent_parser_;
    ::fhir::CodeableConcept_pskel* relationship_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* payor_parser_;
    ::fhir::Coverage_Class_pskel* class__parser_;
    ::fhir::positiveInt_pskel* order_parser_;
    ::fhir::string_pskel* network_parser_;
    ::fhir::Coverage_CostToBeneficiary_pskel* costToBeneficiary_parser_;
    ::fhir::boolean_pskel* subrogation_parser_;
    ::fhir::Reference_pskel* contract_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Coverage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Coverage_Class_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    value ();

    virtual void
    name ();

    virtual void
    post_Coverage_Class ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* value */,
             ::fhir::string_pskel& /* name */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Coverage_Class_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Coverage_Class_pskel* Coverage_Class_impl_;
    Coverage_Class_pskel (Coverage_Class_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* value_parser_;
    ::fhir::string_pskel* name_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Coverage_Class_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Coverage_CostToBeneficiary_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    valueQuantity ();

    virtual void
    valueMoney ();

    virtual void
    exception ();

    virtual void
    post_Coverage_CostToBeneficiary ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Money_pskel& /* valueMoney */,
             ::fhir::Coverage_Exception_pskel& /* exception */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueMoney_parser (::fhir::Money_pskel&);

    void
    exception_parser (::fhir::Coverage_Exception_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Coverage_CostToBeneficiary_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Coverage_CostToBeneficiary_pskel* Coverage_CostToBeneficiary_impl_;
    Coverage_CostToBeneficiary_pskel (Coverage_CostToBeneficiary_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Money_pskel* valueMoney_parser_;
    ::fhir::Coverage_Exception_pskel* exception_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Coverage_CostToBeneficiary_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Coverage_Exception_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    period ();

    virtual void
    post_Coverage_Exception ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Coverage_Exception_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Coverage_Exception_pskel* Coverage_Exception_impl_;
    Coverage_Exception_pskel (Coverage_Exception_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Coverage_Exception_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityRequest_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    priority ();

    virtual void
    purpose ();

    virtual void
    patient ();

    virtual void
    servicedDate ();

    virtual void
    servicedPeriod ();

    virtual void
    created ();

    virtual void
    enterer ();

    virtual void
    provider ();

    virtual void
    insurer ();

    virtual void
    facility ();

    virtual void
    supportingInfo ();

    virtual void
    insurance ();

    virtual void
    item ();

    virtual void
    post_CoverageEligibilityRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* priority */,
             ::fhir::EligibilityRequestPurpose_pskel& /* purpose */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::date_pskel& /* servicedDate */,
             ::fhir::Period_pskel& /* servicedPeriod */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* enterer */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::Reference_pskel& /* insurer */,
             ::fhir::Reference_pskel& /* facility */,
             ::fhir::CoverageEligibilityRequest_SupportingInfo_pskel& /* supportingInfo */,
             ::fhir::CoverageEligibilityRequest_Insurance_pskel& /* insurance */,
             ::fhir::CoverageEligibilityRequest_Item_pskel& /* item */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    priority_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::EligibilityRequestPurpose_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    servicedDate_parser (::fhir::date_pskel&);

    void
    servicedPeriod_parser (::fhir::Period_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    enterer_parser (::fhir::Reference_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    insurer_parser (::fhir::Reference_pskel&);

    void
    facility_parser (::fhir::Reference_pskel&);

    void
    supportingInfo_parser (::fhir::CoverageEligibilityRequest_SupportingInfo_pskel&);

    void
    insurance_parser (::fhir::CoverageEligibilityRequest_Insurance_pskel&);

    void
    item_parser (::fhir::CoverageEligibilityRequest_Item_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityRequest_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityRequest_pskel* CoverageEligibilityRequest_impl_;
    CoverageEligibilityRequest_pskel (CoverageEligibilityRequest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* priority_parser_;
    ::fhir::EligibilityRequestPurpose_pskel* purpose_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::date_pskel* servicedDate_parser_;
    ::fhir::Period_pskel* servicedPeriod_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* enterer_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::Reference_pskel* insurer_parser_;
    ::fhir::Reference_pskel* facility_parser_;
    ::fhir::CoverageEligibilityRequest_SupportingInfo_pskel* supportingInfo_parser_;
    ::fhir::CoverageEligibilityRequest_Insurance_pskel* insurance_parser_;
    ::fhir::CoverageEligibilityRequest_Item_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityRequest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityRequest_SupportingInfo_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    information ();

    virtual void
    appliesToAll ();

    virtual void
    post_CoverageEligibilityRequest_SupportingInfo ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::Reference_pskel& /* information */,
             ::fhir::boolean_pskel& /* appliesToAll */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    information_parser (::fhir::Reference_pskel&);

    void
    appliesToAll_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityRequest_SupportingInfo_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityRequest_SupportingInfo_pskel* CoverageEligibilityRequest_SupportingInfo_impl_;
    CoverageEligibilityRequest_SupportingInfo_pskel (CoverageEligibilityRequest_SupportingInfo_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::Reference_pskel* information_parser_;
    ::fhir::boolean_pskel* appliesToAll_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityRequest_SupportingInfo_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityRequest_Insurance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    focal ();

    virtual void
    coverage ();

    virtual void
    businessArrangement ();

    virtual void
    post_CoverageEligibilityRequest_Insurance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* focal */,
             ::fhir::Reference_pskel& /* coverage */,
             ::fhir::string_pskel& /* businessArrangement */);

    // Individual element parsers.
    //
    void
    focal_parser (::fhir::boolean_pskel&);

    void
    coverage_parser (::fhir::Reference_pskel&);

    void
    businessArrangement_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityRequest_Insurance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityRequest_Insurance_pskel* CoverageEligibilityRequest_Insurance_impl_;
    CoverageEligibilityRequest_Insurance_pskel (CoverageEligibilityRequest_Insurance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* focal_parser_;
    ::fhir::Reference_pskel* coverage_parser_;
    ::fhir::string_pskel* businessArrangement_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityRequest_Insurance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityRequest_Item_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    supportingInfoSequence ();

    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    provider ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    facility ();

    virtual void
    diagnosis ();

    virtual void
    detail ();

    virtual void
    post_CoverageEligibilityRequest_Item ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* supportingInfoSequence */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::Reference_pskel& /* facility */,
             ::fhir::CoverageEligibilityRequest_Diagnosis_pskel& /* diagnosis */,
             ::fhir::Reference_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    supportingInfoSequence_parser (::fhir::positiveInt_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    facility_parser (::fhir::Reference_pskel&);

    void
    diagnosis_parser (::fhir::CoverageEligibilityRequest_Diagnosis_pskel&);

    void
    detail_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityRequest_Item_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityRequest_Item_pskel* CoverageEligibilityRequest_Item_impl_;
    CoverageEligibilityRequest_Item_pskel (CoverageEligibilityRequest_Item_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* supportingInfoSequence_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::Reference_pskel* facility_parser_;
    ::fhir::CoverageEligibilityRequest_Diagnosis_pskel* diagnosis_parser_;
    ::fhir::Reference_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityRequest_Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityRequest_Diagnosis_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    diagnosisCodeableConcept ();

    virtual void
    diagnosisReference ();

    virtual void
    post_CoverageEligibilityRequest_Diagnosis ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* diagnosisCodeableConcept */,
             ::fhir::Reference_pskel& /* diagnosisReference */);

    // Individual element parsers.
    //
    void
    diagnosisCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    diagnosisReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityRequest_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityRequest_Diagnosis_pskel* CoverageEligibilityRequest_Diagnosis_impl_;
    CoverageEligibilityRequest_Diagnosis_pskel (CoverageEligibilityRequest_Diagnosis_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* diagnosisCodeableConcept_parser_;
    ::fhir::Reference_pskel* diagnosisReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityRequest_Diagnosis_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EligibilityRequestPurpose_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EligibilityRequestPurpose_list ();

    // Constructor.
    //
    EligibilityRequestPurpose_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EligibilityRequestPurpose_list_pskel* EligibilityRequestPurpose_list_impl_;
    EligibilityRequestPurpose_list_pskel (EligibilityRequestPurpose_list_pskel*, void*);

    protected:
    static const char* const _xsde_EligibilityRequestPurpose_list_pskel_enums_[4UL];
  };

  class EligibilityRequestPurpose_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EligibilityRequestPurpose ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EligibilityRequestPurpose_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EligibilityRequestPurpose_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EligibilityRequestPurpose_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EligibilityRequestPurpose_pskel* EligibilityRequestPurpose_impl_;
    EligibilityRequestPurpose_pskel (EligibilityRequestPurpose_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EligibilityRequestPurpose_list_pskel* value_parser_;
  };

  class CoverageEligibilityResponse_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    purpose ();

    virtual void
    patient ();

    virtual void
    servicedDate ();

    virtual void
    servicedPeriod ();

    virtual void
    created ();

    virtual void
    requestor ();

    virtual void
    request ();

    virtual void
    outcome ();

    virtual void
    disposition ();

    virtual void
    insurer ();

    virtual void
    insurance ();

    virtual void
    preAuthRef ();

    virtual void
    form ();

    virtual void
    error ();

    virtual void
    post_CoverageEligibilityResponse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::EligibilityResponsePurpose_pskel& /* purpose */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::date_pskel& /* servicedDate */,
             ::fhir::Period_pskel& /* servicedPeriod */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* requestor */,
             ::fhir::Reference_pskel& /* request */,
             ::fhir::RemittanceOutcome_pskel& /* outcome */,
             ::fhir::string_pskel& /* disposition */,
             ::fhir::Reference_pskel& /* insurer */,
             ::fhir::CoverageEligibilityResponse_Insurance_pskel& /* insurance */,
             ::fhir::string_pskel& /* preAuthRef */,
             ::fhir::CodeableConcept_pskel& /* form */,
             ::fhir::CoverageEligibilityResponse_Error_pskel& /* error */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    purpose_parser (::fhir::EligibilityResponsePurpose_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    servicedDate_parser (::fhir::date_pskel&);

    void
    servicedPeriod_parser (::fhir::Period_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    requestor_parser (::fhir::Reference_pskel&);

    void
    request_parser (::fhir::Reference_pskel&);

    void
    outcome_parser (::fhir::RemittanceOutcome_pskel&);

    void
    disposition_parser (::fhir::string_pskel&);

    void
    insurer_parser (::fhir::Reference_pskel&);

    void
    insurance_parser (::fhir::CoverageEligibilityResponse_Insurance_pskel&);

    void
    preAuthRef_parser (::fhir::string_pskel&);

    void
    form_parser (::fhir::CodeableConcept_pskel&);

    void
    error_parser (::fhir::CoverageEligibilityResponse_Error_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityResponse_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityResponse_pskel* CoverageEligibilityResponse_impl_;
    CoverageEligibilityResponse_pskel (CoverageEligibilityResponse_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::EligibilityResponsePurpose_pskel* purpose_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::date_pskel* servicedDate_parser_;
    ::fhir::Period_pskel* servicedPeriod_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* requestor_parser_;
    ::fhir::Reference_pskel* request_parser_;
    ::fhir::RemittanceOutcome_pskel* outcome_parser_;
    ::fhir::string_pskel* disposition_parser_;
    ::fhir::Reference_pskel* insurer_parser_;
    ::fhir::CoverageEligibilityResponse_Insurance_pskel* insurance_parser_;
    ::fhir::string_pskel* preAuthRef_parser_;
    ::fhir::CodeableConcept_pskel* form_parser_;
    ::fhir::CoverageEligibilityResponse_Error_pskel* error_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityResponse_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityResponse_Insurance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    coverage ();

    virtual void
    inforce ();

    virtual void
    benefitPeriod ();

    virtual void
    item ();

    virtual void
    post_CoverageEligibilityResponse_Insurance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* coverage */,
             ::fhir::boolean_pskel& /* inforce */,
             ::fhir::Period_pskel& /* benefitPeriod */,
             ::fhir::CoverageEligibilityResponse_Item_pskel& /* item */);

    // Individual element parsers.
    //
    void
    coverage_parser (::fhir::Reference_pskel&);

    void
    inforce_parser (::fhir::boolean_pskel&);

    void
    benefitPeriod_parser (::fhir::Period_pskel&);

    void
    item_parser (::fhir::CoverageEligibilityResponse_Item_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityResponse_Insurance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityResponse_Insurance_pskel* CoverageEligibilityResponse_Insurance_impl_;
    CoverageEligibilityResponse_Insurance_pskel (CoverageEligibilityResponse_Insurance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* coverage_parser_;
    ::fhir::boolean_pskel* inforce_parser_;
    ::fhir::Period_pskel* benefitPeriod_parser_;
    ::fhir::CoverageEligibilityResponse_Item_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityResponse_Insurance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityResponse_Item_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    provider ();

    virtual void
    excluded ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    network ();

    virtual void
    unit ();

    virtual void
    term ();

    virtual void
    benefit ();

    virtual void
    authorizationRequired ();

    virtual void
    authorizationSupporting ();

    virtual void
    authorizationUrl ();

    virtual void
    post_CoverageEligibilityResponse_Item ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::boolean_pskel& /* excluded */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* network */,
             ::fhir::CodeableConcept_pskel& /* unit */,
             ::fhir::CodeableConcept_pskel& /* term */,
             ::fhir::CoverageEligibilityResponse_Benefit_pskel& /* benefit */,
             ::fhir::boolean_pskel& /* authorizationRequired */,
             ::fhir::CodeableConcept_pskel& /* authorizationSupporting */,
             ::fhir::uri_pskel& /* authorizationUrl */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    excluded_parser (::fhir::boolean_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    network_parser (::fhir::CodeableConcept_pskel&);

    void
    unit_parser (::fhir::CodeableConcept_pskel&);

    void
    term_parser (::fhir::CodeableConcept_pskel&);

    void
    benefit_parser (::fhir::CoverageEligibilityResponse_Benefit_pskel&);

    void
    authorizationRequired_parser (::fhir::boolean_pskel&);

    void
    authorizationSupporting_parser (::fhir::CodeableConcept_pskel&);

    void
    authorizationUrl_parser (::fhir::uri_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityResponse_Item_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityResponse_Item_pskel* CoverageEligibilityResponse_Item_impl_;
    CoverageEligibilityResponse_Item_pskel (CoverageEligibilityResponse_Item_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::boolean_pskel* excluded_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* network_parser_;
    ::fhir::CodeableConcept_pskel* unit_parser_;
    ::fhir::CodeableConcept_pskel* term_parser_;
    ::fhir::CoverageEligibilityResponse_Benefit_pskel* benefit_parser_;
    ::fhir::boolean_pskel* authorizationRequired_parser_;
    ::fhir::CodeableConcept_pskel* authorizationSupporting_parser_;
    ::fhir::uri_pskel* authorizationUrl_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityResponse_Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityResponse_Benefit_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    allowedUnsignedInt ();

    virtual void
    allowedString ();

    virtual void
    allowedMoney ();

    virtual void
    usedUnsignedInt ();

    virtual void
    usedString ();

    virtual void
    usedMoney ();

    virtual void
    post_CoverageEligibilityResponse_Benefit ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::unsignedInt_pskel& /* allowedUnsignedInt */,
             ::fhir::string_pskel& /* allowedString */,
             ::fhir::Money_pskel& /* allowedMoney */,
             ::fhir::unsignedInt_pskel& /* usedUnsignedInt */,
             ::fhir::string_pskel& /* usedString */,
             ::fhir::Money_pskel& /* usedMoney */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    allowedUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    allowedString_parser (::fhir::string_pskel&);

    void
    allowedMoney_parser (::fhir::Money_pskel&);

    void
    usedUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    usedString_parser (::fhir::string_pskel&);

    void
    usedMoney_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityResponse_Benefit_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityResponse_Benefit_pskel* CoverageEligibilityResponse_Benefit_impl_;
    CoverageEligibilityResponse_Benefit_pskel (CoverageEligibilityResponse_Benefit_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::unsignedInt_pskel* allowedUnsignedInt_parser_;
    ::fhir::string_pskel* allowedString_parser_;
    ::fhir::Money_pskel* allowedMoney_parser_;
    ::fhir::unsignedInt_pskel* usedUnsignedInt_parser_;
    ::fhir::string_pskel* usedString_parser_;
    ::fhir::Money_pskel* usedMoney_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityResponse_Benefit_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CoverageEligibilityResponse_Error_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    post_CoverageEligibilityResponse_Error ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CoverageEligibilityResponse_Error_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CoverageEligibilityResponse_Error_pskel* CoverageEligibilityResponse_Error_impl_;
    CoverageEligibilityResponse_Error_pskel (CoverageEligibilityResponse_Error_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CoverageEligibilityResponse_Error_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EligibilityResponsePurpose_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EligibilityResponsePurpose_list ();

    // Constructor.
    //
    EligibilityResponsePurpose_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EligibilityResponsePurpose_list_pskel* EligibilityResponsePurpose_list_impl_;
    EligibilityResponsePurpose_list_pskel (EligibilityResponsePurpose_list_pskel*, void*);

    protected:
    static const char* const _xsde_EligibilityResponsePurpose_list_pskel_enums_[4UL];
  };

  class EligibilityResponsePurpose_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EligibilityResponsePurpose ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EligibilityResponsePurpose_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EligibilityResponsePurpose_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EligibilityResponsePurpose_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EligibilityResponsePurpose_pskel* EligibilityResponsePurpose_impl_;
    EligibilityResponsePurpose_pskel (EligibilityResponsePurpose_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EligibilityResponsePurpose_list_pskel* value_parser_;
  };

  class DetectedIssue_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    code ();

    virtual void
    severity ();

    virtual void
    patient ();

    virtual void
    identifiedDateTime ();

    virtual void
    identifiedPeriod ();

    virtual void
    author ();

    virtual void
    implicated ();

    virtual void
    evidence ();

    virtual void
    detail ();

    virtual void
    reference ();

    virtual void
    mitigation ();

    virtual void
    post_DetectedIssue ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ObservationStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::DetectedIssueSeverity_pskel& /* severity */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::dateTime_pskel& /* identifiedDateTime */,
             ::fhir::Period_pskel& /* identifiedPeriod */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::Reference_pskel& /* implicated */,
             ::fhir::DetectedIssue_Evidence_pskel& /* evidence */,
             ::fhir::string_pskel& /* detail */,
             ::fhir::uri_pskel& /* reference */,
             ::fhir::DetectedIssue_Mitigation_pskel& /* mitigation */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::ObservationStatus_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    severity_parser (::fhir::DetectedIssueSeverity_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    identifiedDateTime_parser (::fhir::dateTime_pskel&);

    void
    identifiedPeriod_parser (::fhir::Period_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    implicated_parser (::fhir::Reference_pskel&);

    void
    evidence_parser (::fhir::DetectedIssue_Evidence_pskel&);

    void
    detail_parser (::fhir::string_pskel&);

    void
    reference_parser (::fhir::uri_pskel&);

    void
    mitigation_parser (::fhir::DetectedIssue_Mitigation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DetectedIssue_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    DetectedIssue_pskel* DetectedIssue_impl_;
    DetectedIssue_pskel (DetectedIssue_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ObservationStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::DetectedIssueSeverity_pskel* severity_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::dateTime_pskel* identifiedDateTime_parser_;
    ::fhir::Period_pskel* identifiedPeriod_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::Reference_pskel* implicated_parser_;
    ::fhir::DetectedIssue_Evidence_pskel* evidence_parser_;
    ::fhir::string_pskel* detail_parser_;
    ::fhir::uri_pskel* reference_parser_;
    ::fhir::DetectedIssue_Mitigation_pskel* mitigation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DetectedIssue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DetectedIssue_Evidence_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    detail ();

    virtual void
    post_DetectedIssue_Evidence ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    detail_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DetectedIssue_Evidence_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DetectedIssue_Evidence_pskel* DetectedIssue_Evidence_impl_;
    DetectedIssue_Evidence_pskel (DetectedIssue_Evidence_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DetectedIssue_Evidence_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DetectedIssue_Mitigation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    action ();

    virtual void
    date ();

    virtual void
    author ();

    virtual void
    post_DetectedIssue_Mitigation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* action */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* author */);

    // Individual element parsers.
    //
    void
    action_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DetectedIssue_Mitigation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DetectedIssue_Mitigation_pskel* DetectedIssue_Mitigation_impl_;
    DetectedIssue_Mitigation_pskel (DetectedIssue_Mitigation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* action_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* author_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DetectedIssue_Mitigation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ObservationStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ObservationStatus_list ();

    // Constructor.
    //
    ObservationStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ObservationStatus_list_pskel* ObservationStatus_list_impl_;
    ObservationStatus_list_pskel (ObservationStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ObservationStatus_list_pskel_enums_[8UL];
  };

  class ObservationStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ObservationStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ObservationStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ObservationStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ObservationStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ObservationStatus_pskel* ObservationStatus_impl_;
    ObservationStatus_pskel (ObservationStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ObservationStatus_list_pskel* value_parser_;
  };

  class DetectedIssueSeverity_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DetectedIssueSeverity_list ();

    // Constructor.
    //
    DetectedIssueSeverity_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DetectedIssueSeverity_list_pskel* DetectedIssueSeverity_list_impl_;
    DetectedIssueSeverity_list_pskel (DetectedIssueSeverity_list_pskel*, void*);

    protected:
    static const char* const _xsde_DetectedIssueSeverity_list_pskel_enums_[3UL];
  };

  class DetectedIssueSeverity_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DetectedIssueSeverity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DetectedIssueSeverity_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DetectedIssueSeverity_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DetectedIssueSeverity_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DetectedIssueSeverity_pskel* DetectedIssueSeverity_impl_;
    DetectedIssueSeverity_pskel (DetectedIssueSeverity_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DetectedIssueSeverity_list_pskel* value_parser_;
  };

  class Device_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    definition ();

    virtual void
    udiCarrier ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    distinctIdentifier ();

    virtual void
    manufacturer ();

    virtual void
    manufactureDate ();

    virtual void
    expirationDate ();

    virtual void
    lotNumber ();

    virtual void
    serialNumber ();

    virtual void
    deviceName ();

    virtual void
    modelNumber ();

    virtual void
    partNumber ();

    virtual void
    type ();

    virtual void
    specialization ();

    virtual void
    version ();

    virtual void
    property ();

    virtual void
    patient ();

    virtual void
    owner ();

    virtual void
    contact ();

    virtual void
    location ();

    virtual void
    url ();

    virtual void
    note ();

    virtual void
    safety ();

    virtual void
    parent ();

    virtual void
    post_Device ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* definition */,
             ::fhir::Device_UdiCarrier_pskel& /* udiCarrier */,
             ::fhir::FHIRDeviceStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::string_pskel& /* distinctIdentifier */,
             ::fhir::string_pskel& /* manufacturer */,
             ::fhir::dateTime_pskel& /* manufactureDate */,
             ::fhir::dateTime_pskel& /* expirationDate */,
             ::fhir::string_pskel& /* lotNumber */,
             ::fhir::string_pskel& /* serialNumber */,
             ::fhir::Device_DeviceName_pskel& /* deviceName */,
             ::fhir::string_pskel& /* modelNumber */,
             ::fhir::string_pskel& /* partNumber */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Device_Specialization_pskel& /* specialization */,
             ::fhir::Device_Version_pskel& /* version */,
             ::fhir::Device_Property_pskel& /* property */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Reference_pskel& /* owner */,
             ::fhir::ContactPoint_pskel& /* contact */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::CodeableConcept_pskel& /* safety */,
             ::fhir::Reference_pskel& /* parent */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    definition_parser (::fhir::Reference_pskel&);

    void
    udiCarrier_parser (::fhir::Device_UdiCarrier_pskel&);

    void
    status_parser (::fhir::FHIRDeviceStatus_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    distinctIdentifier_parser (::fhir::string_pskel&);

    void
    manufacturer_parser (::fhir::string_pskel&);

    void
    manufactureDate_parser (::fhir::dateTime_pskel&);

    void
    expirationDate_parser (::fhir::dateTime_pskel&);

    void
    lotNumber_parser (::fhir::string_pskel&);

    void
    serialNumber_parser (::fhir::string_pskel&);

    void
    deviceName_parser (::fhir::Device_DeviceName_pskel&);

    void
    modelNumber_parser (::fhir::string_pskel&);

    void
    partNumber_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    specialization_parser (::fhir::Device_Specialization_pskel&);

    void
    version_parser (::fhir::Device_Version_pskel&);

    void
    property_parser (::fhir::Device_Property_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    owner_parser (::fhir::Reference_pskel&);

    void
    contact_parser (::fhir::ContactPoint_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    url_parser (::fhir::uri_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    safety_parser (::fhir::CodeableConcept_pskel&);

    void
    parent_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Device_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Device_pskel* Device_impl_;
    Device_pskel (Device_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* definition_parser_;
    ::fhir::Device_UdiCarrier_pskel* udiCarrier_parser_;
    ::fhir::FHIRDeviceStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::string_pskel* distinctIdentifier_parser_;
    ::fhir::string_pskel* manufacturer_parser_;
    ::fhir::dateTime_pskel* manufactureDate_parser_;
    ::fhir::dateTime_pskel* expirationDate_parser_;
    ::fhir::string_pskel* lotNumber_parser_;
    ::fhir::string_pskel* serialNumber_parser_;
    ::fhir::Device_DeviceName_pskel* deviceName_parser_;
    ::fhir::string_pskel* modelNumber_parser_;
    ::fhir::string_pskel* partNumber_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Device_Specialization_pskel* specialization_parser_;
    ::fhir::Device_Version_pskel* version_parser_;
    ::fhir::Device_Property_pskel* property_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Reference_pskel* owner_parser_;
    ::fhir::ContactPoint_pskel* contact_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::CodeableConcept_pskel* safety_parser_;
    ::fhir::Reference_pskel* parent_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Device_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Device_UdiCarrier_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    deviceIdentifier ();

    virtual void
    issuer ();

    virtual void
    jurisdiction ();

    virtual void
    carrierAIDC ();

    virtual void
    carrierHRF ();

    virtual void
    entryType ();

    virtual void
    post_Device_UdiCarrier ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* deviceIdentifier */,
             ::fhir::uri_pskel& /* issuer */,
             ::fhir::uri_pskel& /* jurisdiction */,
             ::fhir::base64Binary_pskel& /* carrierAIDC */,
             ::fhir::string_pskel& /* carrierHRF */,
             ::fhir::UDIEntryType_pskel& /* entryType */);

    // Individual element parsers.
    //
    void
    deviceIdentifier_parser (::fhir::string_pskel&);

    void
    issuer_parser (::fhir::uri_pskel&);

    void
    jurisdiction_parser (::fhir::uri_pskel&);

    void
    carrierAIDC_parser (::fhir::base64Binary_pskel&);

    void
    carrierHRF_parser (::fhir::string_pskel&);

    void
    entryType_parser (::fhir::UDIEntryType_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Device_UdiCarrier_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Device_UdiCarrier_pskel* Device_UdiCarrier_impl_;
    Device_UdiCarrier_pskel (Device_UdiCarrier_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* deviceIdentifier_parser_;
    ::fhir::uri_pskel* issuer_parser_;
    ::fhir::uri_pskel* jurisdiction_parser_;
    ::fhir::base64Binary_pskel* carrierAIDC_parser_;
    ::fhir::string_pskel* carrierHRF_parser_;
    ::fhir::UDIEntryType_pskel* entryType_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Device_UdiCarrier_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Device_DeviceName_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    type ();

    virtual void
    post_Device_DeviceName ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::DeviceNameType_pskel& /* type */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::DeviceNameType_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Device_DeviceName_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Device_DeviceName_pskel* Device_DeviceName_impl_;
    Device_DeviceName_pskel (Device_DeviceName_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::DeviceNameType_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Device_DeviceName_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Device_Specialization_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    systemType ();

    virtual void
    version ();

    virtual void
    post_Device_Specialization ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* systemType */,
             ::fhir::string_pskel& /* version */);

    // Individual element parsers.
    //
    void
    systemType_parser (::fhir::CodeableConcept_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Device_Specialization_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Device_Specialization_pskel* Device_Specialization_impl_;
    Device_Specialization_pskel (Device_Specialization_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* systemType_parser_;
    ::fhir::string_pskel* version_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Device_Specialization_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Device_Version_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    component ();

    virtual void
    value ();

    virtual void
    post_Device_Version ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Identifier_pskel& /* component */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    component_parser (::fhir::Identifier_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Device_Version_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Device_Version_pskel* Device_Version_impl_;
    Device_Version_pskel (Device_Version_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Identifier_pskel* component_parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Device_Version_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Device_Property_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    valueQuantity ();

    virtual void
    valueCode ();

    virtual void
    post_Device_Property ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::CodeableConcept_pskel& /* valueCode */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueCode_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Device_Property_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Device_Property_pskel* Device_Property_impl_;
    Device_Property_pskel (Device_Property_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::CodeableConcept_pskel* valueCode_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Device_Property_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class FHIRDeviceStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FHIRDeviceStatus_list ();

    // Constructor.
    //
    FHIRDeviceStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    FHIRDeviceStatus_list_pskel* FHIRDeviceStatus_list_impl_;
    FHIRDeviceStatus_list_pskel (FHIRDeviceStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_FHIRDeviceStatus_list_pskel_enums_[4UL];
  };

  class FHIRDeviceStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_FHIRDeviceStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::FHIRDeviceStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::FHIRDeviceStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FHIRDeviceStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    FHIRDeviceStatus_pskel* FHIRDeviceStatus_impl_;
    FHIRDeviceStatus_pskel (FHIRDeviceStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::FHIRDeviceStatus_list_pskel* value_parser_;
  };

  class DeviceNameType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DeviceNameType_list ();

    // Constructor.
    //
    DeviceNameType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceNameType_list_pskel* DeviceNameType_list_impl_;
    DeviceNameType_list_pskel (DeviceNameType_list_pskel*, void*);

    protected:
    static const char* const _xsde_DeviceNameType_list_pskel_enums_[6UL];
  };

  class DeviceNameType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DeviceNameType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DeviceNameType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DeviceNameType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceNameType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceNameType_pskel* DeviceNameType_impl_;
    DeviceNameType_pskel (DeviceNameType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DeviceNameType_list_pskel* value_parser_;
  };

  class UDIEntryType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_UDIEntryType_list ();

    // Constructor.
    //
    UDIEntryType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    UDIEntryType_list_pskel* UDIEntryType_list_impl_;
    UDIEntryType_list_pskel (UDIEntryType_list_pskel*, void*);

    protected:
    static const char* const _xsde_UDIEntryType_list_pskel_enums_[6UL];
  };

  class UDIEntryType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_UDIEntryType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::UDIEntryType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::UDIEntryType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    UDIEntryType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    UDIEntryType_pskel* UDIEntryType_impl_;
    UDIEntryType_pskel (UDIEntryType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::UDIEntryType_list_pskel* value_parser_;
  };

  class DeviceDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    udiDeviceIdentifier ();

    virtual void
    manufacturerString ();

    virtual void
    manufacturerReference ();

    virtual void
    deviceName ();

    virtual void
    modelNumber ();

    virtual void
    type ();

    virtual void
    specialization ();

    virtual void
    version ();

    virtual void
    safety ();

    virtual void
    shelfLifeStorage ();

    virtual void
    physicalCharacteristics ();

    virtual void
    languageCode ();

    virtual void
    capability ();

    virtual void
    property ();

    virtual void
    owner ();

    virtual void
    contact ();

    virtual void
    url ();

    virtual void
    onlineInformation ();

    virtual void
    note ();

    virtual void
    quantity ();

    virtual void
    parentDevice ();

    virtual void
    material ();

    virtual void
    post_DeviceDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::DeviceDefinition_UdiDeviceIdentifier_pskel& /* udiDeviceIdentifier */,
             ::fhir::string_pskel& /* manufacturerString */,
             ::fhir::Reference_pskel& /* manufacturerReference */,
             ::fhir::DeviceDefinition_DeviceName_pskel& /* deviceName */,
             ::fhir::string_pskel& /* modelNumber */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::DeviceDefinition_Specialization_pskel& /* specialization */,
             ::fhir::string_pskel& /* version */,
             ::fhir::CodeableConcept_pskel& /* safety */,
             ::fhir::ProductShelfLife_pskel& /* shelfLifeStorage */,
             ::fhir::ProdCharacteristic_pskel& /* physicalCharacteristics */,
             ::fhir::CodeableConcept_pskel& /* languageCode */,
             ::fhir::DeviceDefinition_Capability_pskel& /* capability */,
             ::fhir::DeviceDefinition_Property_pskel& /* property */,
             ::fhir::Reference_pskel& /* owner */,
             ::fhir::ContactPoint_pskel& /* contact */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::uri_pskel& /* onlineInformation */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Reference_pskel& /* parentDevice */,
             ::fhir::DeviceDefinition_Material_pskel& /* material */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    udiDeviceIdentifier_parser (::fhir::DeviceDefinition_UdiDeviceIdentifier_pskel&);

    void
    manufacturerString_parser (::fhir::string_pskel&);

    void
    manufacturerReference_parser (::fhir::Reference_pskel&);

    void
    deviceName_parser (::fhir::DeviceDefinition_DeviceName_pskel&);

    void
    modelNumber_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    specialization_parser (::fhir::DeviceDefinition_Specialization_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    safety_parser (::fhir::CodeableConcept_pskel&);

    void
    shelfLifeStorage_parser (::fhir::ProductShelfLife_pskel&);

    void
    physicalCharacteristics_parser (::fhir::ProdCharacteristic_pskel&);

    void
    languageCode_parser (::fhir::CodeableConcept_pskel&);

    void
    capability_parser (::fhir::DeviceDefinition_Capability_pskel&);

    void
    property_parser (::fhir::DeviceDefinition_Property_pskel&);

    void
    owner_parser (::fhir::Reference_pskel&);

    void
    contact_parser (::fhir::ContactPoint_pskel&);

    void
    url_parser (::fhir::uri_pskel&);

    void
    onlineInformation_parser (::fhir::uri_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    parentDevice_parser (::fhir::Reference_pskel&);

    void
    material_parser (::fhir::DeviceDefinition_Material_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceDefinition_pskel* DeviceDefinition_impl_;
    DeviceDefinition_pskel (DeviceDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::DeviceDefinition_UdiDeviceIdentifier_pskel* udiDeviceIdentifier_parser_;
    ::fhir::string_pskel* manufacturerString_parser_;
    ::fhir::Reference_pskel* manufacturerReference_parser_;
    ::fhir::DeviceDefinition_DeviceName_pskel* deviceName_parser_;
    ::fhir::string_pskel* modelNumber_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::DeviceDefinition_Specialization_pskel* specialization_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::CodeableConcept_pskel* safety_parser_;
    ::fhir::ProductShelfLife_pskel* shelfLifeStorage_parser_;
    ::fhir::ProdCharacteristic_pskel* physicalCharacteristics_parser_;
    ::fhir::CodeableConcept_pskel* languageCode_parser_;
    ::fhir::DeviceDefinition_Capability_pskel* capability_parser_;
    ::fhir::DeviceDefinition_Property_pskel* property_parser_;
    ::fhir::Reference_pskel* owner_parser_;
    ::fhir::ContactPoint_pskel* contact_parser_;
    ::fhir::uri_pskel* url_parser_;
    ::fhir::uri_pskel* onlineInformation_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Reference_pskel* parentDevice_parser_;
    ::fhir::DeviceDefinition_Material_pskel* material_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceDefinition_UdiDeviceIdentifier_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    deviceIdentifier ();

    virtual void
    issuer ();

    virtual void
    jurisdiction ();

    virtual void
    post_DeviceDefinition_UdiDeviceIdentifier ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* deviceIdentifier */,
             ::fhir::uri_pskel& /* issuer */,
             ::fhir::uri_pskel& /* jurisdiction */);

    // Individual element parsers.
    //
    void
    deviceIdentifier_parser (::fhir::string_pskel&);

    void
    issuer_parser (::fhir::uri_pskel&);

    void
    jurisdiction_parser (::fhir::uri_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceDefinition_UdiDeviceIdentifier_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceDefinition_UdiDeviceIdentifier_pskel* DeviceDefinition_UdiDeviceIdentifier_impl_;
    DeviceDefinition_UdiDeviceIdentifier_pskel (DeviceDefinition_UdiDeviceIdentifier_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* deviceIdentifier_parser_;
    ::fhir::uri_pskel* issuer_parser_;
    ::fhir::uri_pskel* jurisdiction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceDefinition_UdiDeviceIdentifier_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceDefinition_DeviceName_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    type ();

    virtual void
    post_DeviceDefinition_DeviceName ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::DeviceNameType_pskel& /* type */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::DeviceNameType_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceDefinition_DeviceName_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceDefinition_DeviceName_pskel* DeviceDefinition_DeviceName_impl_;
    DeviceDefinition_DeviceName_pskel (DeviceDefinition_DeviceName_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::DeviceNameType_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceDefinition_DeviceName_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceDefinition_Specialization_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    systemType ();

    virtual void
    version ();

    virtual void
    post_DeviceDefinition_Specialization ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* systemType */,
             ::fhir::string_pskel& /* version */);

    // Individual element parsers.
    //
    void
    systemType_parser (::fhir::string_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceDefinition_Specialization_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceDefinition_Specialization_pskel* DeviceDefinition_Specialization_impl_;
    DeviceDefinition_Specialization_pskel (DeviceDefinition_Specialization_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* systemType_parser_;
    ::fhir::string_pskel* version_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceDefinition_Specialization_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceDefinition_Capability_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    description ();

    virtual void
    post_DeviceDefinition_Capability ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* description */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceDefinition_Capability_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceDefinition_Capability_pskel* DeviceDefinition_Capability_impl_;
    DeviceDefinition_Capability_pskel (DeviceDefinition_Capability_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceDefinition_Capability_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceDefinition_Property_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    valueQuantity ();

    virtual void
    valueCode ();

    virtual void
    post_DeviceDefinition_Property ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::CodeableConcept_pskel& /* valueCode */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueCode_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceDefinition_Property_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceDefinition_Property_pskel* DeviceDefinition_Property_impl_;
    DeviceDefinition_Property_pskel (DeviceDefinition_Property_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::CodeableConcept_pskel* valueCode_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceDefinition_Property_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceDefinition_Material_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    substance ();

    virtual void
    alternate ();

    virtual void
    allergenicIndicator ();

    virtual void
    post_DeviceDefinition_Material ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* substance */,
             ::fhir::boolean_pskel& /* alternate */,
             ::fhir::boolean_pskel& /* allergenicIndicator */);

    // Individual element parsers.
    //
    void
    substance_parser (::fhir::CodeableConcept_pskel&);

    void
    alternate_parser (::fhir::boolean_pskel&);

    void
    allergenicIndicator_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceDefinition_Material_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceDefinition_Material_pskel* DeviceDefinition_Material_impl_;
    DeviceDefinition_Material_pskel (DeviceDefinition_Material_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* substance_parser_;
    ::fhir::boolean_pskel* alternate_parser_;
    ::fhir::boolean_pskel* allergenicIndicator_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceDefinition_Material_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceMetric_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    unit ();

    virtual void
    source ();

    virtual void
    parent ();

    virtual void
    operationalStatus ();

    virtual void
    color ();

    virtual void
    category ();

    virtual void
    measurementPeriod ();

    virtual void
    calibration ();

    virtual void
    post_DeviceMetric ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* unit */,
             ::fhir::Reference_pskel& /* source */,
             ::fhir::Reference_pskel& /* parent */,
             ::fhir::DeviceMetricOperationalStatus_pskel& /* operationalStatus */,
             ::fhir::DeviceMetricColor_pskel& /* color */,
             ::fhir::DeviceMetricCategory_pskel& /* category */,
             ::fhir::Timing_pskel& /* measurementPeriod */,
             ::fhir::DeviceMetric_Calibration_pskel& /* calibration */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    unit_parser (::fhir::CodeableConcept_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    void
    parent_parser (::fhir::Reference_pskel&);

    void
    operationalStatus_parser (::fhir::DeviceMetricOperationalStatus_pskel&);

    void
    color_parser (::fhir::DeviceMetricColor_pskel&);

    void
    category_parser (::fhir::DeviceMetricCategory_pskel&);

    void
    measurementPeriod_parser (::fhir::Timing_pskel&);

    void
    calibration_parser (::fhir::DeviceMetric_Calibration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceMetric_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetric_pskel* DeviceMetric_impl_;
    DeviceMetric_pskel (DeviceMetric_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* unit_parser_;
    ::fhir::Reference_pskel* source_parser_;
    ::fhir::Reference_pskel* parent_parser_;
    ::fhir::DeviceMetricOperationalStatus_pskel* operationalStatus_parser_;
    ::fhir::DeviceMetricColor_pskel* color_parser_;
    ::fhir::DeviceMetricCategory_pskel* category_parser_;
    ::fhir::Timing_pskel* measurementPeriod_parser_;
    ::fhir::DeviceMetric_Calibration_pskel* calibration_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceMetric_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceMetric_Calibration_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    state ();

    virtual void
    time ();

    virtual void
    post_DeviceMetric_Calibration ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::DeviceMetricCalibrationType_pskel& /* type */,
             ::fhir::DeviceMetricCalibrationState_pskel& /* state */,
             ::fhir::instant_pskel& /* time */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::DeviceMetricCalibrationType_pskel&);

    void
    state_parser (::fhir::DeviceMetricCalibrationState_pskel&);

    void
    time_parser (::fhir::instant_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceMetric_Calibration_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetric_Calibration_pskel* DeviceMetric_Calibration_impl_;
    DeviceMetric_Calibration_pskel (DeviceMetric_Calibration_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::DeviceMetricCalibrationType_pskel* type_parser_;
    ::fhir::DeviceMetricCalibrationState_pskel* state_parser_;
    ::fhir::instant_pskel* time_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceMetric_Calibration_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceMetricCalibrationType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DeviceMetricCalibrationType_list ();

    // Constructor.
    //
    DeviceMetricCalibrationType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetricCalibrationType_list_pskel* DeviceMetricCalibrationType_list_impl_;
    DeviceMetricCalibrationType_list_pskel (DeviceMetricCalibrationType_list_pskel*, void*);

    protected:
    static const char* const _xsde_DeviceMetricCalibrationType_list_pskel_enums_[4UL];
  };

  class DeviceMetricCalibrationType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DeviceMetricCalibrationType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DeviceMetricCalibrationType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DeviceMetricCalibrationType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceMetricCalibrationType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetricCalibrationType_pskel* DeviceMetricCalibrationType_impl_;
    DeviceMetricCalibrationType_pskel (DeviceMetricCalibrationType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DeviceMetricCalibrationType_list_pskel* value_parser_;
  };

  class DeviceMetricColor_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DeviceMetricColor_list ();

    // Constructor.
    //
    DeviceMetricColor_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetricColor_list_pskel* DeviceMetricColor_list_impl_;
    DeviceMetricColor_list_pskel (DeviceMetricColor_list_pskel*, void*);

    protected:
    static const char* const _xsde_DeviceMetricColor_list_pskel_enums_[8UL];
  };

  class DeviceMetricColor_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DeviceMetricColor ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DeviceMetricColor_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DeviceMetricColor_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceMetricColor_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetricColor_pskel* DeviceMetricColor_impl_;
    DeviceMetricColor_pskel (DeviceMetricColor_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DeviceMetricColor_list_pskel* value_parser_;
  };

  class DeviceMetricCalibrationState_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DeviceMetricCalibrationState_list ();

    // Constructor.
    //
    DeviceMetricCalibrationState_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetricCalibrationState_list_pskel* DeviceMetricCalibrationState_list_impl_;
    DeviceMetricCalibrationState_list_pskel (DeviceMetricCalibrationState_list_pskel*, void*);

    protected:
    static const char* const _xsde_DeviceMetricCalibrationState_list_pskel_enums_[4UL];
  };

  class DeviceMetricCalibrationState_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DeviceMetricCalibrationState ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DeviceMetricCalibrationState_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DeviceMetricCalibrationState_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceMetricCalibrationState_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetricCalibrationState_pskel* DeviceMetricCalibrationState_impl_;
    DeviceMetricCalibrationState_pskel (DeviceMetricCalibrationState_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DeviceMetricCalibrationState_list_pskel* value_parser_;
  };

  class DeviceMetricOperationalStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DeviceMetricOperationalStatus_list ();

    // Constructor.
    //
    DeviceMetricOperationalStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetricOperationalStatus_list_pskel* DeviceMetricOperationalStatus_list_impl_;
    DeviceMetricOperationalStatus_list_pskel (DeviceMetricOperationalStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_DeviceMetricOperationalStatus_list_pskel_enums_[4UL];
  };

  class DeviceMetricOperationalStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DeviceMetricOperationalStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DeviceMetricOperationalStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DeviceMetricOperationalStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceMetricOperationalStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetricOperationalStatus_pskel* DeviceMetricOperationalStatus_impl_;
    DeviceMetricOperationalStatus_pskel (DeviceMetricOperationalStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DeviceMetricOperationalStatus_list_pskel* value_parser_;
  };

  class DeviceMetricCategory_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DeviceMetricCategory_list ();

    // Constructor.
    //
    DeviceMetricCategory_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetricCategory_list_pskel* DeviceMetricCategory_list_impl_;
    DeviceMetricCategory_list_pskel (DeviceMetricCategory_list_pskel*, void*);

    protected:
    static const char* const _xsde_DeviceMetricCategory_list_pskel_enums_[4UL];
  };

  class DeviceMetricCategory_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DeviceMetricCategory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DeviceMetricCategory_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DeviceMetricCategory_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceMetricCategory_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceMetricCategory_pskel* DeviceMetricCategory_impl_;
    DeviceMetricCategory_pskel (DeviceMetricCategory_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DeviceMetricCategory_list_pskel* value_parser_;
  };

  class DeviceRequest_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    basedOn ();

    virtual void
    priorRequest ();

    virtual void
    groupIdentifier ();

    virtual void
    status ();

    virtual void
    intent ();

    virtual void
    priority ();

    virtual void
    codeReference ();

    virtual void
    codeCodeableConcept ();

    virtual void
    parameter ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrencePeriod ();

    virtual void
    occurrenceTiming ();

    virtual void
    authoredOn ();

    virtual void
    requester ();

    virtual void
    performerType ();

    virtual void
    performer ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    insurance ();

    virtual void
    supportingInfo ();

    virtual void
    note ();

    virtual void
    relevantHistory ();

    virtual void
    post_DeviceRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* priorRequest */,
             ::fhir::Identifier_pskel& /* groupIdentifier */,
             ::fhir::RequestStatus_pskel& /* status */,
             ::fhir::RequestIntent_pskel& /* intent */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::Reference_pskel& /* codeReference */,
             ::fhir::CodeableConcept_pskel& /* codeCodeableConcept */,
             ::fhir::DeviceRequest_Parameter_pskel& /* parameter */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::Period_pskel& /* occurrencePeriod */,
             ::fhir::Timing_pskel& /* occurrenceTiming */,
             ::fhir::dateTime_pskel& /* authoredOn */,
             ::fhir::Reference_pskel& /* requester */,
             ::fhir::CodeableConcept_pskel& /* performerType */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Reference_pskel& /* insurance */,
             ::fhir::Reference_pskel& /* supportingInfo */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::Reference_pskel& /* relevantHistory */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    priorRequest_parser (::fhir::Reference_pskel&);

    void
    groupIdentifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::RequestStatus_pskel&);

    void
    intent_parser (::fhir::RequestIntent_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    codeReference_parser (::fhir::Reference_pskel&);

    void
    codeCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    parameter_parser (::fhir::DeviceRequest_Parameter_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrencePeriod_parser (::fhir::Period_pskel&);

    void
    occurrenceTiming_parser (::fhir::Timing_pskel&);

    void
    authoredOn_parser (::fhir::dateTime_pskel&);

    void
    requester_parser (::fhir::Reference_pskel&);

    void
    performerType_parser (::fhir::CodeableConcept_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    insurance_parser (::fhir::Reference_pskel&);

    void
    supportingInfo_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    relevantHistory_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceRequest_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceRequest_pskel* DeviceRequest_impl_;
    DeviceRequest_pskel (DeviceRequest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* priorRequest_parser_;
    ::fhir::Identifier_pskel* groupIdentifier_parser_;
    ::fhir::RequestStatus_pskel* status_parser_;
    ::fhir::RequestIntent_pskel* intent_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::Reference_pskel* codeReference_parser_;
    ::fhir::CodeableConcept_pskel* codeCodeableConcept_parser_;
    ::fhir::DeviceRequest_Parameter_pskel* parameter_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::Period_pskel* occurrencePeriod_parser_;
    ::fhir::Timing_pskel* occurrenceTiming_parser_;
    ::fhir::dateTime_pskel* authoredOn_parser_;
    ::fhir::Reference_pskel* requester_parser_;
    ::fhir::CodeableConcept_pskel* performerType_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Reference_pskel* insurance_parser_;
    ::fhir::Reference_pskel* supportingInfo_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::Reference_pskel* relevantHistory_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceRequest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceRequest_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueBoolean ();

    virtual void
    post_DeviceRequest_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::boolean_pskel& /* valueBoolean */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceRequest_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceRequest_Parameter_pskel* DeviceRequest_Parameter_impl_;
    DeviceRequest_Parameter_pskel (DeviceRequest_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceRequest_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceUseStatement_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    basedOn ();

    virtual void
    status ();

    virtual void
    subject ();

    virtual void
    derivedFrom ();

    virtual void
    timingTiming ();

    virtual void
    timingPeriod ();

    virtual void
    timingDateTime ();

    virtual void
    recordedOn ();

    virtual void
    source ();

    virtual void
    device ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    bodySite ();

    virtual void
    note ();

    virtual void
    post_DeviceUseStatement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::DeviceUseStatementStatus_pskel& /* status */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* derivedFrom */,
             ::fhir::Timing_pskel& /* timingTiming */,
             ::fhir::Period_pskel& /* timingPeriod */,
             ::fhir::dateTime_pskel& /* timingDateTime */,
             ::fhir::dateTime_pskel& /* recordedOn */,
             ::fhir::Reference_pskel& /* source */,
             ::fhir::Reference_pskel& /* device */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::DeviceUseStatementStatus_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    derivedFrom_parser (::fhir::Reference_pskel&);

    void
    timingTiming_parser (::fhir::Timing_pskel&);

    void
    timingPeriod_parser (::fhir::Period_pskel&);

    void
    timingDateTime_parser (::fhir::dateTime_pskel&);

    void
    recordedOn_parser (::fhir::dateTime_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    void
    device_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceUseStatement_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceUseStatement_pskel* DeviceUseStatement_impl_;
    DeviceUseStatement_pskel (DeviceUseStatement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::DeviceUseStatementStatus_pskel* status_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* derivedFrom_parser_;
    ::fhir::Timing_pskel* timingTiming_parser_;
    ::fhir::Period_pskel* timingPeriod_parser_;
    ::fhir::dateTime_pskel* timingDateTime_parser_;
    ::fhir::dateTime_pskel* recordedOn_parser_;
    ::fhir::Reference_pskel* source_parser_;
    ::fhir::Reference_pskel* device_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DeviceUseStatement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DeviceUseStatementStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DeviceUseStatementStatus_list ();

    // Constructor.
    //
    DeviceUseStatementStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceUseStatementStatus_list_pskel* DeviceUseStatementStatus_list_impl_;
    DeviceUseStatementStatus_list_pskel (DeviceUseStatementStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_DeviceUseStatementStatus_list_pskel_enums_[6UL];
  };

  class DeviceUseStatementStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DeviceUseStatementStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DeviceUseStatementStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DeviceUseStatementStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DeviceUseStatementStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DeviceUseStatementStatus_pskel* DeviceUseStatementStatus_impl_;
    DeviceUseStatementStatus_pskel (DeviceUseStatementStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DeviceUseStatementStatus_list_pskel* value_parser_;
  };

  class DiagnosticReport_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    basedOn ();

    virtual void
    status ();

    virtual void
    category ();

    virtual void
    code ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    effectiveDateTime ();

    virtual void
    effectivePeriod ();

    virtual void
    issued ();

    virtual void
    performer ();

    virtual void
    resultsInterpreter ();

    virtual void
    specimen ();

    virtual void
    result ();

    virtual void
    imagingStudy ();

    virtual void
    media ();

    virtual void
    conclusion ();

    virtual void
    conclusionCode ();

    virtual void
    presentedForm ();

    virtual void
    post_DiagnosticReport ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::DiagnosticReportStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* effectiveDateTime */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::instant_pskel& /* issued */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::Reference_pskel& /* resultsInterpreter */,
             ::fhir::Reference_pskel& /* specimen */,
             ::fhir::Reference_pskel& /* result */,
             ::fhir::Reference_pskel& /* imagingStudy */,
             ::fhir::DiagnosticReport_Media_pskel& /* media */,
             ::fhir::string_pskel& /* conclusion */,
             ::fhir::CodeableConcept_pskel& /* conclusionCode */,
             ::fhir::Attachment_pskel& /* presentedForm */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::DiagnosticReportStatus_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    effectiveDateTime_parser (::fhir::dateTime_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    issued_parser (::fhir::instant_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    resultsInterpreter_parser (::fhir::Reference_pskel&);

    void
    specimen_parser (::fhir::Reference_pskel&);

    void
    result_parser (::fhir::Reference_pskel&);

    void
    imagingStudy_parser (::fhir::Reference_pskel&);

    void
    media_parser (::fhir::DiagnosticReport_Media_pskel&);

    void
    conclusion_parser (::fhir::string_pskel&);

    void
    conclusionCode_parser (::fhir::CodeableConcept_pskel&);

    void
    presentedForm_parser (::fhir::Attachment_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DiagnosticReport_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    DiagnosticReport_pskel* DiagnosticReport_impl_;
    DiagnosticReport_pskel (DiagnosticReport_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::DiagnosticReportStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* effectiveDateTime_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::instant_pskel* issued_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::Reference_pskel* resultsInterpreter_parser_;
    ::fhir::Reference_pskel* specimen_parser_;
    ::fhir::Reference_pskel* result_parser_;
    ::fhir::Reference_pskel* imagingStudy_parser_;
    ::fhir::DiagnosticReport_Media_pskel* media_parser_;
    ::fhir::string_pskel* conclusion_parser_;
    ::fhir::CodeableConcept_pskel* conclusionCode_parser_;
    ::fhir::Attachment_pskel* presentedForm_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DiagnosticReport_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DiagnosticReport_Media_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    comment ();

    virtual void
    link ();

    virtual void
    post_DiagnosticReport_Media ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::Reference_pskel& /* link */);

    // Individual element parsers.
    //
    void
    comment_parser (::fhir::string_pskel&);

    void
    link_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DiagnosticReport_Media_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DiagnosticReport_Media_pskel* DiagnosticReport_Media_impl_;
    DiagnosticReport_Media_pskel (DiagnosticReport_Media_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* comment_parser_;
    ::fhir::Reference_pskel* link_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DiagnosticReport_Media_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DiagnosticReportStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DiagnosticReportStatus_list ();

    // Constructor.
    //
    DiagnosticReportStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DiagnosticReportStatus_list_pskel* DiagnosticReportStatus_list_impl_;
    DiagnosticReportStatus_list_pskel (DiagnosticReportStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_DiagnosticReportStatus_list_pskel_enums_[10UL];
  };

  class DiagnosticReportStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DiagnosticReportStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DiagnosticReportStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DiagnosticReportStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DiagnosticReportStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DiagnosticReportStatus_pskel* DiagnosticReportStatus_impl_;
    DiagnosticReportStatus_pskel (DiagnosticReportStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DiagnosticReportStatus_list_pskel* value_parser_;
  };

  class DocumentManifest_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    masterIdentifier ();

    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    subject ();

    virtual void
    created ();

    virtual void
    author ();

    virtual void
    recipient ();

    virtual void
    source ();

    virtual void
    description ();

    virtual void
    content ();

    virtual void
    related ();

    virtual void
    post_DocumentManifest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* masterIdentifier */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::DocumentReferenceStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::Reference_pskel& /* recipient */,
             ::fhir::uri_pskel& /* source */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Reference_pskel& /* content */,
             ::fhir::DocumentManifest_Related_pskel& /* related */);

    // Individual element parsers.
    //
    void
    masterIdentifier_parser (::fhir::Identifier_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::DocumentReferenceStatus_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    recipient_parser (::fhir::Reference_pskel&);

    void
    source_parser (::fhir::uri_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    content_parser (::fhir::Reference_pskel&);

    void
    related_parser (::fhir::DocumentManifest_Related_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentManifest_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentManifest_pskel* DocumentManifest_impl_;
    DocumentManifest_pskel (DocumentManifest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* masterIdentifier_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::DocumentReferenceStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::Reference_pskel* recipient_parser_;
    ::fhir::uri_pskel* source_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Reference_pskel* content_parser_;
    ::fhir::DocumentManifest_Related_pskel* related_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DocumentManifest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DocumentManifest_Related_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    ref ();

    virtual void
    post_DocumentManifest_Related ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* ref */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    ref_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentManifest_Related_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentManifest_Related_pskel* DocumentManifest_Related_impl_;
    DocumentManifest_Related_pskel (DocumentManifest_Related_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* ref_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DocumentManifest_Related_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DocumentReference_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    masterIdentifier ();

    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    docStatus ();

    virtual void
    type ();

    virtual void
    category ();

    virtual void
    subject ();

    virtual void
    date ();

    virtual void
    author ();

    virtual void
    authenticator ();

    virtual void
    custodian ();

    virtual void
    relatesTo ();

    virtual void
    description ();

    virtual void
    securityLabel ();

    virtual void
    content ();

    virtual void
    context ();

    virtual void
    post_DocumentReference ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* masterIdentifier */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::DocumentReferenceStatus_pskel& /* status */,
             ::fhir::CompositionStatus_pskel& /* docStatus */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::instant_pskel& /* date */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::Reference_pskel& /* authenticator */,
             ::fhir::Reference_pskel& /* custodian */,
             ::fhir::DocumentReference_RelatesTo_pskel& /* relatesTo */,
             ::fhir::string_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* securityLabel */,
             ::fhir::DocumentReference_Content_pskel& /* content */,
             ::fhir::DocumentReference_Context_pskel& /* context */);

    // Individual element parsers.
    //
    void
    masterIdentifier_parser (::fhir::Identifier_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::DocumentReferenceStatus_pskel&);

    void
    docStatus_parser (::fhir::CompositionStatus_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::instant_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    authenticator_parser (::fhir::Reference_pskel&);

    void
    custodian_parser (::fhir::Reference_pskel&);

    void
    relatesTo_parser (::fhir::DocumentReference_RelatesTo_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    securityLabel_parser (::fhir::CodeableConcept_pskel&);

    void
    content_parser (::fhir::DocumentReference_Content_pskel&);

    void
    context_parser (::fhir::DocumentReference_Context_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentReference_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentReference_pskel* DocumentReference_impl_;
    DocumentReference_pskel (DocumentReference_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* masterIdentifier_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::DocumentReferenceStatus_pskel* status_parser_;
    ::fhir::CompositionStatus_pskel* docStatus_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::instant_pskel* date_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::Reference_pskel* authenticator_parser_;
    ::fhir::Reference_pskel* custodian_parser_;
    ::fhir::DocumentReference_RelatesTo_pskel* relatesTo_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* securityLabel_parser_;
    ::fhir::DocumentReference_Content_pskel* content_parser_;
    ::fhir::DocumentReference_Context_pskel* context_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DocumentReference_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DocumentReference_RelatesTo_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    target ();

    virtual void
    post_DocumentReference_RelatesTo ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::DocumentRelationshipType_pskel& /* code */,
             ::fhir::Reference_pskel& /* target */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::DocumentRelationshipType_pskel&);

    void
    target_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentReference_RelatesTo_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentReference_RelatesTo_pskel* DocumentReference_RelatesTo_impl_;
    DocumentReference_RelatesTo_pskel (DocumentReference_RelatesTo_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::DocumentRelationshipType_pskel* code_parser_;
    ::fhir::Reference_pskel* target_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DocumentReference_RelatesTo_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DocumentReference_Content_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    attachment ();

    virtual void
    format ();

    virtual void
    post_DocumentReference_Content ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Attachment_pskel& /* attachment */,
             ::fhir::Coding_pskel& /* format */);

    // Individual element parsers.
    //
    void
    attachment_parser (::fhir::Attachment_pskel&);

    void
    format_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentReference_Content_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentReference_Content_pskel* DocumentReference_Content_impl_;
    DocumentReference_Content_pskel (DocumentReference_Content_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Attachment_pskel* attachment_parser_;
    ::fhir::Coding_pskel* format_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DocumentReference_Content_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DocumentReference_Context_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    encounter ();

    virtual void
    event ();

    virtual void
    period ();

    virtual void
    facilityType ();

    virtual void
    practiceSetting ();

    virtual void
    sourcePatientInfo ();

    virtual void
    related ();

    virtual void
    post_DocumentReference_Context ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::CodeableConcept_pskel& /* event */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::CodeableConcept_pskel& /* facilityType */,
             ::fhir::CodeableConcept_pskel& /* practiceSetting */,
             ::fhir::Reference_pskel& /* sourcePatientInfo */,
             ::fhir::Reference_pskel& /* related */);

    // Individual element parsers.
    //
    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    event_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    facilityType_parser (::fhir::CodeableConcept_pskel&);

    void
    practiceSetting_parser (::fhir::CodeableConcept_pskel&);

    void
    sourcePatientInfo_parser (::fhir::Reference_pskel&);

    void
    related_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentReference_Context_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentReference_Context_pskel* DocumentReference_Context_impl_;
    DocumentReference_Context_pskel (DocumentReference_Context_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::CodeableConcept_pskel* event_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::CodeableConcept_pskel* facilityType_parser_;
    ::fhir::CodeableConcept_pskel* practiceSetting_parser_;
    ::fhir::Reference_pskel* sourcePatientInfo_parser_;
    ::fhir::Reference_pskel* related_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::DocumentReference_Context_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EffectEvidenceSynthesis_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    note ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    synthesisType ();

    virtual void
    studyType ();

    virtual void
    population ();

    virtual void
    exposure ();

    virtual void
    exposureAlternative ();

    virtual void
    outcome ();

    virtual void
    sampleSize ();

    virtual void
    resultsByExposure ();

    virtual void
    effectEstimate ();

    virtual void
    certainty ();

    virtual void
    post_EffectEvidenceSynthesis ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::CodeableConcept_pskel& /* synthesisType */,
             ::fhir::CodeableConcept_pskel& /* studyType */,
             ::fhir::Reference_pskel& /* population */,
             ::fhir::Reference_pskel& /* exposure */,
             ::fhir::Reference_pskel& /* exposureAlternative */,
             ::fhir::Reference_pskel& /* outcome */,
             ::fhir::EffectEvidenceSynthesis_SampleSize_pskel& /* sampleSize */,
             ::fhir::EffectEvidenceSynthesis_ResultsByExposure_pskel& /* resultsByExposure */,
             ::fhir::EffectEvidenceSynthesis_EffectEstimate_pskel& /* effectEstimate */,
             ::fhir::EffectEvidenceSynthesis_Certainty_pskel& /* certainty */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    synthesisType_parser (::fhir::CodeableConcept_pskel&);

    void
    studyType_parser (::fhir::CodeableConcept_pskel&);

    void
    population_parser (::fhir::Reference_pskel&);

    void
    exposure_parser (::fhir::Reference_pskel&);

    void
    exposureAlternative_parser (::fhir::Reference_pskel&);

    void
    outcome_parser (::fhir::Reference_pskel&);

    void
    sampleSize_parser (::fhir::EffectEvidenceSynthesis_SampleSize_pskel&);

    void
    resultsByExposure_parser (::fhir::EffectEvidenceSynthesis_ResultsByExposure_pskel&);

    void
    effectEstimate_parser (::fhir::EffectEvidenceSynthesis_EffectEstimate_pskel&);

    void
    certainty_parser (::fhir::EffectEvidenceSynthesis_Certainty_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EffectEvidenceSynthesis_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    EffectEvidenceSynthesis_pskel* EffectEvidenceSynthesis_impl_;
    EffectEvidenceSynthesis_pskel (EffectEvidenceSynthesis_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::CodeableConcept_pskel* synthesisType_parser_;
    ::fhir::CodeableConcept_pskel* studyType_parser_;
    ::fhir::Reference_pskel* population_parser_;
    ::fhir::Reference_pskel* exposure_parser_;
    ::fhir::Reference_pskel* exposureAlternative_parser_;
    ::fhir::Reference_pskel* outcome_parser_;
    ::fhir::EffectEvidenceSynthesis_SampleSize_pskel* sampleSize_parser_;
    ::fhir::EffectEvidenceSynthesis_ResultsByExposure_pskel* resultsByExposure_parser_;
    ::fhir::EffectEvidenceSynthesis_EffectEstimate_pskel* effectEstimate_parser_;
    ::fhir::EffectEvidenceSynthesis_Certainty_pskel* certainty_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EffectEvidenceSynthesis_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EffectEvidenceSynthesis_SampleSize_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    numberOfStudies ();

    virtual void
    numberOfParticipants ();

    virtual void
    post_EffectEvidenceSynthesis_SampleSize ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::integer_pskel& /* numberOfStudies */,
             ::fhir::integer_pskel& /* numberOfParticipants */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    numberOfStudies_parser (::fhir::integer_pskel&);

    void
    numberOfParticipants_parser (::fhir::integer_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EffectEvidenceSynthesis_SampleSize_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    EffectEvidenceSynthesis_SampleSize_pskel* EffectEvidenceSynthesis_SampleSize_impl_;
    EffectEvidenceSynthesis_SampleSize_pskel (EffectEvidenceSynthesis_SampleSize_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::integer_pskel* numberOfStudies_parser_;
    ::fhir::integer_pskel* numberOfParticipants_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EffectEvidenceSynthesis_SampleSize_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EffectEvidenceSynthesis_ResultsByExposure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    exposureState ();

    virtual void
    variantState ();

    virtual void
    riskEvidenceSynthesis ();

    virtual void
    post_EffectEvidenceSynthesis_ResultsByExposure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::ExposureState_pskel& /* exposureState */,
             ::fhir::CodeableConcept_pskel& /* variantState */,
             ::fhir::Reference_pskel& /* riskEvidenceSynthesis */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    exposureState_parser (::fhir::ExposureState_pskel&);

    void
    variantState_parser (::fhir::CodeableConcept_pskel&);

    void
    riskEvidenceSynthesis_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EffectEvidenceSynthesis_ResultsByExposure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    EffectEvidenceSynthesis_ResultsByExposure_pskel* EffectEvidenceSynthesis_ResultsByExposure_impl_;
    EffectEvidenceSynthesis_ResultsByExposure_pskel (EffectEvidenceSynthesis_ResultsByExposure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::ExposureState_pskel* exposureState_parser_;
    ::fhir::CodeableConcept_pskel* variantState_parser_;
    ::fhir::Reference_pskel* riskEvidenceSynthesis_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EffectEvidenceSynthesis_ResultsByExposure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EffectEvidenceSynthesis_EffectEstimate_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    type ();

    virtual void
    variantState ();

    virtual void
    value ();

    virtual void
    unitOfMeasure ();

    virtual void
    precisionEstimate ();

    virtual void
    post_EffectEvidenceSynthesis_EffectEstimate ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* variantState */,
             ::fhir::decimal_pskel& /* value */,
             ::fhir::CodeableConcept_pskel& /* unitOfMeasure */,
             ::fhir::EffectEvidenceSynthesis_PrecisionEstimate_pskel& /* precisionEstimate */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    variantState_parser (::fhir::CodeableConcept_pskel&);

    void
    value_parser (::fhir::decimal_pskel&);

    void
    unitOfMeasure_parser (::fhir::CodeableConcept_pskel&);

    void
    precisionEstimate_parser (::fhir::EffectEvidenceSynthesis_PrecisionEstimate_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EffectEvidenceSynthesis_EffectEstimate_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    EffectEvidenceSynthesis_EffectEstimate_pskel* EffectEvidenceSynthesis_EffectEstimate_impl_;
    EffectEvidenceSynthesis_EffectEstimate_pskel (EffectEvidenceSynthesis_EffectEstimate_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* variantState_parser_;
    ::fhir::decimal_pskel* value_parser_;
    ::fhir::CodeableConcept_pskel* unitOfMeasure_parser_;
    ::fhir::EffectEvidenceSynthesis_PrecisionEstimate_pskel* precisionEstimate_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EffectEvidenceSynthesis_EffectEstimate_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EffectEvidenceSynthesis_PrecisionEstimate_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    level ();

    virtual void
    from ();

    virtual void
    to ();

    virtual void
    post_EffectEvidenceSynthesis_PrecisionEstimate ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::decimal_pskel& /* level */,
             ::fhir::decimal_pskel& /* from */,
             ::fhir::decimal_pskel& /* to */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    level_parser (::fhir::decimal_pskel&);

    void
    from_parser (::fhir::decimal_pskel&);

    void
    to_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EffectEvidenceSynthesis_PrecisionEstimate_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    EffectEvidenceSynthesis_PrecisionEstimate_pskel* EffectEvidenceSynthesis_PrecisionEstimate_impl_;
    EffectEvidenceSynthesis_PrecisionEstimate_pskel (EffectEvidenceSynthesis_PrecisionEstimate_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::decimal_pskel* level_parser_;
    ::fhir::decimal_pskel* from_parser_;
    ::fhir::decimal_pskel* to_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EffectEvidenceSynthesis_PrecisionEstimate_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EffectEvidenceSynthesis_Certainty_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    rating ();

    virtual void
    note ();

    virtual void
    certaintySubcomponent ();

    virtual void
    post_EffectEvidenceSynthesis_Certainty ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* rating */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::EffectEvidenceSynthesis_CertaintySubcomponent_pskel& /* certaintySubcomponent */);

    // Individual element parsers.
    //
    void
    rating_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    certaintySubcomponent_parser (::fhir::EffectEvidenceSynthesis_CertaintySubcomponent_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EffectEvidenceSynthesis_Certainty_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    EffectEvidenceSynthesis_Certainty_pskel* EffectEvidenceSynthesis_Certainty_impl_;
    EffectEvidenceSynthesis_Certainty_pskel (EffectEvidenceSynthesis_Certainty_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* rating_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::EffectEvidenceSynthesis_CertaintySubcomponent_pskel* certaintySubcomponent_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EffectEvidenceSynthesis_Certainty_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EffectEvidenceSynthesis_CertaintySubcomponent_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    rating ();

    virtual void
    note ();

    virtual void
    post_EffectEvidenceSynthesis_CertaintySubcomponent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* rating */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    rating_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EffectEvidenceSynthesis_CertaintySubcomponent_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    EffectEvidenceSynthesis_CertaintySubcomponent_pskel* EffectEvidenceSynthesis_CertaintySubcomponent_impl_;
    EffectEvidenceSynthesis_CertaintySubcomponent_pskel (EffectEvidenceSynthesis_CertaintySubcomponent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* rating_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EffectEvidenceSynthesis_CertaintySubcomponent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExposureState_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ExposureState_list ();

    // Constructor.
    //
    ExposureState_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExposureState_list_pskel* ExposureState_list_impl_;
    ExposureState_list_pskel (ExposureState_list_pskel*, void*);

    protected:
    static const char* const _xsde_ExposureState_list_pskel_enums_[2UL];
  };

  class ExposureState_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ExposureState ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ExposureState_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ExposureState_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExposureState_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExposureState_pskel* ExposureState_impl_;
    ExposureState_pskel (ExposureState_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ExposureState_list_pskel* value_parser_;
  };

  class Encounter_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    statusHistory ();

    virtual void
    class_ ();

    virtual void
    classHistory ();

    virtual void
    type ();

    virtual void
    serviceType ();

    virtual void
    priority ();

    virtual void
    subject ();

    virtual void
    episodeOfCare ();

    virtual void
    basedOn ();

    virtual void
    participant ();

    virtual void
    appointment ();

    virtual void
    period ();

    virtual void
    length ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    diagnosis ();

    virtual void
    account ();

    virtual void
    hospitalization ();

    virtual void
    location ();

    virtual void
    serviceProvider ();

    virtual void
    partOf ();

    virtual void
    post_Encounter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::EncounterStatus_pskel& /* status */,
             ::fhir::Encounter_StatusHistory_pskel& /* statusHistory */,
             ::fhir::Coding_pskel& /* class */,
             ::fhir::Encounter_ClassHistory_pskel& /* classHistory */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* serviceType */,
             ::fhir::CodeableConcept_pskel& /* priority */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* episodeOfCare */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Encounter_Participant_pskel& /* participant */,
             ::fhir::Reference_pskel& /* appointment */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Duration_pskel& /* length */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Encounter_Diagnosis_pskel& /* diagnosis */,
             ::fhir::Reference_pskel& /* account */,
             ::fhir::Encounter_Hospitalization_pskel& /* hospitalization */,
             ::fhir::Encounter_Location_pskel& /* location */,
             ::fhir::Reference_pskel& /* serviceProvider */,
             ::fhir::Reference_pskel& /* partOf */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::EncounterStatus_pskel&);

    void
    statusHistory_parser (::fhir::Encounter_StatusHistory_pskel&);

    void
    class__parser (::fhir::Coding_pskel&);

    void
    classHistory_parser (::fhir::Encounter_ClassHistory_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    serviceType_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    episodeOfCare_parser (::fhir::Reference_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    participant_parser (::fhir::Encounter_Participant_pskel&);

    void
    appointment_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    length_parser (::fhir::Duration_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    diagnosis_parser (::fhir::Encounter_Diagnosis_pskel&);

    void
    account_parser (::fhir::Reference_pskel&);

    void
    hospitalization_parser (::fhir::Encounter_Hospitalization_pskel&);

    void
    location_parser (::fhir::Encounter_Location_pskel&);

    void
    serviceProvider_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_pskel* Encounter_impl_;
    Encounter_pskel (Encounter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::EncounterStatus_pskel* status_parser_;
    ::fhir::Encounter_StatusHistory_pskel* statusHistory_parser_;
    ::fhir::Coding_pskel* class__parser_;
    ::fhir::Encounter_ClassHistory_pskel* classHistory_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* serviceType_parser_;
    ::fhir::CodeableConcept_pskel* priority_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* episodeOfCare_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Encounter_Participant_pskel* participant_parser_;
    ::fhir::Reference_pskel* appointment_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Duration_pskel* length_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Encounter_Diagnosis_pskel* diagnosis_parser_;
    ::fhir::Reference_pskel* account_parser_;
    ::fhir::Encounter_Hospitalization_pskel* hospitalization_parser_;
    ::fhir::Encounter_Location_pskel* location_parser_;
    ::fhir::Reference_pskel* serviceProvider_parser_;
    ::fhir::Reference_pskel* partOf_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_StatusHistory_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    status ();

    virtual void
    period ();

    virtual void
    post_Encounter_StatusHistory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::EncounterStatus_pskel& /* status */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    status_parser (::fhir::EncounterStatus_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_StatusHistory_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_StatusHistory_pskel* Encounter_StatusHistory_impl_;
    Encounter_StatusHistory_pskel (Encounter_StatusHistory_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::EncounterStatus_pskel* status_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_StatusHistory_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_ClassHistory_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    class_ ();

    virtual void
    period ();

    virtual void
    post_Encounter_ClassHistory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* class */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    class__parser (::fhir::Coding_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_ClassHistory_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_ClassHistory_pskel* Encounter_ClassHistory_impl_;
    Encounter_ClassHistory_pskel (Encounter_ClassHistory_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* class__parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_ClassHistory_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_Participant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    period ();

    virtual void
    individual ();

    virtual void
    post_Encounter_Participant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* individual */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    individual_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_Participant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_Participant_pskel* Encounter_Participant_impl_;
    Encounter_Participant_pskel (Encounter_Participant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* individual_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_Participant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_Diagnosis_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    condition ();

    virtual void
    use ();

    virtual void
    rank ();

    virtual void
    post_Encounter_Diagnosis ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* condition */,
             ::fhir::CodeableConcept_pskel& /* use */,
             ::fhir::positiveInt_pskel& /* rank */);

    // Individual element parsers.
    //
    void
    condition_parser (::fhir::Reference_pskel&);

    void
    use_parser (::fhir::CodeableConcept_pskel&);

    void
    rank_parser (::fhir::positiveInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_Diagnosis_pskel* Encounter_Diagnosis_impl_;
    Encounter_Diagnosis_pskel (Encounter_Diagnosis_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* condition_parser_;
    ::fhir::CodeableConcept_pskel* use_parser_;
    ::fhir::positiveInt_pskel* rank_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_Diagnosis_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_Hospitalization_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    preAdmissionIdentifier ();

    virtual void
    origin ();

    virtual void
    admitSource ();

    virtual void
    reAdmission ();

    virtual void
    dietPreference ();

    virtual void
    specialCourtesy ();

    virtual void
    specialArrangement ();

    virtual void
    destination ();

    virtual void
    dischargeDisposition ();

    virtual void
    post_Encounter_Hospitalization ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* preAdmissionIdentifier */,
             ::fhir::Reference_pskel& /* origin */,
             ::fhir::CodeableConcept_pskel& /* admitSource */,
             ::fhir::CodeableConcept_pskel& /* reAdmission */,
             ::fhir::CodeableConcept_pskel& /* dietPreference */,
             ::fhir::CodeableConcept_pskel& /* specialCourtesy */,
             ::fhir::CodeableConcept_pskel& /* specialArrangement */,
             ::fhir::Reference_pskel& /* destination */,
             ::fhir::CodeableConcept_pskel& /* dischargeDisposition */);

    // Individual element parsers.
    //
    void
    preAdmissionIdentifier_parser (::fhir::Identifier_pskel&);

    void
    origin_parser (::fhir::Reference_pskel&);

    void
    admitSource_parser (::fhir::CodeableConcept_pskel&);

    void
    reAdmission_parser (::fhir::CodeableConcept_pskel&);

    void
    dietPreference_parser (::fhir::CodeableConcept_pskel&);

    void
    specialCourtesy_parser (::fhir::CodeableConcept_pskel&);

    void
    specialArrangement_parser (::fhir::CodeableConcept_pskel&);

    void
    destination_parser (::fhir::Reference_pskel&);

    void
    dischargeDisposition_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_Hospitalization_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_Hospitalization_pskel* Encounter_Hospitalization_impl_;
    Encounter_Hospitalization_pskel (Encounter_Hospitalization_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* preAdmissionIdentifier_parser_;
    ::fhir::Reference_pskel* origin_parser_;
    ::fhir::CodeableConcept_pskel* admitSource_parser_;
    ::fhir::CodeableConcept_pskel* reAdmission_parser_;
    ::fhir::CodeableConcept_pskel* dietPreference_parser_;
    ::fhir::CodeableConcept_pskel* specialCourtesy_parser_;
    ::fhir::CodeableConcept_pskel* specialArrangement_parser_;
    ::fhir::Reference_pskel* destination_parser_;
    ::fhir::CodeableConcept_pskel* dischargeDisposition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_Hospitalization_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Encounter_Location_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    location ();

    virtual void
    status ();

    virtual void
    physicalType ();

    virtual void
    period ();

    virtual void
    post_Encounter_Location ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::EncounterLocationStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* physicalType */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    location_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::EncounterLocationStatus_pskel&);

    void
    physicalType_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Encounter_Location_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Encounter_Location_pskel* Encounter_Location_impl_;
    Encounter_Location_pskel (Encounter_Location_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::EncounterLocationStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* physicalType_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Encounter_Location_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EncounterLocationStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EncounterLocationStatus_list ();

    // Constructor.
    //
    EncounterLocationStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EncounterLocationStatus_list_pskel* EncounterLocationStatus_list_impl_;
    EncounterLocationStatus_list_pskel (EncounterLocationStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_EncounterLocationStatus_list_pskel_enums_[4UL];
  };

  class EncounterLocationStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EncounterLocationStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EncounterLocationStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EncounterLocationStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EncounterLocationStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EncounterLocationStatus_pskel* EncounterLocationStatus_impl_;
    EncounterLocationStatus_pskel (EncounterLocationStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EncounterLocationStatus_list_pskel* value_parser_;
  };

  class EncounterStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EncounterStatus_list ();

    // Constructor.
    //
    EncounterStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EncounterStatus_list_pskel* EncounterStatus_list_impl_;
    EncounterStatus_list_pskel (EncounterStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_EncounterStatus_list_pskel_enums_[9UL];
  };

  class EncounterStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EncounterStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EncounterStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EncounterStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EncounterStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EncounterStatus_pskel* EncounterStatus_impl_;
    EncounterStatus_pskel (EncounterStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EncounterStatus_list_pskel* value_parser_;
  };

  class Endpoint_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    connectionType ();

    virtual void
    name ();

    virtual void
    managingOrganization ();

    virtual void
    contact ();

    virtual void
    period ();

    virtual void
    payloadType ();

    virtual void
    payloadMimeType ();

    virtual void
    address ();

    virtual void
    header ();

    virtual void
    post_Endpoint ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::EndpointStatus_pskel& /* status */,
             ::fhir::Coding_pskel& /* connectionType */,
             ::fhir::string_pskel& /* name */,
             ::fhir::Reference_pskel& /* managingOrganization */,
             ::fhir::ContactPoint_pskel& /* contact */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::CodeableConcept_pskel& /* payloadType */,
             ::fhir::code_pskel& /* payloadMimeType */,
             ::fhir::url_pskel& /* address */,
             ::fhir::string_pskel& /* header */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::EndpointStatus_pskel&);

    void
    connectionType_parser (::fhir::Coding_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    managingOrganization_parser (::fhir::Reference_pskel&);

    void
    contact_parser (::fhir::ContactPoint_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    payloadType_parser (::fhir::CodeableConcept_pskel&);

    void
    payloadMimeType_parser (::fhir::code_pskel&);

    void
    address_parser (::fhir::url_pskel&);

    void
    header_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Endpoint_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Endpoint_pskel* Endpoint_impl_;
    Endpoint_pskel (Endpoint_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::EndpointStatus_pskel* status_parser_;
    ::fhir::Coding_pskel* connectionType_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::Reference_pskel* managingOrganization_parser_;
    ::fhir::ContactPoint_pskel* contact_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::CodeableConcept_pskel* payloadType_parser_;
    ::fhir::code_pskel* payloadMimeType_parser_;
    ::fhir::url_pskel* address_parser_;
    ::fhir::string_pskel* header_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Endpoint_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EndpointStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EndpointStatus_list ();

    // Constructor.
    //
    EndpointStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EndpointStatus_list_pskel* EndpointStatus_list_impl_;
    EndpointStatus_list_pskel (EndpointStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_EndpointStatus_list_pskel_enums_[6UL];
  };

  class EndpointStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EndpointStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EndpointStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EndpointStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EndpointStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EndpointStatus_pskel* EndpointStatus_impl_;
    EndpointStatus_pskel (EndpointStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EndpointStatus_list_pskel* value_parser_;
  };

  class EnrollmentRequest_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    created ();

    virtual void
    insurer ();

    virtual void
    provider ();

    virtual void
    candidate ();

    virtual void
    coverage ();

    virtual void
    post_EnrollmentRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* insurer */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::Reference_pskel& /* candidate */,
             ::fhir::Reference_pskel& /* coverage */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    insurer_parser (::fhir::Reference_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    candidate_parser (::fhir::Reference_pskel&);

    void
    coverage_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EnrollmentRequest_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    EnrollmentRequest_pskel* EnrollmentRequest_impl_;
    EnrollmentRequest_pskel (EnrollmentRequest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* insurer_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::Reference_pskel* candidate_parser_;
    ::fhir::Reference_pskel* coverage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EnrollmentRequest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EnrollmentResponse_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    request ();

    virtual void
    outcome ();

    virtual void
    disposition ();

    virtual void
    created ();

    virtual void
    organization ();

    virtual void
    requestProvider ();

    virtual void
    post_EnrollmentResponse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::Reference_pskel& /* request */,
             ::fhir::RemittanceOutcome_pskel& /* outcome */,
             ::fhir::string_pskel& /* disposition */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* organization */,
             ::fhir::Reference_pskel& /* requestProvider */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    request_parser (::fhir::Reference_pskel&);

    void
    outcome_parser (::fhir::RemittanceOutcome_pskel&);

    void
    disposition_parser (::fhir::string_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    organization_parser (::fhir::Reference_pskel&);

    void
    requestProvider_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EnrollmentResponse_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    EnrollmentResponse_pskel* EnrollmentResponse_impl_;
    EnrollmentResponse_pskel (EnrollmentResponse_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::Reference_pskel* request_parser_;
    ::fhir::RemittanceOutcome_pskel* outcome_parser_;
    ::fhir::string_pskel* disposition_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* organization_parser_;
    ::fhir::Reference_pskel* requestProvider_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EnrollmentResponse_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EpisodeOfCare_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    statusHistory ();

    virtual void
    type ();

    virtual void
    diagnosis ();

    virtual void
    patient ();

    virtual void
    managingOrganization ();

    virtual void
    period ();

    virtual void
    referralRequest ();

    virtual void
    careManager ();

    virtual void
    team ();

    virtual void
    account ();

    virtual void
    post_EpisodeOfCare ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::EpisodeOfCareStatus_pskel& /* status */,
             ::fhir::EpisodeOfCare_StatusHistory_pskel& /* statusHistory */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::EpisodeOfCare_Diagnosis_pskel& /* diagnosis */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Reference_pskel& /* managingOrganization */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* referralRequest */,
             ::fhir::Reference_pskel& /* careManager */,
             ::fhir::Reference_pskel& /* team */,
             ::fhir::Reference_pskel& /* account */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::EpisodeOfCareStatus_pskel&);

    void
    statusHistory_parser (::fhir::EpisodeOfCare_StatusHistory_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    diagnosis_parser (::fhir::EpisodeOfCare_Diagnosis_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    managingOrganization_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    referralRequest_parser (::fhir::Reference_pskel&);

    void
    careManager_parser (::fhir::Reference_pskel&);

    void
    team_parser (::fhir::Reference_pskel&);

    void
    account_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EpisodeOfCare_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    EpisodeOfCare_pskel* EpisodeOfCare_impl_;
    EpisodeOfCare_pskel (EpisodeOfCare_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::EpisodeOfCareStatus_pskel* status_parser_;
    ::fhir::EpisodeOfCare_StatusHistory_pskel* statusHistory_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::EpisodeOfCare_Diagnosis_pskel* diagnosis_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Reference_pskel* managingOrganization_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* referralRequest_parser_;
    ::fhir::Reference_pskel* careManager_parser_;
    ::fhir::Reference_pskel* team_parser_;
    ::fhir::Reference_pskel* account_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EpisodeOfCare_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EpisodeOfCare_StatusHistory_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    status ();

    virtual void
    period ();

    virtual void
    post_EpisodeOfCare_StatusHistory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::EpisodeOfCareStatus_pskel& /* status */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    status_parser (::fhir::EpisodeOfCareStatus_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EpisodeOfCare_StatusHistory_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    EpisodeOfCare_StatusHistory_pskel* EpisodeOfCare_StatusHistory_impl_;
    EpisodeOfCare_StatusHistory_pskel (EpisodeOfCare_StatusHistory_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::EpisodeOfCareStatus_pskel* status_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EpisodeOfCare_StatusHistory_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EpisodeOfCare_Diagnosis_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    condition ();

    virtual void
    role ();

    virtual void
    rank ();

    virtual void
    post_EpisodeOfCare_Diagnosis ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* condition */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::positiveInt_pskel& /* rank */);

    // Individual element parsers.
    //
    void
    condition_parser (::fhir::Reference_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    rank_parser (::fhir::positiveInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EpisodeOfCare_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    EpisodeOfCare_Diagnosis_pskel* EpisodeOfCare_Diagnosis_impl_;
    EpisodeOfCare_Diagnosis_pskel (EpisodeOfCare_Diagnosis_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* condition_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::positiveInt_pskel* rank_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EpisodeOfCare_Diagnosis_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EpisodeOfCareStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EpisodeOfCareStatus_list ();

    // Constructor.
    //
    EpisodeOfCareStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EpisodeOfCareStatus_list_pskel* EpisodeOfCareStatus_list_impl_;
    EpisodeOfCareStatus_list_pskel (EpisodeOfCareStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_EpisodeOfCareStatus_list_pskel_enums_[7UL];
  };

  class EpisodeOfCareStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EpisodeOfCareStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EpisodeOfCareStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EpisodeOfCareStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EpisodeOfCareStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EpisodeOfCareStatus_pskel* EpisodeOfCareStatus_impl_;
    EpisodeOfCareStatus_pskel (EpisodeOfCareStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EpisodeOfCareStatus_list_pskel* value_parser_;
  };

  class EventDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    subtitle ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    usage ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    trigger ();

    virtual void
    post_EventDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::string_pskel& /* usage */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* trigger */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    usage_parser (::fhir::string_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    trigger_parser (::fhir::TriggerDefinition_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EventDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventDefinition_pskel* EventDefinition_impl_;
    EventDefinition_pskel (EventDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::string_pskel* usage_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* trigger_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EventDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Evidence_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    shortTitle ();

    virtual void
    subtitle ();

    virtual void
    status ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    note ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    exposureBackground ();

    virtual void
    exposureVariant ();

    virtual void
    outcome ();

    virtual void
    post_Evidence ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* shortTitle */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::Reference_pskel& /* exposureBackground */,
             ::fhir::Reference_pskel& /* exposureVariant */,
             ::fhir::Reference_pskel& /* outcome */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    shortTitle_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    exposureBackground_parser (::fhir::Reference_pskel&);

    void
    exposureVariant_parser (::fhir::Reference_pskel&);

    void
    outcome_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Evidence_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Evidence_pskel* Evidence_impl_;
    Evidence_pskel (Evidence_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* shortTitle_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::Reference_pskel* exposureBackground_parser_;
    ::fhir::Reference_pskel* exposureVariant_parser_;
    ::fhir::Reference_pskel* outcome_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Evidence_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EvidenceVariable_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    shortTitle ();

    virtual void
    subtitle ();

    virtual void
    status ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    note ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    type ();

    virtual void
    characteristic ();

    virtual void
    post_EvidenceVariable ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* shortTitle */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::EvidenceVariableType_pskel& /* type */,
             ::fhir::EvidenceVariable_Characteristic_pskel& /* characteristic */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    shortTitle_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    type_parser (::fhir::EvidenceVariableType_pskel&);

    void
    characteristic_parser (::fhir::EvidenceVariable_Characteristic_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EvidenceVariable_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    EvidenceVariable_pskel* EvidenceVariable_impl_;
    EvidenceVariable_pskel (EvidenceVariable_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* shortTitle_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::EvidenceVariableType_pskel* type_parser_;
    ::fhir::EvidenceVariable_Characteristic_pskel* characteristic_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EvidenceVariable_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EvidenceVariable_Characteristic_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    definitionReference ();

    virtual void
    definitionCanonical ();

    virtual void
    definitionCodeableConcept ();

    virtual void
    definitionExpression ();

    virtual void
    definitionDataRequirement ();

    virtual void
    definitionTriggerDefinition ();

    virtual void
    usageContext ();

    virtual void
    exclude ();

    virtual void
    participantEffectiveDateTime ();

    virtual void
    participantEffectivePeriod ();

    virtual void
    participantEffectiveDuration ();

    virtual void
    participantEffectiveTiming ();

    virtual void
    timeFromStart ();

    virtual void
    groupMeasure ();

    virtual void
    post_EvidenceVariable_Characteristic ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Reference_pskel& /* definitionReference */,
             ::fhir::canonical_pskel& /* definitionCanonical */,
             ::fhir::CodeableConcept_pskel& /* definitionCodeableConcept */,
             ::fhir::Expression_pskel& /* definitionExpression */,
             ::fhir::DataRequirement_pskel& /* definitionDataRequirement */,
             ::fhir::TriggerDefinition_pskel& /* definitionTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* usageContext */,
             ::fhir::boolean_pskel& /* exclude */,
             ::fhir::dateTime_pskel& /* participantEffectiveDateTime */,
             ::fhir::Period_pskel& /* participantEffectivePeriod */,
             ::fhir::Duration_pskel& /* participantEffectiveDuration */,
             ::fhir::Timing_pskel& /* participantEffectiveTiming */,
             ::fhir::Duration_pskel& /* timeFromStart */,
             ::fhir::GroupMeasure_pskel& /* groupMeasure */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    definitionReference_parser (::fhir::Reference_pskel&);

    void
    definitionCanonical_parser (::fhir::canonical_pskel&);

    void
    definitionCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    definitionExpression_parser (::fhir::Expression_pskel&);

    void
    definitionDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    definitionTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    usageContext_parser (::fhir::UsageContext_pskel&);

    void
    exclude_parser (::fhir::boolean_pskel&);

    void
    participantEffectiveDateTime_parser (::fhir::dateTime_pskel&);

    void
    participantEffectivePeriod_parser (::fhir::Period_pskel&);

    void
    participantEffectiveDuration_parser (::fhir::Duration_pskel&);

    void
    participantEffectiveTiming_parser (::fhir::Timing_pskel&);

    void
    timeFromStart_parser (::fhir::Duration_pskel&);

    void
    groupMeasure_parser (::fhir::GroupMeasure_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EvidenceVariable_Characteristic_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    EvidenceVariable_Characteristic_pskel* EvidenceVariable_Characteristic_impl_;
    EvidenceVariable_Characteristic_pskel (EvidenceVariable_Characteristic_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::Reference_pskel* definitionReference_parser_;
    ::fhir::canonical_pskel* definitionCanonical_parser_;
    ::fhir::CodeableConcept_pskel* definitionCodeableConcept_parser_;
    ::fhir::Expression_pskel* definitionExpression_parser_;
    ::fhir::DataRequirement_pskel* definitionDataRequirement_parser_;
    ::fhir::TriggerDefinition_pskel* definitionTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* usageContext_parser_;
    ::fhir::boolean_pskel* exclude_parser_;
    ::fhir::dateTime_pskel* participantEffectiveDateTime_parser_;
    ::fhir::Period_pskel* participantEffectivePeriod_parser_;
    ::fhir::Duration_pskel* participantEffectiveDuration_parser_;
    ::fhir::Timing_pskel* participantEffectiveTiming_parser_;
    ::fhir::Duration_pskel* timeFromStart_parser_;
    ::fhir::GroupMeasure_pskel* groupMeasure_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::EvidenceVariable_Characteristic_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class EvidenceVariableType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EvidenceVariableType_list ();

    // Constructor.
    //
    EvidenceVariableType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EvidenceVariableType_list_pskel* EvidenceVariableType_list_impl_;
    EvidenceVariableType_list_pskel (EvidenceVariableType_list_pskel*, void*);

    protected:
    static const char* const _xsde_EvidenceVariableType_list_pskel_enums_[3UL];
  };

  class EvidenceVariableType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EvidenceVariableType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EvidenceVariableType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EvidenceVariableType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EvidenceVariableType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EvidenceVariableType_pskel* EvidenceVariableType_impl_;
    EvidenceVariableType_pskel (EvidenceVariableType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EvidenceVariableType_list_pskel* value_parser_;
  };

  class GroupMeasure_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GroupMeasure_list ();

    // Constructor.
    //
    GroupMeasure_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    GroupMeasure_list_pskel* GroupMeasure_list_impl_;
    GroupMeasure_list_pskel (GroupMeasure_list_pskel*, void*);

    protected:
    static const char* const _xsde_GroupMeasure_list_pskel_enums_[6UL];
  };

  class GroupMeasure_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_GroupMeasure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::GroupMeasure_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::GroupMeasure_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GroupMeasure_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    GroupMeasure_pskel* GroupMeasure_impl_;
    GroupMeasure_pskel (GroupMeasure_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::GroupMeasure_list_pskel* value_parser_;
  };

  class ExampleScenario_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    copyright ();

    virtual void
    purpose ();

    virtual void
    actor ();

    virtual void
    instance ();

    virtual void
    process ();

    virtual void
    workflow ();

    virtual void
    post_ExampleScenario ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::ExampleScenario_Actor_pskel& /* actor */,
             ::fhir::ExampleScenario_Instance_pskel& /* instance */,
             ::fhir::ExampleScenario_Process_pskel& /* process */,
             ::fhir::canonical_pskel& /* workflow */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    actor_parser (::fhir::ExampleScenario_Actor_pskel&);

    void
    instance_parser (::fhir::ExampleScenario_Instance_pskel&);

    void
    process_parser (::fhir::ExampleScenario_Process_pskel&);

    void
    workflow_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_pskel* ExampleScenario_impl_;
    ExampleScenario_pskel (ExampleScenario_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::ExampleScenario_Actor_pskel* actor_parser_;
    ::fhir::ExampleScenario_Instance_pskel* instance_parser_;
    ::fhir::ExampleScenario_Process_pskel* process_parser_;
    ::fhir::canonical_pskel* workflow_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Actor_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    actorId ();

    virtual void
    type ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    post_ExampleScenario_Actor ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* actorId */,
             ::fhir::ExampleScenarioActorType_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::markdown_pskel& /* description */);

    // Individual element parsers.
    //
    void
    actorId_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::ExampleScenarioActorType_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Actor_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Actor_pskel* ExampleScenario_Actor_impl_;
    ExampleScenario_Actor_pskel (ExampleScenario_Actor_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* actorId_parser_;
    ::fhir::ExampleScenarioActorType_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::markdown_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Actor_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Instance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    resourceId ();

    virtual void
    resourceType ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    version ();

    virtual void
    containedInstance ();

    virtual void
    post_ExampleScenario_Instance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* resourceId */,
             ::fhir::ResourceType_pskel& /* resourceType */,
             ::fhir::string_pskel& /* name */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::ExampleScenario_Version_pskel& /* version */,
             ::fhir::ExampleScenario_ContainedInstance_pskel& /* containedInstance */);

    // Individual element parsers.
    //
    void
    resourceId_parser (::fhir::string_pskel&);

    void
    resourceType_parser (::fhir::ResourceType_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    version_parser (::fhir::ExampleScenario_Version_pskel&);

    void
    containedInstance_parser (::fhir::ExampleScenario_ContainedInstance_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Instance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Instance_pskel* ExampleScenario_Instance_impl_;
    ExampleScenario_Instance_pskel (ExampleScenario_Instance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* resourceId_parser_;
    ::fhir::ResourceType_pskel* resourceType_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::ExampleScenario_Version_pskel* version_parser_;
    ::fhir::ExampleScenario_ContainedInstance_pskel* containedInstance_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Instance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Version_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    versionId ();

    virtual void
    description ();

    virtual void
    post_ExampleScenario_Version ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* versionId */,
             ::fhir::markdown_pskel& /* description */);

    // Individual element parsers.
    //
    void
    versionId_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Version_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Version_pskel* ExampleScenario_Version_impl_;
    ExampleScenario_Version_pskel (ExampleScenario_Version_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* versionId_parser_;
    ::fhir::markdown_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Version_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_ContainedInstance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    resourceId ();

    virtual void
    versionId ();

    virtual void
    post_ExampleScenario_ContainedInstance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* resourceId */,
             ::fhir::string_pskel& /* versionId */);

    // Individual element parsers.
    //
    void
    resourceId_parser (::fhir::string_pskel&);

    void
    versionId_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_ContainedInstance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_ContainedInstance_pskel* ExampleScenario_ContainedInstance_impl_;
    ExampleScenario_ContainedInstance_pskel (ExampleScenario_ContainedInstance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* resourceId_parser_;
    ::fhir::string_pskel* versionId_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_ContainedInstance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Process_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    title ();

    virtual void
    description ();

    virtual void
    preConditions ();

    virtual void
    postConditions ();

    virtual void
    step ();

    virtual void
    post_ExampleScenario_Process ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* title */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::markdown_pskel& /* preConditions */,
             ::fhir::markdown_pskel& /* postConditions */,
             ::fhir::ExampleScenario_Step_pskel& /* step */);

    // Individual element parsers.
    //
    void
    title_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    preConditions_parser (::fhir::markdown_pskel&);

    void
    postConditions_parser (::fhir::markdown_pskel&);

    void
    step_parser (::fhir::ExampleScenario_Step_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Process_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Process_pskel* ExampleScenario_Process_impl_;
    ExampleScenario_Process_pskel (ExampleScenario_Process_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* title_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::markdown_pskel* preConditions_parser_;
    ::fhir::markdown_pskel* postConditions_parser_;
    ::fhir::ExampleScenario_Step_pskel* step_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Process_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Step_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    process ();

    virtual void
    pause ();

    virtual void
    operation ();

    virtual void
    alternative ();

    virtual void
    post_ExampleScenario_Step ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ExampleScenario_Process_pskel& /* process */,
             ::fhir::boolean_pskel& /* pause */,
             ::fhir::ExampleScenario_Operation_pskel& /* operation */,
             ::fhir::ExampleScenario_Alternative_pskel& /* alternative */);

    // Individual element parsers.
    //
    void
    process_parser (::fhir::ExampleScenario_Process_pskel&);

    void
    pause_parser (::fhir::boolean_pskel&);

    void
    operation_parser (::fhir::ExampleScenario_Operation_pskel&);

    void
    alternative_parser (::fhir::ExampleScenario_Alternative_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Step_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Step_pskel* ExampleScenario_Step_impl_;
    ExampleScenario_Step_pskel (ExampleScenario_Step_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ExampleScenario_Process_pskel* process_parser_;
    ::fhir::boolean_pskel* pause_parser_;
    ::fhir::ExampleScenario_Operation_pskel* operation_parser_;
    ::fhir::ExampleScenario_Alternative_pskel* alternative_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Step_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Operation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    number ();

    virtual void
    type ();

    virtual void
    name ();

    virtual void
    initiator ();

    virtual void
    receiver ();

    virtual void
    description ();

    virtual void
    initiatorActive ();

    virtual void
    receiverActive ();

    virtual void
    request ();

    virtual void
    response ();

    virtual void
    post_ExampleScenario_Operation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* number */,
             ::fhir::string_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* initiator */,
             ::fhir::string_pskel& /* receiver */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::boolean_pskel& /* initiatorActive */,
             ::fhir::boolean_pskel& /* receiverActive */,
             ::fhir::ExampleScenario_ContainedInstance_pskel& /* request */,
             ::fhir::ExampleScenario_ContainedInstance_pskel& /* response */);

    // Individual element parsers.
    //
    void
    number_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    initiator_parser (::fhir::string_pskel&);

    void
    receiver_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    initiatorActive_parser (::fhir::boolean_pskel&);

    void
    receiverActive_parser (::fhir::boolean_pskel&);

    void
    request_parser (::fhir::ExampleScenario_ContainedInstance_pskel&);

    void
    response_parser (::fhir::ExampleScenario_ContainedInstance_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Operation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Operation_pskel* ExampleScenario_Operation_impl_;
    ExampleScenario_Operation_pskel (ExampleScenario_Operation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* number_parser_;
    ::fhir::string_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* initiator_parser_;
    ::fhir::string_pskel* receiver_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::boolean_pskel* initiatorActive_parser_;
    ::fhir::boolean_pskel* receiverActive_parser_;
    ::fhir::ExampleScenario_ContainedInstance_pskel* request_parser_;
    ::fhir::ExampleScenario_ContainedInstance_pskel* response_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Operation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenario_Alternative_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    title ();

    virtual void
    description ();

    virtual void
    step ();

    virtual void
    post_ExampleScenario_Alternative ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* title */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::ExampleScenario_Step_pskel& /* step */);

    // Individual element parsers.
    //
    void
    title_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    step_parser (::fhir::ExampleScenario_Step_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenario_Alternative_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenario_Alternative_pskel* ExampleScenario_Alternative_impl_;
    ExampleScenario_Alternative_pskel (ExampleScenario_Alternative_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* title_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::ExampleScenario_Step_pskel* step_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExampleScenario_Alternative_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExampleScenarioActorType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ExampleScenarioActorType_list ();

    // Constructor.
    //
    ExampleScenarioActorType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenarioActorType_list_pskel* ExampleScenarioActorType_list_impl_;
    ExampleScenarioActorType_list_pskel (ExampleScenarioActorType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ExampleScenarioActorType_list_pskel_enums_[2UL];
  };

  class ExampleScenarioActorType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ExampleScenarioActorType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ExampleScenarioActorType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ExampleScenarioActorType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExampleScenarioActorType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExampleScenarioActorType_pskel* ExampleScenarioActorType_impl_;
    ExampleScenarioActorType_pskel (ExampleScenarioActorType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ExampleScenarioActorType_list_pskel* value_parser_;
  };

  class ResourceType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ResourceType_list ();

    // Constructor.
    //
    ResourceType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResourceType_list_pskel* ResourceType_list_impl_;
    ResourceType_list_pskel (ResourceType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ResourceType_list_pskel_enums_[148UL];
  };

  class ResourceType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ResourceType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ResourceType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ResourceType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResourceType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResourceType_pskel* ResourceType_impl_;
    ResourceType_pskel (ResourceType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ResourceType_list_pskel* value_parser_;
  };

  class ExplanationOfBenefit_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    subType ();

    virtual void
    use ();

    virtual void
    patient ();

    virtual void
    billablePeriod ();

    virtual void
    created ();

    virtual void
    enterer ();

    virtual void
    insurer ();

    virtual void
    provider ();

    virtual void
    priority ();

    virtual void
    fundsReserveRequested ();

    virtual void
    fundsReserve ();

    virtual void
    related ();

    virtual void
    prescription ();

    virtual void
    originalPrescription ();

    virtual void
    payee ();

    virtual void
    referral ();

    virtual void
    facility ();

    virtual void
    claim ();

    virtual void
    claimResponse ();

    virtual void
    outcome ();

    virtual void
    disposition ();

    virtual void
    preAuthRef ();

    virtual void
    preAuthRefPeriod ();

    virtual void
    careTeam ();

    virtual void
    supportingInfo ();

    virtual void
    diagnosis ();

    virtual void
    procedure ();

    virtual void
    precedence ();

    virtual void
    insurance ();

    virtual void
    accident ();

    virtual void
    item ();

    virtual void
    addItem ();

    virtual void
    adjudication ();

    virtual void
    total ();

    virtual void
    payment ();

    virtual void
    formCode ();

    virtual void
    form ();

    virtual void
    processNote ();

    virtual void
    benefitPeriod ();

    virtual void
    benefitBalance ();

    virtual void
    post_ExplanationOfBenefit ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ExplanationOfBenefitStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subType */,
             ::fhir::Use_pskel& /* use */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Period_pskel& /* billablePeriod */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* enterer */,
             ::fhir::Reference_pskel& /* insurer */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::CodeableConcept_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* fundsReserveRequested */,
             ::fhir::CodeableConcept_pskel& /* fundsReserve */,
             ::fhir::ExplanationOfBenefit_Related_pskel& /* related */,
             ::fhir::Reference_pskel& /* prescription */,
             ::fhir::Reference_pskel& /* originalPrescription */,
             ::fhir::ExplanationOfBenefit_Payee_pskel& /* payee */,
             ::fhir::Reference_pskel& /* referral */,
             ::fhir::Reference_pskel& /* facility */,
             ::fhir::Reference_pskel& /* claim */,
             ::fhir::Reference_pskel& /* claimResponse */,
             ::fhir::ClaimProcessingCodes_pskel& /* outcome */,
             ::fhir::string_pskel& /* disposition */,
             ::fhir::string_pskel& /* preAuthRef */,
             ::fhir::Period_pskel& /* preAuthRefPeriod */,
             ::fhir::ExplanationOfBenefit_CareTeam_pskel& /* careTeam */,
             ::fhir::ExplanationOfBenefit_SupportingInfo_pskel& /* supportingInfo */,
             ::fhir::ExplanationOfBenefit_Diagnosis_pskel& /* diagnosis */,
             ::fhir::ExplanationOfBenefit_Procedure_pskel& /* procedure */,
             ::fhir::positiveInt_pskel& /* precedence */,
             ::fhir::ExplanationOfBenefit_Insurance_pskel& /* insurance */,
             ::fhir::ExplanationOfBenefit_Accident_pskel& /* accident */,
             ::fhir::ExplanationOfBenefit_Item_pskel& /* item */,
             ::fhir::ExplanationOfBenefit_AddItem_pskel& /* addItem */,
             ::fhir::ExplanationOfBenefit_Adjudication_pskel& /* adjudication */,
             ::fhir::ExplanationOfBenefit_Total_pskel& /* total */,
             ::fhir::ExplanationOfBenefit_Payment_pskel& /* payment */,
             ::fhir::CodeableConcept_pskel& /* formCode */,
             ::fhir::Attachment_pskel& /* form */,
             ::fhir::ExplanationOfBenefit_ProcessNote_pskel& /* processNote */,
             ::fhir::Period_pskel& /* benefitPeriod */,
             ::fhir::ExplanationOfBenefit_BenefitBalance_pskel& /* benefitBalance */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::ExplanationOfBenefitStatus_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subType_parser (::fhir::CodeableConcept_pskel&);

    void
    use_parser (::fhir::Use_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    billablePeriod_parser (::fhir::Period_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    enterer_parser (::fhir::Reference_pskel&);

    void
    insurer_parser (::fhir::Reference_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    priority_parser (::fhir::CodeableConcept_pskel&);

    void
    fundsReserveRequested_parser (::fhir::CodeableConcept_pskel&);

    void
    fundsReserve_parser (::fhir::CodeableConcept_pskel&);

    void
    related_parser (::fhir::ExplanationOfBenefit_Related_pskel&);

    void
    prescription_parser (::fhir::Reference_pskel&);

    void
    originalPrescription_parser (::fhir::Reference_pskel&);

    void
    payee_parser (::fhir::ExplanationOfBenefit_Payee_pskel&);

    void
    referral_parser (::fhir::Reference_pskel&);

    void
    facility_parser (::fhir::Reference_pskel&);

    void
    claim_parser (::fhir::Reference_pskel&);

    void
    claimResponse_parser (::fhir::Reference_pskel&);

    void
    outcome_parser (::fhir::ClaimProcessingCodes_pskel&);

    void
    disposition_parser (::fhir::string_pskel&);

    void
    preAuthRef_parser (::fhir::string_pskel&);

    void
    preAuthRefPeriod_parser (::fhir::Period_pskel&);

    void
    careTeam_parser (::fhir::ExplanationOfBenefit_CareTeam_pskel&);

    void
    supportingInfo_parser (::fhir::ExplanationOfBenefit_SupportingInfo_pskel&);

    void
    diagnosis_parser (::fhir::ExplanationOfBenefit_Diagnosis_pskel&);

    void
    procedure_parser (::fhir::ExplanationOfBenefit_Procedure_pskel&);

    void
    precedence_parser (::fhir::positiveInt_pskel&);

    void
    insurance_parser (::fhir::ExplanationOfBenefit_Insurance_pskel&);

    void
    accident_parser (::fhir::ExplanationOfBenefit_Accident_pskel&);

    void
    item_parser (::fhir::ExplanationOfBenefit_Item_pskel&);

    void
    addItem_parser (::fhir::ExplanationOfBenefit_AddItem_pskel&);

    void
    adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel&);

    void
    total_parser (::fhir::ExplanationOfBenefit_Total_pskel&);

    void
    payment_parser (::fhir::ExplanationOfBenefit_Payment_pskel&);

    void
    formCode_parser (::fhir::CodeableConcept_pskel&);

    void
    form_parser (::fhir::Attachment_pskel&);

    void
    processNote_parser (::fhir::ExplanationOfBenefit_ProcessNote_pskel&);

    void
    benefitPeriod_parser (::fhir::Period_pskel&);

    void
    benefitBalance_parser (::fhir::ExplanationOfBenefit_BenefitBalance_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_pskel* ExplanationOfBenefit_impl_;
    ExplanationOfBenefit_pskel (ExplanationOfBenefit_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ExplanationOfBenefitStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subType_parser_;
    ::fhir::Use_pskel* use_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Period_pskel* billablePeriod_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* enterer_parser_;
    ::fhir::Reference_pskel* insurer_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::CodeableConcept_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* fundsReserveRequested_parser_;
    ::fhir::CodeableConcept_pskel* fundsReserve_parser_;
    ::fhir::ExplanationOfBenefit_Related_pskel* related_parser_;
    ::fhir::Reference_pskel* prescription_parser_;
    ::fhir::Reference_pskel* originalPrescription_parser_;
    ::fhir::ExplanationOfBenefit_Payee_pskel* payee_parser_;
    ::fhir::Reference_pskel* referral_parser_;
    ::fhir::Reference_pskel* facility_parser_;
    ::fhir::Reference_pskel* claim_parser_;
    ::fhir::Reference_pskel* claimResponse_parser_;
    ::fhir::ClaimProcessingCodes_pskel* outcome_parser_;
    ::fhir::string_pskel* disposition_parser_;
    ::fhir::string_pskel* preAuthRef_parser_;
    ::fhir::Period_pskel* preAuthRefPeriod_parser_;
    ::fhir::ExplanationOfBenefit_CareTeam_pskel* careTeam_parser_;
    ::fhir::ExplanationOfBenefit_SupportingInfo_pskel* supportingInfo_parser_;
    ::fhir::ExplanationOfBenefit_Diagnosis_pskel* diagnosis_parser_;
    ::fhir::ExplanationOfBenefit_Procedure_pskel* procedure_parser_;
    ::fhir::positiveInt_pskel* precedence_parser_;
    ::fhir::ExplanationOfBenefit_Insurance_pskel* insurance_parser_;
    ::fhir::ExplanationOfBenefit_Accident_pskel* accident_parser_;
    ::fhir::ExplanationOfBenefit_Item_pskel* item_parser_;
    ::fhir::ExplanationOfBenefit_AddItem_pskel* addItem_parser_;
    ::fhir::ExplanationOfBenefit_Adjudication_pskel* adjudication_parser_;
    ::fhir::ExplanationOfBenefit_Total_pskel* total_parser_;
    ::fhir::ExplanationOfBenefit_Payment_pskel* payment_parser_;
    ::fhir::CodeableConcept_pskel* formCode_parser_;
    ::fhir::Attachment_pskel* form_parser_;
    ::fhir::ExplanationOfBenefit_ProcessNote_pskel* processNote_parser_;
    ::fhir::Period_pskel* benefitPeriod_parser_;
    ::fhir::ExplanationOfBenefit_BenefitBalance_pskel* benefitBalance_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Related_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    claim ();

    virtual void
    relationship ();

    virtual void
    reference ();

    virtual void
    post_ExplanationOfBenefit_Related ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* claim */,
             ::fhir::CodeableConcept_pskel& /* relationship */,
             ::fhir::Identifier_pskel& /* reference */);

    // Individual element parsers.
    //
    void
    claim_parser (::fhir::Reference_pskel&);

    void
    relationship_parser (::fhir::CodeableConcept_pskel&);

    void
    reference_parser (::fhir::Identifier_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Related_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Related_pskel* ExplanationOfBenefit_Related_impl_;
    ExplanationOfBenefit_Related_pskel (ExplanationOfBenefit_Related_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* claim_parser_;
    ::fhir::CodeableConcept_pskel* relationship_parser_;
    ::fhir::Identifier_pskel* reference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Related_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Payee_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    party ();

    virtual void
    post_ExplanationOfBenefit_Payee ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* party */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    party_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Payee_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Payee_pskel* ExplanationOfBenefit_Payee_impl_;
    ExplanationOfBenefit_Payee_pskel (ExplanationOfBenefit_Payee_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* party_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Payee_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_CareTeam_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    provider ();

    virtual void
    responsible ();

    virtual void
    role ();

    virtual void
    qualification ();

    virtual void
    post_ExplanationOfBenefit_CareTeam ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::boolean_pskel& /* responsible */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::CodeableConcept_pskel& /* qualification */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    responsible_parser (::fhir::boolean_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    qualification_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_CareTeam_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_CareTeam_pskel* ExplanationOfBenefit_CareTeam_impl_;
    ExplanationOfBenefit_CareTeam_pskel (ExplanationOfBenefit_CareTeam_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::boolean_pskel* responsible_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::CodeableConcept_pskel* qualification_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_CareTeam_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_SupportingInfo_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    category ();

    virtual void
    code ();

    virtual void
    timingDate ();

    virtual void
    timingPeriod ();

    virtual void
    valueBoolean ();

    virtual void
    valueString ();

    virtual void
    valueQuantity ();

    virtual void
    valueAttachment ();

    virtual void
    valueReference ();

    virtual void
    reason ();

    virtual void
    post_ExplanationOfBenefit_SupportingInfo ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::date_pskel& /* timingDate */,
             ::fhir::Period_pskel& /* timingPeriod */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::Coding_pskel& /* reason */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    timingDate_parser (::fhir::date_pskel&);

    void
    timingPeriod_parser (::fhir::Period_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    reason_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_SupportingInfo_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_SupportingInfo_pskel* ExplanationOfBenefit_SupportingInfo_impl_;
    ExplanationOfBenefit_SupportingInfo_pskel (ExplanationOfBenefit_SupportingInfo_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::date_pskel* timingDate_parser_;
    ::fhir::Period_pskel* timingPeriod_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::Coding_pskel* reason_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_SupportingInfo_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Diagnosis_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    diagnosisCodeableConcept ();

    virtual void
    diagnosisReference ();

    virtual void
    type ();

    virtual void
    onAdmission ();

    virtual void
    packageCode ();

    virtual void
    post_ExplanationOfBenefit_Diagnosis ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* diagnosisCodeableConcept */,
             ::fhir::Reference_pskel& /* diagnosisReference */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* onAdmission */,
             ::fhir::CodeableConcept_pskel& /* packageCode */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    diagnosisCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    diagnosisReference_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    onAdmission_parser (::fhir::CodeableConcept_pskel&);

    void
    packageCode_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Diagnosis_pskel* ExplanationOfBenefit_Diagnosis_impl_;
    ExplanationOfBenefit_Diagnosis_pskel (ExplanationOfBenefit_Diagnosis_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* diagnosisCodeableConcept_parser_;
    ::fhir::Reference_pskel* diagnosisReference_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* onAdmission_parser_;
    ::fhir::CodeableConcept_pskel* packageCode_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Diagnosis_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Procedure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    type ();

    virtual void
    date ();

    virtual void
    procedureCodeableConcept ();

    virtual void
    procedureReference ();

    virtual void
    udi ();

    virtual void
    post_ExplanationOfBenefit_Procedure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::CodeableConcept_pskel& /* procedureCodeableConcept */,
             ::fhir::Reference_pskel& /* procedureReference */,
             ::fhir::Reference_pskel& /* udi */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    procedureCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    procedureReference_parser (::fhir::Reference_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Procedure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Procedure_pskel* ExplanationOfBenefit_Procedure_impl_;
    ExplanationOfBenefit_Procedure_pskel (ExplanationOfBenefit_Procedure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::CodeableConcept_pskel* procedureCodeableConcept_parser_;
    ::fhir::Reference_pskel* procedureReference_parser_;
    ::fhir::Reference_pskel* udi_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Procedure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Insurance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    focal ();

    virtual void
    coverage ();

    virtual void
    preAuthRef ();

    virtual void
    post_ExplanationOfBenefit_Insurance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* focal */,
             ::fhir::Reference_pskel& /* coverage */,
             ::fhir::string_pskel& /* preAuthRef */);

    // Individual element parsers.
    //
    void
    focal_parser (::fhir::boolean_pskel&);

    void
    coverage_parser (::fhir::Reference_pskel&);

    void
    preAuthRef_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Insurance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Insurance_pskel* ExplanationOfBenefit_Insurance_impl_;
    ExplanationOfBenefit_Insurance_pskel (ExplanationOfBenefit_Insurance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* focal_parser_;
    ::fhir::Reference_pskel* coverage_parser_;
    ::fhir::string_pskel* preAuthRef_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Insurance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Accident_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    date ();

    virtual void
    type ();

    virtual void
    locationAddress ();

    virtual void
    locationReference ();

    virtual void
    post_ExplanationOfBenefit_Accident ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::date_pskel& /* date */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Address_pskel& /* locationAddress */,
             ::fhir::Reference_pskel& /* locationReference */);

    // Individual element parsers.
    //
    void
    date_parser (::fhir::date_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    locationAddress_parser (::fhir::Address_pskel&);

    void
    locationReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Accident_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Accident_pskel* ExplanationOfBenefit_Accident_impl_;
    ExplanationOfBenefit_Accident_pskel (ExplanationOfBenefit_Accident_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::date_pskel* date_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Address_pskel* locationAddress_parser_;
    ::fhir::Reference_pskel* locationReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Accident_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Item_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    careTeamSequence ();

    virtual void
    diagnosisSequence ();

    virtual void
    procedureSequence ();

    virtual void
    informationSequence ();

    virtual void
    revenue ();

    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    servicedDate ();

    virtual void
    servicedPeriod ();

    virtual void
    locationCodeableConcept ();

    virtual void
    locationAddress ();

    virtual void
    locationReference ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    udi ();

    virtual void
    bodySite ();

    virtual void
    subSite ();

    virtual void
    encounter ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    detail ();

    virtual void
    post_ExplanationOfBenefit_Item ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::positiveInt_pskel& /* careTeamSequence */,
             ::fhir::positiveInt_pskel& /* diagnosisSequence */,
             ::fhir::positiveInt_pskel& /* procedureSequence */,
             ::fhir::positiveInt_pskel& /* informationSequence */,
             ::fhir::CodeableConcept_pskel& /* revenue */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::date_pskel& /* servicedDate */,
             ::fhir::Period_pskel& /* servicedPeriod */,
             ::fhir::CodeableConcept_pskel& /* locationCodeableConcept */,
             ::fhir::Address_pskel& /* locationAddress */,
             ::fhir::Reference_pskel& /* locationReference */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::Reference_pskel& /* udi */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::CodeableConcept_pskel& /* subSite */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ExplanationOfBenefit_Adjudication_pskel& /* adjudication */,
             ::fhir::ExplanationOfBenefit_Detail_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    careTeamSequence_parser (::fhir::positiveInt_pskel&);

    void
    diagnosisSequence_parser (::fhir::positiveInt_pskel&);

    void
    procedureSequence_parser (::fhir::positiveInt_pskel&);

    void
    informationSequence_parser (::fhir::positiveInt_pskel&);

    void
    revenue_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    servicedDate_parser (::fhir::date_pskel&);

    void
    servicedPeriod_parser (::fhir::Period_pskel&);

    void
    locationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    locationAddress_parser (::fhir::Address_pskel&);

    void
    locationReference_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    subSite_parser (::fhir::CodeableConcept_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel&);

    void
    detail_parser (::fhir::ExplanationOfBenefit_Detail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Item_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Item_pskel* ExplanationOfBenefit_Item_impl_;
    ExplanationOfBenefit_Item_pskel (ExplanationOfBenefit_Item_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::positiveInt_pskel* careTeamSequence_parser_;
    ::fhir::positiveInt_pskel* diagnosisSequence_parser_;
    ::fhir::positiveInt_pskel* procedureSequence_parser_;
    ::fhir::positiveInt_pskel* informationSequence_parser_;
    ::fhir::CodeableConcept_pskel* revenue_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::date_pskel* servicedDate_parser_;
    ::fhir::Period_pskel* servicedPeriod_parser_;
    ::fhir::CodeableConcept_pskel* locationCodeableConcept_parser_;
    ::fhir::Address_pskel* locationAddress_parser_;
    ::fhir::Reference_pskel* locationReference_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::Reference_pskel* udi_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::CodeableConcept_pskel* subSite_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ExplanationOfBenefit_Adjudication_pskel* adjudication_parser_;
    ::fhir::ExplanationOfBenefit_Detail_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Adjudication_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    reason ();

    virtual void
    amount ();

    virtual void
    value ();

    virtual void
    post_ExplanationOfBenefit_Adjudication ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* reason */,
             ::fhir::Money_pskel& /* amount */,
             ::fhir::decimal_pskel& /* value */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Money_pskel&);

    void
    value_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Adjudication_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Adjudication_pskel* ExplanationOfBenefit_Adjudication_impl_;
    ExplanationOfBenefit_Adjudication_pskel (ExplanationOfBenefit_Adjudication_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;
    ::fhir::Money_pskel* amount_parser_;
    ::fhir::decimal_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Adjudication_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Detail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    revenue ();

    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    udi ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    subDetail ();

    virtual void
    post_ExplanationOfBenefit_Detail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* revenue */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::Reference_pskel& /* udi */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ExplanationOfBenefit_Adjudication_pskel& /* adjudication */,
             ::fhir::ExplanationOfBenefit_SubDetail_pskel& /* subDetail */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    revenue_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel&);

    void
    subDetail_parser (::fhir::ExplanationOfBenefit_SubDetail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Detail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Detail_pskel* ExplanationOfBenefit_Detail_impl_;
    ExplanationOfBenefit_Detail_pskel (ExplanationOfBenefit_Detail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* revenue_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::Reference_pskel* udi_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ExplanationOfBenefit_Adjudication_pskel* adjudication_parser_;
    ::fhir::ExplanationOfBenefit_SubDetail_pskel* subDetail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Detail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_SubDetail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    revenue ();

    virtual void
    category ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    udi ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    post_ExplanationOfBenefit_SubDetail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::CodeableConcept_pskel& /* revenue */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::Reference_pskel& /* udi */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ExplanationOfBenefit_Adjudication_pskel& /* adjudication */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    revenue_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    udi_parser (::fhir::Reference_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_SubDetail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_SubDetail_pskel* ExplanationOfBenefit_SubDetail_impl_;
    ExplanationOfBenefit_SubDetail_pskel (ExplanationOfBenefit_SubDetail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::CodeableConcept_pskel* revenue_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::Reference_pskel* udi_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ExplanationOfBenefit_Adjudication_pskel* adjudication_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_SubDetail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_AddItem_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    itemSequence ();

    virtual void
    detailSequence ();

    virtual void
    subDetailSequence ();

    virtual void
    provider ();

    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    programCode ();

    virtual void
    servicedDate ();

    virtual void
    servicedPeriod ();

    virtual void
    locationCodeableConcept ();

    virtual void
    locationAddress ();

    virtual void
    locationReference ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    bodySite ();

    virtual void
    subSite ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    detail ();

    virtual void
    post_ExplanationOfBenefit_AddItem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* itemSequence */,
             ::fhir::positiveInt_pskel& /* detailSequence */,
             ::fhir::positiveInt_pskel& /* subDetailSequence */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* programCode */,
             ::fhir::date_pskel& /* servicedDate */,
             ::fhir::Period_pskel& /* servicedPeriod */,
             ::fhir::CodeableConcept_pskel& /* locationCodeableConcept */,
             ::fhir::Address_pskel& /* locationAddress */,
             ::fhir::Reference_pskel& /* locationReference */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::CodeableConcept_pskel& /* subSite */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ExplanationOfBenefit_Adjudication_pskel& /* adjudication */,
             ::fhir::ExplanationOfBenefit_Detail1_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    itemSequence_parser (::fhir::positiveInt_pskel&);

    void
    detailSequence_parser (::fhir::positiveInt_pskel&);

    void
    subDetailSequence_parser (::fhir::positiveInt_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    programCode_parser (::fhir::CodeableConcept_pskel&);

    void
    servicedDate_parser (::fhir::date_pskel&);

    void
    servicedPeriod_parser (::fhir::Period_pskel&);

    void
    locationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    locationAddress_parser (::fhir::Address_pskel&);

    void
    locationReference_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    subSite_parser (::fhir::CodeableConcept_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel&);

    void
    detail_parser (::fhir::ExplanationOfBenefit_Detail1_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_AddItem_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_AddItem_pskel* ExplanationOfBenefit_AddItem_impl_;
    ExplanationOfBenefit_AddItem_pskel (ExplanationOfBenefit_AddItem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* itemSequence_parser_;
    ::fhir::positiveInt_pskel* detailSequence_parser_;
    ::fhir::positiveInt_pskel* subDetailSequence_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* programCode_parser_;
    ::fhir::date_pskel* servicedDate_parser_;
    ::fhir::Period_pskel* servicedPeriod_parser_;
    ::fhir::CodeableConcept_pskel* locationCodeableConcept_parser_;
    ::fhir::Address_pskel* locationAddress_parser_;
    ::fhir::Reference_pskel* locationReference_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::CodeableConcept_pskel* subSite_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ExplanationOfBenefit_Adjudication_pskel* adjudication_parser_;
    ::fhir::ExplanationOfBenefit_Detail1_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_AddItem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Detail1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    subDetail ();

    virtual void
    post_ExplanationOfBenefit_Detail1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ExplanationOfBenefit_Adjudication_pskel& /* adjudication */,
             ::fhir::ExplanationOfBenefit_SubDetail1_pskel& /* subDetail */);

    // Individual element parsers.
    //
    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel&);

    void
    subDetail_parser (::fhir::ExplanationOfBenefit_SubDetail1_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Detail1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Detail1_pskel* ExplanationOfBenefit_Detail1_impl_;
    ExplanationOfBenefit_Detail1_pskel (ExplanationOfBenefit_Detail1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ExplanationOfBenefit_Adjudication_pskel* adjudication_parser_;
    ::fhir::ExplanationOfBenefit_SubDetail1_pskel* subDetail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Detail1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_SubDetail1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    productOrService ();

    virtual void
    modifier ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    net ();

    virtual void
    noteNumber ();

    virtual void
    adjudication ();

    virtual void
    post_ExplanationOfBenefit_SubDetail1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* productOrService */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::positiveInt_pskel& /* noteNumber */,
             ::fhir::ExplanationOfBenefit_Adjudication_pskel& /* adjudication */);

    // Individual element parsers.
    //
    void
    productOrService_parser (::fhir::CodeableConcept_pskel&);

    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    noteNumber_parser (::fhir::positiveInt_pskel&);

    void
    adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_SubDetail1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_SubDetail1_pskel* ExplanationOfBenefit_SubDetail1_impl_;
    ExplanationOfBenefit_SubDetail1_pskel (ExplanationOfBenefit_SubDetail1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* productOrService_parser_;
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::positiveInt_pskel* noteNumber_parser_;
    ::fhir::ExplanationOfBenefit_Adjudication_pskel* adjudication_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_SubDetail1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Total_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    amount ();

    virtual void
    post_ExplanationOfBenefit_Total ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::Money_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Total_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Total_pskel* ExplanationOfBenefit_Total_impl_;
    ExplanationOfBenefit_Total_pskel (ExplanationOfBenefit_Total_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::Money_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Total_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Payment_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    adjustment ();

    virtual void
    adjustmentReason ();

    virtual void
    date ();

    virtual void
    amount ();

    virtual void
    identifier ();

    virtual void
    post_ExplanationOfBenefit_Payment ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Money_pskel& /* adjustment */,
             ::fhir::CodeableConcept_pskel& /* adjustmentReason */,
             ::fhir::date_pskel& /* date */,
             ::fhir::Money_pskel& /* amount */,
             ::fhir::Identifier_pskel& /* identifier */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    adjustment_parser (::fhir::Money_pskel&);

    void
    adjustmentReason_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::date_pskel&);

    void
    amount_parser (::fhir::Money_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Payment_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Payment_pskel* ExplanationOfBenefit_Payment_impl_;
    ExplanationOfBenefit_Payment_pskel (ExplanationOfBenefit_Payment_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Money_pskel* adjustment_parser_;
    ::fhir::CodeableConcept_pskel* adjustmentReason_parser_;
    ::fhir::date_pskel* date_parser_;
    ::fhir::Money_pskel* amount_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Payment_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_ProcessNote_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    number ();

    virtual void
    type ();

    virtual void
    text ();

    virtual void
    language ();

    virtual void
    post_ExplanationOfBenefit_ProcessNote ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* number */,
             ::fhir::NoteType_pskel& /* type */,
             ::fhir::string_pskel& /* text */,
             ::fhir::CodeableConcept_pskel& /* language */);

    // Individual element parsers.
    //
    void
    number_parser (::fhir::positiveInt_pskel&);

    void
    type_parser (::fhir::NoteType_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    language_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_ProcessNote_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_ProcessNote_pskel* ExplanationOfBenefit_ProcessNote_impl_;
    ExplanationOfBenefit_ProcessNote_pskel (ExplanationOfBenefit_ProcessNote_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* number_parser_;
    ::fhir::NoteType_pskel* type_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::CodeableConcept_pskel* language_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_ProcessNote_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_BenefitBalance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    excluded ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    network ();

    virtual void
    unit ();

    virtual void
    term ();

    virtual void
    financial ();

    virtual void
    post_ExplanationOfBenefit_BenefitBalance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::boolean_pskel& /* excluded */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* network */,
             ::fhir::CodeableConcept_pskel& /* unit */,
             ::fhir::CodeableConcept_pskel& /* term */,
             ::fhir::ExplanationOfBenefit_Financial_pskel& /* financial */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    excluded_parser (::fhir::boolean_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    network_parser (::fhir::CodeableConcept_pskel&);

    void
    unit_parser (::fhir::CodeableConcept_pskel&);

    void
    term_parser (::fhir::CodeableConcept_pskel&);

    void
    financial_parser (::fhir::ExplanationOfBenefit_Financial_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_BenefitBalance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_BenefitBalance_pskel* ExplanationOfBenefit_BenefitBalance_impl_;
    ExplanationOfBenefit_BenefitBalance_pskel (ExplanationOfBenefit_BenefitBalance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::boolean_pskel* excluded_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* network_parser_;
    ::fhir::CodeableConcept_pskel* unit_parser_;
    ::fhir::CodeableConcept_pskel* term_parser_;
    ::fhir::ExplanationOfBenefit_Financial_pskel* financial_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_BenefitBalance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefit_Financial_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    allowedUnsignedInt ();

    virtual void
    allowedString ();

    virtual void
    allowedMoney ();

    virtual void
    usedUnsignedInt ();

    virtual void
    usedMoney ();

    virtual void
    post_ExplanationOfBenefit_Financial ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::unsignedInt_pskel& /* allowedUnsignedInt */,
             ::fhir::string_pskel& /* allowedString */,
             ::fhir::Money_pskel& /* allowedMoney */,
             ::fhir::unsignedInt_pskel& /* usedUnsignedInt */,
             ::fhir::Money_pskel& /* usedMoney */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    allowedUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    allowedString_parser (::fhir::string_pskel&);

    void
    allowedMoney_parser (::fhir::Money_pskel&);

    void
    usedUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    usedMoney_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefit_Financial_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefit_Financial_pskel* ExplanationOfBenefit_Financial_impl_;
    ExplanationOfBenefit_Financial_pskel (ExplanationOfBenefit_Financial_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::unsignedInt_pskel* allowedUnsignedInt_parser_;
    ::fhir::string_pskel* allowedString_parser_;
    ::fhir::Money_pskel* allowedMoney_parser_;
    ::fhir::unsignedInt_pskel* usedUnsignedInt_parser_;
    ::fhir::Money_pskel* usedMoney_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ExplanationOfBenefit_Financial_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ExplanationOfBenefitStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ExplanationOfBenefitStatus_list ();

    // Constructor.
    //
    ExplanationOfBenefitStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefitStatus_list_pskel* ExplanationOfBenefitStatus_list_impl_;
    ExplanationOfBenefitStatus_list_pskel (ExplanationOfBenefitStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ExplanationOfBenefitStatus_list_pskel_enums_[4UL];
  };

  class ExplanationOfBenefitStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ExplanationOfBenefitStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ExplanationOfBenefitStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ExplanationOfBenefitStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExplanationOfBenefitStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExplanationOfBenefitStatus_pskel* ExplanationOfBenefitStatus_impl_;
    ExplanationOfBenefitStatus_pskel (ExplanationOfBenefitStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ExplanationOfBenefitStatus_list_pskel* value_parser_;
  };

  class FamilyMemberHistory_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    status ();

    virtual void
    dataAbsentReason ();

    virtual void
    patient ();

    virtual void
    date ();

    virtual void
    name ();

    virtual void
    relationship ();

    virtual void
    sex ();

    virtual void
    bornPeriod ();

    virtual void
    bornDate ();

    virtual void
    bornString ();

    virtual void
    ageAge ();

    virtual void
    ageRange ();

    virtual void
    ageString ();

    virtual void
    estimatedAge ();

    virtual void
    deceasedBoolean ();

    virtual void
    deceasedAge ();

    virtual void
    deceasedRange ();

    virtual void
    deceasedDate ();

    virtual void
    deceasedString ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    note ();

    virtual void
    condition ();

    virtual void
    post_FamilyMemberHistory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::FamilyHistoryStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* dataAbsentReason */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* name */,
             ::fhir::CodeableConcept_pskel& /* relationship */,
             ::fhir::CodeableConcept_pskel& /* sex */,
             ::fhir::Period_pskel& /* bornPeriod */,
             ::fhir::date_pskel& /* bornDate */,
             ::fhir::string_pskel& /* bornString */,
             ::fhir::Age_pskel& /* ageAge */,
             ::fhir::Range_pskel& /* ageRange */,
             ::fhir::string_pskel& /* ageString */,
             ::fhir::boolean_pskel& /* estimatedAge */,
             ::fhir::boolean_pskel& /* deceasedBoolean */,
             ::fhir::Age_pskel& /* deceasedAge */,
             ::fhir::Range_pskel& /* deceasedRange */,
             ::fhir::date_pskel& /* deceasedDate */,
             ::fhir::string_pskel& /* deceasedString */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::FamilyMemberHistory_Condition_pskel& /* condition */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    status_parser (::fhir::FamilyHistoryStatus_pskel&);

    void
    dataAbsentReason_parser (::fhir::CodeableConcept_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    relationship_parser (::fhir::CodeableConcept_pskel&);

    void
    sex_parser (::fhir::CodeableConcept_pskel&);

    void
    bornPeriod_parser (::fhir::Period_pskel&);

    void
    bornDate_parser (::fhir::date_pskel&);

    void
    bornString_parser (::fhir::string_pskel&);

    void
    ageAge_parser (::fhir::Age_pskel&);

    void
    ageRange_parser (::fhir::Range_pskel&);

    void
    ageString_parser (::fhir::string_pskel&);

    void
    estimatedAge_parser (::fhir::boolean_pskel&);

    void
    deceasedBoolean_parser (::fhir::boolean_pskel&);

    void
    deceasedAge_parser (::fhir::Age_pskel&);

    void
    deceasedRange_parser (::fhir::Range_pskel&);

    void
    deceasedDate_parser (::fhir::date_pskel&);

    void
    deceasedString_parser (::fhir::string_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    condition_parser (::fhir::FamilyMemberHistory_Condition_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FamilyMemberHistory_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    FamilyMemberHistory_pskel* FamilyMemberHistory_impl_;
    FamilyMemberHistory_pskel (FamilyMemberHistory_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::FamilyHistoryStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* dataAbsentReason_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::CodeableConcept_pskel* relationship_parser_;
    ::fhir::CodeableConcept_pskel* sex_parser_;
    ::fhir::Period_pskel* bornPeriod_parser_;
    ::fhir::date_pskel* bornDate_parser_;
    ::fhir::string_pskel* bornString_parser_;
    ::fhir::Age_pskel* ageAge_parser_;
    ::fhir::Range_pskel* ageRange_parser_;
    ::fhir::string_pskel* ageString_parser_;
    ::fhir::boolean_pskel* estimatedAge_parser_;
    ::fhir::boolean_pskel* deceasedBoolean_parser_;
    ::fhir::Age_pskel* deceasedAge_parser_;
    ::fhir::Range_pskel* deceasedRange_parser_;
    ::fhir::date_pskel* deceasedDate_parser_;
    ::fhir::string_pskel* deceasedString_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::FamilyMemberHistory_Condition_pskel* condition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::FamilyMemberHistory_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class FamilyMemberHistory_Condition_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    outcome ();

    virtual void
    contributedToDeath ();

    virtual void
    onsetAge ();

    virtual void
    onsetRange ();

    virtual void
    onsetPeriod ();

    virtual void
    onsetString ();

    virtual void
    note ();

    virtual void
    post_FamilyMemberHistory_Condition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* outcome */,
             ::fhir::boolean_pskel& /* contributedToDeath */,
             ::fhir::Age_pskel& /* onsetAge */,
             ::fhir::Range_pskel& /* onsetRange */,
             ::fhir::Period_pskel& /* onsetPeriod */,
             ::fhir::string_pskel& /* onsetString */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    outcome_parser (::fhir::CodeableConcept_pskel&);

    void
    contributedToDeath_parser (::fhir::boolean_pskel&);

    void
    onsetAge_parser (::fhir::Age_pskel&);

    void
    onsetRange_parser (::fhir::Range_pskel&);

    void
    onsetPeriod_parser (::fhir::Period_pskel&);

    void
    onsetString_parser (::fhir::string_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FamilyMemberHistory_Condition_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    FamilyMemberHistory_Condition_pskel* FamilyMemberHistory_Condition_impl_;
    FamilyMemberHistory_Condition_pskel (FamilyMemberHistory_Condition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* outcome_parser_;
    ::fhir::boolean_pskel* contributedToDeath_parser_;
    ::fhir::Age_pskel* onsetAge_parser_;
    ::fhir::Range_pskel* onsetRange_parser_;
    ::fhir::Period_pskel* onsetPeriod_parser_;
    ::fhir::string_pskel* onsetString_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::FamilyMemberHistory_Condition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class FamilyHistoryStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FamilyHistoryStatus_list ();

    // Constructor.
    //
    FamilyHistoryStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    FamilyHistoryStatus_list_pskel* FamilyHistoryStatus_list_impl_;
    FamilyHistoryStatus_list_pskel (FamilyHistoryStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_FamilyHistoryStatus_list_pskel_enums_[4UL];
  };

  class FamilyHistoryStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_FamilyHistoryStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::FamilyHistoryStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::FamilyHistoryStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FamilyHistoryStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    FamilyHistoryStatus_pskel* FamilyHistoryStatus_impl_;
    FamilyHistoryStatus_pskel (FamilyHistoryStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::FamilyHistoryStatus_list_pskel* value_parser_;
  };

  class Flag_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    category ();

    virtual void
    code ();

    virtual void
    subject ();

    virtual void
    period ();

    virtual void
    encounter ();

    virtual void
    author ();

    virtual void
    post_Flag ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FlagStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::Reference_pskel& /* author */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FlagStatus_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Flag_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Flag_pskel* Flag_impl_;
    Flag_pskel (Flag_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FlagStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::Reference_pskel* author_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Flag_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class FlagStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FlagStatus_list ();

    // Constructor.
    //
    FlagStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    FlagStatus_list_pskel* FlagStatus_list_impl_;
    FlagStatus_list_pskel (FlagStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_FlagStatus_list_pskel_enums_[3UL];
  };

  class FlagStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_FlagStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::FlagStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::FlagStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FlagStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    FlagStatus_pskel* FlagStatus_impl_;
    FlagStatus_pskel (FlagStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::FlagStatus_list_pskel* value_parser_;
  };

  class Goal_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    lifecycleStatus ();

    virtual void
    achievementStatus ();

    virtual void
    category ();

    virtual void
    priority ();

    virtual void
    description ();

    virtual void
    subject ();

    virtual void
    startDate ();

    virtual void
    startCodeableConcept ();

    virtual void
    target ();

    virtual void
    statusDate ();

    virtual void
    statusReason ();

    virtual void
    expressedBy ();

    virtual void
    addresses ();

    virtual void
    note ();

    virtual void
    outcomeCode ();

    virtual void
    outcomeReference ();

    virtual void
    post_Goal ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::GoalLifecycleStatus_pskel& /* lifecycleStatus */,
             ::fhir::CodeableConcept_pskel& /* achievementStatus */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* description */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::date_pskel& /* startDate */,
             ::fhir::CodeableConcept_pskel& /* startCodeableConcept */,
             ::fhir::Goal_Target_pskel& /* target */,
             ::fhir::date_pskel& /* statusDate */,
             ::fhir::string_pskel& /* statusReason */,
             ::fhir::Reference_pskel& /* expressedBy */,
             ::fhir::Reference_pskel& /* addresses */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::CodeableConcept_pskel& /* outcomeCode */,
             ::fhir::Reference_pskel& /* outcomeReference */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    lifecycleStatus_parser (::fhir::GoalLifecycleStatus_pskel&);

    void
    achievementStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    startDate_parser (::fhir::date_pskel&);

    void
    startCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    target_parser (::fhir::Goal_Target_pskel&);

    void
    statusDate_parser (::fhir::date_pskel&);

    void
    statusReason_parser (::fhir::string_pskel&);

    void
    expressedBy_parser (::fhir::Reference_pskel&);

    void
    addresses_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    outcomeCode_parser (::fhir::CodeableConcept_pskel&);

    void
    outcomeReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Goal_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Goal_pskel* Goal_impl_;
    Goal_pskel (Goal_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::GoalLifecycleStatus_pskel* lifecycleStatus_parser_;
    ::fhir::CodeableConcept_pskel* achievementStatus_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* description_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::date_pskel* startDate_parser_;
    ::fhir::CodeableConcept_pskel* startCodeableConcept_parser_;
    ::fhir::Goal_Target_pskel* target_parser_;
    ::fhir::date_pskel* statusDate_parser_;
    ::fhir::string_pskel* statusReason_parser_;
    ::fhir::Reference_pskel* expressedBy_parser_;
    ::fhir::Reference_pskel* addresses_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::CodeableConcept_pskel* outcomeCode_parser_;
    ::fhir::Reference_pskel* outcomeReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Goal_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Goal_Target_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    measure ();

    virtual void
    detailQuantity ();

    virtual void
    detailRange ();

    virtual void
    detailCodeableConcept ();

    virtual void
    detailString ();

    virtual void
    detailBoolean ();

    virtual void
    detailInteger ();

    virtual void
    detailRatio ();

    virtual void
    dueDate ();

    virtual void
    dueDuration ();

    virtual void
    post_Goal_Target ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* measure */,
             ::fhir::Quantity_pskel& /* detailQuantity */,
             ::fhir::Range_pskel& /* detailRange */,
             ::fhir::CodeableConcept_pskel& /* detailCodeableConcept */,
             ::fhir::string_pskel& /* detailString */,
             ::fhir::boolean_pskel& /* detailBoolean */,
             ::fhir::integer_pskel& /* detailInteger */,
             ::fhir::Ratio_pskel& /* detailRatio */,
             ::fhir::date_pskel& /* dueDate */,
             ::fhir::Duration_pskel& /* dueDuration */);

    // Individual element parsers.
    //
    void
    measure_parser (::fhir::CodeableConcept_pskel&);

    void
    detailQuantity_parser (::fhir::Quantity_pskel&);

    void
    detailRange_parser (::fhir::Range_pskel&);

    void
    detailCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    detailString_parser (::fhir::string_pskel&);

    void
    detailBoolean_parser (::fhir::boolean_pskel&);

    void
    detailInteger_parser (::fhir::integer_pskel&);

    void
    detailRatio_parser (::fhir::Ratio_pskel&);

    void
    dueDate_parser (::fhir::date_pskel&);

    void
    dueDuration_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Goal_Target_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Goal_Target_pskel* Goal_Target_impl_;
    Goal_Target_pskel (Goal_Target_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* measure_parser_;
    ::fhir::Quantity_pskel* detailQuantity_parser_;
    ::fhir::Range_pskel* detailRange_parser_;
    ::fhir::CodeableConcept_pskel* detailCodeableConcept_parser_;
    ::fhir::string_pskel* detailString_parser_;
    ::fhir::boolean_pskel* detailBoolean_parser_;
    ::fhir::integer_pskel* detailInteger_parser_;
    ::fhir::Ratio_pskel* detailRatio_parser_;
    ::fhir::date_pskel* dueDate_parser_;
    ::fhir::Duration_pskel* dueDuration_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Goal_Target_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class GoalLifecycleStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GoalLifecycleStatus_list ();

    // Constructor.
    //
    GoalLifecycleStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    GoalLifecycleStatus_list_pskel* GoalLifecycleStatus_list_impl_;
    GoalLifecycleStatus_list_pskel (GoalLifecycleStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_GoalLifecycleStatus_list_pskel_enums_[9UL];
  };

  class GoalLifecycleStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_GoalLifecycleStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::GoalLifecycleStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::GoalLifecycleStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GoalLifecycleStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    GoalLifecycleStatus_pskel* GoalLifecycleStatus_impl_;
    GoalLifecycleStatus_pskel (GoalLifecycleStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::GoalLifecycleStatus_list_pskel* value_parser_;
  };

  class GraphDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    start ();

    virtual void
    profile ();

    virtual void
    link ();

    virtual void
    post_GraphDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::code_pskel& /* start */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::GraphDefinition_Link_pskel& /* link */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    start_parser (::fhir::code_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    link_parser (::fhir::GraphDefinition_Link_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GraphDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    GraphDefinition_pskel* GraphDefinition_impl_;
    GraphDefinition_pskel (GraphDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::code_pskel* start_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::GraphDefinition_Link_pskel* link_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::GraphDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class GraphDefinition_Link_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    sliceName ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    description ();

    virtual void
    target ();

    virtual void
    post_GraphDefinition_Link ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::string_pskel& /* sliceName */,
             ::fhir::integer_pskel& /* min */,
             ::fhir::string_pskel& /* max */,
             ::fhir::string_pskel& /* description */,
             ::fhir::GraphDefinition_Target_pskel& /* target */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    sliceName_parser (::fhir::string_pskel&);

    void
    min_parser (::fhir::integer_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    target_parser (::fhir::GraphDefinition_Target_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GraphDefinition_Link_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    GraphDefinition_Link_pskel* GraphDefinition_Link_impl_;
    GraphDefinition_Link_pskel (GraphDefinition_Link_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::string_pskel* sliceName_parser_;
    ::fhir::integer_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::GraphDefinition_Target_pskel* target_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::GraphDefinition_Link_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class GraphDefinition_Target_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    params ();

    virtual void
    profile ();

    virtual void
    compartment ();

    virtual void
    link ();

    virtual void
    post_GraphDefinition_Target ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* type */,
             ::fhir::string_pskel& /* params */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::GraphDefinition_Compartment_pskel& /* compartment */,
             ::fhir::GraphDefinition_Link_pskel& /* link */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::code_pskel&);

    void
    params_parser (::fhir::string_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    compartment_parser (::fhir::GraphDefinition_Compartment_pskel&);

    void
    link_parser (::fhir::GraphDefinition_Link_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GraphDefinition_Target_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    GraphDefinition_Target_pskel* GraphDefinition_Target_impl_;
    GraphDefinition_Target_pskel (GraphDefinition_Target_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* type_parser_;
    ::fhir::string_pskel* params_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::GraphDefinition_Compartment_pskel* compartment_parser_;
    ::fhir::GraphDefinition_Link_pskel* link_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::GraphDefinition_Target_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class GraphDefinition_Compartment_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    use ();

    virtual void
    code ();

    virtual void
    rule ();

    virtual void
    expression ();

    virtual void
    description ();

    virtual void
    post_GraphDefinition_Compartment ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::GraphCompartmentUse_pskel& /* use */,
             ::fhir::CompartmentType_pskel& /* code */,
             ::fhir::GraphCompartmentRule_pskel& /* rule */,
             ::fhir::string_pskel& /* expression */,
             ::fhir::string_pskel& /* description */);

    // Individual element parsers.
    //
    void
    use_parser (::fhir::GraphCompartmentUse_pskel&);

    void
    code_parser (::fhir::CompartmentType_pskel&);

    void
    rule_parser (::fhir::GraphCompartmentRule_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GraphDefinition_Compartment_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    GraphDefinition_Compartment_pskel* GraphDefinition_Compartment_impl_;
    GraphDefinition_Compartment_pskel (GraphDefinition_Compartment_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::GraphCompartmentUse_pskel* use_parser_;
    ::fhir::CompartmentType_pskel* code_parser_;
    ::fhir::GraphCompartmentRule_pskel* rule_parser_;
    ::fhir::string_pskel* expression_parser_;
    ::fhir::string_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::GraphDefinition_Compartment_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class GraphCompartmentUse_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GraphCompartmentUse_list ();

    // Constructor.
    //
    GraphCompartmentUse_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    GraphCompartmentUse_list_pskel* GraphCompartmentUse_list_impl_;
    GraphCompartmentUse_list_pskel (GraphCompartmentUse_list_pskel*, void*);

    protected:
    static const char* const _xsde_GraphCompartmentUse_list_pskel_enums_[2UL];
  };

  class GraphCompartmentUse_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_GraphCompartmentUse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::GraphCompartmentUse_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::GraphCompartmentUse_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GraphCompartmentUse_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    GraphCompartmentUse_pskel* GraphCompartmentUse_impl_;
    GraphCompartmentUse_pskel (GraphCompartmentUse_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::GraphCompartmentUse_list_pskel* value_parser_;
  };

  class GraphCompartmentRule_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GraphCompartmentRule_list ();

    // Constructor.
    //
    GraphCompartmentRule_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    GraphCompartmentRule_list_pskel* GraphCompartmentRule_list_impl_;
    GraphCompartmentRule_list_pskel (GraphCompartmentRule_list_pskel*, void*);

    protected:
    static const char* const _xsde_GraphCompartmentRule_list_pskel_enums_[4UL];
  };

  class GraphCompartmentRule_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_GraphCompartmentRule ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::GraphCompartmentRule_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::GraphCompartmentRule_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GraphCompartmentRule_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    GraphCompartmentRule_pskel* GraphCompartmentRule_impl_;
    GraphCompartmentRule_pskel (GraphCompartmentRule_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::GraphCompartmentRule_list_pskel* value_parser_;
  };

  class Group_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    active ();

    virtual void
    type ();

    virtual void
    actual ();

    virtual void
    code ();

    virtual void
    name ();

    virtual void
    quantity ();

    virtual void
    managingEntity ();

    virtual void
    characteristic ();

    virtual void
    member ();

    virtual void
    post_Group ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::GroupType_pskel& /* type */,
             ::fhir::boolean_pskel& /* actual */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* name */,
             ::fhir::unsignedInt_pskel& /* quantity */,
             ::fhir::Reference_pskel& /* managingEntity */,
             ::fhir::Group_Characteristic_pskel& /* characteristic */,
             ::fhir::Group_Member_pskel& /* member */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    type_parser (::fhir::GroupType_pskel&);

    void
    actual_parser (::fhir::boolean_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    quantity_parser (::fhir::unsignedInt_pskel&);

    void
    managingEntity_parser (::fhir::Reference_pskel&);

    void
    characteristic_parser (::fhir::Group_Characteristic_pskel&);

    void
    member_parser (::fhir::Group_Member_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Group_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Group_pskel* Group_impl_;
    Group_pskel (Group_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::GroupType_pskel* type_parser_;
    ::fhir::boolean_pskel* actual_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::unsignedInt_pskel* quantity_parser_;
    ::fhir::Reference_pskel* managingEntity_parser_;
    ::fhir::Group_Characteristic_pskel* characteristic_parser_;
    ::fhir::Group_Member_pskel* member_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Group_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Group_Characteristic_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueBoolean ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueReference ();

    virtual void
    exclude ();

    virtual void
    period ();

    virtual void
    post_Group_Characteristic ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::boolean_pskel& /* exclude */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    exclude_parser (::fhir::boolean_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Group_Characteristic_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Group_Characteristic_pskel* Group_Characteristic_impl_;
    Group_Characteristic_pskel (Group_Characteristic_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::boolean_pskel* exclude_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Group_Characteristic_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Group_Member_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    entity ();

    virtual void
    period ();

    virtual void
    inactive ();

    virtual void
    post_Group_Member ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* entity */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::boolean_pskel& /* inactive */);

    // Individual element parsers.
    //
    void
    entity_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    inactive_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Group_Member_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Group_Member_pskel* Group_Member_impl_;
    Group_Member_pskel (Group_Member_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* entity_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::boolean_pskel* inactive_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Group_Member_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class GroupType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GroupType_list ();

    // Constructor.
    //
    GroupType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    GroupType_list_pskel* GroupType_list_impl_;
    GroupType_list_pskel (GroupType_list_pskel*, void*);

    protected:
    static const char* const _xsde_GroupType_list_pskel_enums_[6UL];
  };

  class GroupType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_GroupType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::GroupType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::GroupType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GroupType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    GroupType_pskel* GroupType_impl_;
    GroupType_pskel (GroupType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::GroupType_list_pskel* value_parser_;
  };

  class GuidanceResponse_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    requestIdentifier ();

    virtual void
    identifier ();

    virtual void
    moduleUri ();

    virtual void
    moduleCanonical ();

    virtual void
    moduleCodeableConcept ();

    virtual void
    status ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    occurrenceDateTime ();

    virtual void
    performer ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    note ();

    virtual void
    evaluationMessage ();

    virtual void
    outputParameters ();

    virtual void
    result ();

    virtual void
    dataRequirement ();

    virtual void
    post_GuidanceResponse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* requestIdentifier */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::uri_pskel& /* moduleUri */,
             ::fhir::canonical_pskel& /* moduleCanonical */,
             ::fhir::CodeableConcept_pskel& /* moduleCodeableConcept */,
             ::fhir::GuidanceResponseStatus_pskel& /* status */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::Reference_pskel& /* evaluationMessage */,
             ::fhir::Reference_pskel& /* outputParameters */,
             ::fhir::Reference_pskel& /* result */,
             ::fhir::DataRequirement_pskel& /* dataRequirement */);

    // Individual element parsers.
    //
    void
    requestIdentifier_parser (::fhir::Identifier_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    moduleUri_parser (::fhir::uri_pskel&);

    void
    moduleCanonical_parser (::fhir::canonical_pskel&);

    void
    moduleCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::GuidanceResponseStatus_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    evaluationMessage_parser (::fhir::Reference_pskel&);

    void
    outputParameters_parser (::fhir::Reference_pskel&);

    void
    result_parser (::fhir::Reference_pskel&);

    void
    dataRequirement_parser (::fhir::DataRequirement_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GuidanceResponse_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuidanceResponse_pskel* GuidanceResponse_impl_;
    GuidanceResponse_pskel (GuidanceResponse_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* requestIdentifier_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::uri_pskel* moduleUri_parser_;
    ::fhir::canonical_pskel* moduleCanonical_parser_;
    ::fhir::CodeableConcept_pskel* moduleCodeableConcept_parser_;
    ::fhir::GuidanceResponseStatus_pskel* status_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::Reference_pskel* evaluationMessage_parser_;
    ::fhir::Reference_pskel* outputParameters_parser_;
    ::fhir::Reference_pskel* result_parser_;
    ::fhir::DataRequirement_pskel* dataRequirement_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::GuidanceResponse_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class GuidanceResponseStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GuidanceResponseStatus_list ();

    // Constructor.
    //
    GuidanceResponseStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuidanceResponseStatus_list_pskel* GuidanceResponseStatus_list_impl_;
    GuidanceResponseStatus_list_pskel (GuidanceResponseStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_GuidanceResponseStatus_list_pskel_enums_[6UL];
  };

  class GuidanceResponseStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_GuidanceResponseStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::GuidanceResponseStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::GuidanceResponseStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GuidanceResponseStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuidanceResponseStatus_pskel* GuidanceResponseStatus_impl_;
    GuidanceResponseStatus_pskel (GuidanceResponseStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::GuidanceResponseStatus_list_pskel* value_parser_;
  };

  class HealthcareService_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    active ();

    virtual void
    providedBy ();

    virtual void
    category ();

    virtual void
    type ();

    virtual void
    specialty ();

    virtual void
    location ();

    virtual void
    name ();

    virtual void
    comment ();

    virtual void
    extraDetails ();

    virtual void
    photo ();

    virtual void
    telecom ();

    virtual void
    coverageArea ();

    virtual void
    serviceProvisionCode ();

    virtual void
    eligibility ();

    virtual void
    program ();

    virtual void
    characteristic ();

    virtual void
    communication ();

    virtual void
    referralMethod ();

    virtual void
    appointmentRequired ();

    virtual void
    availableTime ();

    virtual void
    notAvailable ();

    virtual void
    availabilityExceptions ();

    virtual void
    endpoint ();

    virtual void
    post_HealthcareService ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::Reference_pskel& /* providedBy */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* specialty */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::markdown_pskel& /* extraDetails */,
             ::fhir::Attachment_pskel& /* photo */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::Reference_pskel& /* coverageArea */,
             ::fhir::CodeableConcept_pskel& /* serviceProvisionCode */,
             ::fhir::HealthcareService_Eligibility_pskel& /* eligibility */,
             ::fhir::CodeableConcept_pskel& /* program */,
             ::fhir::CodeableConcept_pskel& /* characteristic */,
             ::fhir::CodeableConcept_pskel& /* communication */,
             ::fhir::CodeableConcept_pskel& /* referralMethod */,
             ::fhir::boolean_pskel& /* appointmentRequired */,
             ::fhir::HealthcareService_AvailableTime_pskel& /* availableTime */,
             ::fhir::HealthcareService_NotAvailable_pskel& /* notAvailable */,
             ::fhir::string_pskel& /* availabilityExceptions */,
             ::fhir::Reference_pskel& /* endpoint */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    providedBy_parser (::fhir::Reference_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    specialty_parser (::fhir::CodeableConcept_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    void
    extraDetails_parser (::fhir::markdown_pskel&);

    void
    photo_parser (::fhir::Attachment_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    coverageArea_parser (::fhir::Reference_pskel&);

    void
    serviceProvisionCode_parser (::fhir::CodeableConcept_pskel&);

    void
    eligibility_parser (::fhir::HealthcareService_Eligibility_pskel&);

    void
    program_parser (::fhir::CodeableConcept_pskel&);

    void
    characteristic_parser (::fhir::CodeableConcept_pskel&);

    void
    communication_parser (::fhir::CodeableConcept_pskel&);

    void
    referralMethod_parser (::fhir::CodeableConcept_pskel&);

    void
    appointmentRequired_parser (::fhir::boolean_pskel&);

    void
    availableTime_parser (::fhir::HealthcareService_AvailableTime_pskel&);

    void
    notAvailable_parser (::fhir::HealthcareService_NotAvailable_pskel&);

    void
    availabilityExceptions_parser (::fhir::string_pskel&);

    void
    endpoint_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    HealthcareService_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    HealthcareService_pskel* HealthcareService_impl_;
    HealthcareService_pskel (HealthcareService_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::Reference_pskel* providedBy_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* specialty_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* comment_parser_;
    ::fhir::markdown_pskel* extraDetails_parser_;
    ::fhir::Attachment_pskel* photo_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::Reference_pskel* coverageArea_parser_;
    ::fhir::CodeableConcept_pskel* serviceProvisionCode_parser_;
    ::fhir::HealthcareService_Eligibility_pskel* eligibility_parser_;
    ::fhir::CodeableConcept_pskel* program_parser_;
    ::fhir::CodeableConcept_pskel* characteristic_parser_;
    ::fhir::CodeableConcept_pskel* communication_parser_;
    ::fhir::CodeableConcept_pskel* referralMethod_parser_;
    ::fhir::boolean_pskel* appointmentRequired_parser_;
    ::fhir::HealthcareService_AvailableTime_pskel* availableTime_parser_;
    ::fhir::HealthcareService_NotAvailable_pskel* notAvailable_parser_;
    ::fhir::string_pskel* availabilityExceptions_parser_;
    ::fhir::Reference_pskel* endpoint_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::HealthcareService_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class HealthcareService_Eligibility_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    comment ();

    virtual void
    post_HealthcareService_Eligibility ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::markdown_pskel& /* comment */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    comment_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    HealthcareService_Eligibility_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    HealthcareService_Eligibility_pskel* HealthcareService_Eligibility_impl_;
    HealthcareService_Eligibility_pskel (HealthcareService_Eligibility_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::markdown_pskel* comment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::HealthcareService_Eligibility_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class HealthcareService_AvailableTime_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    daysOfWeek ();

    virtual void
    allDay ();

    virtual void
    availableStartTime ();

    virtual void
    availableEndTime ();

    virtual void
    post_HealthcareService_AvailableTime ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::DaysOfWeek_pskel& /* daysOfWeek */,
             ::fhir::boolean_pskel& /* allDay */,
             ::fhir::time_pskel& /* availableStartTime */,
             ::fhir::time_pskel& /* availableEndTime */);

    // Individual element parsers.
    //
    void
    daysOfWeek_parser (::fhir::DaysOfWeek_pskel&);

    void
    allDay_parser (::fhir::boolean_pskel&);

    void
    availableStartTime_parser (::fhir::time_pskel&);

    void
    availableEndTime_parser (::fhir::time_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    HealthcareService_AvailableTime_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    HealthcareService_AvailableTime_pskel* HealthcareService_AvailableTime_impl_;
    HealthcareService_AvailableTime_pskel (HealthcareService_AvailableTime_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::DaysOfWeek_pskel* daysOfWeek_parser_;
    ::fhir::boolean_pskel* allDay_parser_;
    ::fhir::time_pskel* availableStartTime_parser_;
    ::fhir::time_pskel* availableEndTime_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::HealthcareService_AvailableTime_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class HealthcareService_NotAvailable_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    during ();

    virtual void
    post_HealthcareService_NotAvailable ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Period_pskel& /* during */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    during_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    HealthcareService_NotAvailable_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    HealthcareService_NotAvailable_pskel* HealthcareService_NotAvailable_impl_;
    HealthcareService_NotAvailable_pskel (HealthcareService_NotAvailable_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::Period_pskel* during_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::HealthcareService_NotAvailable_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class DaysOfWeek_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DaysOfWeek_list ();

    // Constructor.
    //
    DaysOfWeek_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DaysOfWeek_list_pskel* DaysOfWeek_list_impl_;
    DaysOfWeek_list_pskel (DaysOfWeek_list_pskel*, void*);

    protected:
    static const char* const _xsde_DaysOfWeek_list_pskel_enums_[7UL];
  };

  class DaysOfWeek_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DaysOfWeek ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DaysOfWeek_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DaysOfWeek_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DaysOfWeek_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DaysOfWeek_pskel* DaysOfWeek_impl_;
    DaysOfWeek_pskel (DaysOfWeek_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DaysOfWeek_list_pskel* value_parser_;
  };

  class ImagingStudy_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    modality ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    started ();

    virtual void
    basedOn ();

    virtual void
    referrer ();

    virtual void
    interpreter ();

    virtual void
    endpoint ();

    virtual void
    numberOfSeries ();

    virtual void
    numberOfInstances ();

    virtual void
    procedureReference ();

    virtual void
    procedureCode ();

    virtual void
    location ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    note ();

    virtual void
    description ();

    virtual void
    series ();

    virtual void
    post_ImagingStudy ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ImagingStudyStatus_pskel& /* status */,
             ::fhir::Coding_pskel& /* modality */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* started */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* referrer */,
             ::fhir::Reference_pskel& /* interpreter */,
             ::fhir::Reference_pskel& /* endpoint */,
             ::fhir::unsignedInt_pskel& /* numberOfSeries */,
             ::fhir::unsignedInt_pskel& /* numberOfInstances */,
             ::fhir::Reference_pskel& /* procedureReference */,
             ::fhir::CodeableConcept_pskel& /* procedureCode */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::string_pskel& /* description */,
             ::fhir::ImagingStudy_Series_pskel& /* series */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::ImagingStudyStatus_pskel&);

    void
    modality_parser (::fhir::Coding_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    started_parser (::fhir::dateTime_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    referrer_parser (::fhir::Reference_pskel&);

    void
    interpreter_parser (::fhir::Reference_pskel&);

    void
    endpoint_parser (::fhir::Reference_pskel&);

    void
    numberOfSeries_parser (::fhir::unsignedInt_pskel&);

    void
    numberOfInstances_parser (::fhir::unsignedInt_pskel&);

    void
    procedureReference_parser (::fhir::Reference_pskel&);

    void
    procedureCode_parser (::fhir::CodeableConcept_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    series_parser (::fhir::ImagingStudy_Series_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImagingStudy_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImagingStudy_pskel* ImagingStudy_impl_;
    ImagingStudy_pskel (ImagingStudy_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ImagingStudyStatus_pskel* status_parser_;
    ::fhir::Coding_pskel* modality_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* started_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* referrer_parser_;
    ::fhir::Reference_pskel* interpreter_parser_;
    ::fhir::Reference_pskel* endpoint_parser_;
    ::fhir::unsignedInt_pskel* numberOfSeries_parser_;
    ::fhir::unsignedInt_pskel* numberOfInstances_parser_;
    ::fhir::Reference_pskel* procedureReference_parser_;
    ::fhir::CodeableConcept_pskel* procedureCode_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::ImagingStudy_Series_pskel* series_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImagingStudy_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImagingStudy_Series_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    uid ();

    virtual void
    number ();

    virtual void
    modality ();

    virtual void
    description ();

    virtual void
    numberOfInstances ();

    virtual void
    endpoint ();

    virtual void
    bodySite ();

    virtual void
    laterality ();

    virtual void
    specimen ();

    virtual void
    started ();

    virtual void
    performer ();

    virtual void
    instance ();

    virtual void
    post_ImagingStudy_Series ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* uid */,
             ::fhir::unsignedInt_pskel& /* number */,
             ::fhir::Coding_pskel& /* modality */,
             ::fhir::string_pskel& /* description */,
             ::fhir::unsignedInt_pskel& /* numberOfInstances */,
             ::fhir::Reference_pskel& /* endpoint */,
             ::fhir::Coding_pskel& /* bodySite */,
             ::fhir::Coding_pskel& /* laterality */,
             ::fhir::Reference_pskel& /* specimen */,
             ::fhir::dateTime_pskel& /* started */,
             ::fhir::ImagingStudy_Performer_pskel& /* performer */,
             ::fhir::ImagingStudy_Instance_pskel& /* instance */);

    // Individual element parsers.
    //
    void
    uid_parser (::fhir::id_pskel&);

    void
    number_parser (::fhir::unsignedInt_pskel&);

    void
    modality_parser (::fhir::Coding_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    numberOfInstances_parser (::fhir::unsignedInt_pskel&);

    void
    endpoint_parser (::fhir::Reference_pskel&);

    void
    bodySite_parser (::fhir::Coding_pskel&);

    void
    laterality_parser (::fhir::Coding_pskel&);

    void
    specimen_parser (::fhir::Reference_pskel&);

    void
    started_parser (::fhir::dateTime_pskel&);

    void
    performer_parser (::fhir::ImagingStudy_Performer_pskel&);

    void
    instance_parser (::fhir::ImagingStudy_Instance_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImagingStudy_Series_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImagingStudy_Series_pskel* ImagingStudy_Series_impl_;
    ImagingStudy_Series_pskel (ImagingStudy_Series_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* uid_parser_;
    ::fhir::unsignedInt_pskel* number_parser_;
    ::fhir::Coding_pskel* modality_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::unsignedInt_pskel* numberOfInstances_parser_;
    ::fhir::Reference_pskel* endpoint_parser_;
    ::fhir::Coding_pskel* bodySite_parser_;
    ::fhir::Coding_pskel* laterality_parser_;
    ::fhir::Reference_pskel* specimen_parser_;
    ::fhir::dateTime_pskel* started_parser_;
    ::fhir::ImagingStudy_Performer_pskel* performer_parser_;
    ::fhir::ImagingStudy_Instance_pskel* instance_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImagingStudy_Series_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImagingStudy_Performer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    function ();

    virtual void
    actor ();

    virtual void
    post_ImagingStudy_Performer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* function */,
             ::fhir::Reference_pskel& /* actor */);

    // Individual element parsers.
    //
    void
    function_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImagingStudy_Performer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImagingStudy_Performer_pskel* ImagingStudy_Performer_impl_;
    ImagingStudy_Performer_pskel (ImagingStudy_Performer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* function_parser_;
    ::fhir::Reference_pskel* actor_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImagingStudy_Performer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImagingStudy_Instance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    uid ();

    virtual void
    sopClass ();

    virtual void
    number ();

    virtual void
    title ();

    virtual void
    post_ImagingStudy_Instance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* uid */,
             ::fhir::Coding_pskel& /* sopClass */,
             ::fhir::unsignedInt_pskel& /* number */,
             ::fhir::string_pskel& /* title */);

    // Individual element parsers.
    //
    void
    uid_parser (::fhir::id_pskel&);

    void
    sopClass_parser (::fhir::Coding_pskel&);

    void
    number_parser (::fhir::unsignedInt_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImagingStudy_Instance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImagingStudy_Instance_pskel* ImagingStudy_Instance_impl_;
    ImagingStudy_Instance_pskel (ImagingStudy_Instance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* uid_parser_;
    ::fhir::Coding_pskel* sopClass_parser_;
    ::fhir::unsignedInt_pskel* number_parser_;
    ::fhir::string_pskel* title_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImagingStudy_Instance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImagingStudyStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ImagingStudyStatus_list ();

    // Constructor.
    //
    ImagingStudyStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImagingStudyStatus_list_pskel* ImagingStudyStatus_list_impl_;
    ImagingStudyStatus_list_pskel (ImagingStudyStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ImagingStudyStatus_list_pskel_enums_[5UL];
  };

  class ImagingStudyStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ImagingStudyStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ImagingStudyStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ImagingStudyStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImagingStudyStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImagingStudyStatus_pskel* ImagingStudyStatus_impl_;
    ImagingStudyStatus_pskel (ImagingStudyStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ImagingStudyStatus_list_pskel* value_parser_;
  };

  class Immunization_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    vaccineCode ();

    virtual void
    patient ();

    virtual void
    encounter ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrenceString ();

    virtual void
    recorded ();

    virtual void
    primarySource ();

    virtual void
    reportOrigin ();

    virtual void
    location ();

    virtual void
    manufacturer ();

    virtual void
    lotNumber ();

    virtual void
    expirationDate ();

    virtual void
    site ();

    virtual void
    route ();

    virtual void
    doseQuantity ();

    virtual void
    performer ();

    virtual void
    note ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    isSubpotent ();

    virtual void
    subpotentReason ();

    virtual void
    education ();

    virtual void
    programEligibility ();

    virtual void
    fundingSource ();

    virtual void
    reaction ();

    virtual void
    protocolApplied ();

    virtual void
    post_Immunization ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ImmunizationStatusCodes_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::CodeableConcept_pskel& /* vaccineCode */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::string_pskel& /* occurrenceString */,
             ::fhir::dateTime_pskel& /* recorded */,
             ::fhir::boolean_pskel& /* primarySource */,
             ::fhir::CodeableConcept_pskel& /* reportOrigin */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::Reference_pskel& /* manufacturer */,
             ::fhir::string_pskel& /* lotNumber */,
             ::fhir::date_pskel& /* expirationDate */,
             ::fhir::CodeableConcept_pskel& /* site */,
             ::fhir::CodeableConcept_pskel& /* route */,
             ::fhir::Quantity_pskel& /* doseQuantity */,
             ::fhir::Immunization_Performer_pskel& /* performer */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::boolean_pskel& /* isSubpotent */,
             ::fhir::CodeableConcept_pskel& /* subpotentReason */,
             ::fhir::Immunization_Education_pskel& /* education */,
             ::fhir::CodeableConcept_pskel& /* programEligibility */,
             ::fhir::CodeableConcept_pskel& /* fundingSource */,
             ::fhir::Immunization_Reaction_pskel& /* reaction */,
             ::fhir::Immunization_ProtocolApplied_pskel& /* protocolApplied */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::ImmunizationStatusCodes_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    vaccineCode_parser (::fhir::CodeableConcept_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrenceString_parser (::fhir::string_pskel&);

    void
    recorded_parser (::fhir::dateTime_pskel&);

    void
    primarySource_parser (::fhir::boolean_pskel&);

    void
    reportOrigin_parser (::fhir::CodeableConcept_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    void
    lotNumber_parser (::fhir::string_pskel&);

    void
    expirationDate_parser (::fhir::date_pskel&);

    void
    site_parser (::fhir::CodeableConcept_pskel&);

    void
    route_parser (::fhir::CodeableConcept_pskel&);

    void
    doseQuantity_parser (::fhir::Quantity_pskel&);

    void
    performer_parser (::fhir::Immunization_Performer_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    isSubpotent_parser (::fhir::boolean_pskel&);

    void
    subpotentReason_parser (::fhir::CodeableConcept_pskel&);

    void
    education_parser (::fhir::Immunization_Education_pskel&);

    void
    programEligibility_parser (::fhir::CodeableConcept_pskel&);

    void
    fundingSource_parser (::fhir::CodeableConcept_pskel&);

    void
    reaction_parser (::fhir::Immunization_Reaction_pskel&);

    void
    protocolApplied_parser (::fhir::Immunization_ProtocolApplied_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Immunization_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Immunization_pskel* Immunization_impl_;
    Immunization_pskel (Immunization_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ImmunizationStatusCodes_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::CodeableConcept_pskel* vaccineCode_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::string_pskel* occurrenceString_parser_;
    ::fhir::dateTime_pskel* recorded_parser_;
    ::fhir::boolean_pskel* primarySource_parser_;
    ::fhir::CodeableConcept_pskel* reportOrigin_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;
    ::fhir::string_pskel* lotNumber_parser_;
    ::fhir::date_pskel* expirationDate_parser_;
    ::fhir::CodeableConcept_pskel* site_parser_;
    ::fhir::CodeableConcept_pskel* route_parser_;
    ::fhir::Quantity_pskel* doseQuantity_parser_;
    ::fhir::Immunization_Performer_pskel* performer_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::boolean_pskel* isSubpotent_parser_;
    ::fhir::CodeableConcept_pskel* subpotentReason_parser_;
    ::fhir::Immunization_Education_pskel* education_parser_;
    ::fhir::CodeableConcept_pskel* programEligibility_parser_;
    ::fhir::CodeableConcept_pskel* fundingSource_parser_;
    ::fhir::Immunization_Reaction_pskel* reaction_parser_;
    ::fhir::Immunization_ProtocolApplied_pskel* protocolApplied_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Immunization_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Immunization_Performer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    function ();

    virtual void
    actor ();

    virtual void
    post_Immunization_Performer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* function */,
             ::fhir::Reference_pskel& /* actor */);

    // Individual element parsers.
    //
    void
    function_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Immunization_Performer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Immunization_Performer_pskel* Immunization_Performer_impl_;
    Immunization_Performer_pskel (Immunization_Performer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* function_parser_;
    ::fhir::Reference_pskel* actor_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Immunization_Performer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Immunization_Education_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    documentType ();

    virtual void
    reference ();

    virtual void
    publicationDate ();

    virtual void
    presentationDate ();

    virtual void
    post_Immunization_Education ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* documentType */,
             ::fhir::uri_pskel& /* reference */,
             ::fhir::dateTime_pskel& /* publicationDate */,
             ::fhir::dateTime_pskel& /* presentationDate */);

    // Individual element parsers.
    //
    void
    documentType_parser (::fhir::string_pskel&);

    void
    reference_parser (::fhir::uri_pskel&);

    void
    publicationDate_parser (::fhir::dateTime_pskel&);

    void
    presentationDate_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Immunization_Education_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Immunization_Education_pskel* Immunization_Education_impl_;
    Immunization_Education_pskel (Immunization_Education_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* documentType_parser_;
    ::fhir::uri_pskel* reference_parser_;
    ::fhir::dateTime_pskel* publicationDate_parser_;
    ::fhir::dateTime_pskel* presentationDate_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Immunization_Education_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Immunization_Reaction_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    date ();

    virtual void
    detail ();

    virtual void
    reported ();

    virtual void
    post_Immunization_Reaction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* detail */,
             ::fhir::boolean_pskel& /* reported */);

    // Individual element parsers.
    //
    void
    date_parser (::fhir::dateTime_pskel&);

    void
    detail_parser (::fhir::Reference_pskel&);

    void
    reported_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Immunization_Reaction_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Immunization_Reaction_pskel* Immunization_Reaction_impl_;
    Immunization_Reaction_pskel (Immunization_Reaction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* detail_parser_;
    ::fhir::boolean_pskel* reported_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Immunization_Reaction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Immunization_ProtocolApplied_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    series ();

    virtual void
    authority ();

    virtual void
    targetDisease ();

    virtual void
    doseNumberPositiveInt ();

    virtual void
    doseNumberString ();

    virtual void
    seriesDosesPositiveInt ();

    virtual void
    seriesDosesString ();

    virtual void
    post_Immunization_ProtocolApplied ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* series */,
             ::fhir::Reference_pskel& /* authority */,
             ::fhir::CodeableConcept_pskel& /* targetDisease */,
             ::fhir::positiveInt_pskel& /* doseNumberPositiveInt */,
             ::fhir::string_pskel& /* doseNumberString */,
             ::fhir::positiveInt_pskel& /* seriesDosesPositiveInt */,
             ::fhir::string_pskel& /* seriesDosesString */);

    // Individual element parsers.
    //
    void
    series_parser (::fhir::string_pskel&);

    void
    authority_parser (::fhir::Reference_pskel&);

    void
    targetDisease_parser (::fhir::CodeableConcept_pskel&);

    void
    doseNumberPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    doseNumberString_parser (::fhir::string_pskel&);

    void
    seriesDosesPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    seriesDosesString_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Immunization_ProtocolApplied_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Immunization_ProtocolApplied_pskel* Immunization_ProtocolApplied_impl_;
    Immunization_ProtocolApplied_pskel (Immunization_ProtocolApplied_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* series_parser_;
    ::fhir::Reference_pskel* authority_parser_;
    ::fhir::CodeableConcept_pskel* targetDisease_parser_;
    ::fhir::positiveInt_pskel* doseNumberPositiveInt_parser_;
    ::fhir::string_pskel* doseNumberString_parser_;
    ::fhir::positiveInt_pskel* seriesDosesPositiveInt_parser_;
    ::fhir::string_pskel* seriesDosesString_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Immunization_ProtocolApplied_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImmunizationStatusCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ImmunizationStatusCodes_list ();

    // Constructor.
    //
    ImmunizationStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImmunizationStatusCodes_list_pskel* ImmunizationStatusCodes_list_impl_;
    ImmunizationStatusCodes_list_pskel (ImmunizationStatusCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_ImmunizationStatusCodes_list_pskel_enums_[3UL];
  };

  class ImmunizationStatusCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ImmunizationStatusCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ImmunizationStatusCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ImmunizationStatusCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImmunizationStatusCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImmunizationStatusCodes_pskel* ImmunizationStatusCodes_impl_;
    ImmunizationStatusCodes_pskel (ImmunizationStatusCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ImmunizationStatusCodes_list_pskel* value_parser_;
  };

  class ImmunizationEvaluation_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    patient ();

    virtual void
    date ();

    virtual void
    authority ();

    virtual void
    targetDisease ();

    virtual void
    immunizationEvent ();

    virtual void
    doseStatus ();

    virtual void
    doseStatusReason ();

    virtual void
    description ();

    virtual void
    series ();

    virtual void
    doseNumberPositiveInt ();

    virtual void
    doseNumberString ();

    virtual void
    seriesDosesPositiveInt ();

    virtual void
    seriesDosesString ();

    virtual void
    post_ImmunizationEvaluation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ImmunizationEvaluationStatusCodes_pskel& /* status */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* authority */,
             ::fhir::CodeableConcept_pskel& /* targetDisease */,
             ::fhir::Reference_pskel& /* immunizationEvent */,
             ::fhir::CodeableConcept_pskel& /* doseStatus */,
             ::fhir::CodeableConcept_pskel& /* doseStatusReason */,
             ::fhir::string_pskel& /* description */,
             ::fhir::string_pskel& /* series */,
             ::fhir::positiveInt_pskel& /* doseNumberPositiveInt */,
             ::fhir::string_pskel& /* doseNumberString */,
             ::fhir::positiveInt_pskel& /* seriesDosesPositiveInt */,
             ::fhir::string_pskel& /* seriesDosesString */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::ImmunizationEvaluationStatusCodes_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    authority_parser (::fhir::Reference_pskel&);

    void
    targetDisease_parser (::fhir::CodeableConcept_pskel&);

    void
    immunizationEvent_parser (::fhir::Reference_pskel&);

    void
    doseStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    doseStatusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    series_parser (::fhir::string_pskel&);

    void
    doseNumberPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    doseNumberString_parser (::fhir::string_pskel&);

    void
    seriesDosesPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    seriesDosesString_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImmunizationEvaluation_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImmunizationEvaluation_pskel* ImmunizationEvaluation_impl_;
    ImmunizationEvaluation_pskel (ImmunizationEvaluation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ImmunizationEvaluationStatusCodes_pskel* status_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* authority_parser_;
    ::fhir::CodeableConcept_pskel* targetDisease_parser_;
    ::fhir::Reference_pskel* immunizationEvent_parser_;
    ::fhir::CodeableConcept_pskel* doseStatus_parser_;
    ::fhir::CodeableConcept_pskel* doseStatusReason_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::string_pskel* series_parser_;
    ::fhir::positiveInt_pskel* doseNumberPositiveInt_parser_;
    ::fhir::string_pskel* doseNumberString_parser_;
    ::fhir::positiveInt_pskel* seriesDosesPositiveInt_parser_;
    ::fhir::string_pskel* seriesDosesString_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImmunizationEvaluation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImmunizationEvaluationStatusCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ImmunizationEvaluationStatusCodes_list ();

    // Constructor.
    //
    ImmunizationEvaluationStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImmunizationEvaluationStatusCodes_list_pskel* ImmunizationEvaluationStatusCodes_list_impl_;
    ImmunizationEvaluationStatusCodes_list_pskel (ImmunizationEvaluationStatusCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_ImmunizationEvaluationStatusCodes_list_pskel_enums_[2UL];
  };

  class ImmunizationEvaluationStatusCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ImmunizationEvaluationStatusCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ImmunizationEvaluationStatusCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ImmunizationEvaluationStatusCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImmunizationEvaluationStatusCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImmunizationEvaluationStatusCodes_pskel* ImmunizationEvaluationStatusCodes_impl_;
    ImmunizationEvaluationStatusCodes_pskel (ImmunizationEvaluationStatusCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ImmunizationEvaluationStatusCodes_list_pskel* value_parser_;
  };

  class ImmunizationRecommendation_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    patient ();

    virtual void
    date ();

    virtual void
    authority ();

    virtual void
    recommendation ();

    virtual void
    post_ImmunizationRecommendation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* authority */,
             ::fhir::ImmunizationRecommendation_Recommendation_pskel& /* recommendation */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    authority_parser (::fhir::Reference_pskel&);

    void
    recommendation_parser (::fhir::ImmunizationRecommendation_Recommendation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImmunizationRecommendation_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImmunizationRecommendation_pskel* ImmunizationRecommendation_impl_;
    ImmunizationRecommendation_pskel (ImmunizationRecommendation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* authority_parser_;
    ::fhir::ImmunizationRecommendation_Recommendation_pskel* recommendation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImmunizationRecommendation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImmunizationRecommendation_Recommendation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    vaccineCode ();

    virtual void
    targetDisease ();

    virtual void
    contraindicatedVaccineCode ();

    virtual void
    forecastStatus ();

    virtual void
    forecastReason ();

    virtual void
    dateCriterion ();

    virtual void
    description ();

    virtual void
    series ();

    virtual void
    doseNumberPositiveInt ();

    virtual void
    doseNumberString ();

    virtual void
    seriesDosesPositiveInt ();

    virtual void
    seriesDosesString ();

    virtual void
    supportingImmunization ();

    virtual void
    supportingPatientInformation ();

    virtual void
    post_ImmunizationRecommendation_Recommendation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* vaccineCode */,
             ::fhir::CodeableConcept_pskel& /* targetDisease */,
             ::fhir::CodeableConcept_pskel& /* contraindicatedVaccineCode */,
             ::fhir::CodeableConcept_pskel& /* forecastStatus */,
             ::fhir::CodeableConcept_pskel& /* forecastReason */,
             ::fhir::ImmunizationRecommendation_DateCriterion_pskel& /* dateCriterion */,
             ::fhir::string_pskel& /* description */,
             ::fhir::string_pskel& /* series */,
             ::fhir::positiveInt_pskel& /* doseNumberPositiveInt */,
             ::fhir::string_pskel& /* doseNumberString */,
             ::fhir::positiveInt_pskel& /* seriesDosesPositiveInt */,
             ::fhir::string_pskel& /* seriesDosesString */,
             ::fhir::Reference_pskel& /* supportingImmunization */,
             ::fhir::Reference_pskel& /* supportingPatientInformation */);

    // Individual element parsers.
    //
    void
    vaccineCode_parser (::fhir::CodeableConcept_pskel&);

    void
    targetDisease_parser (::fhir::CodeableConcept_pskel&);

    void
    contraindicatedVaccineCode_parser (::fhir::CodeableConcept_pskel&);

    void
    forecastStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    forecastReason_parser (::fhir::CodeableConcept_pskel&);

    void
    dateCriterion_parser (::fhir::ImmunizationRecommendation_DateCriterion_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    series_parser (::fhir::string_pskel&);

    void
    doseNumberPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    doseNumberString_parser (::fhir::string_pskel&);

    void
    seriesDosesPositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    seriesDosesString_parser (::fhir::string_pskel&);

    void
    supportingImmunization_parser (::fhir::Reference_pskel&);

    void
    supportingPatientInformation_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImmunizationRecommendation_Recommendation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImmunizationRecommendation_Recommendation_pskel* ImmunizationRecommendation_Recommendation_impl_;
    ImmunizationRecommendation_Recommendation_pskel (ImmunizationRecommendation_Recommendation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* vaccineCode_parser_;
    ::fhir::CodeableConcept_pskel* targetDisease_parser_;
    ::fhir::CodeableConcept_pskel* contraindicatedVaccineCode_parser_;
    ::fhir::CodeableConcept_pskel* forecastStatus_parser_;
    ::fhir::CodeableConcept_pskel* forecastReason_parser_;
    ::fhir::ImmunizationRecommendation_DateCriterion_pskel* dateCriterion_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::string_pskel* series_parser_;
    ::fhir::positiveInt_pskel* doseNumberPositiveInt_parser_;
    ::fhir::string_pskel* doseNumberString_parser_;
    ::fhir::positiveInt_pskel* seriesDosesPositiveInt_parser_;
    ::fhir::string_pskel* seriesDosesString_parser_;
    ::fhir::Reference_pskel* supportingImmunization_parser_;
    ::fhir::Reference_pskel* supportingPatientInformation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImmunizationRecommendation_Recommendation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImmunizationRecommendation_DateCriterion_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    value ();

    virtual void
    post_ImmunizationRecommendation_DateCriterion ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::dateTime_pskel& /* value */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    value_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImmunizationRecommendation_DateCriterion_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImmunizationRecommendation_DateCriterion_pskel* ImmunizationRecommendation_DateCriterion_impl_;
    ImmunizationRecommendation_DateCriterion_pskel (ImmunizationRecommendation_DateCriterion_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::dateTime_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImmunizationRecommendation_DateCriterion_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    copyright ();

    virtual void
    packageId ();

    virtual void
    license ();

    virtual void
    fhirVersion ();

    virtual void
    dependsOn ();

    virtual void
    global ();

    virtual void
    definition ();

    virtual void
    manifest ();

    virtual void
    post_ImplementationGuide ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::id_pskel& /* packageId */,
             ::fhir::SPDXLicense_pskel& /* license */,
             ::fhir::FHIRVersion_pskel& /* fhirVersion */,
             ::fhir::ImplementationGuide_DependsOn_pskel& /* dependsOn */,
             ::fhir::ImplementationGuide_Global_pskel& /* global */,
             ::fhir::ImplementationGuide_Definition_pskel& /* definition */,
             ::fhir::ImplementationGuide_Manifest_pskel& /* manifest */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    packageId_parser (::fhir::id_pskel&);

    void
    license_parser (::fhir::SPDXLicense_pskel&);

    void
    fhirVersion_parser (::fhir::FHIRVersion_pskel&);

    void
    dependsOn_parser (::fhir::ImplementationGuide_DependsOn_pskel&);

    void
    global_parser (::fhir::ImplementationGuide_Global_pskel&);

    void
    definition_parser (::fhir::ImplementationGuide_Definition_pskel&);

    void
    manifest_parser (::fhir::ImplementationGuide_Manifest_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_pskel* ImplementationGuide_impl_;
    ImplementationGuide_pskel (ImplementationGuide_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::id_pskel* packageId_parser_;
    ::fhir::SPDXLicense_pskel* license_parser_;
    ::fhir::FHIRVersion_pskel* fhirVersion_parser_;
    ::fhir::ImplementationGuide_DependsOn_pskel* dependsOn_parser_;
    ::fhir::ImplementationGuide_Global_pskel* global_parser_;
    ::fhir::ImplementationGuide_Definition_pskel* definition_parser_;
    ::fhir::ImplementationGuide_Manifest_pskel* manifest_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_DependsOn_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    uri ();

    virtual void
    packageId ();

    virtual void
    version ();

    virtual void
    post_ImplementationGuide_DependsOn ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::canonical_pskel& /* uri */,
             ::fhir::id_pskel& /* packageId */,
             ::fhir::string_pskel& /* version */);

    // Individual element parsers.
    //
    void
    uri_parser (::fhir::canonical_pskel&);

    void
    packageId_parser (::fhir::id_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_DependsOn_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_DependsOn_pskel* ImplementationGuide_DependsOn_impl_;
    ImplementationGuide_DependsOn_pskel (ImplementationGuide_DependsOn_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::canonical_pskel* uri_parser_;
    ::fhir::id_pskel* packageId_parser_;
    ::fhir::string_pskel* version_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_DependsOn_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Global_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    profile ();

    virtual void
    post_ImplementationGuide_Global ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* type */,
             ::fhir::canonical_pskel& /* profile */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::code_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Global_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Global_pskel* ImplementationGuide_Global_impl_;
    ImplementationGuide_Global_pskel (ImplementationGuide_Global_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* type_parser_;
    ::fhir::canonical_pskel* profile_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Global_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Definition_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    grouping ();

    virtual void
    resource ();

    virtual void
    page ();

    virtual void
    parameter ();

    virtual void
    template_ ();

    virtual void
    post_ImplementationGuide_Definition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ImplementationGuide_Grouping_pskel& /* grouping */,
             ::fhir::ImplementationGuide_Resource_pskel& /* resource */,
             ::fhir::ImplementationGuide_Page_pskel& /* page */,
             ::fhir::ImplementationGuide_Parameter_pskel& /* parameter */,
             ::fhir::ImplementationGuide_Template_pskel& /* template */);

    // Individual element parsers.
    //
    void
    grouping_parser (::fhir::ImplementationGuide_Grouping_pskel&);

    void
    resource_parser (::fhir::ImplementationGuide_Resource_pskel&);

    void
    page_parser (::fhir::ImplementationGuide_Page_pskel&);

    void
    parameter_parser (::fhir::ImplementationGuide_Parameter_pskel&);

    void
    template__parser (::fhir::ImplementationGuide_Template_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Definition_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Definition_pskel* ImplementationGuide_Definition_impl_;
    ImplementationGuide_Definition_pskel (ImplementationGuide_Definition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ImplementationGuide_Grouping_pskel* grouping_parser_;
    ::fhir::ImplementationGuide_Resource_pskel* resource_parser_;
    ::fhir::ImplementationGuide_Page_pskel* page_parser_;
    ::fhir::ImplementationGuide_Parameter_pskel* parameter_parser_;
    ::fhir::ImplementationGuide_Template_pskel* template__parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Definition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Grouping_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    description ();

    virtual void
    post_ImplementationGuide_Grouping ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Grouping_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Grouping_pskel* ImplementationGuide_Grouping_impl_;
    ImplementationGuide_Grouping_pskel (ImplementationGuide_Grouping_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Grouping_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Resource_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    fhirVersion ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    exampleBoolean ();

    virtual void
    exampleCanonical ();

    virtual void
    groupingId ();

    virtual void
    post_ImplementationGuide_Resource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::FHIRVersion_pskel& /* fhirVersion */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */,
             ::fhir::boolean_pskel& /* exampleBoolean */,
             ::fhir::canonical_pskel& /* exampleCanonical */,
             ::fhir::id_pskel& /* groupingId */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::Reference_pskel&);

    void
    fhirVersion_parser (::fhir::FHIRVersion_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    exampleBoolean_parser (::fhir::boolean_pskel&);

    void
    exampleCanonical_parser (::fhir::canonical_pskel&);

    void
    groupingId_parser (::fhir::id_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Resource_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Resource_pskel* ImplementationGuide_Resource_impl_;
    ImplementationGuide_Resource_pskel (ImplementationGuide_Resource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::FHIRVersion_pskel* fhirVersion_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::boolean_pskel* exampleBoolean_parser_;
    ::fhir::canonical_pskel* exampleCanonical_parser_;
    ::fhir::id_pskel* groupingId_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Resource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Page_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    nameUrl ();

    virtual void
    nameReference ();

    virtual void
    title ();

    virtual void
    generation ();

    virtual void
    page ();

    virtual void
    post_ImplementationGuide_Page ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::url_pskel& /* nameUrl */,
             ::fhir::Reference_pskel& /* nameReference */,
             ::fhir::string_pskel& /* title */,
             ::fhir::GuidePageGeneration_pskel& /* generation */,
             ::fhir::ImplementationGuide_Page_pskel& /* page */);

    // Individual element parsers.
    //
    void
    nameUrl_parser (::fhir::url_pskel&);

    void
    nameReference_parser (::fhir::Reference_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    generation_parser (::fhir::GuidePageGeneration_pskel&);

    void
    page_parser (::fhir::ImplementationGuide_Page_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Page_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Page_pskel* ImplementationGuide_Page_impl_;
    ImplementationGuide_Page_pskel (ImplementationGuide_Page_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::url_pskel* nameUrl_parser_;
    ::fhir::Reference_pskel* nameReference_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::GuidePageGeneration_pskel* generation_parser_;
    ::fhir::ImplementationGuide_Page_pskel* page_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Page_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    value ();

    virtual void
    post_ImplementationGuide_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::GuideParameterCode_pskel& /* code */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::GuideParameterCode_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Parameter_pskel* ImplementationGuide_Parameter_impl_;
    ImplementationGuide_Parameter_pskel (ImplementationGuide_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::GuideParameterCode_pskel* code_parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Template_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    source ();

    virtual void
    scope ();

    virtual void
    post_ImplementationGuide_Template ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* source */,
             ::fhir::string_pskel& /* scope */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    source_parser (::fhir::string_pskel&);

    void
    scope_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Template_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Template_pskel* ImplementationGuide_Template_impl_;
    ImplementationGuide_Template_pskel (ImplementationGuide_Template_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* source_parser_;
    ::fhir::string_pskel* scope_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Template_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Manifest_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    rendering ();

    virtual void
    resource ();

    virtual void
    page ();

    virtual void
    image ();

    virtual void
    other ();

    virtual void
    post_ImplementationGuide_Manifest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::url_pskel& /* rendering */,
             ::fhir::ImplementationGuide_Resource1_pskel& /* resource */,
             ::fhir::ImplementationGuide_Page1_pskel& /* page */,
             ::fhir::string_pskel& /* image */,
             ::fhir::string_pskel& /* other */);

    // Individual element parsers.
    //
    void
    rendering_parser (::fhir::url_pskel&);

    void
    resource_parser (::fhir::ImplementationGuide_Resource1_pskel&);

    void
    page_parser (::fhir::ImplementationGuide_Page1_pskel&);

    void
    image_parser (::fhir::string_pskel&);

    void
    other_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Manifest_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Manifest_pskel* ImplementationGuide_Manifest_impl_;
    ImplementationGuide_Manifest_pskel (ImplementationGuide_Manifest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::url_pskel* rendering_parser_;
    ::fhir::ImplementationGuide_Resource1_pskel* resource_parser_;
    ::fhir::ImplementationGuide_Page1_pskel* page_parser_;
    ::fhir::string_pskel* image_parser_;
    ::fhir::string_pskel* other_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Manifest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Resource1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    exampleBoolean ();

    virtual void
    exampleCanonical ();

    virtual void
    relativePath ();

    virtual void
    post_ImplementationGuide_Resource1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::boolean_pskel& /* exampleBoolean */,
             ::fhir::canonical_pskel& /* exampleCanonical */,
             ::fhir::url_pskel& /* relativePath */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::Reference_pskel&);

    void
    exampleBoolean_parser (::fhir::boolean_pskel&);

    void
    exampleCanonical_parser (::fhir::canonical_pskel&);

    void
    relativePath_parser (::fhir::url_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Resource1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Resource1_pskel* ImplementationGuide_Resource1_impl_;
    ImplementationGuide_Resource1_pskel (ImplementationGuide_Resource1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::boolean_pskel* exampleBoolean_parser_;
    ::fhir::canonical_pskel* exampleCanonical_parser_;
    ::fhir::url_pskel* relativePath_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Resource1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ImplementationGuide_Page1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    title ();

    virtual void
    anchor ();

    virtual void
    post_ImplementationGuide_Page1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* anchor */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    anchor_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ImplementationGuide_Page1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ImplementationGuide_Page1_pskel* ImplementationGuide_Page1_impl_;
    ImplementationGuide_Page1_pskel (ImplementationGuide_Page1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* anchor_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ImplementationGuide_Page1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class GuideParameterCode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GuideParameterCode_list ();

    // Constructor.
    //
    GuideParameterCode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuideParameterCode_list_pskel* GuideParameterCode_list_impl_;
    GuideParameterCode_list_pskel (GuideParameterCode_list_pskel*, void*);

    protected:
    static const char* const _xsde_GuideParameterCode_list_pskel_enums_[10UL];
  };

  class GuideParameterCode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_GuideParameterCode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::GuideParameterCode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::GuideParameterCode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GuideParameterCode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuideParameterCode_pskel* GuideParameterCode_impl_;
    GuideParameterCode_pskel (GuideParameterCode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::GuideParameterCode_list_pskel* value_parser_;
  };

  class SPDXLicense_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SPDXLicense_list ();

    // Constructor.
    //
    SPDXLicense_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SPDXLicense_list_pskel* SPDXLicense_list_impl_;
    SPDXLicense_list_pskel (SPDXLicense_list_pskel*, void*);

    protected:
    static const char* const _xsde_SPDXLicense_list_pskel_enums_[346UL];
  };

  class SPDXLicense_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SPDXLicense ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SPDXLicense_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SPDXLicense_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SPDXLicense_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SPDXLicense_pskel* SPDXLicense_impl_;
    SPDXLicense_pskel (SPDXLicense_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SPDXLicense_list_pskel* value_parser_;
  };

  class GuidePageGeneration_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_GuidePageGeneration_list ();

    // Constructor.
    //
    GuidePageGeneration_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuidePageGeneration_list_pskel* GuidePageGeneration_list_impl_;
    GuidePageGeneration_list_pskel (GuidePageGeneration_list_pskel*, void*);

    protected:
    static const char* const _xsde_GuidePageGeneration_list_pskel_enums_[4UL];
  };

  class GuidePageGeneration_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_GuidePageGeneration ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::GuidePageGeneration_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::GuidePageGeneration_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    GuidePageGeneration_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    GuidePageGeneration_pskel* GuidePageGeneration_impl_;
    GuidePageGeneration_pskel (GuidePageGeneration_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::GuidePageGeneration_list_pskel* value_parser_;
  };

  class InsurancePlan_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    name ();

    virtual void
    alias ();

    virtual void
    period ();

    virtual void
    ownedBy ();

    virtual void
    administeredBy ();

    virtual void
    coverageArea ();

    virtual void
    contact ();

    virtual void
    endpoint ();

    virtual void
    network ();

    virtual void
    coverage ();

    virtual void
    plan ();

    virtual void
    post_InsurancePlan ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* alias */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* ownedBy */,
             ::fhir::Reference_pskel& /* administeredBy */,
             ::fhir::Reference_pskel& /* coverageArea */,
             ::fhir::InsurancePlan_Contact_pskel& /* contact */,
             ::fhir::Reference_pskel& /* endpoint */,
             ::fhir::Reference_pskel& /* network */,
             ::fhir::InsurancePlan_Coverage_pskel& /* coverage */,
             ::fhir::InsurancePlan_Plan_pskel& /* plan */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    alias_parser (::fhir::string_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    ownedBy_parser (::fhir::Reference_pskel&);

    void
    administeredBy_parser (::fhir::Reference_pskel&);

    void
    coverageArea_parser (::fhir::Reference_pskel&);

    void
    contact_parser (::fhir::InsurancePlan_Contact_pskel&);

    void
    endpoint_parser (::fhir::Reference_pskel&);

    void
    network_parser (::fhir::Reference_pskel&);

    void
    coverage_parser (::fhir::InsurancePlan_Coverage_pskel&);

    void
    plan_parser (::fhir::InsurancePlan_Plan_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_pskel* InsurancePlan_impl_;
    InsurancePlan_pskel (InsurancePlan_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* alias_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* ownedBy_parser_;
    ::fhir::Reference_pskel* administeredBy_parser_;
    ::fhir::Reference_pskel* coverageArea_parser_;
    ::fhir::InsurancePlan_Contact_pskel* contact_parser_;
    ::fhir::Reference_pskel* endpoint_parser_;
    ::fhir::Reference_pskel* network_parser_;
    ::fhir::InsurancePlan_Coverage_pskel* coverage_parser_;
    ::fhir::InsurancePlan_Plan_pskel* plan_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Contact_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    purpose ();

    virtual void
    name ();

    virtual void
    telecom ();

    virtual void
    address ();

    virtual void
    post_InsurancePlan_Contact ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* purpose */,
             ::fhir::HumanName_pskel& /* name */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::Address_pskel& /* address */);

    // Individual element parsers.
    //
    void
    purpose_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::HumanName_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    address_parser (::fhir::Address_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Contact_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Contact_pskel* InsurancePlan_Contact_impl_;
    InsurancePlan_Contact_pskel (InsurancePlan_Contact_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* purpose_parser_;
    ::fhir::HumanName_pskel* name_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::Address_pskel* address_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Contact_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Coverage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    network ();

    virtual void
    benefit ();

    virtual void
    post_InsurancePlan_Coverage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* network */,
             ::fhir::InsurancePlan_Benefit_pskel& /* benefit */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    network_parser (::fhir::Reference_pskel&);

    void
    benefit_parser (::fhir::InsurancePlan_Benefit_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Coverage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Coverage_pskel* InsurancePlan_Coverage_impl_;
    InsurancePlan_Coverage_pskel (InsurancePlan_Coverage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* network_parser_;
    ::fhir::InsurancePlan_Benefit_pskel* benefit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Coverage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Benefit_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    requirement ();

    virtual void
    limit ();

    virtual void
    post_InsurancePlan_Benefit ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* requirement */,
             ::fhir::InsurancePlan_Limit_pskel& /* limit */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    requirement_parser (::fhir::string_pskel&);

    void
    limit_parser (::fhir::InsurancePlan_Limit_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Benefit_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Benefit_pskel* InsurancePlan_Benefit_impl_;
    InsurancePlan_Benefit_pskel (InsurancePlan_Benefit_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* requirement_parser_;
    ::fhir::InsurancePlan_Limit_pskel* limit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Benefit_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Limit_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    value ();

    virtual void
    code ();

    virtual void
    post_InsurancePlan_Limit ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* value */,
             ::fhir::CodeableConcept_pskel& /* code */);

    // Individual element parsers.
    //
    void
    value_parser (::fhir::Quantity_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Limit_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Limit_pskel* InsurancePlan_Limit_impl_;
    InsurancePlan_Limit_pskel (InsurancePlan_Limit_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* value_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Limit_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Plan_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    coverageArea ();

    virtual void
    network ();

    virtual void
    generalCost ();

    virtual void
    specificCost ();

    virtual void
    post_InsurancePlan_Plan ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* coverageArea */,
             ::fhir::Reference_pskel& /* network */,
             ::fhir::InsurancePlan_GeneralCost_pskel& /* generalCost */,
             ::fhir::InsurancePlan_SpecificCost_pskel& /* specificCost */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    coverageArea_parser (::fhir::Reference_pskel&);

    void
    network_parser (::fhir::Reference_pskel&);

    void
    generalCost_parser (::fhir::InsurancePlan_GeneralCost_pskel&);

    void
    specificCost_parser (::fhir::InsurancePlan_SpecificCost_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Plan_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Plan_pskel* InsurancePlan_Plan_impl_;
    InsurancePlan_Plan_pskel (InsurancePlan_Plan_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* coverageArea_parser_;
    ::fhir::Reference_pskel* network_parser_;
    ::fhir::InsurancePlan_GeneralCost_pskel* generalCost_parser_;
    ::fhir::InsurancePlan_SpecificCost_pskel* specificCost_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Plan_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_GeneralCost_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    groupSize ();

    virtual void
    cost ();

    virtual void
    comment ();

    virtual void
    post_InsurancePlan_GeneralCost ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::positiveInt_pskel& /* groupSize */,
             ::fhir::Money_pskel& /* cost */,
             ::fhir::string_pskel& /* comment */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    groupSize_parser (::fhir::positiveInt_pskel&);

    void
    cost_parser (::fhir::Money_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_GeneralCost_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_GeneralCost_pskel* InsurancePlan_GeneralCost_impl_;
    InsurancePlan_GeneralCost_pskel (InsurancePlan_GeneralCost_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::positiveInt_pskel* groupSize_parser_;
    ::fhir::Money_pskel* cost_parser_;
    ::fhir::string_pskel* comment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_GeneralCost_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_SpecificCost_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    benefit ();

    virtual void
    post_InsurancePlan_SpecificCost ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::InsurancePlan_Benefit1_pskel& /* benefit */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    benefit_parser (::fhir::InsurancePlan_Benefit1_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_SpecificCost_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_SpecificCost_pskel* InsurancePlan_SpecificCost_impl_;
    InsurancePlan_SpecificCost_pskel (InsurancePlan_SpecificCost_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::InsurancePlan_Benefit1_pskel* benefit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_SpecificCost_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Benefit1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    cost ();

    virtual void
    post_InsurancePlan_Benefit1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::InsurancePlan_Cost_pskel& /* cost */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    cost_parser (::fhir::InsurancePlan_Cost_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Benefit1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Benefit1_pskel* InsurancePlan_Benefit1_impl_;
    InsurancePlan_Benefit1_pskel (InsurancePlan_Benefit1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::InsurancePlan_Cost_pskel* cost_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Benefit1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Cost_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    applicability ();

    virtual void
    qualifiers ();

    virtual void
    value ();

    virtual void
    post_InsurancePlan_Cost ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* applicability */,
             ::fhir::CodeableConcept_pskel& /* qualifiers */,
             ::fhir::Quantity_pskel& /* value */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    applicability_parser (::fhir::CodeableConcept_pskel&);

    void
    qualifiers_parser (::fhir::CodeableConcept_pskel&);

    void
    value_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Cost_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Cost_pskel* InsurancePlan_Cost_impl_;
    InsurancePlan_Cost_pskel (InsurancePlan_Cost_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* applicability_parser_;
    ::fhir::CodeableConcept_pskel* qualifiers_parser_;
    ::fhir::Quantity_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Cost_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Invoice_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    cancelledReason ();

    virtual void
    type ();

    virtual void
    subject ();

    virtual void
    recipient ();

    virtual void
    date ();

    virtual void
    participant ();

    virtual void
    issuer ();

    virtual void
    account ();

    virtual void
    lineItem ();

    virtual void
    totalPriceComponent ();

    virtual void
    totalNet ();

    virtual void
    totalGross ();

    virtual void
    paymentTerms ();

    virtual void
    note ();

    virtual void
    post_Invoice ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::InvoiceStatus_pskel& /* status */,
             ::fhir::string_pskel& /* cancelledReason */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* recipient */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Invoice_Participant_pskel& /* participant */,
             ::fhir::Reference_pskel& /* issuer */,
             ::fhir::Reference_pskel& /* account */,
             ::fhir::Invoice_LineItem_pskel& /* lineItem */,
             ::fhir::Invoice_PriceComponent_pskel& /* totalPriceComponent */,
             ::fhir::Money_pskel& /* totalNet */,
             ::fhir::Money_pskel& /* totalGross */,
             ::fhir::markdown_pskel& /* paymentTerms */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::InvoiceStatus_pskel&);

    void
    cancelledReason_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    recipient_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    participant_parser (::fhir::Invoice_Participant_pskel&);

    void
    issuer_parser (::fhir::Reference_pskel&);

    void
    account_parser (::fhir::Reference_pskel&);

    void
    lineItem_parser (::fhir::Invoice_LineItem_pskel&);

    void
    totalPriceComponent_parser (::fhir::Invoice_PriceComponent_pskel&);

    void
    totalNet_parser (::fhir::Money_pskel&);

    void
    totalGross_parser (::fhir::Money_pskel&);

    void
    paymentTerms_parser (::fhir::markdown_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Invoice_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Invoice_pskel* Invoice_impl_;
    Invoice_pskel (Invoice_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::InvoiceStatus_pskel* status_parser_;
    ::fhir::string_pskel* cancelledReason_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* recipient_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Invoice_Participant_pskel* participant_parser_;
    ::fhir::Reference_pskel* issuer_parser_;
    ::fhir::Reference_pskel* account_parser_;
    ::fhir::Invoice_LineItem_pskel* lineItem_parser_;
    ::fhir::Invoice_PriceComponent_pskel* totalPriceComponent_parser_;
    ::fhir::Money_pskel* totalNet_parser_;
    ::fhir::Money_pskel* totalGross_parser_;
    ::fhir::markdown_pskel* paymentTerms_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Invoice_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Invoice_Participant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    role ();

    virtual void
    actor ();

    virtual void
    post_Invoice_Participant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::Reference_pskel& /* actor */);

    // Individual element parsers.
    //
    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Invoice_Participant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Invoice_Participant_pskel* Invoice_Participant_impl_;
    Invoice_Participant_pskel (Invoice_Participant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::Reference_pskel* actor_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Invoice_Participant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Invoice_LineItem_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequence ();

    virtual void
    chargeItemReference ();

    virtual void
    chargeItemCodeableConcept ();

    virtual void
    priceComponent ();

    virtual void
    post_Invoice_LineItem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* sequence */,
             ::fhir::Reference_pskel& /* chargeItemReference */,
             ::fhir::CodeableConcept_pskel& /* chargeItemCodeableConcept */,
             ::fhir::Invoice_PriceComponent_pskel& /* priceComponent */);

    // Individual element parsers.
    //
    void
    sequence_parser (::fhir::positiveInt_pskel&);

    void
    chargeItemReference_parser (::fhir::Reference_pskel&);

    void
    chargeItemCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    priceComponent_parser (::fhir::Invoice_PriceComponent_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Invoice_LineItem_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Invoice_LineItem_pskel* Invoice_LineItem_impl_;
    Invoice_LineItem_pskel (Invoice_LineItem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* sequence_parser_;
    ::fhir::Reference_pskel* chargeItemReference_parser_;
    ::fhir::CodeableConcept_pskel* chargeItemCodeableConcept_parser_;
    ::fhir::Invoice_PriceComponent_pskel* priceComponent_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Invoice_LineItem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Invoice_PriceComponent_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    code ();

    virtual void
    factor ();

    virtual void
    amount ();

    virtual void
    post_Invoice_PriceComponent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::InvoicePriceComponentType_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::Money_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::InvoicePriceComponentType_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    amount_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Invoice_PriceComponent_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Invoice_PriceComponent_pskel* Invoice_PriceComponent_impl_;
    Invoice_PriceComponent_pskel (Invoice_PriceComponent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::InvoicePriceComponentType_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::Money_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Invoice_PriceComponent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InvoiceStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_InvoiceStatus_list ();

    // Constructor.
    //
    InvoiceStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    InvoiceStatus_list_pskel* InvoiceStatus_list_impl_;
    InvoiceStatus_list_pskel (InvoiceStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_InvoiceStatus_list_pskel_enums_[5UL];
  };

  class InvoiceStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_InvoiceStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::InvoiceStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::InvoiceStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InvoiceStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    InvoiceStatus_pskel* InvoiceStatus_impl_;
    InvoiceStatus_pskel (InvoiceStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::InvoiceStatus_list_pskel* value_parser_;
  };

  class Library_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    subtitle ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    type ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    usage ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    parameter ();

    virtual void
    dataRequirement ();

    virtual void
    content ();

    virtual void
    post_Library ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::string_pskel& /* usage */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::ParameterDefinition_pskel& /* parameter */,
             ::fhir::DataRequirement_pskel& /* dataRequirement */,
             ::fhir::Attachment_pskel& /* content */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    usage_parser (::fhir::string_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    parameter_parser (::fhir::ParameterDefinition_pskel&);

    void
    dataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    content_parser (::fhir::Attachment_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Library_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Library_pskel* Library_impl_;
    Library_pskel (Library_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::string_pskel* usage_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::ParameterDefinition_pskel* parameter_parser_;
    ::fhir::DataRequirement_pskel* dataRequirement_parser_;
    ::fhir::Attachment_pskel* content_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Library_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Linkage_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    active ();

    virtual void
    author ();

    virtual void
    item ();

    virtual void
    post_Linkage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::Linkage_Item_pskel& /* item */);

    // Individual element parsers.
    //
    void
    active_parser (::fhir::boolean_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    item_parser (::fhir::Linkage_Item_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Linkage_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Linkage_pskel* Linkage_impl_;
    Linkage_pskel (Linkage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::Linkage_Item_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Linkage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Linkage_Item_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    resource ();

    virtual void
    post_Linkage_Item ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::LinkageType_pskel& /* type */,
             ::fhir::Reference_pskel& /* resource */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::LinkageType_pskel&);

    void
    resource_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Linkage_Item_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Linkage_Item_pskel* Linkage_Item_impl_;
    Linkage_Item_pskel (Linkage_Item_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::LinkageType_pskel* type_parser_;
    ::fhir::Reference_pskel* resource_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Linkage_Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class LinkageType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_LinkageType_list ();

    // Constructor.
    //
    LinkageType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    LinkageType_list_pskel* LinkageType_list_impl_;
    LinkageType_list_pskel (LinkageType_list_pskel*, void*);

    protected:
    static const char* const _xsde_LinkageType_list_pskel_enums_[3UL];
  };

  class LinkageType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_LinkageType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::LinkageType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::LinkageType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    LinkageType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    LinkageType_pskel* LinkageType_impl_;
    LinkageType_pskel (LinkageType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::LinkageType_list_pskel* value_parser_;
  };

  class List_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    mode ();

    virtual void
    title ();

    virtual void
    code ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    date ();

    virtual void
    source ();

    virtual void
    orderedBy ();

    virtual void
    note ();

    virtual void
    entry ();

    virtual void
    emptyReason ();

    virtual void
    post_List ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ListStatus_pskel& /* status */,
             ::fhir::ListMode_pskel& /* mode */,
             ::fhir::string_pskel& /* title */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* source */,
             ::fhir::CodeableConcept_pskel& /* orderedBy */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::List_Entry_pskel& /* entry */,
             ::fhir::CodeableConcept_pskel& /* emptyReason */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::ListStatus_pskel&);

    void
    mode_parser (::fhir::ListMode_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    void
    orderedBy_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    entry_parser (::fhir::List_Entry_pskel&);

    void
    emptyReason_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    List_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    List_pskel* List_impl_;
    List_pskel (List_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ListStatus_pskel* status_parser_;
    ::fhir::ListMode_pskel* mode_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* source_parser_;
    ::fhir::CodeableConcept_pskel* orderedBy_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::List_Entry_pskel* entry_parser_;
    ::fhir::CodeableConcept_pskel* emptyReason_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::List_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class List_Entry_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    flag ();

    virtual void
    deleted ();

    virtual void
    date ();

    virtual void
    item ();

    virtual void
    post_List_Entry ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* flag */,
             ::fhir::boolean_pskel& /* deleted */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* item */);

    // Individual element parsers.
    //
    void
    flag_parser (::fhir::CodeableConcept_pskel&);

    void
    deleted_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    item_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    List_Entry_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    List_Entry_pskel* List_Entry_impl_;
    List_Entry_pskel (List_Entry_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* flag_parser_;
    ::fhir::boolean_pskel* deleted_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::List_Entry_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ListStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ListStatus_list ();

    // Constructor.
    //
    ListStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ListStatus_list_pskel* ListStatus_list_impl_;
    ListStatus_list_pskel (ListStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ListStatus_list_pskel_enums_[3UL];
  };

  class ListStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ListStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ListStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ListStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ListStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ListStatus_pskel* ListStatus_impl_;
    ListStatus_pskel (ListStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ListStatus_list_pskel* value_parser_;
  };

  class Location_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    operationalStatus ();

    virtual void
    name ();

    virtual void
    alias ();

    virtual void
    description ();

    virtual void
    mode ();

    virtual void
    type ();

    virtual void
    telecom ();

    virtual void
    address ();

    virtual void
    physicalType ();

    virtual void
    position ();

    virtual void
    managingOrganization ();

    virtual void
    partOf ();

    virtual void
    hoursOfOperation ();

    virtual void
    availabilityExceptions ();

    virtual void
    endpoint ();

    virtual void
    post_Location ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::LocationStatus_pskel& /* status */,
             ::fhir::Coding_pskel& /* operationalStatus */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* alias */,
             ::fhir::string_pskel& /* description */,
             ::fhir::LocationMode_pskel& /* mode */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::Address_pskel& /* address */,
             ::fhir::CodeableConcept_pskel& /* physicalType */,
             ::fhir::Location_Position_pskel& /* position */,
             ::fhir::Reference_pskel& /* managingOrganization */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::Location_HoursOfOperation_pskel& /* hoursOfOperation */,
             ::fhir::string_pskel& /* availabilityExceptions */,
             ::fhir::Reference_pskel& /* endpoint */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::LocationStatus_pskel&);

    void
    operationalStatus_parser (::fhir::Coding_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    alias_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    mode_parser (::fhir::LocationMode_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    address_parser (::fhir::Address_pskel&);

    void
    physicalType_parser (::fhir::CodeableConcept_pskel&);

    void
    position_parser (::fhir::Location_Position_pskel&);

    void
    managingOrganization_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    hoursOfOperation_parser (::fhir::Location_HoursOfOperation_pskel&);

    void
    availabilityExceptions_parser (::fhir::string_pskel&);

    void
    endpoint_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Location_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Location_pskel* Location_impl_;
    Location_pskel (Location_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::LocationStatus_pskel* status_parser_;
    ::fhir::Coding_pskel* operationalStatus_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* alias_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::LocationMode_pskel* mode_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::Address_pskel* address_parser_;
    ::fhir::CodeableConcept_pskel* physicalType_parser_;
    ::fhir::Location_Position_pskel* position_parser_;
    ::fhir::Reference_pskel* managingOrganization_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::Location_HoursOfOperation_pskel* hoursOfOperation_parser_;
    ::fhir::string_pskel* availabilityExceptions_parser_;
    ::fhir::Reference_pskel* endpoint_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Location_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Location_Position_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    longitude ();

    virtual void
    latitude ();

    virtual void
    altitude ();

    virtual void
    post_Location_Position ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::decimal_pskel& /* longitude */,
             ::fhir::decimal_pskel& /* latitude */,
             ::fhir::decimal_pskel& /* altitude */);

    // Individual element parsers.
    //
    void
    longitude_parser (::fhir::decimal_pskel&);

    void
    latitude_parser (::fhir::decimal_pskel&);

    void
    altitude_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Location_Position_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Location_Position_pskel* Location_Position_impl_;
    Location_Position_pskel (Location_Position_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::decimal_pskel* longitude_parser_;
    ::fhir::decimal_pskel* latitude_parser_;
    ::fhir::decimal_pskel* altitude_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Location_Position_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Location_HoursOfOperation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    daysOfWeek ();

    virtual void
    allDay ();

    virtual void
    openingTime ();

    virtual void
    closingTime ();

    virtual void
    post_Location_HoursOfOperation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::DaysOfWeek_pskel& /* daysOfWeek */,
             ::fhir::boolean_pskel& /* allDay */,
             ::fhir::time_pskel& /* openingTime */,
             ::fhir::time_pskel& /* closingTime */);

    // Individual element parsers.
    //
    void
    daysOfWeek_parser (::fhir::DaysOfWeek_pskel&);

    void
    allDay_parser (::fhir::boolean_pskel&);

    void
    openingTime_parser (::fhir::time_pskel&);

    void
    closingTime_parser (::fhir::time_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Location_HoursOfOperation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Location_HoursOfOperation_pskel* Location_HoursOfOperation_impl_;
    Location_HoursOfOperation_pskel (Location_HoursOfOperation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::DaysOfWeek_pskel* daysOfWeek_parser_;
    ::fhir::boolean_pskel* allDay_parser_;
    ::fhir::time_pskel* openingTime_parser_;
    ::fhir::time_pskel* closingTime_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Location_HoursOfOperation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class LocationMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_LocationMode_list ();

    // Constructor.
    //
    LocationMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    LocationMode_list_pskel* LocationMode_list_impl_;
    LocationMode_list_pskel (LocationMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_LocationMode_list_pskel_enums_[2UL];
  };

  class LocationMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_LocationMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::LocationMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::LocationMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    LocationMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    LocationMode_pskel* LocationMode_impl_;
    LocationMode_pskel (LocationMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::LocationMode_list_pskel* value_parser_;
  };

  class LocationStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_LocationStatus_list ();

    // Constructor.
    //
    LocationStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    LocationStatus_list_pskel* LocationStatus_list_impl_;
    LocationStatus_list_pskel (LocationStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_LocationStatus_list_pskel_enums_[3UL];
  };

  class LocationStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_LocationStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::LocationStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::LocationStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    LocationStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    LocationStatus_pskel* LocationStatus_impl_;
    LocationStatus_pskel (LocationStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::LocationStatus_list_pskel* value_parser_;
  };

  class Measure_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    subtitle ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    usage ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    library ();

    virtual void
    disclaimer ();

    virtual void
    scoring ();

    virtual void
    compositeScoring ();

    virtual void
    type ();

    virtual void
    riskAdjustment ();

    virtual void
    rateAggregation ();

    virtual void
    rationale ();

    virtual void
    clinicalRecommendationStatement ();

    virtual void
    improvementNotation ();

    virtual void
    definition ();

    virtual void
    guidance ();

    virtual void
    group ();

    virtual void
    supplementalData ();

    virtual void
    post_Measure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::string_pskel& /* usage */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::canonical_pskel& /* library */,
             ::fhir::markdown_pskel& /* disclaimer */,
             ::fhir::CodeableConcept_pskel& /* scoring */,
             ::fhir::CodeableConcept_pskel& /* compositeScoring */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* riskAdjustment */,
             ::fhir::string_pskel& /* rateAggregation */,
             ::fhir::markdown_pskel& /* rationale */,
             ::fhir::markdown_pskel& /* clinicalRecommendationStatement */,
             ::fhir::CodeableConcept_pskel& /* improvementNotation */,
             ::fhir::markdown_pskel& /* definition */,
             ::fhir::markdown_pskel& /* guidance */,
             ::fhir::Measure_Group_pskel& /* group */,
             ::fhir::Measure_SupplementalData_pskel& /* supplementalData */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    usage_parser (::fhir::string_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    library_parser (::fhir::canonical_pskel&);

    void
    disclaimer_parser (::fhir::markdown_pskel&);

    void
    scoring_parser (::fhir::CodeableConcept_pskel&);

    void
    compositeScoring_parser (::fhir::CodeableConcept_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    riskAdjustment_parser (::fhir::string_pskel&);

    void
    rateAggregation_parser (::fhir::string_pskel&);

    void
    rationale_parser (::fhir::markdown_pskel&);

    void
    clinicalRecommendationStatement_parser (::fhir::markdown_pskel&);

    void
    improvementNotation_parser (::fhir::CodeableConcept_pskel&);

    void
    definition_parser (::fhir::markdown_pskel&);

    void
    guidance_parser (::fhir::markdown_pskel&);

    void
    group_parser (::fhir::Measure_Group_pskel&);

    void
    supplementalData_parser (::fhir::Measure_SupplementalData_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Measure_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Measure_pskel* Measure_impl_;
    Measure_pskel (Measure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::string_pskel* usage_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::canonical_pskel* library_parser_;
    ::fhir::markdown_pskel* disclaimer_parser_;
    ::fhir::CodeableConcept_pskel* scoring_parser_;
    ::fhir::CodeableConcept_pskel* compositeScoring_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* riskAdjustment_parser_;
    ::fhir::string_pskel* rateAggregation_parser_;
    ::fhir::markdown_pskel* rationale_parser_;
    ::fhir::markdown_pskel* clinicalRecommendationStatement_parser_;
    ::fhir::CodeableConcept_pskel* improvementNotation_parser_;
    ::fhir::markdown_pskel* definition_parser_;
    ::fhir::markdown_pskel* guidance_parser_;
    ::fhir::Measure_Group_pskel* group_parser_;
    ::fhir::Measure_SupplementalData_pskel* supplementalData_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Measure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Measure_Group_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    description ();

    virtual void
    population ();

    virtual void
    stratifier ();

    virtual void
    post_Measure_Group ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Measure_Population_pskel& /* population */,
             ::fhir::Measure_Stratifier_pskel& /* stratifier */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    population_parser (::fhir::Measure_Population_pskel&);

    void
    stratifier_parser (::fhir::Measure_Stratifier_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Measure_Group_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Measure_Group_pskel* Measure_Group_impl_;
    Measure_Group_pskel (Measure_Group_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Measure_Population_pskel* population_parser_;
    ::fhir::Measure_Stratifier_pskel* stratifier_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Measure_Group_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Measure_Population_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    description ();

    virtual void
    criteria ();

    virtual void
    post_Measure_Population ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Expression_pskel& /* criteria */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    criteria_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Measure_Population_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Measure_Population_pskel* Measure_Population_impl_;
    Measure_Population_pskel (Measure_Population_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Expression_pskel* criteria_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Measure_Population_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Measure_Stratifier_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    description ();

    virtual void
    criteria ();

    virtual void
    component ();

    virtual void
    post_Measure_Stratifier ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Expression_pskel& /* criteria */,
             ::fhir::Measure_Component_pskel& /* component */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    criteria_parser (::fhir::Expression_pskel&);

    void
    component_parser (::fhir::Measure_Component_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Measure_Stratifier_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Measure_Stratifier_pskel* Measure_Stratifier_impl_;
    Measure_Stratifier_pskel (Measure_Stratifier_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Expression_pskel* criteria_parser_;
    ::fhir::Measure_Component_pskel* component_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Measure_Stratifier_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Measure_Component_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    description ();

    virtual void
    criteria ();

    virtual void
    post_Measure_Component ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Expression_pskel& /* criteria */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    criteria_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Measure_Component_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Measure_Component_pskel* Measure_Component_impl_;
    Measure_Component_pskel (Measure_Component_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Expression_pskel* criteria_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Measure_Component_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Measure_SupplementalData_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    usage ();

    virtual void
    description ();

    virtual void
    criteria ();

    virtual void
    post_Measure_SupplementalData ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* usage */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Expression_pskel& /* criteria */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    usage_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    criteria_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Measure_SupplementalData_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Measure_SupplementalData_pskel* Measure_SupplementalData_impl_;
    Measure_SupplementalData_pskel (Measure_SupplementalData_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* usage_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Expression_pskel* criteria_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Measure_SupplementalData_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    measure ();

    virtual void
    subject ();

    virtual void
    date ();

    virtual void
    reporter ();

    virtual void
    period ();

    virtual void
    improvementNotation ();

    virtual void
    group ();

    virtual void
    evaluatedResource ();

    virtual void
    post_MeasureReport ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::MeasureReportStatus_pskel& /* status */,
             ::fhir::MeasureReportType_pskel& /* type */,
             ::fhir::canonical_pskel& /* measure */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::Reference_pskel& /* reporter */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::CodeableConcept_pskel& /* improvementNotation */,
             ::fhir::MeasureReport_Group_pskel& /* group */,
             ::fhir::Reference_pskel& /* evaluatedResource */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::MeasureReportStatus_pskel&);

    void
    type_parser (::fhir::MeasureReportType_pskel&);

    void
    measure_parser (::fhir::canonical_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    reporter_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    improvementNotation_parser (::fhir::CodeableConcept_pskel&);

    void
    group_parser (::fhir::MeasureReport_Group_pskel&);

    void
    evaluatedResource_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_pskel* MeasureReport_impl_;
    MeasureReport_pskel (MeasureReport_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::MeasureReportStatus_pskel* status_parser_;
    ::fhir::MeasureReportType_pskel* type_parser_;
    ::fhir::canonical_pskel* measure_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::Reference_pskel* reporter_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::CodeableConcept_pskel* improvementNotation_parser_;
    ::fhir::MeasureReport_Group_pskel* group_parser_;
    ::fhir::Reference_pskel* evaluatedResource_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Group_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    population ();

    virtual void
    measureScore ();

    virtual void
    stratifier ();

    virtual void
    post_MeasureReport_Group ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::MeasureReport_Population_pskel& /* population */,
             ::fhir::Quantity_pskel& /* measureScore */,
             ::fhir::MeasureReport_Stratifier_pskel& /* stratifier */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    population_parser (::fhir::MeasureReport_Population_pskel&);

    void
    measureScore_parser (::fhir::Quantity_pskel&);

    void
    stratifier_parser (::fhir::MeasureReport_Stratifier_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Group_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Group_pskel* MeasureReport_Group_impl_;
    MeasureReport_Group_pskel (MeasureReport_Group_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::MeasureReport_Population_pskel* population_parser_;
    ::fhir::Quantity_pskel* measureScore_parser_;
    ::fhir::MeasureReport_Stratifier_pskel* stratifier_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Group_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Population_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    count ();

    virtual void
    subjectResults ();

    virtual void
    post_MeasureReport_Population ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::integer_pskel& /* count */,
             ::fhir::Reference_pskel& /* subjectResults */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    count_parser (::fhir::integer_pskel&);

    void
    subjectResults_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Population_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Population_pskel* MeasureReport_Population_impl_;
    MeasureReport_Population_pskel (MeasureReport_Population_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::integer_pskel* count_parser_;
    ::fhir::Reference_pskel* subjectResults_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Population_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Stratifier_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    stratum ();

    virtual void
    post_MeasureReport_Stratifier ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::MeasureReport_Stratum_pskel& /* stratum */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    stratum_parser (::fhir::MeasureReport_Stratum_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Stratifier_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Stratifier_pskel* MeasureReport_Stratifier_impl_;
    MeasureReport_Stratifier_pskel (MeasureReport_Stratifier_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::MeasureReport_Stratum_pskel* stratum_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Stratifier_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Stratum_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    value ();

    virtual void
    component ();

    virtual void
    population ();

    virtual void
    measureScore ();

    virtual void
    post_MeasureReport_Stratum ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* value */,
             ::fhir::MeasureReport_Component_pskel& /* component */,
             ::fhir::MeasureReport_Population1_pskel& /* population */,
             ::fhir::Quantity_pskel& /* measureScore */);

    // Individual element parsers.
    //
    void
    value_parser (::fhir::CodeableConcept_pskel&);

    void
    component_parser (::fhir::MeasureReport_Component_pskel&);

    void
    population_parser (::fhir::MeasureReport_Population1_pskel&);

    void
    measureScore_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Stratum_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Stratum_pskel* MeasureReport_Stratum_impl_;
    MeasureReport_Stratum_pskel (MeasureReport_Stratum_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* value_parser_;
    ::fhir::MeasureReport_Component_pskel* component_parser_;
    ::fhir::MeasureReport_Population1_pskel* population_parser_;
    ::fhir::Quantity_pskel* measureScore_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Stratum_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Component_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    value ();

    virtual void
    post_MeasureReport_Component ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* value */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    value_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Component_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Component_pskel* MeasureReport_Component_impl_;
    MeasureReport_Component_pskel (MeasureReport_Component_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Component_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReport_Population1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    count ();

    virtual void
    subjectResults ();

    virtual void
    post_MeasureReport_Population1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::integer_pskel& /* count */,
             ::fhir::Reference_pskel& /* subjectResults */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    count_parser (::fhir::integer_pskel&);

    void
    subjectResults_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReport_Population1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReport_Population1_pskel* MeasureReport_Population1_impl_;
    MeasureReport_Population1_pskel (MeasureReport_Population1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::integer_pskel* count_parser_;
    ::fhir::Reference_pskel* subjectResults_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MeasureReport_Population1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MeasureReportStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MeasureReportStatus_list ();

    // Constructor.
    //
    MeasureReportStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReportStatus_list_pskel* MeasureReportStatus_list_impl_;
    MeasureReportStatus_list_pskel (MeasureReportStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_MeasureReportStatus_list_pskel_enums_[3UL];
  };

  class MeasureReportStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_MeasureReportStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::MeasureReportStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::MeasureReportStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReportStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReportStatus_pskel* MeasureReportStatus_impl_;
    MeasureReportStatus_pskel (MeasureReportStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::MeasureReportStatus_list_pskel* value_parser_;
  };

  class MeasureReportType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MeasureReportType_list ();

    // Constructor.
    //
    MeasureReportType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReportType_list_pskel* MeasureReportType_list_impl_;
    MeasureReportType_list_pskel (MeasureReportType_list_pskel*, void*);

    protected:
    static const char* const _xsde_MeasureReportType_list_pskel_enums_[4UL];
  };

  class MeasureReportType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_MeasureReportType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::MeasureReportType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::MeasureReportType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MeasureReportType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    MeasureReportType_pskel* MeasureReportType_impl_;
    MeasureReportType_pskel (MeasureReportType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::MeasureReportType_list_pskel* value_parser_;
  };

  class Media_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    basedOn ();

    virtual void
    partOf ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    modality ();

    virtual void
    view ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    createdDateTime ();

    virtual void
    createdPeriod ();

    virtual void
    issued ();

    virtual void
    operator_ ();

    virtual void
    reasonCode ();

    virtual void
    bodySite ();

    virtual void
    deviceName ();

    virtual void
    device ();

    virtual void
    height ();

    virtual void
    width ();

    virtual void
    frames ();

    virtual void
    duration ();

    virtual void
    content ();

    virtual void
    note ();

    virtual void
    post_Media ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::EventStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* modality */,
             ::fhir::CodeableConcept_pskel& /* view */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* createdDateTime */,
             ::fhir::Period_pskel& /* createdPeriod */,
             ::fhir::instant_pskel& /* issued */,
             ::fhir::Reference_pskel& /* operator */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::string_pskel& /* deviceName */,
             ::fhir::Reference_pskel& /* device */,
             ::fhir::positiveInt_pskel& /* height */,
             ::fhir::positiveInt_pskel& /* width */,
             ::fhir::positiveInt_pskel& /* frames */,
             ::fhir::decimal_pskel& /* duration */,
             ::fhir::Attachment_pskel& /* content */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::EventStatus_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    modality_parser (::fhir::CodeableConcept_pskel&);

    void
    view_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    createdDateTime_parser (::fhir::dateTime_pskel&);

    void
    createdPeriod_parser (::fhir::Period_pskel&);

    void
    issued_parser (::fhir::instant_pskel&);

    void
    operator__parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    deviceName_parser (::fhir::string_pskel&);

    void
    device_parser (::fhir::Reference_pskel&);

    void
    height_parser (::fhir::positiveInt_pskel&);

    void
    width_parser (::fhir::positiveInt_pskel&);

    void
    frames_parser (::fhir::positiveInt_pskel&);

    void
    duration_parser (::fhir::decimal_pskel&);

    void
    content_parser (::fhir::Attachment_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Media_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Media_pskel* Media_impl_;
    Media_pskel (Media_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::EventStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* modality_parser_;
    ::fhir::CodeableConcept_pskel* view_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* createdDateTime_parser_;
    ::fhir::Period_pskel* createdPeriod_parser_;
    ::fhir::instant_pskel* issued_parser_;
    ::fhir::Reference_pskel* operator__parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::string_pskel* deviceName_parser_;
    ::fhir::Reference_pskel* device_parser_;
    ::fhir::positiveInt_pskel* height_parser_;
    ::fhir::positiveInt_pskel* width_parser_;
    ::fhir::positiveInt_pskel* frames_parser_;
    ::fhir::decimal_pskel* duration_parser_;
    ::fhir::Attachment_pskel* content_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Media_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Medication_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    code ();

    virtual void
    status ();

    virtual void
    manufacturer ();

    virtual void
    form ();

    virtual void
    amount ();

    virtual void
    ingredient ();

    virtual void
    batch ();

    virtual void
    post_Medication ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::MedicationStatusCodes_pskel& /* status */,
             ::fhir::Reference_pskel& /* manufacturer */,
             ::fhir::CodeableConcept_pskel& /* form */,
             ::fhir::Ratio_pskel& /* amount */,
             ::fhir::Medication_Ingredient_pskel& /* ingredient */,
             ::fhir::Medication_Batch_pskel& /* batch */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::MedicationStatusCodes_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    void
    form_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Ratio_pskel&);

    void
    ingredient_parser (::fhir::Medication_Ingredient_pskel&);

    void
    batch_parser (::fhir::Medication_Batch_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Medication_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Medication_pskel* Medication_impl_;
    Medication_pskel (Medication_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::MedicationStatusCodes_pskel* status_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;
    ::fhir::CodeableConcept_pskel* form_parser_;
    ::fhir::Ratio_pskel* amount_parser_;
    ::fhir::Medication_Ingredient_pskel* ingredient_parser_;
    ::fhir::Medication_Batch_pskel* batch_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Medication_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Medication_Ingredient_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    itemCodeableConcept ();

    virtual void
    itemReference ();

    virtual void
    isActive ();

    virtual void
    strength ();

    virtual void
    post_Medication_Ingredient ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* itemCodeableConcept */,
             ::fhir::Reference_pskel& /* itemReference */,
             ::fhir::boolean_pskel& /* isActive */,
             ::fhir::Ratio_pskel& /* strength */);

    // Individual element parsers.
    //
    void
    itemCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    itemReference_parser (::fhir::Reference_pskel&);

    void
    isActive_parser (::fhir::boolean_pskel&);

    void
    strength_parser (::fhir::Ratio_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Medication_Ingredient_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Medication_Ingredient_pskel* Medication_Ingredient_impl_;
    Medication_Ingredient_pskel (Medication_Ingredient_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* itemCodeableConcept_parser_;
    ::fhir::Reference_pskel* itemReference_parser_;
    ::fhir::boolean_pskel* isActive_parser_;
    ::fhir::Ratio_pskel* strength_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Medication_Ingredient_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Medication_Batch_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    lotNumber ();

    virtual void
    expirationDate ();

    virtual void
    post_Medication_Batch ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* lotNumber */,
             ::fhir::dateTime_pskel& /* expirationDate */);

    // Individual element parsers.
    //
    void
    lotNumber_parser (::fhir::string_pskel&);

    void
    expirationDate_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Medication_Batch_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Medication_Batch_pskel* Medication_Batch_impl_;
    Medication_Batch_pskel (Medication_Batch_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* lotNumber_parser_;
    ::fhir::dateTime_pskel* expirationDate_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Medication_Batch_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationStatusCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MedicationStatusCodes_list ();

    // Constructor.
    //
    MedicationStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationStatusCodes_list_pskel* MedicationStatusCodes_list_impl_;
    MedicationStatusCodes_list_pskel (MedicationStatusCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_MedicationStatusCodes_list_pskel_enums_[3UL];
  };

  class MedicationStatusCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_MedicationStatusCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::MedicationStatusCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::MedicationStatusCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationStatusCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationStatusCodes_pskel* MedicationStatusCodes_impl_;
    MedicationStatusCodes_pskel (MedicationStatusCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::MedicationStatusCodes_list_pskel* value_parser_;
  };

  class MedicationAdministration_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiates ();

    virtual void
    partOf ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    category ();

    virtual void
    medicationCodeableConcept ();

    virtual void
    medicationReference ();

    virtual void
    subject ();

    virtual void
    context ();

    virtual void
    supportingInformation ();

    virtual void
    effectiveDateTime ();

    virtual void
    effectivePeriod ();

    virtual void
    performer ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    request ();

    virtual void
    device ();

    virtual void
    note ();

    virtual void
    dosage ();

    virtual void
    eventHistory ();

    virtual void
    post_MedicationAdministration ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::uri_pskel& /* instantiates */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::code_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* medicationCodeableConcept */,
             ::fhir::Reference_pskel& /* medicationReference */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* context */,
             ::fhir::Reference_pskel& /* supportingInformation */,
             ::fhir::dateTime_pskel& /* effectiveDateTime */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::MedicationAdministration_Performer_pskel& /* performer */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Reference_pskel& /* request */,
             ::fhir::Reference_pskel& /* device */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::MedicationAdministration_Dosage_pskel& /* dosage */,
             ::fhir::Reference_pskel& /* eventHistory */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiates_parser (::fhir::uri_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::code_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationReference_parser (::fhir::Reference_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    context_parser (::fhir::Reference_pskel&);

    void
    supportingInformation_parser (::fhir::Reference_pskel&);

    void
    effectiveDateTime_parser (::fhir::dateTime_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    performer_parser (::fhir::MedicationAdministration_Performer_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    request_parser (::fhir::Reference_pskel&);

    void
    device_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    dosage_parser (::fhir::MedicationAdministration_Dosage_pskel&);

    void
    eventHistory_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationAdministration_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationAdministration_pskel* MedicationAdministration_impl_;
    MedicationAdministration_pskel (MedicationAdministration_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::uri_pskel* instantiates_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::code_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* medicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* medicationReference_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* context_parser_;
    ::fhir::Reference_pskel* supportingInformation_parser_;
    ::fhir::dateTime_pskel* effectiveDateTime_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::MedicationAdministration_Performer_pskel* performer_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Reference_pskel* request_parser_;
    ::fhir::Reference_pskel* device_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::MedicationAdministration_Dosage_pskel* dosage_parser_;
    ::fhir::Reference_pskel* eventHistory_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationAdministration_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationAdministration_Performer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    function ();

    virtual void
    actor ();

    virtual void
    post_MedicationAdministration_Performer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* function */,
             ::fhir::Reference_pskel& /* actor */);

    // Individual element parsers.
    //
    void
    function_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationAdministration_Performer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationAdministration_Performer_pskel* MedicationAdministration_Performer_impl_;
    MedicationAdministration_Performer_pskel (MedicationAdministration_Performer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* function_parser_;
    ::fhir::Reference_pskel* actor_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationAdministration_Performer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationAdministration_Dosage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    text ();

    virtual void
    site ();

    virtual void
    route ();

    virtual void
    method ();

    virtual void
    dose ();

    virtual void
    rateRatio ();

    virtual void
    rateQuantity ();

    virtual void
    post_MedicationAdministration_Dosage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* text */,
             ::fhir::CodeableConcept_pskel& /* site */,
             ::fhir::CodeableConcept_pskel& /* route */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::Quantity_pskel& /* dose */,
             ::fhir::Ratio_pskel& /* rateRatio */,
             ::fhir::Quantity_pskel& /* rateQuantity */);

    // Individual element parsers.
    //
    void
    text_parser (::fhir::string_pskel&);

    void
    site_parser (::fhir::CodeableConcept_pskel&);

    void
    route_parser (::fhir::CodeableConcept_pskel&);

    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    dose_parser (::fhir::Quantity_pskel&);

    void
    rateRatio_parser (::fhir::Ratio_pskel&);

    void
    rateQuantity_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationAdministration_Dosage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationAdministration_Dosage_pskel* MedicationAdministration_Dosage_impl_;
    MedicationAdministration_Dosage_pskel (MedicationAdministration_Dosage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* text_parser_;
    ::fhir::CodeableConcept_pskel* site_parser_;
    ::fhir::CodeableConcept_pskel* route_parser_;
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::Quantity_pskel* dose_parser_;
    ::fhir::Ratio_pskel* rateRatio_parser_;
    ::fhir::Quantity_pskel* rateQuantity_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationAdministration_Dosage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationDispense_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    partOf ();

    virtual void
    status ();

    virtual void
    statusReasonCodeableConcept ();

    virtual void
    statusReasonReference ();

    virtual void
    category ();

    virtual void
    medicationCodeableConcept ();

    virtual void
    medicationReference ();

    virtual void
    subject ();

    virtual void
    context ();

    virtual void
    supportingInformation ();

    virtual void
    performer ();

    virtual void
    location ();

    virtual void
    authorizingPrescription ();

    virtual void
    type ();

    virtual void
    quantity ();

    virtual void
    daysSupply ();

    virtual void
    whenPrepared ();

    virtual void
    whenHandedOver ();

    virtual void
    destination ();

    virtual void
    receiver ();

    virtual void
    note ();

    virtual void
    dosageInstruction ();

    virtual void
    substitution ();

    virtual void
    detectedIssue ();

    virtual void
    eventHistory ();

    virtual void
    post_MedicationDispense ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::code_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReasonCodeableConcept */,
             ::fhir::Reference_pskel& /* statusReasonReference */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* medicationCodeableConcept */,
             ::fhir::Reference_pskel& /* medicationReference */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* context */,
             ::fhir::Reference_pskel& /* supportingInformation */,
             ::fhir::MedicationDispense_Performer_pskel& /* performer */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::Reference_pskel& /* authorizingPrescription */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Quantity_pskel& /* daysSupply */,
             ::fhir::dateTime_pskel& /* whenPrepared */,
             ::fhir::dateTime_pskel& /* whenHandedOver */,
             ::fhir::Reference_pskel& /* destination */,
             ::fhir::Reference_pskel& /* receiver */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::Dosage_pskel& /* dosageInstruction */,
             ::fhir::MedicationDispense_Substitution_pskel& /* substitution */,
             ::fhir::Reference_pskel& /* detectedIssue */,
             ::fhir::Reference_pskel& /* eventHistory */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::code_pskel&);

    void
    statusReasonCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    statusReasonReference_parser (::fhir::Reference_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationReference_parser (::fhir::Reference_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    context_parser (::fhir::Reference_pskel&);

    void
    supportingInformation_parser (::fhir::Reference_pskel&);

    void
    performer_parser (::fhir::MedicationDispense_Performer_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    authorizingPrescription_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    daysSupply_parser (::fhir::Quantity_pskel&);

    void
    whenPrepared_parser (::fhir::dateTime_pskel&);

    void
    whenHandedOver_parser (::fhir::dateTime_pskel&);

    void
    destination_parser (::fhir::Reference_pskel&);

    void
    receiver_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    dosageInstruction_parser (::fhir::Dosage_pskel&);

    void
    substitution_parser (::fhir::MedicationDispense_Substitution_pskel&);

    void
    detectedIssue_parser (::fhir::Reference_pskel&);

    void
    eventHistory_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationDispense_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationDispense_pskel* MedicationDispense_impl_;
    MedicationDispense_pskel (MedicationDispense_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::code_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReasonCodeableConcept_parser_;
    ::fhir::Reference_pskel* statusReasonReference_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* medicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* medicationReference_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* context_parser_;
    ::fhir::Reference_pskel* supportingInformation_parser_;
    ::fhir::MedicationDispense_Performer_pskel* performer_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::Reference_pskel* authorizingPrescription_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Quantity_pskel* daysSupply_parser_;
    ::fhir::dateTime_pskel* whenPrepared_parser_;
    ::fhir::dateTime_pskel* whenHandedOver_parser_;
    ::fhir::Reference_pskel* destination_parser_;
    ::fhir::Reference_pskel* receiver_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::Dosage_pskel* dosageInstruction_parser_;
    ::fhir::MedicationDispense_Substitution_pskel* substitution_parser_;
    ::fhir::Reference_pskel* detectedIssue_parser_;
    ::fhir::Reference_pskel* eventHistory_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationDispense_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationDispense_Performer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    function ();

    virtual void
    actor ();

    virtual void
    post_MedicationDispense_Performer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* function */,
             ::fhir::Reference_pskel& /* actor */);

    // Individual element parsers.
    //
    void
    function_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationDispense_Performer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationDispense_Performer_pskel* MedicationDispense_Performer_impl_;
    MedicationDispense_Performer_pskel (MedicationDispense_Performer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* function_parser_;
    ::fhir::Reference_pskel* actor_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationDispense_Performer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationDispense_Substitution_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    wasSubstituted ();

    virtual void
    type ();

    virtual void
    reason ();

    virtual void
    responsibleParty ();

    virtual void
    post_MedicationDispense_Substitution ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* wasSubstituted */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* reason */,
             ::fhir::Reference_pskel& /* responsibleParty */);

    // Individual element parsers.
    //
    void
    wasSubstituted_parser (::fhir::boolean_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    void
    responsibleParty_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationDispense_Substitution_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationDispense_Substitution_pskel* MedicationDispense_Substitution_impl_;
    MedicationDispense_Substitution_pskel (MedicationDispense_Substitution_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* wasSubstituted_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;
    ::fhir::Reference_pskel* responsibleParty_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationDispense_Substitution_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    status ();

    virtual void
    manufacturer ();

    virtual void
    doseForm ();

    virtual void
    amount ();

    virtual void
    synonym ();

    virtual void
    relatedMedicationKnowledge ();

    virtual void
    associatedMedication ();

    virtual void
    productType ();

    virtual void
    monograph ();

    virtual void
    ingredient ();

    virtual void
    preparationInstruction ();

    virtual void
    intendedRoute ();

    virtual void
    cost ();

    virtual void
    monitoringProgram ();

    virtual void
    administrationGuidelines ();

    virtual void
    medicineClassification ();

    virtual void
    packaging ();

    virtual void
    drugCharacteristic ();

    virtual void
    contraindication ();

    virtual void
    regulatory ();

    virtual void
    kinetics ();

    virtual void
    post_MedicationKnowledge ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::code_pskel& /* status */,
             ::fhir::Reference_pskel& /* manufacturer */,
             ::fhir::CodeableConcept_pskel& /* doseForm */,
             ::fhir::Quantity_pskel& /* amount */,
             ::fhir::string_pskel& /* synonym */,
             ::fhir::MedicationKnowledge_RelatedMedicationKnowledge_pskel& /* relatedMedicationKnowledge */,
             ::fhir::Reference_pskel& /* associatedMedication */,
             ::fhir::CodeableConcept_pskel& /* productType */,
             ::fhir::MedicationKnowledge_Monograph_pskel& /* monograph */,
             ::fhir::MedicationKnowledge_Ingredient_pskel& /* ingredient */,
             ::fhir::markdown_pskel& /* preparationInstruction */,
             ::fhir::CodeableConcept_pskel& /* intendedRoute */,
             ::fhir::MedicationKnowledge_Cost_pskel& /* cost */,
             ::fhir::MedicationKnowledge_MonitoringProgram_pskel& /* monitoringProgram */,
             ::fhir::MedicationKnowledge_AdministrationGuidelines_pskel& /* administrationGuidelines */,
             ::fhir::MedicationKnowledge_MedicineClassification_pskel& /* medicineClassification */,
             ::fhir::MedicationKnowledge_Packaging_pskel& /* packaging */,
             ::fhir::MedicationKnowledge_DrugCharacteristic_pskel& /* drugCharacteristic */,
             ::fhir::Reference_pskel& /* contraindication */,
             ::fhir::MedicationKnowledge_Regulatory_pskel& /* regulatory */,
             ::fhir::MedicationKnowledge_Kinetics_pskel& /* kinetics */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::code_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    void
    doseForm_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Quantity_pskel&);

    void
    synonym_parser (::fhir::string_pskel&);

    void
    relatedMedicationKnowledge_parser (::fhir::MedicationKnowledge_RelatedMedicationKnowledge_pskel&);

    void
    associatedMedication_parser (::fhir::Reference_pskel&);

    void
    productType_parser (::fhir::CodeableConcept_pskel&);

    void
    monograph_parser (::fhir::MedicationKnowledge_Monograph_pskel&);

    void
    ingredient_parser (::fhir::MedicationKnowledge_Ingredient_pskel&);

    void
    preparationInstruction_parser (::fhir::markdown_pskel&);

    void
    intendedRoute_parser (::fhir::CodeableConcept_pskel&);

    void
    cost_parser (::fhir::MedicationKnowledge_Cost_pskel&);

    void
    monitoringProgram_parser (::fhir::MedicationKnowledge_MonitoringProgram_pskel&);

    void
    administrationGuidelines_parser (::fhir::MedicationKnowledge_AdministrationGuidelines_pskel&);

    void
    medicineClassification_parser (::fhir::MedicationKnowledge_MedicineClassification_pskel&);

    void
    packaging_parser (::fhir::MedicationKnowledge_Packaging_pskel&);

    void
    drugCharacteristic_parser (::fhir::MedicationKnowledge_DrugCharacteristic_pskel&);

    void
    contraindication_parser (::fhir::Reference_pskel&);

    void
    regulatory_parser (::fhir::MedicationKnowledge_Regulatory_pskel&);

    void
    kinetics_parser (::fhir::MedicationKnowledge_Kinetics_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_pskel* MedicationKnowledge_impl_;
    MedicationKnowledge_pskel (MedicationKnowledge_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::code_pskel* status_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;
    ::fhir::CodeableConcept_pskel* doseForm_parser_;
    ::fhir::Quantity_pskel* amount_parser_;
    ::fhir::string_pskel* synonym_parser_;
    ::fhir::MedicationKnowledge_RelatedMedicationKnowledge_pskel* relatedMedicationKnowledge_parser_;
    ::fhir::Reference_pskel* associatedMedication_parser_;
    ::fhir::CodeableConcept_pskel* productType_parser_;
    ::fhir::MedicationKnowledge_Monograph_pskel* monograph_parser_;
    ::fhir::MedicationKnowledge_Ingredient_pskel* ingredient_parser_;
    ::fhir::markdown_pskel* preparationInstruction_parser_;
    ::fhir::CodeableConcept_pskel* intendedRoute_parser_;
    ::fhir::MedicationKnowledge_Cost_pskel* cost_parser_;
    ::fhir::MedicationKnowledge_MonitoringProgram_pskel* monitoringProgram_parser_;
    ::fhir::MedicationKnowledge_AdministrationGuidelines_pskel* administrationGuidelines_parser_;
    ::fhir::MedicationKnowledge_MedicineClassification_pskel* medicineClassification_parser_;
    ::fhir::MedicationKnowledge_Packaging_pskel* packaging_parser_;
    ::fhir::MedicationKnowledge_DrugCharacteristic_pskel* drugCharacteristic_parser_;
    ::fhir::Reference_pskel* contraindication_parser_;
    ::fhir::MedicationKnowledge_Regulatory_pskel* regulatory_parser_;
    ::fhir::MedicationKnowledge_Kinetics_pskel* kinetics_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_RelatedMedicationKnowledge_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    reference ();

    virtual void
    post_MedicationKnowledge_RelatedMedicationKnowledge ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* reference */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    reference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_RelatedMedicationKnowledge_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_RelatedMedicationKnowledge_pskel* MedicationKnowledge_RelatedMedicationKnowledge_impl_;
    MedicationKnowledge_RelatedMedicationKnowledge_pskel (MedicationKnowledge_RelatedMedicationKnowledge_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* reference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_RelatedMedicationKnowledge_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Monograph_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    source ();

    virtual void
    post_MedicationKnowledge_Monograph ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Monograph_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Monograph_pskel* MedicationKnowledge_Monograph_impl_;
    MedicationKnowledge_Monograph_pskel (MedicationKnowledge_Monograph_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Monograph_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Ingredient_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    itemCodeableConcept ();

    virtual void
    itemReference ();

    virtual void
    isActive ();

    virtual void
    strength ();

    virtual void
    post_MedicationKnowledge_Ingredient ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* itemCodeableConcept */,
             ::fhir::Reference_pskel& /* itemReference */,
             ::fhir::boolean_pskel& /* isActive */,
             ::fhir::Ratio_pskel& /* strength */);

    // Individual element parsers.
    //
    void
    itemCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    itemReference_parser (::fhir::Reference_pskel&);

    void
    isActive_parser (::fhir::boolean_pskel&);

    void
    strength_parser (::fhir::Ratio_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Ingredient_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Ingredient_pskel* MedicationKnowledge_Ingredient_impl_;
    MedicationKnowledge_Ingredient_pskel (MedicationKnowledge_Ingredient_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* itemCodeableConcept_parser_;
    ::fhir::Reference_pskel* itemReference_parser_;
    ::fhir::boolean_pskel* isActive_parser_;
    ::fhir::Ratio_pskel* strength_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Ingredient_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Cost_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    source ();

    virtual void
    cost ();

    virtual void
    post_MedicationKnowledge_Cost ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* source */,
             ::fhir::Money_pskel& /* cost */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    source_parser (::fhir::string_pskel&);

    void
    cost_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Cost_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Cost_pskel* MedicationKnowledge_Cost_impl_;
    MedicationKnowledge_Cost_pskel (MedicationKnowledge_Cost_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* source_parser_;
    ::fhir::Money_pskel* cost_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Cost_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_MonitoringProgram_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    name ();

    virtual void
    post_MedicationKnowledge_MonitoringProgram ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* name */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_MonitoringProgram_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_MonitoringProgram_pskel* MedicationKnowledge_MonitoringProgram_impl_;
    MedicationKnowledge_MonitoringProgram_pskel (MedicationKnowledge_MonitoringProgram_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_MonitoringProgram_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_AdministrationGuidelines_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    dosage ();

    virtual void
    indicationCodeableConcept ();

    virtual void
    indicationReference ();

    virtual void
    patientCharacteristics ();

    virtual void
    post_MedicationKnowledge_AdministrationGuidelines ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::MedicationKnowledge_Dosage_pskel& /* dosage */,
             ::fhir::CodeableConcept_pskel& /* indicationCodeableConcept */,
             ::fhir::Reference_pskel& /* indicationReference */,
             ::fhir::MedicationKnowledge_PatientCharacteristics_pskel& /* patientCharacteristics */);

    // Individual element parsers.
    //
    void
    dosage_parser (::fhir::MedicationKnowledge_Dosage_pskel&);

    void
    indicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    indicationReference_parser (::fhir::Reference_pskel&);

    void
    patientCharacteristics_parser (::fhir::MedicationKnowledge_PatientCharacteristics_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_AdministrationGuidelines_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_AdministrationGuidelines_pskel* MedicationKnowledge_AdministrationGuidelines_impl_;
    MedicationKnowledge_AdministrationGuidelines_pskel (MedicationKnowledge_AdministrationGuidelines_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::MedicationKnowledge_Dosage_pskel* dosage_parser_;
    ::fhir::CodeableConcept_pskel* indicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* indicationReference_parser_;
    ::fhir::MedicationKnowledge_PatientCharacteristics_pskel* patientCharacteristics_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_AdministrationGuidelines_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Dosage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    dosage ();

    virtual void
    post_MedicationKnowledge_Dosage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Dosage_pskel& /* dosage */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    dosage_parser (::fhir::Dosage_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Dosage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Dosage_pskel* MedicationKnowledge_Dosage_impl_;
    MedicationKnowledge_Dosage_pskel (MedicationKnowledge_Dosage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Dosage_pskel* dosage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Dosage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_PatientCharacteristics_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    characteristicCodeableConcept ();

    virtual void
    characteristicQuantity ();

    virtual void
    value ();

    virtual void
    post_MedicationKnowledge_PatientCharacteristics ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* characteristicCodeableConcept */,
             ::fhir::Quantity_pskel& /* characteristicQuantity */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    characteristicCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    characteristicQuantity_parser (::fhir::Quantity_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_PatientCharacteristics_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_PatientCharacteristics_pskel* MedicationKnowledge_PatientCharacteristics_impl_;
    MedicationKnowledge_PatientCharacteristics_pskel (MedicationKnowledge_PatientCharacteristics_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* characteristicCodeableConcept_parser_;
    ::fhir::Quantity_pskel* characteristicQuantity_parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_PatientCharacteristics_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_MedicineClassification_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    classification ();

    virtual void
    post_MedicationKnowledge_MedicineClassification ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* classification */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    classification_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_MedicineClassification_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_MedicineClassification_pskel* MedicationKnowledge_MedicineClassification_impl_;
    MedicationKnowledge_MedicineClassification_pskel (MedicationKnowledge_MedicineClassification_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* classification_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_MedicineClassification_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Packaging_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    quantity ();

    virtual void
    post_MedicationKnowledge_Packaging ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* quantity */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Packaging_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Packaging_pskel* MedicationKnowledge_Packaging_impl_;
    MedicationKnowledge_Packaging_pskel (MedicationKnowledge_Packaging_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Packaging_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_DrugCharacteristic_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueString ();

    virtual void
    valueQuantity ();

    virtual void
    valueBase64Binary ();

    virtual void
    post_MedicationKnowledge_DrugCharacteristic ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_DrugCharacteristic_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_DrugCharacteristic_pskel* MedicationKnowledge_DrugCharacteristic_impl_;
    MedicationKnowledge_DrugCharacteristic_pskel (MedicationKnowledge_DrugCharacteristic_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_DrugCharacteristic_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Regulatory_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    regulatoryAuthority ();

    virtual void
    substitution ();

    virtual void
    schedule ();

    virtual void
    maxDispense ();

    virtual void
    post_MedicationKnowledge_Regulatory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* regulatoryAuthority */,
             ::fhir::MedicationKnowledge_Substitution_pskel& /* substitution */,
             ::fhir::MedicationKnowledge_Schedule_pskel& /* schedule */,
             ::fhir::MedicationKnowledge_MaxDispense_pskel& /* maxDispense */);

    // Individual element parsers.
    //
    void
    regulatoryAuthority_parser (::fhir::Reference_pskel&);

    void
    substitution_parser (::fhir::MedicationKnowledge_Substitution_pskel&);

    void
    schedule_parser (::fhir::MedicationKnowledge_Schedule_pskel&);

    void
    maxDispense_parser (::fhir::MedicationKnowledge_MaxDispense_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Regulatory_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Regulatory_pskel* MedicationKnowledge_Regulatory_impl_;
    MedicationKnowledge_Regulatory_pskel (MedicationKnowledge_Regulatory_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* regulatoryAuthority_parser_;
    ::fhir::MedicationKnowledge_Substitution_pskel* substitution_parser_;
    ::fhir::MedicationKnowledge_Schedule_pskel* schedule_parser_;
    ::fhir::MedicationKnowledge_MaxDispense_pskel* maxDispense_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Regulatory_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Substitution_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    allowed ();

    virtual void
    post_MedicationKnowledge_Substitution ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::boolean_pskel& /* allowed */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    allowed_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Substitution_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Substitution_pskel* MedicationKnowledge_Substitution_impl_;
    MedicationKnowledge_Substitution_pskel (MedicationKnowledge_Substitution_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::boolean_pskel* allowed_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Substitution_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Schedule_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    schedule ();

    virtual void
    post_MedicationKnowledge_Schedule ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* schedule */);

    // Individual element parsers.
    //
    void
    schedule_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Schedule_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Schedule_pskel* MedicationKnowledge_Schedule_impl_;
    MedicationKnowledge_Schedule_pskel (MedicationKnowledge_Schedule_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* schedule_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Schedule_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_MaxDispense_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    quantity ();

    virtual void
    period ();

    virtual void
    post_MedicationKnowledge_MaxDispense ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Duration_pskel& /* period */);

    // Individual element parsers.
    //
    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    period_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_MaxDispense_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_MaxDispense_pskel* MedicationKnowledge_MaxDispense_impl_;
    MedicationKnowledge_MaxDispense_pskel (MedicationKnowledge_MaxDispense_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Duration_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_MaxDispense_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationKnowledge_Kinetics_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    areaUnderCurve ();

    virtual void
    lethalDose50 ();

    virtual void
    halfLifePeriod ();

    virtual void
    post_MedicationKnowledge_Kinetics ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* areaUnderCurve */,
             ::fhir::Quantity_pskel& /* lethalDose50 */,
             ::fhir::Duration_pskel& /* halfLifePeriod */);

    // Individual element parsers.
    //
    void
    areaUnderCurve_parser (::fhir::Quantity_pskel&);

    void
    lethalDose50_parser (::fhir::Quantity_pskel&);

    void
    halfLifePeriod_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationKnowledge_Kinetics_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationKnowledge_Kinetics_pskel* MedicationKnowledge_Kinetics_impl_;
    MedicationKnowledge_Kinetics_pskel (MedicationKnowledge_Kinetics_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* areaUnderCurve_parser_;
    ::fhir::Quantity_pskel* lethalDose50_parser_;
    ::fhir::Duration_pskel* halfLifePeriod_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationKnowledge_Kinetics_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationRequest_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    intent ();

    virtual void
    category ();

    virtual void
    priority ();

    virtual void
    doNotPerform ();

    virtual void
    reportedBoolean ();

    virtual void
    reportedReference ();

    virtual void
    medicationCodeableConcept ();

    virtual void
    medicationReference ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    supportingInformation ();

    virtual void
    authoredOn ();

    virtual void
    requester ();

    virtual void
    performer ();

    virtual void
    performerType ();

    virtual void
    recorder ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    basedOn ();

    virtual void
    groupIdentifier ();

    virtual void
    courseOfTherapyType ();

    virtual void
    insurance ();

    virtual void
    note ();

    virtual void
    dosageInstruction ();

    virtual void
    dispenseRequest ();

    virtual void
    substitution ();

    virtual void
    priorPrescription ();

    virtual void
    detectedIssue ();

    virtual void
    eventHistory ();

    virtual void
    post_MedicationRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::medicationrequestStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::medicationRequestIntent_pskel& /* intent */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::boolean_pskel& /* doNotPerform */,
             ::fhir::boolean_pskel& /* reportedBoolean */,
             ::fhir::Reference_pskel& /* reportedReference */,
             ::fhir::CodeableConcept_pskel& /* medicationCodeableConcept */,
             ::fhir::Reference_pskel& /* medicationReference */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::Reference_pskel& /* supportingInformation */,
             ::fhir::dateTime_pskel& /* authoredOn */,
             ::fhir::Reference_pskel& /* requester */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::CodeableConcept_pskel& /* performerType */,
             ::fhir::Reference_pskel& /* recorder */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Identifier_pskel& /* groupIdentifier */,
             ::fhir::CodeableConcept_pskel& /* courseOfTherapyType */,
             ::fhir::Reference_pskel& /* insurance */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::Dosage_pskel& /* dosageInstruction */,
             ::fhir::MedicationRequest_DispenseRequest_pskel& /* dispenseRequest */,
             ::fhir::MedicationRequest_Substitution_pskel& /* substitution */,
             ::fhir::Reference_pskel& /* priorPrescription */,
             ::fhir::Reference_pskel& /* detectedIssue */,
             ::fhir::Reference_pskel& /* eventHistory */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::medicationrequestStatus_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    intent_parser (::fhir::medicationRequestIntent_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    doNotPerform_parser (::fhir::boolean_pskel&);

    void
    reportedBoolean_parser (::fhir::boolean_pskel&);

    void
    reportedReference_parser (::fhir::Reference_pskel&);

    void
    medicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationReference_parser (::fhir::Reference_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    supportingInformation_parser (::fhir::Reference_pskel&);

    void
    authoredOn_parser (::fhir::dateTime_pskel&);

    void
    requester_parser (::fhir::Reference_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    performerType_parser (::fhir::CodeableConcept_pskel&);

    void
    recorder_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    groupIdentifier_parser (::fhir::Identifier_pskel&);

    void
    courseOfTherapyType_parser (::fhir::CodeableConcept_pskel&);

    void
    insurance_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    dosageInstruction_parser (::fhir::Dosage_pskel&);

    void
    dispenseRequest_parser (::fhir::MedicationRequest_DispenseRequest_pskel&);

    void
    substitution_parser (::fhir::MedicationRequest_Substitution_pskel&);

    void
    priorPrescription_parser (::fhir::Reference_pskel&);

    void
    detectedIssue_parser (::fhir::Reference_pskel&);

    void
    eventHistory_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationRequest_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationRequest_pskel* MedicationRequest_impl_;
    MedicationRequest_pskel (MedicationRequest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::medicationrequestStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::medicationRequestIntent_pskel* intent_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::boolean_pskel* doNotPerform_parser_;
    ::fhir::boolean_pskel* reportedBoolean_parser_;
    ::fhir::Reference_pskel* reportedReference_parser_;
    ::fhir::CodeableConcept_pskel* medicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* medicationReference_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::Reference_pskel* supportingInformation_parser_;
    ::fhir::dateTime_pskel* authoredOn_parser_;
    ::fhir::Reference_pskel* requester_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::CodeableConcept_pskel* performerType_parser_;
    ::fhir::Reference_pskel* recorder_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Identifier_pskel* groupIdentifier_parser_;
    ::fhir::CodeableConcept_pskel* courseOfTherapyType_parser_;
    ::fhir::Reference_pskel* insurance_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::Dosage_pskel* dosageInstruction_parser_;
    ::fhir::MedicationRequest_DispenseRequest_pskel* dispenseRequest_parser_;
    ::fhir::MedicationRequest_Substitution_pskel* substitution_parser_;
    ::fhir::Reference_pskel* priorPrescription_parser_;
    ::fhir::Reference_pskel* detectedIssue_parser_;
    ::fhir::Reference_pskel* eventHistory_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationRequest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationRequest_DispenseRequest_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    initialFill ();

    virtual void
    dispenseInterval ();

    virtual void
    validityPeriod ();

    virtual void
    numberOfRepeatsAllowed ();

    virtual void
    quantity ();

    virtual void
    expectedSupplyDuration ();

    virtual void
    performer ();

    virtual void
    post_MedicationRequest_DispenseRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::MedicationRequest_InitialFill_pskel& /* initialFill */,
             ::fhir::Duration_pskel& /* dispenseInterval */,
             ::fhir::Period_pskel& /* validityPeriod */,
             ::fhir::unsignedInt_pskel& /* numberOfRepeatsAllowed */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Duration_pskel& /* expectedSupplyDuration */,
             ::fhir::Reference_pskel& /* performer */);

    // Individual element parsers.
    //
    void
    initialFill_parser (::fhir::MedicationRequest_InitialFill_pskel&);

    void
    dispenseInterval_parser (::fhir::Duration_pskel&);

    void
    validityPeriod_parser (::fhir::Period_pskel&);

    void
    numberOfRepeatsAllowed_parser (::fhir::unsignedInt_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    expectedSupplyDuration_parser (::fhir::Duration_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationRequest_DispenseRequest_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationRequest_DispenseRequest_pskel* MedicationRequest_DispenseRequest_impl_;
    MedicationRequest_DispenseRequest_pskel (MedicationRequest_DispenseRequest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::MedicationRequest_InitialFill_pskel* initialFill_parser_;
    ::fhir::Duration_pskel* dispenseInterval_parser_;
    ::fhir::Period_pskel* validityPeriod_parser_;
    ::fhir::unsignedInt_pskel* numberOfRepeatsAllowed_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Duration_pskel* expectedSupplyDuration_parser_;
    ::fhir::Reference_pskel* performer_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationRequest_DispenseRequest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationRequest_InitialFill_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    quantity ();

    virtual void
    duration ();

    virtual void
    post_MedicationRequest_InitialFill ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Duration_pskel& /* duration */);

    // Individual element parsers.
    //
    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    duration_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationRequest_InitialFill_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationRequest_InitialFill_pskel* MedicationRequest_InitialFill_impl_;
    MedicationRequest_InitialFill_pskel (MedicationRequest_InitialFill_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Duration_pskel* duration_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationRequest_InitialFill_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicationRequest_Substitution_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    allowedBoolean ();

    virtual void
    allowedCodeableConcept ();

    virtual void
    reason ();

    virtual void
    post_MedicationRequest_Substitution ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* allowedBoolean */,
             ::fhir::CodeableConcept_pskel& /* allowedCodeableConcept */,
             ::fhir::CodeableConcept_pskel& /* reason */);

    // Individual element parsers.
    //
    void
    allowedBoolean_parser (::fhir::boolean_pskel&);

    void
    allowedCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationRequest_Substitution_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationRequest_Substitution_pskel* MedicationRequest_Substitution_impl_;
    MedicationRequest_Substitution_pskel (MedicationRequest_Substitution_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* allowedBoolean_parser_;
    ::fhir::CodeableConcept_pskel* allowedCodeableConcept_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationRequest_Substitution_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class medicationrequestStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_medicationrequestStatus_list ();

    // Constructor.
    //
    medicationrequestStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    medicationrequestStatus_list_pskel* medicationrequestStatus_list_impl_;
    medicationrequestStatus_list_pskel (medicationrequestStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_medicationrequestStatus_list_pskel_enums_[8UL];
  };

  class medicationrequestStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_medicationrequestStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::medicationrequestStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::medicationrequestStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    medicationrequestStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    medicationrequestStatus_pskel* medicationrequestStatus_impl_;
    medicationrequestStatus_pskel (medicationrequestStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::medicationrequestStatus_list_pskel* value_parser_;
  };

  class medicationRequestIntent_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_medicationRequestIntent_list ();

    // Constructor.
    //
    medicationRequestIntent_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    medicationRequestIntent_list_pskel* medicationRequestIntent_list_impl_;
    medicationRequestIntent_list_pskel (medicationRequestIntent_list_pskel*, void*);

    protected:
    static const char* const _xsde_medicationRequestIntent_list_pskel_enums_[8UL];
  };

  class medicationRequestIntent_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_medicationRequestIntent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::medicationRequestIntent_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::medicationRequestIntent_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    medicationRequestIntent_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    medicationRequestIntent_pskel* medicationRequestIntent_impl_;
    medicationRequestIntent_pskel (medicationRequestIntent_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::medicationRequestIntent_list_pskel* value_parser_;
  };

  class MedicationStatement_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    basedOn ();

    virtual void
    partOf ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    category ();

    virtual void
    medicationCodeableConcept ();

    virtual void
    medicationReference ();

    virtual void
    subject ();

    virtual void
    context ();

    virtual void
    effectiveDateTime ();

    virtual void
    effectivePeriod ();

    virtual void
    dateAsserted ();

    virtual void
    informationSource ();

    virtual void
    derivedFrom ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    note ();

    virtual void
    dosage ();

    virtual void
    post_MedicationStatement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::MedicationStatusCodes_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* medicationCodeableConcept */,
             ::fhir::Reference_pskel& /* medicationReference */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* context */,
             ::fhir::dateTime_pskel& /* effectiveDateTime */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::dateTime_pskel& /* dateAsserted */,
             ::fhir::Reference_pskel& /* informationSource */,
             ::fhir::Reference_pskel& /* derivedFrom */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::Dosage_pskel& /* dosage */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::MedicationStatusCodes_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationReference_parser (::fhir::Reference_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    context_parser (::fhir::Reference_pskel&);

    void
    effectiveDateTime_parser (::fhir::dateTime_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    dateAsserted_parser (::fhir::dateTime_pskel&);

    void
    informationSource_parser (::fhir::Reference_pskel&);

    void
    derivedFrom_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    dosage_parser (::fhir::Dosage_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicationStatement_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicationStatement_pskel* MedicationStatement_impl_;
    MedicationStatement_pskel (MedicationStatement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::MedicationStatusCodes_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* medicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* medicationReference_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* context_parser_;
    ::fhir::dateTime_pskel* effectiveDateTime_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::dateTime_pskel* dateAsserted_parser_;
    ::fhir::Reference_pskel* informationSource_parser_;
    ::fhir::Reference_pskel* derivedFrom_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::Dosage_pskel* dosage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicationStatement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    domain ();

    virtual void
    combinedPharmaceuticalDoseForm ();

    virtual void
    legalStatusOfSupply ();

    virtual void
    additionalMonitoringIndicator ();

    virtual void
    specialMeasures ();

    virtual void
    paediatricUseIndicator ();

    virtual void
    productClassification ();

    virtual void
    marketingStatus ();

    virtual void
    pharmaceuticalProduct ();

    virtual void
    packagedMedicinalProduct ();

    virtual void
    attachedDocument ();

    virtual void
    masterFile ();

    virtual void
    contact ();

    virtual void
    clinicalTrial ();

    virtual void
    name ();

    virtual void
    crossReference ();

    virtual void
    manufacturingBusinessOperation ();

    virtual void
    specialDesignation ();

    virtual void
    post_MedicinalProduct ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Coding_pskel& /* domain */,
             ::fhir::CodeableConcept_pskel& /* combinedPharmaceuticalDoseForm */,
             ::fhir::CodeableConcept_pskel& /* legalStatusOfSupply */,
             ::fhir::CodeableConcept_pskel& /* additionalMonitoringIndicator */,
             ::fhir::string_pskel& /* specialMeasures */,
             ::fhir::CodeableConcept_pskel& /* paediatricUseIndicator */,
             ::fhir::CodeableConcept_pskel& /* productClassification */,
             ::fhir::MarketingStatus_pskel& /* marketingStatus */,
             ::fhir::Reference_pskel& /* pharmaceuticalProduct */,
             ::fhir::Reference_pskel& /* packagedMedicinalProduct */,
             ::fhir::Reference_pskel& /* attachedDocument */,
             ::fhir::Reference_pskel& /* masterFile */,
             ::fhir::Reference_pskel& /* contact */,
             ::fhir::Reference_pskel& /* clinicalTrial */,
             ::fhir::MedicinalProduct_Name_pskel& /* name */,
             ::fhir::Identifier_pskel& /* crossReference */,
             ::fhir::MedicinalProduct_ManufacturingBusinessOperation_pskel& /* manufacturingBusinessOperation */,
             ::fhir::MedicinalProduct_SpecialDesignation_pskel& /* specialDesignation */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    domain_parser (::fhir::Coding_pskel&);

    void
    combinedPharmaceuticalDoseForm_parser (::fhir::CodeableConcept_pskel&);

    void
    legalStatusOfSupply_parser (::fhir::CodeableConcept_pskel&);

    void
    additionalMonitoringIndicator_parser (::fhir::CodeableConcept_pskel&);

    void
    specialMeasures_parser (::fhir::string_pskel&);

    void
    paediatricUseIndicator_parser (::fhir::CodeableConcept_pskel&);

    void
    productClassification_parser (::fhir::CodeableConcept_pskel&);

    void
    marketingStatus_parser (::fhir::MarketingStatus_pskel&);

    void
    pharmaceuticalProduct_parser (::fhir::Reference_pskel&);

    void
    packagedMedicinalProduct_parser (::fhir::Reference_pskel&);

    void
    attachedDocument_parser (::fhir::Reference_pskel&);

    void
    masterFile_parser (::fhir::Reference_pskel&);

    void
    contact_parser (::fhir::Reference_pskel&);

    void
    clinicalTrial_parser (::fhir::Reference_pskel&);

    void
    name_parser (::fhir::MedicinalProduct_Name_pskel&);

    void
    crossReference_parser (::fhir::Identifier_pskel&);

    void
    manufacturingBusinessOperation_parser (::fhir::MedicinalProduct_ManufacturingBusinessOperation_pskel&);

    void
    specialDesignation_parser (::fhir::MedicinalProduct_SpecialDesignation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_pskel* MedicinalProduct_impl_;
    MedicinalProduct_pskel (MedicinalProduct_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Coding_pskel* domain_parser_;
    ::fhir::CodeableConcept_pskel* combinedPharmaceuticalDoseForm_parser_;
    ::fhir::CodeableConcept_pskel* legalStatusOfSupply_parser_;
    ::fhir::CodeableConcept_pskel* additionalMonitoringIndicator_parser_;
    ::fhir::string_pskel* specialMeasures_parser_;
    ::fhir::CodeableConcept_pskel* paediatricUseIndicator_parser_;
    ::fhir::CodeableConcept_pskel* productClassification_parser_;
    ::fhir::MarketingStatus_pskel* marketingStatus_parser_;
    ::fhir::Reference_pskel* pharmaceuticalProduct_parser_;
    ::fhir::Reference_pskel* packagedMedicinalProduct_parser_;
    ::fhir::Reference_pskel* attachedDocument_parser_;
    ::fhir::Reference_pskel* masterFile_parser_;
    ::fhir::Reference_pskel* contact_parser_;
    ::fhir::Reference_pskel* clinicalTrial_parser_;
    ::fhir::MedicinalProduct_Name_pskel* name_parser_;
    ::fhir::Identifier_pskel* crossReference_parser_;
    ::fhir::MedicinalProduct_ManufacturingBusinessOperation_pskel* manufacturingBusinessOperation_parser_;
    ::fhir::MedicinalProduct_SpecialDesignation_pskel* specialDesignation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_Name_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    productName ();

    virtual void
    namePart ();

    virtual void
    countryLanguage ();

    virtual void
    post_MedicinalProduct_Name ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* productName */,
             ::fhir::MedicinalProduct_NamePart_pskel& /* namePart */,
             ::fhir::MedicinalProduct_CountryLanguage_pskel& /* countryLanguage */);

    // Individual element parsers.
    //
    void
    productName_parser (::fhir::string_pskel&);

    void
    namePart_parser (::fhir::MedicinalProduct_NamePart_pskel&);

    void
    countryLanguage_parser (::fhir::MedicinalProduct_CountryLanguage_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_Name_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_Name_pskel* MedicinalProduct_Name_impl_;
    MedicinalProduct_Name_pskel (MedicinalProduct_Name_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* productName_parser_;
    ::fhir::MedicinalProduct_NamePart_pskel* namePart_parser_;
    ::fhir::MedicinalProduct_CountryLanguage_pskel* countryLanguage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_Name_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_NamePart_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    part ();

    virtual void
    type ();

    virtual void
    post_MedicinalProduct_NamePart ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* part */,
             ::fhir::Coding_pskel& /* type */);

    // Individual element parsers.
    //
    void
    part_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_NamePart_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_NamePart_pskel* MedicinalProduct_NamePart_impl_;
    MedicinalProduct_NamePart_pskel (MedicinalProduct_NamePart_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* part_parser_;
    ::fhir::Coding_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_NamePart_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_CountryLanguage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    country ();

    virtual void
    jurisdiction ();

    virtual void
    language ();

    virtual void
    post_MedicinalProduct_CountryLanguage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* country */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::CodeableConcept_pskel& /* language */);

    // Individual element parsers.
    //
    void
    country_parser (::fhir::CodeableConcept_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    language_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_CountryLanguage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_CountryLanguage_pskel* MedicinalProduct_CountryLanguage_impl_;
    MedicinalProduct_CountryLanguage_pskel (MedicinalProduct_CountryLanguage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* country_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::CodeableConcept_pskel* language_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_CountryLanguage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_ManufacturingBusinessOperation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operationType ();

    virtual void
    authorisationReferenceNumber ();

    virtual void
    effectiveDate ();

    virtual void
    confidentialityIndicator ();

    virtual void
    manufacturer ();

    virtual void
    regulator ();

    virtual void
    post_MedicinalProduct_ManufacturingBusinessOperation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* operationType */,
             ::fhir::Identifier_pskel& /* authorisationReferenceNumber */,
             ::fhir::dateTime_pskel& /* effectiveDate */,
             ::fhir::CodeableConcept_pskel& /* confidentialityIndicator */,
             ::fhir::Reference_pskel& /* manufacturer */,
             ::fhir::Reference_pskel& /* regulator */);

    // Individual element parsers.
    //
    void
    operationType_parser (::fhir::CodeableConcept_pskel&);

    void
    authorisationReferenceNumber_parser (::fhir::Identifier_pskel&);

    void
    effectiveDate_parser (::fhir::dateTime_pskel&);

    void
    confidentialityIndicator_parser (::fhir::CodeableConcept_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    void
    regulator_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_ManufacturingBusinessOperation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_ManufacturingBusinessOperation_pskel* MedicinalProduct_ManufacturingBusinessOperation_impl_;
    MedicinalProduct_ManufacturingBusinessOperation_pskel (MedicinalProduct_ManufacturingBusinessOperation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* operationType_parser_;
    ::fhir::Identifier_pskel* authorisationReferenceNumber_parser_;
    ::fhir::dateTime_pskel* effectiveDate_parser_;
    ::fhir::CodeableConcept_pskel* confidentialityIndicator_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;
    ::fhir::Reference_pskel* regulator_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_ManufacturingBusinessOperation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProduct_SpecialDesignation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    intendedUse ();

    virtual void
    indicationCodeableConcept ();

    virtual void
    indicationReference ();

    virtual void
    status ();

    virtual void
    date ();

    virtual void
    species ();

    virtual void
    post_MedicinalProduct_SpecialDesignation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* intendedUse */,
             ::fhir::CodeableConcept_pskel& /* indicationCodeableConcept */,
             ::fhir::Reference_pskel& /* indicationReference */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::CodeableConcept_pskel& /* species */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    intendedUse_parser (::fhir::CodeableConcept_pskel&);

    void
    indicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    indicationReference_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    species_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProduct_SpecialDesignation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProduct_SpecialDesignation_pskel* MedicinalProduct_SpecialDesignation_impl_;
    MedicinalProduct_SpecialDesignation_pskel (MedicinalProduct_SpecialDesignation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* intendedUse_parser_;
    ::fhir::CodeableConcept_pskel* indicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* indicationReference_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::CodeableConcept_pskel* species_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProduct_SpecialDesignation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductAuthorization_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    subject ();

    virtual void
    country ();

    virtual void
    jurisdiction ();

    virtual void
    status ();

    virtual void
    statusDate ();

    virtual void
    restoreDate ();

    virtual void
    validityPeriod ();

    virtual void
    dataExclusivityPeriod ();

    virtual void
    dateOfFirstAuthorization ();

    virtual void
    internationalBirthDate ();

    virtual void
    legalBasis ();

    virtual void
    jurisdictionalAuthorization ();

    virtual void
    holder ();

    virtual void
    regulator ();

    virtual void
    procedure ();

    virtual void
    post_MedicinalProductAuthorization ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::CodeableConcept_pskel& /* country */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::dateTime_pskel& /* statusDate */,
             ::fhir::dateTime_pskel& /* restoreDate */,
             ::fhir::Period_pskel& /* validityPeriod */,
             ::fhir::Period_pskel& /* dataExclusivityPeriod */,
             ::fhir::dateTime_pskel& /* dateOfFirstAuthorization */,
             ::fhir::dateTime_pskel& /* internationalBirthDate */,
             ::fhir::CodeableConcept_pskel& /* legalBasis */,
             ::fhir::MedicinalProductAuthorization_JurisdictionalAuthorization_pskel& /* jurisdictionalAuthorization */,
             ::fhir::Reference_pskel& /* holder */,
             ::fhir::Reference_pskel& /* regulator */,
             ::fhir::MedicinalProductAuthorization_Procedure_pskel& /* procedure */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    country_parser (::fhir::CodeableConcept_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    statusDate_parser (::fhir::dateTime_pskel&);

    void
    restoreDate_parser (::fhir::dateTime_pskel&);

    void
    validityPeriod_parser (::fhir::Period_pskel&);

    void
    dataExclusivityPeriod_parser (::fhir::Period_pskel&);

    void
    dateOfFirstAuthorization_parser (::fhir::dateTime_pskel&);

    void
    internationalBirthDate_parser (::fhir::dateTime_pskel&);

    void
    legalBasis_parser (::fhir::CodeableConcept_pskel&);

    void
    jurisdictionalAuthorization_parser (::fhir::MedicinalProductAuthorization_JurisdictionalAuthorization_pskel&);

    void
    holder_parser (::fhir::Reference_pskel&);

    void
    regulator_parser (::fhir::Reference_pskel&);

    void
    procedure_parser (::fhir::MedicinalProductAuthorization_Procedure_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductAuthorization_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductAuthorization_pskel* MedicinalProductAuthorization_impl_;
    MedicinalProductAuthorization_pskel (MedicinalProductAuthorization_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::CodeableConcept_pskel* country_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::dateTime_pskel* statusDate_parser_;
    ::fhir::dateTime_pskel* restoreDate_parser_;
    ::fhir::Period_pskel* validityPeriod_parser_;
    ::fhir::Period_pskel* dataExclusivityPeriod_parser_;
    ::fhir::dateTime_pskel* dateOfFirstAuthorization_parser_;
    ::fhir::dateTime_pskel* internationalBirthDate_parser_;
    ::fhir::CodeableConcept_pskel* legalBasis_parser_;
    ::fhir::MedicinalProductAuthorization_JurisdictionalAuthorization_pskel* jurisdictionalAuthorization_parser_;
    ::fhir::Reference_pskel* holder_parser_;
    ::fhir::Reference_pskel* regulator_parser_;
    ::fhir::MedicinalProductAuthorization_Procedure_pskel* procedure_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductAuthorization_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductAuthorization_JurisdictionalAuthorization_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    country ();

    virtual void
    jurisdiction ();

    virtual void
    legalStatusOfSupply ();

    virtual void
    validityPeriod ();

    virtual void
    post_MedicinalProductAuthorization_JurisdictionalAuthorization ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* country */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::CodeableConcept_pskel& /* legalStatusOfSupply */,
             ::fhir::Period_pskel& /* validityPeriod */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    country_parser (::fhir::CodeableConcept_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    legalStatusOfSupply_parser (::fhir::CodeableConcept_pskel&);

    void
    validityPeriod_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductAuthorization_JurisdictionalAuthorization_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductAuthorization_JurisdictionalAuthorization_pskel* MedicinalProductAuthorization_JurisdictionalAuthorization_impl_;
    MedicinalProductAuthorization_JurisdictionalAuthorization_pskel (MedicinalProductAuthorization_JurisdictionalAuthorization_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* country_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::CodeableConcept_pskel* legalStatusOfSupply_parser_;
    ::fhir::Period_pskel* validityPeriod_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductAuthorization_JurisdictionalAuthorization_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductAuthorization_Procedure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    datePeriod ();

    virtual void
    dateDateTime ();

    virtual void
    application ();

    virtual void
    post_MedicinalProductAuthorization_Procedure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Period_pskel& /* datePeriod */,
             ::fhir::dateTime_pskel& /* dateDateTime */,
             ::fhir::MedicinalProductAuthorization_Procedure_pskel& /* application */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    datePeriod_parser (::fhir::Period_pskel&);

    void
    dateDateTime_parser (::fhir::dateTime_pskel&);

    void
    application_parser (::fhir::MedicinalProductAuthorization_Procedure_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductAuthorization_Procedure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductAuthorization_Procedure_pskel* MedicinalProductAuthorization_Procedure_impl_;
    MedicinalProductAuthorization_Procedure_pskel (MedicinalProductAuthorization_Procedure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Period_pskel* datePeriod_parser_;
    ::fhir::dateTime_pskel* dateDateTime_parser_;
    ::fhir::MedicinalProductAuthorization_Procedure_pskel* application_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductAuthorization_Procedure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductContraindication_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    subject ();

    virtual void
    disease ();

    virtual void
    diseaseStatus ();

    virtual void
    comorbidity ();

    virtual void
    therapeuticIndication ();

    virtual void
    otherTherapy ();

    virtual void
    population ();

    virtual void
    post_MedicinalProductContraindication ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::CodeableConcept_pskel& /* disease */,
             ::fhir::CodeableConcept_pskel& /* diseaseStatus */,
             ::fhir::CodeableConcept_pskel& /* comorbidity */,
             ::fhir::Reference_pskel& /* therapeuticIndication */,
             ::fhir::MedicinalProductContraindication_OtherTherapy_pskel& /* otherTherapy */,
             ::fhir::Population_pskel& /* population */);

    // Individual element parsers.
    //
    void
    subject_parser (::fhir::Reference_pskel&);

    void
    disease_parser (::fhir::CodeableConcept_pskel&);

    void
    diseaseStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    comorbidity_parser (::fhir::CodeableConcept_pskel&);

    void
    therapeuticIndication_parser (::fhir::Reference_pskel&);

    void
    otherTherapy_parser (::fhir::MedicinalProductContraindication_OtherTherapy_pskel&);

    void
    population_parser (::fhir::Population_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductContraindication_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductContraindication_pskel* MedicinalProductContraindication_impl_;
    MedicinalProductContraindication_pskel (MedicinalProductContraindication_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::CodeableConcept_pskel* disease_parser_;
    ::fhir::CodeableConcept_pskel* diseaseStatus_parser_;
    ::fhir::CodeableConcept_pskel* comorbidity_parser_;
    ::fhir::Reference_pskel* therapeuticIndication_parser_;
    ::fhir::MedicinalProductContraindication_OtherTherapy_pskel* otherTherapy_parser_;
    ::fhir::Population_pskel* population_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductContraindication_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductContraindication_OtherTherapy_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    therapyRelationshipType ();

    virtual void
    medicationCodeableConcept ();

    virtual void
    medicationReference ();

    virtual void
    post_MedicinalProductContraindication_OtherTherapy ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* therapyRelationshipType */,
             ::fhir::CodeableConcept_pskel& /* medicationCodeableConcept */,
             ::fhir::Reference_pskel& /* medicationReference */);

    // Individual element parsers.
    //
    void
    therapyRelationshipType_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductContraindication_OtherTherapy_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductContraindication_OtherTherapy_pskel* MedicinalProductContraindication_OtherTherapy_impl_;
    MedicinalProductContraindication_OtherTherapy_pskel (MedicinalProductContraindication_OtherTherapy_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* therapyRelationshipType_parser_;
    ::fhir::CodeableConcept_pskel* medicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* medicationReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductContraindication_OtherTherapy_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductIndication_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    subject ();

    virtual void
    diseaseSymptomProcedure ();

    virtual void
    diseaseStatus ();

    virtual void
    comorbidity ();

    virtual void
    intendedEffect ();

    virtual void
    duration ();

    virtual void
    otherTherapy ();

    virtual void
    undesirableEffect ();

    virtual void
    population ();

    virtual void
    post_MedicinalProductIndication ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::CodeableConcept_pskel& /* diseaseSymptomProcedure */,
             ::fhir::CodeableConcept_pskel& /* diseaseStatus */,
             ::fhir::CodeableConcept_pskel& /* comorbidity */,
             ::fhir::CodeableConcept_pskel& /* intendedEffect */,
             ::fhir::Quantity_pskel& /* duration */,
             ::fhir::MedicinalProductIndication_OtherTherapy_pskel& /* otherTherapy */,
             ::fhir::Reference_pskel& /* undesirableEffect */,
             ::fhir::Population_pskel& /* population */);

    // Individual element parsers.
    //
    void
    subject_parser (::fhir::Reference_pskel&);

    void
    diseaseSymptomProcedure_parser (::fhir::CodeableConcept_pskel&);

    void
    diseaseStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    comorbidity_parser (::fhir::CodeableConcept_pskel&);

    void
    intendedEffect_parser (::fhir::CodeableConcept_pskel&);

    void
    duration_parser (::fhir::Quantity_pskel&);

    void
    otherTherapy_parser (::fhir::MedicinalProductIndication_OtherTherapy_pskel&);

    void
    undesirableEffect_parser (::fhir::Reference_pskel&);

    void
    population_parser (::fhir::Population_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductIndication_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductIndication_pskel* MedicinalProductIndication_impl_;
    MedicinalProductIndication_pskel (MedicinalProductIndication_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::CodeableConcept_pskel* diseaseSymptomProcedure_parser_;
    ::fhir::CodeableConcept_pskel* diseaseStatus_parser_;
    ::fhir::CodeableConcept_pskel* comorbidity_parser_;
    ::fhir::CodeableConcept_pskel* intendedEffect_parser_;
    ::fhir::Quantity_pskel* duration_parser_;
    ::fhir::MedicinalProductIndication_OtherTherapy_pskel* otherTherapy_parser_;
    ::fhir::Reference_pskel* undesirableEffect_parser_;
    ::fhir::Population_pskel* population_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductIndication_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductIndication_OtherTherapy_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    therapyRelationshipType ();

    virtual void
    medicationCodeableConcept ();

    virtual void
    medicationReference ();

    virtual void
    post_MedicinalProductIndication_OtherTherapy ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* therapyRelationshipType */,
             ::fhir::CodeableConcept_pskel& /* medicationCodeableConcept */,
             ::fhir::Reference_pskel& /* medicationReference */);

    // Individual element parsers.
    //
    void
    therapyRelationshipType_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    medicationReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductIndication_OtherTherapy_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductIndication_OtherTherapy_pskel* MedicinalProductIndication_OtherTherapy_impl_;
    MedicinalProductIndication_OtherTherapy_pskel (MedicinalProductIndication_OtherTherapy_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* therapyRelationshipType_parser_;
    ::fhir::CodeableConcept_pskel* medicationCodeableConcept_parser_;
    ::fhir::Reference_pskel* medicationReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductIndication_OtherTherapy_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductIngredient_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    role ();

    virtual void
    allergenicIndicator ();

    virtual void
    manufacturer ();

    virtual void
    specifiedSubstance ();

    virtual void
    substance ();

    virtual void
    post_MedicinalProductIngredient ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::boolean_pskel& /* allergenicIndicator */,
             ::fhir::Reference_pskel& /* manufacturer */,
             ::fhir::MedicinalProductIngredient_SpecifiedSubstance_pskel& /* specifiedSubstance */,
             ::fhir::MedicinalProductIngredient_Substance_pskel& /* substance */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    allergenicIndicator_parser (::fhir::boolean_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    void
    specifiedSubstance_parser (::fhir::MedicinalProductIngredient_SpecifiedSubstance_pskel&);

    void
    substance_parser (::fhir::MedicinalProductIngredient_Substance_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductIngredient_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductIngredient_pskel* MedicinalProductIngredient_impl_;
    MedicinalProductIngredient_pskel (MedicinalProductIngredient_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::boolean_pskel* allergenicIndicator_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;
    ::fhir::MedicinalProductIngredient_SpecifiedSubstance_pskel* specifiedSubstance_parser_;
    ::fhir::MedicinalProductIngredient_Substance_pskel* substance_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductIngredient_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductIngredient_SpecifiedSubstance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    group ();

    virtual void
    confidentiality ();

    virtual void
    strength ();

    virtual void
    post_MedicinalProductIngredient_SpecifiedSubstance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* group */,
             ::fhir::CodeableConcept_pskel& /* confidentiality */,
             ::fhir::MedicinalProductIngredient_Strength_pskel& /* strength */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    group_parser (::fhir::CodeableConcept_pskel&);

    void
    confidentiality_parser (::fhir::CodeableConcept_pskel&);

    void
    strength_parser (::fhir::MedicinalProductIngredient_Strength_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductIngredient_SpecifiedSubstance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductIngredient_SpecifiedSubstance_pskel* MedicinalProductIngredient_SpecifiedSubstance_impl_;
    MedicinalProductIngredient_SpecifiedSubstance_pskel (MedicinalProductIngredient_SpecifiedSubstance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* group_parser_;
    ::fhir::CodeableConcept_pskel* confidentiality_parser_;
    ::fhir::MedicinalProductIngredient_Strength_pskel* strength_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductIngredient_SpecifiedSubstance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductIngredient_Strength_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    presentation ();

    virtual void
    presentationLowLimit ();

    virtual void
    concentration ();

    virtual void
    concentrationLowLimit ();

    virtual void
    measurementPoint ();

    virtual void
    country ();

    virtual void
    referenceStrength ();

    virtual void
    post_MedicinalProductIngredient_Strength ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Ratio_pskel& /* presentation */,
             ::fhir::Ratio_pskel& /* presentationLowLimit */,
             ::fhir::Ratio_pskel& /* concentration */,
             ::fhir::Ratio_pskel& /* concentrationLowLimit */,
             ::fhir::string_pskel& /* measurementPoint */,
             ::fhir::CodeableConcept_pskel& /* country */,
             ::fhir::MedicinalProductIngredient_ReferenceStrength_pskel& /* referenceStrength */);

    // Individual element parsers.
    //
    void
    presentation_parser (::fhir::Ratio_pskel&);

    void
    presentationLowLimit_parser (::fhir::Ratio_pskel&);

    void
    concentration_parser (::fhir::Ratio_pskel&);

    void
    concentrationLowLimit_parser (::fhir::Ratio_pskel&);

    void
    measurementPoint_parser (::fhir::string_pskel&);

    void
    country_parser (::fhir::CodeableConcept_pskel&);

    void
    referenceStrength_parser (::fhir::MedicinalProductIngredient_ReferenceStrength_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductIngredient_Strength_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductIngredient_Strength_pskel* MedicinalProductIngredient_Strength_impl_;
    MedicinalProductIngredient_Strength_pskel (MedicinalProductIngredient_Strength_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Ratio_pskel* presentation_parser_;
    ::fhir::Ratio_pskel* presentationLowLimit_parser_;
    ::fhir::Ratio_pskel* concentration_parser_;
    ::fhir::Ratio_pskel* concentrationLowLimit_parser_;
    ::fhir::string_pskel* measurementPoint_parser_;
    ::fhir::CodeableConcept_pskel* country_parser_;
    ::fhir::MedicinalProductIngredient_ReferenceStrength_pskel* referenceStrength_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductIngredient_Strength_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductIngredient_ReferenceStrength_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    substance ();

    virtual void
    strength ();

    virtual void
    strengthLowLimit ();

    virtual void
    measurementPoint ();

    virtual void
    country ();

    virtual void
    post_MedicinalProductIngredient_ReferenceStrength ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* substance */,
             ::fhir::Ratio_pskel& /* strength */,
             ::fhir::Ratio_pskel& /* strengthLowLimit */,
             ::fhir::string_pskel& /* measurementPoint */,
             ::fhir::CodeableConcept_pskel& /* country */);

    // Individual element parsers.
    //
    void
    substance_parser (::fhir::CodeableConcept_pskel&);

    void
    strength_parser (::fhir::Ratio_pskel&);

    void
    strengthLowLimit_parser (::fhir::Ratio_pskel&);

    void
    measurementPoint_parser (::fhir::string_pskel&);

    void
    country_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductIngredient_ReferenceStrength_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductIngredient_ReferenceStrength_pskel* MedicinalProductIngredient_ReferenceStrength_impl_;
    MedicinalProductIngredient_ReferenceStrength_pskel (MedicinalProductIngredient_ReferenceStrength_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* substance_parser_;
    ::fhir::Ratio_pskel* strength_parser_;
    ::fhir::Ratio_pskel* strengthLowLimit_parser_;
    ::fhir::string_pskel* measurementPoint_parser_;
    ::fhir::CodeableConcept_pskel* country_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductIngredient_ReferenceStrength_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductIngredient_Substance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    strength ();

    virtual void
    post_MedicinalProductIngredient_Substance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::MedicinalProductIngredient_Strength_pskel& /* strength */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    strength_parser (::fhir::MedicinalProductIngredient_Strength_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductIngredient_Substance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductIngredient_Substance_pskel* MedicinalProductIngredient_Substance_impl_;
    MedicinalProductIngredient_Substance_pskel (MedicinalProductIngredient_Substance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::MedicinalProductIngredient_Strength_pskel* strength_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductIngredient_Substance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductInteraction_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    subject ();

    virtual void
    description ();

    virtual void
    interactant ();

    virtual void
    type ();

    virtual void
    effect ();

    virtual void
    incidence ();

    virtual void
    management ();

    virtual void
    post_MedicinalProductInteraction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::string_pskel& /* description */,
             ::fhir::MedicinalProductInteraction_Interactant_pskel& /* interactant */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* effect */,
             ::fhir::CodeableConcept_pskel& /* incidence */,
             ::fhir::CodeableConcept_pskel& /* management */);

    // Individual element parsers.
    //
    void
    subject_parser (::fhir::Reference_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    interactant_parser (::fhir::MedicinalProductInteraction_Interactant_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    effect_parser (::fhir::CodeableConcept_pskel&);

    void
    incidence_parser (::fhir::CodeableConcept_pskel&);

    void
    management_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductInteraction_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductInteraction_pskel* MedicinalProductInteraction_impl_;
    MedicinalProductInteraction_pskel (MedicinalProductInteraction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::MedicinalProductInteraction_Interactant_pskel* interactant_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* effect_parser_;
    ::fhir::CodeableConcept_pskel* incidence_parser_;
    ::fhir::CodeableConcept_pskel* management_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductInteraction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductInteraction_Interactant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    itemReference ();

    virtual void
    itemCodeableConcept ();

    virtual void
    post_MedicinalProductInteraction_Interactant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* itemReference */,
             ::fhir::CodeableConcept_pskel& /* itemCodeableConcept */);

    // Individual element parsers.
    //
    void
    itemReference_parser (::fhir::Reference_pskel&);

    void
    itemCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductInteraction_Interactant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductInteraction_Interactant_pskel* MedicinalProductInteraction_Interactant_impl_;
    MedicinalProductInteraction_Interactant_pskel (MedicinalProductInteraction_Interactant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* itemReference_parser_;
    ::fhir::CodeableConcept_pskel* itemCodeableConcept_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductInteraction_Interactant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductManufactured_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    manufacturedDoseForm ();

    virtual void
    unitOfPresentation ();

    virtual void
    quantity ();

    virtual void
    manufacturer ();

    virtual void
    ingredient ();

    virtual void
    physicalCharacteristics ();

    virtual void
    otherCharacteristics ();

    virtual void
    post_MedicinalProductManufactured ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* manufacturedDoseForm */,
             ::fhir::CodeableConcept_pskel& /* unitOfPresentation */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Reference_pskel& /* manufacturer */,
             ::fhir::Reference_pskel& /* ingredient */,
             ::fhir::ProdCharacteristic_pskel& /* physicalCharacteristics */,
             ::fhir::CodeableConcept_pskel& /* otherCharacteristics */);

    // Individual element parsers.
    //
    void
    manufacturedDoseForm_parser (::fhir::CodeableConcept_pskel&);

    void
    unitOfPresentation_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    void
    ingredient_parser (::fhir::Reference_pskel&);

    void
    physicalCharacteristics_parser (::fhir::ProdCharacteristic_pskel&);

    void
    otherCharacteristics_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductManufactured_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductManufactured_pskel* MedicinalProductManufactured_impl_;
    MedicinalProductManufactured_pskel (MedicinalProductManufactured_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* manufacturedDoseForm_parser_;
    ::fhir::CodeableConcept_pskel* unitOfPresentation_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;
    ::fhir::Reference_pskel* ingredient_parser_;
    ::fhir::ProdCharacteristic_pskel* physicalCharacteristics_parser_;
    ::fhir::CodeableConcept_pskel* otherCharacteristics_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductManufactured_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductPackaged_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    subject ();

    virtual void
    description ();

    virtual void
    legalStatusOfSupply ();

    virtual void
    marketingStatus ();

    virtual void
    marketingAuthorization ();

    virtual void
    manufacturer ();

    virtual void
    batchIdentifier ();

    virtual void
    packageItem ();

    virtual void
    post_MedicinalProductPackaged ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::string_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* legalStatusOfSupply */,
             ::fhir::MarketingStatus_pskel& /* marketingStatus */,
             ::fhir::Reference_pskel& /* marketingAuthorization */,
             ::fhir::Reference_pskel& /* manufacturer */,
             ::fhir::MedicinalProductPackaged_BatchIdentifier_pskel& /* batchIdentifier */,
             ::fhir::MedicinalProductPackaged_PackageItem_pskel& /* packageItem */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    legalStatusOfSupply_parser (::fhir::CodeableConcept_pskel&);

    void
    marketingStatus_parser (::fhir::MarketingStatus_pskel&);

    void
    marketingAuthorization_parser (::fhir::Reference_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    void
    batchIdentifier_parser (::fhir::MedicinalProductPackaged_BatchIdentifier_pskel&);

    void
    packageItem_parser (::fhir::MedicinalProductPackaged_PackageItem_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductPackaged_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductPackaged_pskel* MedicinalProductPackaged_impl_;
    MedicinalProductPackaged_pskel (MedicinalProductPackaged_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* legalStatusOfSupply_parser_;
    ::fhir::MarketingStatus_pskel* marketingStatus_parser_;
    ::fhir::Reference_pskel* marketingAuthorization_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;
    ::fhir::MedicinalProductPackaged_BatchIdentifier_pskel* batchIdentifier_parser_;
    ::fhir::MedicinalProductPackaged_PackageItem_pskel* packageItem_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductPackaged_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductPackaged_BatchIdentifier_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    outerPackaging ();

    virtual void
    immediatePackaging ();

    virtual void
    post_MedicinalProductPackaged_BatchIdentifier ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* outerPackaging */,
             ::fhir::Identifier_pskel& /* immediatePackaging */);

    // Individual element parsers.
    //
    void
    outerPackaging_parser (::fhir::Identifier_pskel&);

    void
    immediatePackaging_parser (::fhir::Identifier_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductPackaged_BatchIdentifier_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductPackaged_BatchIdentifier_pskel* MedicinalProductPackaged_BatchIdentifier_impl_;
    MedicinalProductPackaged_BatchIdentifier_pskel (MedicinalProductPackaged_BatchIdentifier_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* outerPackaging_parser_;
    ::fhir::Identifier_pskel* immediatePackaging_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductPackaged_BatchIdentifier_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductPackaged_PackageItem_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    quantity ();

    virtual void
    material ();

    virtual void
    alternateMaterial ();

    virtual void
    device ();

    virtual void
    manufacturedItem ();

    virtual void
    packageItem ();

    virtual void
    physicalCharacteristics ();

    virtual void
    otherCharacteristics ();

    virtual void
    shelfLifeStorage ();

    virtual void
    manufacturer ();

    virtual void
    post_MedicinalProductPackaged_PackageItem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::CodeableConcept_pskel& /* material */,
             ::fhir::CodeableConcept_pskel& /* alternateMaterial */,
             ::fhir::Reference_pskel& /* device */,
             ::fhir::Reference_pskel& /* manufacturedItem */,
             ::fhir::MedicinalProductPackaged_PackageItem_pskel& /* packageItem */,
             ::fhir::ProdCharacteristic_pskel& /* physicalCharacteristics */,
             ::fhir::CodeableConcept_pskel& /* otherCharacteristics */,
             ::fhir::ProductShelfLife_pskel& /* shelfLifeStorage */,
             ::fhir::Reference_pskel& /* manufacturer */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    material_parser (::fhir::CodeableConcept_pskel&);

    void
    alternateMaterial_parser (::fhir::CodeableConcept_pskel&);

    void
    device_parser (::fhir::Reference_pskel&);

    void
    manufacturedItem_parser (::fhir::Reference_pskel&);

    void
    packageItem_parser (::fhir::MedicinalProductPackaged_PackageItem_pskel&);

    void
    physicalCharacteristics_parser (::fhir::ProdCharacteristic_pskel&);

    void
    otherCharacteristics_parser (::fhir::CodeableConcept_pskel&);

    void
    shelfLifeStorage_parser (::fhir::ProductShelfLife_pskel&);

    void
    manufacturer_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductPackaged_PackageItem_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductPackaged_PackageItem_pskel* MedicinalProductPackaged_PackageItem_impl_;
    MedicinalProductPackaged_PackageItem_pskel (MedicinalProductPackaged_PackageItem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::CodeableConcept_pskel* material_parser_;
    ::fhir::CodeableConcept_pskel* alternateMaterial_parser_;
    ::fhir::Reference_pskel* device_parser_;
    ::fhir::Reference_pskel* manufacturedItem_parser_;
    ::fhir::MedicinalProductPackaged_PackageItem_pskel* packageItem_parser_;
    ::fhir::ProdCharacteristic_pskel* physicalCharacteristics_parser_;
    ::fhir::CodeableConcept_pskel* otherCharacteristics_parser_;
    ::fhir::ProductShelfLife_pskel* shelfLifeStorage_parser_;
    ::fhir::Reference_pskel* manufacturer_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductPackaged_PackageItem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductPharmaceutical_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    administrableDoseForm ();

    virtual void
    unitOfPresentation ();

    virtual void
    ingredient ();

    virtual void
    device ();

    virtual void
    characteristics ();

    virtual void
    routeOfAdministration ();

    virtual void
    post_MedicinalProductPharmaceutical ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* administrableDoseForm */,
             ::fhir::CodeableConcept_pskel& /* unitOfPresentation */,
             ::fhir::Reference_pskel& /* ingredient */,
             ::fhir::Reference_pskel& /* device */,
             ::fhir::MedicinalProductPharmaceutical_Characteristics_pskel& /* characteristics */,
             ::fhir::MedicinalProductPharmaceutical_RouteOfAdministration_pskel& /* routeOfAdministration */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    administrableDoseForm_parser (::fhir::CodeableConcept_pskel&);

    void
    unitOfPresentation_parser (::fhir::CodeableConcept_pskel&);

    void
    ingredient_parser (::fhir::Reference_pskel&);

    void
    device_parser (::fhir::Reference_pskel&);

    void
    characteristics_parser (::fhir::MedicinalProductPharmaceutical_Characteristics_pskel&);

    void
    routeOfAdministration_parser (::fhir::MedicinalProductPharmaceutical_RouteOfAdministration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductPharmaceutical_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductPharmaceutical_pskel* MedicinalProductPharmaceutical_impl_;
    MedicinalProductPharmaceutical_pskel (MedicinalProductPharmaceutical_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* administrableDoseForm_parser_;
    ::fhir::CodeableConcept_pskel* unitOfPresentation_parser_;
    ::fhir::Reference_pskel* ingredient_parser_;
    ::fhir::Reference_pskel* device_parser_;
    ::fhir::MedicinalProductPharmaceutical_Characteristics_pskel* characteristics_parser_;
    ::fhir::MedicinalProductPharmaceutical_RouteOfAdministration_pskel* routeOfAdministration_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductPharmaceutical_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductPharmaceutical_Characteristics_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    status ();

    virtual void
    post_MedicinalProductPharmaceutical_Characteristics ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* status */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductPharmaceutical_Characteristics_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductPharmaceutical_Characteristics_pskel* MedicinalProductPharmaceutical_Characteristics_impl_;
    MedicinalProductPharmaceutical_Characteristics_pskel (MedicinalProductPharmaceutical_Characteristics_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductPharmaceutical_Characteristics_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductPharmaceutical_RouteOfAdministration_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    firstDose ();

    virtual void
    maxSingleDose ();

    virtual void
    maxDosePerDay ();

    virtual void
    maxDosePerTreatmentPeriod ();

    virtual void
    maxTreatmentPeriod ();

    virtual void
    targetSpecies ();

    virtual void
    post_MedicinalProductPharmaceutical_RouteOfAdministration ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Quantity_pskel& /* firstDose */,
             ::fhir::Quantity_pskel& /* maxSingleDose */,
             ::fhir::Quantity_pskel& /* maxDosePerDay */,
             ::fhir::Ratio_pskel& /* maxDosePerTreatmentPeriod */,
             ::fhir::Duration_pskel& /* maxTreatmentPeriod */,
             ::fhir::MedicinalProductPharmaceutical_TargetSpecies_pskel& /* targetSpecies */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    firstDose_parser (::fhir::Quantity_pskel&);

    void
    maxSingleDose_parser (::fhir::Quantity_pskel&);

    void
    maxDosePerDay_parser (::fhir::Quantity_pskel&);

    void
    maxDosePerTreatmentPeriod_parser (::fhir::Ratio_pskel&);

    void
    maxTreatmentPeriod_parser (::fhir::Duration_pskel&);

    void
    targetSpecies_parser (::fhir::MedicinalProductPharmaceutical_TargetSpecies_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductPharmaceutical_RouteOfAdministration_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductPharmaceutical_RouteOfAdministration_pskel* MedicinalProductPharmaceutical_RouteOfAdministration_impl_;
    MedicinalProductPharmaceutical_RouteOfAdministration_pskel (MedicinalProductPharmaceutical_RouteOfAdministration_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Quantity_pskel* firstDose_parser_;
    ::fhir::Quantity_pskel* maxSingleDose_parser_;
    ::fhir::Quantity_pskel* maxDosePerDay_parser_;
    ::fhir::Ratio_pskel* maxDosePerTreatmentPeriod_parser_;
    ::fhir::Duration_pskel* maxTreatmentPeriod_parser_;
    ::fhir::MedicinalProductPharmaceutical_TargetSpecies_pskel* targetSpecies_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductPharmaceutical_RouteOfAdministration_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductPharmaceutical_TargetSpecies_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    withdrawalPeriod ();

    virtual void
    post_MedicinalProductPharmaceutical_TargetSpecies ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::MedicinalProductPharmaceutical_WithdrawalPeriod_pskel& /* withdrawalPeriod */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    withdrawalPeriod_parser (::fhir::MedicinalProductPharmaceutical_WithdrawalPeriod_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductPharmaceutical_TargetSpecies_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductPharmaceutical_TargetSpecies_pskel* MedicinalProductPharmaceutical_TargetSpecies_impl_;
    MedicinalProductPharmaceutical_TargetSpecies_pskel (MedicinalProductPharmaceutical_TargetSpecies_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::MedicinalProductPharmaceutical_WithdrawalPeriod_pskel* withdrawalPeriod_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductPharmaceutical_TargetSpecies_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductPharmaceutical_WithdrawalPeriod_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    tissue ();

    virtual void
    value ();

    virtual void
    supportingInformation ();

    virtual void
    post_MedicinalProductPharmaceutical_WithdrawalPeriod ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* tissue */,
             ::fhir::Quantity_pskel& /* value */,
             ::fhir::string_pskel& /* supportingInformation */);

    // Individual element parsers.
    //
    void
    tissue_parser (::fhir::CodeableConcept_pskel&);

    void
    value_parser (::fhir::Quantity_pskel&);

    void
    supportingInformation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductPharmaceutical_WithdrawalPeriod_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductPharmaceutical_WithdrawalPeriod_pskel* MedicinalProductPharmaceutical_WithdrawalPeriod_impl_;
    MedicinalProductPharmaceutical_WithdrawalPeriod_pskel (MedicinalProductPharmaceutical_WithdrawalPeriod_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* tissue_parser_;
    ::fhir::Quantity_pskel* value_parser_;
    ::fhir::string_pskel* supportingInformation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductPharmaceutical_WithdrawalPeriod_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MedicinalProductUndesirableEffect_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    subject ();

    virtual void
    symptomConditionEffect ();

    virtual void
    classification ();

    virtual void
    frequencyOfOccurrence ();

    virtual void
    population ();

    virtual void
    post_MedicinalProductUndesirableEffect ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::CodeableConcept_pskel& /* symptomConditionEffect */,
             ::fhir::CodeableConcept_pskel& /* classification */,
             ::fhir::CodeableConcept_pskel& /* frequencyOfOccurrence */,
             ::fhir::Population_pskel& /* population */);

    // Individual element parsers.
    //
    void
    subject_parser (::fhir::Reference_pskel&);

    void
    symptomConditionEffect_parser (::fhir::CodeableConcept_pskel&);

    void
    classification_parser (::fhir::CodeableConcept_pskel&);

    void
    frequencyOfOccurrence_parser (::fhir::CodeableConcept_pskel&);

    void
    population_parser (::fhir::Population_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MedicinalProductUndesirableEffect_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MedicinalProductUndesirableEffect_pskel* MedicinalProductUndesirableEffect_impl_;
    MedicinalProductUndesirableEffect_pskel (MedicinalProductUndesirableEffect_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::CodeableConcept_pskel* symptomConditionEffect_parser_;
    ::fhir::CodeableConcept_pskel* classification_parser_;
    ::fhir::CodeableConcept_pskel* frequencyOfOccurrence_parser_;
    ::fhir::Population_pskel* population_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MedicinalProductUndesirableEffect_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MessageDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    replaces ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    base ();

    virtual void
    parent ();

    virtual void
    eventCoding ();

    virtual void
    eventUri ();

    virtual void
    category ();

    virtual void
    focus ();

    virtual void
    responseRequired ();

    virtual void
    allowedResponse ();

    virtual void
    graph ();

    virtual void
    post_MessageDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::canonical_pskel& /* replaces */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::canonical_pskel& /* base */,
             ::fhir::canonical_pskel& /* parent */,
             ::fhir::Coding_pskel& /* eventCoding */,
             ::fhir::uri_pskel& /* eventUri */,
             ::fhir::MessageSignificanceCategory_pskel& /* category */,
             ::fhir::MessageDefinition_Focus_pskel& /* focus */,
             ::fhir::messageheaderResponseRequest_pskel& /* responseRequired */,
             ::fhir::MessageDefinition_AllowedResponse_pskel& /* allowedResponse */,
             ::fhir::canonical_pskel& /* graph */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    replaces_parser (::fhir::canonical_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    base_parser (::fhir::canonical_pskel&);

    void
    parent_parser (::fhir::canonical_pskel&);

    void
    eventCoding_parser (::fhir::Coding_pskel&);

    void
    eventUri_parser (::fhir::uri_pskel&);

    void
    category_parser (::fhir::MessageSignificanceCategory_pskel&);

    void
    focus_parser (::fhir::MessageDefinition_Focus_pskel&);

    void
    responseRequired_parser (::fhir::messageheaderResponseRequest_pskel&);

    void
    allowedResponse_parser (::fhir::MessageDefinition_AllowedResponse_pskel&);

    void
    graph_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MessageDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MessageDefinition_pskel* MessageDefinition_impl_;
    MessageDefinition_pskel (MessageDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::canonical_pskel* replaces_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::canonical_pskel* base_parser_;
    ::fhir::canonical_pskel* parent_parser_;
    ::fhir::Coding_pskel* eventCoding_parser_;
    ::fhir::uri_pskel* eventUri_parser_;
    ::fhir::MessageSignificanceCategory_pskel* category_parser_;
    ::fhir::MessageDefinition_Focus_pskel* focus_parser_;
    ::fhir::messageheaderResponseRequest_pskel* responseRequired_parser_;
    ::fhir::MessageDefinition_AllowedResponse_pskel* allowedResponse_parser_;
    ::fhir::canonical_pskel* graph_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MessageDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MessageDefinition_Focus_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    profile ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    post_MessageDefinition_Focus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::unsignedInt_pskel& /* min */,
             ::fhir::string_pskel& /* max */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    min_parser (::fhir::unsignedInt_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MessageDefinition_Focus_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MessageDefinition_Focus_pskel* MessageDefinition_Focus_impl_;
    MessageDefinition_Focus_pskel (MessageDefinition_Focus_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::unsignedInt_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MessageDefinition_Focus_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MessageDefinition_AllowedResponse_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    message ();

    virtual void
    situation ();

    virtual void
    post_MessageDefinition_AllowedResponse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::canonical_pskel& /* message */,
             ::fhir::markdown_pskel& /* situation */);

    // Individual element parsers.
    //
    void
    message_parser (::fhir::canonical_pskel&);

    void
    situation_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MessageDefinition_AllowedResponse_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MessageDefinition_AllowedResponse_pskel* MessageDefinition_AllowedResponse_impl_;
    MessageDefinition_AllowedResponse_pskel (MessageDefinition_AllowedResponse_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::canonical_pskel* message_parser_;
    ::fhir::markdown_pskel* situation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MessageDefinition_AllowedResponse_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MessageSignificanceCategory_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MessageSignificanceCategory_list ();

    // Constructor.
    //
    MessageSignificanceCategory_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    MessageSignificanceCategory_list_pskel* MessageSignificanceCategory_list_impl_;
    MessageSignificanceCategory_list_pskel (MessageSignificanceCategory_list_pskel*, void*);

    protected:
    static const char* const _xsde_MessageSignificanceCategory_list_pskel_enums_[3UL];
  };

  class MessageSignificanceCategory_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_MessageSignificanceCategory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::MessageSignificanceCategory_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::MessageSignificanceCategory_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MessageSignificanceCategory_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    MessageSignificanceCategory_pskel* MessageSignificanceCategory_impl_;
    MessageSignificanceCategory_pskel (MessageSignificanceCategory_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::MessageSignificanceCategory_list_pskel* value_parser_;
  };

  class messageheaderResponseRequest_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_messageheaderResponseRequest_list ();

    // Constructor.
    //
    messageheaderResponseRequest_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    messageheaderResponseRequest_list_pskel* messageheaderResponseRequest_list_impl_;
    messageheaderResponseRequest_list_pskel (messageheaderResponseRequest_list_pskel*, void*);

    protected:
    static const char* const _xsde_messageheaderResponseRequest_list_pskel_enums_[4UL];
  };

  class messageheaderResponseRequest_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_messageheaderResponseRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::messageheaderResponseRequest_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::messageheaderResponseRequest_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    messageheaderResponseRequest_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    messageheaderResponseRequest_pskel* messageheaderResponseRequest_impl_;
    messageheaderResponseRequest_pskel (messageheaderResponseRequest_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::messageheaderResponseRequest_list_pskel* value_parser_;
  };

  class MessageHeader_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    eventCoding ();

    virtual void
    eventUri ();

    virtual void
    destination ();

    virtual void
    sender ();

    virtual void
    enterer ();

    virtual void
    author ();

    virtual void
    source ();

    virtual void
    responsible ();

    virtual void
    reason ();

    virtual void
    response ();

    virtual void
    focus ();

    virtual void
    definition ();

    virtual void
    post_MessageHeader ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* eventCoding */,
             ::fhir::uri_pskel& /* eventUri */,
             ::fhir::MessageHeader_Destination_pskel& /* destination */,
             ::fhir::Reference_pskel& /* sender */,
             ::fhir::Reference_pskel& /* enterer */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::MessageHeader_Source_pskel& /* source */,
             ::fhir::Reference_pskel& /* responsible */,
             ::fhir::CodeableConcept_pskel& /* reason */,
             ::fhir::MessageHeader_Response_pskel& /* response */,
             ::fhir::Reference_pskel& /* focus */,
             ::fhir::canonical_pskel& /* definition */);

    // Individual element parsers.
    //
    void
    eventCoding_parser (::fhir::Coding_pskel&);

    void
    eventUri_parser (::fhir::uri_pskel&);

    void
    destination_parser (::fhir::MessageHeader_Destination_pskel&);

    void
    sender_parser (::fhir::Reference_pskel&);

    void
    enterer_parser (::fhir::Reference_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    source_parser (::fhir::MessageHeader_Source_pskel&);

    void
    responsible_parser (::fhir::Reference_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    void
    response_parser (::fhir::MessageHeader_Response_pskel&);

    void
    focus_parser (::fhir::Reference_pskel&);

    void
    definition_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MessageHeader_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MessageHeader_pskel* MessageHeader_impl_;
    MessageHeader_pskel (MessageHeader_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* eventCoding_parser_;
    ::fhir::uri_pskel* eventUri_parser_;
    ::fhir::MessageHeader_Destination_pskel* destination_parser_;
    ::fhir::Reference_pskel* sender_parser_;
    ::fhir::Reference_pskel* enterer_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::MessageHeader_Source_pskel* source_parser_;
    ::fhir::Reference_pskel* responsible_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;
    ::fhir::MessageHeader_Response_pskel* response_parser_;
    ::fhir::Reference_pskel* focus_parser_;
    ::fhir::canonical_pskel* definition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MessageHeader_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MessageHeader_Destination_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    target ();

    virtual void
    endpoint ();

    virtual void
    receiver ();

    virtual void
    post_MessageHeader_Destination ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::Reference_pskel& /* target */,
             ::fhir::url_pskel& /* endpoint */,
             ::fhir::Reference_pskel& /* receiver */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    target_parser (::fhir::Reference_pskel&);

    void
    endpoint_parser (::fhir::url_pskel&);

    void
    receiver_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MessageHeader_Destination_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MessageHeader_Destination_pskel* MessageHeader_Destination_impl_;
    MessageHeader_Destination_pskel (MessageHeader_Destination_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::Reference_pskel* target_parser_;
    ::fhir::url_pskel* endpoint_parser_;
    ::fhir::Reference_pskel* receiver_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MessageHeader_Destination_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MessageHeader_Source_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    software ();

    virtual void
    version ();

    virtual void
    contact ();

    virtual void
    endpoint ();

    virtual void
    post_MessageHeader_Source ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* software */,
             ::fhir::string_pskel& /* version */,
             ::fhir::ContactPoint_pskel& /* contact */,
             ::fhir::url_pskel& /* endpoint */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    software_parser (::fhir::string_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactPoint_pskel&);

    void
    endpoint_parser (::fhir::url_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MessageHeader_Source_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MessageHeader_Source_pskel* MessageHeader_Source_impl_;
    MessageHeader_Source_pskel (MessageHeader_Source_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* software_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::ContactPoint_pskel* contact_parser_;
    ::fhir::url_pskel* endpoint_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MessageHeader_Source_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MessageHeader_Response_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    code ();

    virtual void
    details ();

    virtual void
    post_MessageHeader_Response ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* identifier */,
             ::fhir::ResponseType_pskel& /* code */,
             ::fhir::Reference_pskel& /* details */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::id_pskel&);

    void
    code_parser (::fhir::ResponseType_pskel&);

    void
    details_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MessageHeader_Response_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MessageHeader_Response_pskel* MessageHeader_Response_impl_;
    MessageHeader_Response_pskel (MessageHeader_Response_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* identifier_parser_;
    ::fhir::ResponseType_pskel* code_parser_;
    ::fhir::Reference_pskel* details_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MessageHeader_Response_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ResponseType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ResponseType_list ();

    // Constructor.
    //
    ResponseType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResponseType_list_pskel* ResponseType_list_impl_;
    ResponseType_list_pskel (ResponseType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ResponseType_list_pskel_enums_[3UL];
  };

  class ResponseType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ResponseType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ResponseType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ResponseType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResponseType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResponseType_pskel* ResponseType_impl_;
    ResponseType_pskel (ResponseType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ResponseType_list_pskel* value_parser_;
  };

  class MolecularSequence_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    coordinateSystem ();

    virtual void
    patient ();

    virtual void
    specimen ();

    virtual void
    device ();

    virtual void
    performer ();

    virtual void
    quantity ();

    virtual void
    referenceSeq ();

    virtual void
    variant ();

    virtual void
    observedSeq ();

    virtual void
    quality ();

    virtual void
    readCoverage ();

    virtual void
    repository ();

    virtual void
    pointer ();

    virtual void
    structureVariant ();

    virtual void
    post_MolecularSequence ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::sequenceType_pskel& /* type */,
             ::fhir::integer_pskel& /* coordinateSystem */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Reference_pskel& /* specimen */,
             ::fhir::Reference_pskel& /* device */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::MolecularSequence_ReferenceSeq_pskel& /* referenceSeq */,
             ::fhir::MolecularSequence_Variant_pskel& /* variant */,
             ::fhir::string_pskel& /* observedSeq */,
             ::fhir::MolecularSequence_Quality_pskel& /* quality */,
             ::fhir::integer_pskel& /* readCoverage */,
             ::fhir::MolecularSequence_Repository_pskel& /* repository */,
             ::fhir::Reference_pskel& /* pointer */,
             ::fhir::MolecularSequence_StructureVariant_pskel& /* structureVariant */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::sequenceType_pskel&);

    void
    coordinateSystem_parser (::fhir::integer_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    specimen_parser (::fhir::Reference_pskel&);

    void
    device_parser (::fhir::Reference_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    referenceSeq_parser (::fhir::MolecularSequence_ReferenceSeq_pskel&);

    void
    variant_parser (::fhir::MolecularSequence_Variant_pskel&);

    void
    observedSeq_parser (::fhir::string_pskel&);

    void
    quality_parser (::fhir::MolecularSequence_Quality_pskel&);

    void
    readCoverage_parser (::fhir::integer_pskel&);

    void
    repository_parser (::fhir::MolecularSequence_Repository_pskel&);

    void
    pointer_parser (::fhir::Reference_pskel&);

    void
    structureVariant_parser (::fhir::MolecularSequence_StructureVariant_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_pskel* MolecularSequence_impl_;
    MolecularSequence_pskel (MolecularSequence_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::sequenceType_pskel* type_parser_;
    ::fhir::integer_pskel* coordinateSystem_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Reference_pskel* specimen_parser_;
    ::fhir::Reference_pskel* device_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::MolecularSequence_ReferenceSeq_pskel* referenceSeq_parser_;
    ::fhir::MolecularSequence_Variant_pskel* variant_parser_;
    ::fhir::string_pskel* observedSeq_parser_;
    ::fhir::MolecularSequence_Quality_pskel* quality_parser_;
    ::fhir::integer_pskel* readCoverage_parser_;
    ::fhir::MolecularSequence_Repository_pskel* repository_parser_;
    ::fhir::Reference_pskel* pointer_parser_;
    ::fhir::MolecularSequence_StructureVariant_pskel* structureVariant_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_ReferenceSeq_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    chromosome ();

    virtual void
    genomeBuild ();

    virtual void
    orientation ();

    virtual void
    referenceSeqId ();

    virtual void
    referenceSeqPointer ();

    virtual void
    referenceSeqString ();

    virtual void
    strand ();

    virtual void
    windowStart ();

    virtual void
    windowEnd ();

    virtual void
    post_MolecularSequence_ReferenceSeq ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* chromosome */,
             ::fhir::string_pskel& /* genomeBuild */,
             ::fhir::orientationType_pskel& /* orientation */,
             ::fhir::CodeableConcept_pskel& /* referenceSeqId */,
             ::fhir::Reference_pskel& /* referenceSeqPointer */,
             ::fhir::string_pskel& /* referenceSeqString */,
             ::fhir::strandType_pskel& /* strand */,
             ::fhir::integer_pskel& /* windowStart */,
             ::fhir::integer_pskel& /* windowEnd */);

    // Individual element parsers.
    //
    void
    chromosome_parser (::fhir::CodeableConcept_pskel&);

    void
    genomeBuild_parser (::fhir::string_pskel&);

    void
    orientation_parser (::fhir::orientationType_pskel&);

    void
    referenceSeqId_parser (::fhir::CodeableConcept_pskel&);

    void
    referenceSeqPointer_parser (::fhir::Reference_pskel&);

    void
    referenceSeqString_parser (::fhir::string_pskel&);

    void
    strand_parser (::fhir::strandType_pskel&);

    void
    windowStart_parser (::fhir::integer_pskel&);

    void
    windowEnd_parser (::fhir::integer_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_ReferenceSeq_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_ReferenceSeq_pskel* MolecularSequence_ReferenceSeq_impl_;
    MolecularSequence_ReferenceSeq_pskel (MolecularSequence_ReferenceSeq_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* chromosome_parser_;
    ::fhir::string_pskel* genomeBuild_parser_;
    ::fhir::orientationType_pskel* orientation_parser_;
    ::fhir::CodeableConcept_pskel* referenceSeqId_parser_;
    ::fhir::Reference_pskel* referenceSeqPointer_parser_;
    ::fhir::string_pskel* referenceSeqString_parser_;
    ::fhir::strandType_pskel* strand_parser_;
    ::fhir::integer_pskel* windowStart_parser_;
    ::fhir::integer_pskel* windowEnd_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_ReferenceSeq_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Variant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    start ();

    virtual void
    end ();

    virtual void
    observedAllele ();

    virtual void
    referenceAllele ();

    virtual void
    cigar ();

    virtual void
    variantPointer ();

    virtual void
    post_MolecularSequence_Variant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* start */,
             ::fhir::integer_pskel& /* end */,
             ::fhir::string_pskel& /* observedAllele */,
             ::fhir::string_pskel& /* referenceAllele */,
             ::fhir::string_pskel& /* cigar */,
             ::fhir::Reference_pskel& /* variantPointer */);

    // Individual element parsers.
    //
    void
    start_parser (::fhir::integer_pskel&);

    void
    end_parser (::fhir::integer_pskel&);

    void
    observedAllele_parser (::fhir::string_pskel&);

    void
    referenceAllele_parser (::fhir::string_pskel&);

    void
    cigar_parser (::fhir::string_pskel&);

    void
    variantPointer_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Variant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Variant_pskel* MolecularSequence_Variant_impl_;
    MolecularSequence_Variant_pskel (MolecularSequence_Variant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* start_parser_;
    ::fhir::integer_pskel* end_parser_;
    ::fhir::string_pskel* observedAllele_parser_;
    ::fhir::string_pskel* referenceAllele_parser_;
    ::fhir::string_pskel* cigar_parser_;
    ::fhir::Reference_pskel* variantPointer_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Variant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Quality_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    standardSequence ();

    virtual void
    start ();

    virtual void
    end ();

    virtual void
    score ();

    virtual void
    method ();

    virtual void
    truthTP ();

    virtual void
    queryTP ();

    virtual void
    truthFN ();

    virtual void
    queryFP ();

    virtual void
    gtFP ();

    virtual void
    precision ();

    virtual void
    recall ();

    virtual void
    fScore ();

    virtual void
    roc ();

    virtual void
    post_MolecularSequence_Quality ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::qualityType_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* standardSequence */,
             ::fhir::integer_pskel& /* start */,
             ::fhir::integer_pskel& /* end */,
             ::fhir::Quantity_pskel& /* score */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::decimal_pskel& /* truthTP */,
             ::fhir::decimal_pskel& /* queryTP */,
             ::fhir::decimal_pskel& /* truthFN */,
             ::fhir::decimal_pskel& /* queryFP */,
             ::fhir::decimal_pskel& /* gtFP */,
             ::fhir::decimal_pskel& /* precision */,
             ::fhir::decimal_pskel& /* recall */,
             ::fhir::decimal_pskel& /* fScore */,
             ::fhir::MolecularSequence_Roc_pskel& /* roc */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::qualityType_pskel&);

    void
    standardSequence_parser (::fhir::CodeableConcept_pskel&);

    void
    start_parser (::fhir::integer_pskel&);

    void
    end_parser (::fhir::integer_pskel&);

    void
    score_parser (::fhir::Quantity_pskel&);

    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    truthTP_parser (::fhir::decimal_pskel&);

    void
    queryTP_parser (::fhir::decimal_pskel&);

    void
    truthFN_parser (::fhir::decimal_pskel&);

    void
    queryFP_parser (::fhir::decimal_pskel&);

    void
    gtFP_parser (::fhir::decimal_pskel&);

    void
    precision_parser (::fhir::decimal_pskel&);

    void
    recall_parser (::fhir::decimal_pskel&);

    void
    fScore_parser (::fhir::decimal_pskel&);

    void
    roc_parser (::fhir::MolecularSequence_Roc_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Quality_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Quality_pskel* MolecularSequence_Quality_impl_;
    MolecularSequence_Quality_pskel (MolecularSequence_Quality_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::qualityType_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* standardSequence_parser_;
    ::fhir::integer_pskel* start_parser_;
    ::fhir::integer_pskel* end_parser_;
    ::fhir::Quantity_pskel* score_parser_;
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::decimal_pskel* truthTP_parser_;
    ::fhir::decimal_pskel* queryTP_parser_;
    ::fhir::decimal_pskel* truthFN_parser_;
    ::fhir::decimal_pskel* queryFP_parser_;
    ::fhir::decimal_pskel* gtFP_parser_;
    ::fhir::decimal_pskel* precision_parser_;
    ::fhir::decimal_pskel* recall_parser_;
    ::fhir::decimal_pskel* fScore_parser_;
    ::fhir::MolecularSequence_Roc_pskel* roc_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Quality_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Roc_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    score ();

    virtual void
    numTP ();

    virtual void
    numFP ();

    virtual void
    numFN ();

    virtual void
    precision ();

    virtual void
    sensitivity ();

    virtual void
    fMeasure ();

    virtual void
    post_MolecularSequence_Roc ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* score */,
             ::fhir::integer_pskel& /* numTP */,
             ::fhir::integer_pskel& /* numFP */,
             ::fhir::integer_pskel& /* numFN */,
             ::fhir::decimal_pskel& /* precision */,
             ::fhir::decimal_pskel& /* sensitivity */,
             ::fhir::decimal_pskel& /* fMeasure */);

    // Individual element parsers.
    //
    void
    score_parser (::fhir::integer_pskel&);

    void
    numTP_parser (::fhir::integer_pskel&);

    void
    numFP_parser (::fhir::integer_pskel&);

    void
    numFN_parser (::fhir::integer_pskel&);

    void
    precision_parser (::fhir::decimal_pskel&);

    void
    sensitivity_parser (::fhir::decimal_pskel&);

    void
    fMeasure_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Roc_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Roc_pskel* MolecularSequence_Roc_impl_;
    MolecularSequence_Roc_pskel (MolecularSequence_Roc_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* score_parser_;
    ::fhir::integer_pskel* numTP_parser_;
    ::fhir::integer_pskel* numFP_parser_;
    ::fhir::integer_pskel* numFN_parser_;
    ::fhir::decimal_pskel* precision_parser_;
    ::fhir::decimal_pskel* sensitivity_parser_;
    ::fhir::decimal_pskel* fMeasure_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Roc_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Repository_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    url ();

    virtual void
    name ();

    virtual void
    datasetId ();

    virtual void
    variantsetId ();

    virtual void
    readsetId ();

    virtual void
    post_MolecularSequence_Repository ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::repositoryType_pskel& /* type */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* datasetId */,
             ::fhir::string_pskel& /* variantsetId */,
             ::fhir::string_pskel& /* readsetId */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::repositoryType_pskel&);

    void
    url_parser (::fhir::uri_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    datasetId_parser (::fhir::string_pskel&);

    void
    variantsetId_parser (::fhir::string_pskel&);

    void
    readsetId_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Repository_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Repository_pskel* MolecularSequence_Repository_impl_;
    MolecularSequence_Repository_pskel (MolecularSequence_Repository_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::repositoryType_pskel* type_parser_;
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* datasetId_parser_;
    ::fhir::string_pskel* variantsetId_parser_;
    ::fhir::string_pskel* readsetId_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Repository_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_StructureVariant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    variantType ();

    virtual void
    exact ();

    virtual void
    length ();

    virtual void
    outer ();

    virtual void
    inner ();

    virtual void
    post_MolecularSequence_StructureVariant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* variantType */,
             ::fhir::boolean_pskel& /* exact */,
             ::fhir::integer_pskel& /* length */,
             ::fhir::MolecularSequence_Outer_pskel& /* outer */,
             ::fhir::MolecularSequence_Inner_pskel& /* inner */);

    // Individual element parsers.
    //
    void
    variantType_parser (::fhir::CodeableConcept_pskel&);

    void
    exact_parser (::fhir::boolean_pskel&);

    void
    length_parser (::fhir::integer_pskel&);

    void
    outer_parser (::fhir::MolecularSequence_Outer_pskel&);

    void
    inner_parser (::fhir::MolecularSequence_Inner_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_StructureVariant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_StructureVariant_pskel* MolecularSequence_StructureVariant_impl_;
    MolecularSequence_StructureVariant_pskel (MolecularSequence_StructureVariant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* variantType_parser_;
    ::fhir::boolean_pskel* exact_parser_;
    ::fhir::integer_pskel* length_parser_;
    ::fhir::MolecularSequence_Outer_pskel* outer_parser_;
    ::fhir::MolecularSequence_Inner_pskel* inner_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_StructureVariant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Outer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    start ();

    virtual void
    end ();

    virtual void
    post_MolecularSequence_Outer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* start */,
             ::fhir::integer_pskel& /* end */);

    // Individual element parsers.
    //
    void
    start_parser (::fhir::integer_pskel&);

    void
    end_parser (::fhir::integer_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Outer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Outer_pskel* MolecularSequence_Outer_impl_;
    MolecularSequence_Outer_pskel (MolecularSequence_Outer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* start_parser_;
    ::fhir::integer_pskel* end_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Outer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class MolecularSequence_Inner_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    start ();

    virtual void
    end ();

    virtual void
    post_MolecularSequence_Inner ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* start */,
             ::fhir::integer_pskel& /* end */);

    // Individual element parsers.
    //
    void
    start_parser (::fhir::integer_pskel&);

    void
    end_parser (::fhir::integer_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    MolecularSequence_Inner_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    MolecularSequence_Inner_pskel* MolecularSequence_Inner_impl_;
    MolecularSequence_Inner_pskel (MolecularSequence_Inner_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* start_parser_;
    ::fhir::integer_pskel* end_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::MolecularSequence_Inner_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class strandType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_strandType_list ();

    // Constructor.
    //
    strandType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    strandType_list_pskel* strandType_list_impl_;
    strandType_list_pskel (strandType_list_pskel*, void*);

    protected:
    static const char* const _xsde_strandType_list_pskel_enums_[2UL];
  };

  class strandType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_strandType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::strandType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::strandType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    strandType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    strandType_pskel* strandType_impl_;
    strandType_pskel (strandType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::strandType_list_pskel* value_parser_;
  };

  class orientationType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_orientationType_list ();

    // Constructor.
    //
    orientationType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    orientationType_list_pskel* orientationType_list_impl_;
    orientationType_list_pskel (orientationType_list_pskel*, void*);

    protected:
    static const char* const _xsde_orientationType_list_pskel_enums_[2UL];
  };

  class orientationType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_orientationType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::orientationType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::orientationType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    orientationType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    orientationType_pskel* orientationType_impl_;
    orientationType_pskel (orientationType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::orientationType_list_pskel* value_parser_;
  };

  class repositoryType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_repositoryType_list ();

    // Constructor.
    //
    repositoryType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    repositoryType_list_pskel* repositoryType_list_impl_;
    repositoryType_list_pskel (repositoryType_list_pskel*, void*);

    protected:
    static const char* const _xsde_repositoryType_list_pskel_enums_[5UL];
  };

  class repositoryType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_repositoryType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::repositoryType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::repositoryType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    repositoryType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    repositoryType_pskel* repositoryType_impl_;
    repositoryType_pskel (repositoryType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::repositoryType_list_pskel* value_parser_;
  };

  class qualityType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_qualityType_list ();

    // Constructor.
    //
    qualityType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    qualityType_list_pskel* qualityType_list_impl_;
    qualityType_list_pskel (qualityType_list_pskel*, void*);

    protected:
    static const char* const _xsde_qualityType_list_pskel_enums_[3UL];
  };

  class qualityType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_qualityType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::qualityType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::qualityType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    qualityType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    qualityType_pskel* qualityType_impl_;
    qualityType_pskel (qualityType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::qualityType_list_pskel* value_parser_;
  };

  class sequenceType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_sequenceType_list ();

    // Constructor.
    //
    sequenceType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    sequenceType_list_pskel* sequenceType_list_impl_;
    sequenceType_list_pskel (sequenceType_list_pskel*, void*);

    protected:
    static const char* const _xsde_sequenceType_list_pskel_enums_[3UL];
  };

  class sequenceType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_sequenceType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::sequenceType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::sequenceType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    sequenceType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    sequenceType_pskel* sequenceType_impl_;
    sequenceType_pskel (sequenceType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::sequenceType_list_pskel* value_parser_;
  };

  class NamingSystem_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    status ();

    virtual void
    kind ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    responsible ();

    virtual void
    type ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    usage ();

    virtual void
    uniqueId ();

    virtual void
    post_NamingSystem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::NamingSystemType_pskel& /* kind */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::string_pskel& /* responsible */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::string_pskel& /* usage */,
             ::fhir::NamingSystem_UniqueId_pskel& /* uniqueId */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    kind_parser (::fhir::NamingSystemType_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    responsible_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    usage_parser (::fhir::string_pskel&);

    void
    uniqueId_parser (::fhir::NamingSystem_UniqueId_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NamingSystem_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    NamingSystem_pskel* NamingSystem_impl_;
    NamingSystem_pskel (NamingSystem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::NamingSystemType_pskel* kind_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::string_pskel* responsible_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::string_pskel* usage_parser_;
    ::fhir::NamingSystem_UniqueId_pskel* uniqueId_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NamingSystem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NamingSystem_UniqueId_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    value ();

    virtual void
    preferred ();

    virtual void
    comment ();

    virtual void
    period ();

    virtual void
    post_NamingSystem_UniqueId ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::NamingSystemIdentifierType_pskel& /* type */,
             ::fhir::string_pskel& /* value */,
             ::fhir::boolean_pskel& /* preferred */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::NamingSystemIdentifierType_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    void
    preferred_parser (::fhir::boolean_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NamingSystem_UniqueId_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NamingSystem_UniqueId_pskel* NamingSystem_UniqueId_impl_;
    NamingSystem_UniqueId_pskel (NamingSystem_UniqueId_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::NamingSystemIdentifierType_pskel* type_parser_;
    ::fhir::string_pskel* value_parser_;
    ::fhir::boolean_pskel* preferred_parser_;
    ::fhir::string_pskel* comment_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NamingSystem_UniqueId_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NamingSystemIdentifierType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_NamingSystemIdentifierType_list ();

    // Constructor.
    //
    NamingSystemIdentifierType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    NamingSystemIdentifierType_list_pskel* NamingSystemIdentifierType_list_impl_;
    NamingSystemIdentifierType_list_pskel (NamingSystemIdentifierType_list_pskel*, void*);

    protected:
    static const char* const _xsde_NamingSystemIdentifierType_list_pskel_enums_[4UL];
  };

  class NamingSystemIdentifierType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_NamingSystemIdentifierType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NamingSystemIdentifierType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::NamingSystemIdentifierType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NamingSystemIdentifierType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    NamingSystemIdentifierType_pskel* NamingSystemIdentifierType_impl_;
    NamingSystemIdentifierType_pskel (NamingSystemIdentifierType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::NamingSystemIdentifierType_list_pskel* value_parser_;
  };

  class NamingSystemType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_NamingSystemType_list ();

    // Constructor.
    //
    NamingSystemType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    NamingSystemType_list_pskel* NamingSystemType_list_impl_;
    NamingSystemType_list_pskel (NamingSystemType_list_pskel*, void*);

    protected:
    static const char* const _xsde_NamingSystemType_list_pskel_enums_[3UL];
  };

  class NamingSystemType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_NamingSystemType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::NamingSystemType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::NamingSystemType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NamingSystemType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    NamingSystemType_pskel* NamingSystemType_impl_;
    NamingSystemType_pskel (NamingSystemType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::NamingSystemType_list_pskel* value_parser_;
  };

  class NutritionOrder_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    instantiates ();

    virtual void
    status ();

    virtual void
    intent ();

    virtual void
    patient ();

    virtual void
    encounter ();

    virtual void
    dateTime ();

    virtual void
    orderer ();

    virtual void
    allergyIntolerance ();

    virtual void
    foodPreferenceModifier ();

    virtual void
    excludeFoodModifier ();

    virtual void
    oralDiet ();

    virtual void
    supplement ();

    virtual void
    enteralFormula ();

    virtual void
    note ();

    virtual void
    post_NutritionOrder ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::uri_pskel& /* instantiates */,
             ::fhir::RequestStatus_pskel& /* status */,
             ::fhir::RequestIntent_pskel& /* intent */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* dateTime */,
             ::fhir::Reference_pskel& /* orderer */,
             ::fhir::Reference_pskel& /* allergyIntolerance */,
             ::fhir::CodeableConcept_pskel& /* foodPreferenceModifier */,
             ::fhir::CodeableConcept_pskel& /* excludeFoodModifier */,
             ::fhir::NutritionOrder_OralDiet_pskel& /* oralDiet */,
             ::fhir::NutritionOrder_Supplement_pskel& /* supplement */,
             ::fhir::NutritionOrder_EnteralFormula_pskel& /* enteralFormula */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    instantiates_parser (::fhir::uri_pskel&);

    void
    status_parser (::fhir::RequestStatus_pskel&);

    void
    intent_parser (::fhir::RequestIntent_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    dateTime_parser (::fhir::dateTime_pskel&);

    void
    orderer_parser (::fhir::Reference_pskel&);

    void
    allergyIntolerance_parser (::fhir::Reference_pskel&);

    void
    foodPreferenceModifier_parser (::fhir::CodeableConcept_pskel&);

    void
    excludeFoodModifier_parser (::fhir::CodeableConcept_pskel&);

    void
    oralDiet_parser (::fhir::NutritionOrder_OralDiet_pskel&);

    void
    supplement_parser (::fhir::NutritionOrder_Supplement_pskel&);

    void
    enteralFormula_parser (::fhir::NutritionOrder_EnteralFormula_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_pskel* NutritionOrder_impl_;
    NutritionOrder_pskel (NutritionOrder_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::uri_pskel* instantiates_parser_;
    ::fhir::RequestStatus_pskel* status_parser_;
    ::fhir::RequestIntent_pskel* intent_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* dateTime_parser_;
    ::fhir::Reference_pskel* orderer_parser_;
    ::fhir::Reference_pskel* allergyIntolerance_parser_;
    ::fhir::CodeableConcept_pskel* foodPreferenceModifier_parser_;
    ::fhir::CodeableConcept_pskel* excludeFoodModifier_parser_;
    ::fhir::NutritionOrder_OralDiet_pskel* oralDiet_parser_;
    ::fhir::NutritionOrder_Supplement_pskel* supplement_parser_;
    ::fhir::NutritionOrder_EnteralFormula_pskel* enteralFormula_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_OralDiet_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    schedule ();

    virtual void
    nutrient ();

    virtual void
    texture ();

    virtual void
    fluidConsistencyType ();

    virtual void
    instruction ();

    virtual void
    post_NutritionOrder_OralDiet ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Timing_pskel& /* schedule */,
             ::fhir::NutritionOrder_Nutrient_pskel& /* nutrient */,
             ::fhir::NutritionOrder_Texture_pskel& /* texture */,
             ::fhir::CodeableConcept_pskel& /* fluidConsistencyType */,
             ::fhir::string_pskel& /* instruction */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    schedule_parser (::fhir::Timing_pskel&);

    void
    nutrient_parser (::fhir::NutritionOrder_Nutrient_pskel&);

    void
    texture_parser (::fhir::NutritionOrder_Texture_pskel&);

    void
    fluidConsistencyType_parser (::fhir::CodeableConcept_pskel&);

    void
    instruction_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_OralDiet_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_OralDiet_pskel* NutritionOrder_OralDiet_impl_;
    NutritionOrder_OralDiet_pskel (NutritionOrder_OralDiet_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Timing_pskel* schedule_parser_;
    ::fhir::NutritionOrder_Nutrient_pskel* nutrient_parser_;
    ::fhir::NutritionOrder_Texture_pskel* texture_parser_;
    ::fhir::CodeableConcept_pskel* fluidConsistencyType_parser_;
    ::fhir::string_pskel* instruction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_OralDiet_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_Nutrient_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    modifier ();

    virtual void
    amount ();

    virtual void
    post_NutritionOrder_Nutrient ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::Quantity_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_Nutrient_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_Nutrient_pskel* NutritionOrder_Nutrient_impl_;
    NutritionOrder_Nutrient_pskel (NutritionOrder_Nutrient_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::Quantity_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_Nutrient_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_Texture_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    modifier ();

    virtual void
    foodType ();

    virtual void
    post_NutritionOrder_Texture ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* modifier */,
             ::fhir::CodeableConcept_pskel& /* foodType */);

    // Individual element parsers.
    //
    void
    modifier_parser (::fhir::CodeableConcept_pskel&);

    void
    foodType_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_Texture_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_Texture_pskel* NutritionOrder_Texture_impl_;
    NutritionOrder_Texture_pskel (NutritionOrder_Texture_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* modifier_parser_;
    ::fhir::CodeableConcept_pskel* foodType_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_Texture_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_Supplement_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    productName ();

    virtual void
    schedule ();

    virtual void
    quantity ();

    virtual void
    instruction ();

    virtual void
    post_NutritionOrder_Supplement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* productName */,
             ::fhir::Timing_pskel& /* schedule */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::string_pskel& /* instruction */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    productName_parser (::fhir::string_pskel&);

    void
    schedule_parser (::fhir::Timing_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    instruction_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_Supplement_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_Supplement_pskel* NutritionOrder_Supplement_impl_;
    NutritionOrder_Supplement_pskel (NutritionOrder_Supplement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* productName_parser_;
    ::fhir::Timing_pskel* schedule_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::string_pskel* instruction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_Supplement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_EnteralFormula_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    baseFormulaType ();

    virtual void
    baseFormulaProductName ();

    virtual void
    additiveType ();

    virtual void
    additiveProductName ();

    virtual void
    caloricDensity ();

    virtual void
    routeofAdministration ();

    virtual void
    administration ();

    virtual void
    maxVolumeToDeliver ();

    virtual void
    administrationInstruction ();

    virtual void
    post_NutritionOrder_EnteralFormula ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* baseFormulaType */,
             ::fhir::string_pskel& /* baseFormulaProductName */,
             ::fhir::CodeableConcept_pskel& /* additiveType */,
             ::fhir::string_pskel& /* additiveProductName */,
             ::fhir::Quantity_pskel& /* caloricDensity */,
             ::fhir::CodeableConcept_pskel& /* routeofAdministration */,
             ::fhir::NutritionOrder_Administration_pskel& /* administration */,
             ::fhir::Quantity_pskel& /* maxVolumeToDeliver */,
             ::fhir::string_pskel& /* administrationInstruction */);

    // Individual element parsers.
    //
    void
    baseFormulaType_parser (::fhir::CodeableConcept_pskel&);

    void
    baseFormulaProductName_parser (::fhir::string_pskel&);

    void
    additiveType_parser (::fhir::CodeableConcept_pskel&);

    void
    additiveProductName_parser (::fhir::string_pskel&);

    void
    caloricDensity_parser (::fhir::Quantity_pskel&);

    void
    routeofAdministration_parser (::fhir::CodeableConcept_pskel&);

    void
    administration_parser (::fhir::NutritionOrder_Administration_pskel&);

    void
    maxVolumeToDeliver_parser (::fhir::Quantity_pskel&);

    void
    administrationInstruction_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_EnteralFormula_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_EnteralFormula_pskel* NutritionOrder_EnteralFormula_impl_;
    NutritionOrder_EnteralFormula_pskel (NutritionOrder_EnteralFormula_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* baseFormulaType_parser_;
    ::fhir::string_pskel* baseFormulaProductName_parser_;
    ::fhir::CodeableConcept_pskel* additiveType_parser_;
    ::fhir::string_pskel* additiveProductName_parser_;
    ::fhir::Quantity_pskel* caloricDensity_parser_;
    ::fhir::CodeableConcept_pskel* routeofAdministration_parser_;
    ::fhir::NutritionOrder_Administration_pskel* administration_parser_;
    ::fhir::Quantity_pskel* maxVolumeToDeliver_parser_;
    ::fhir::string_pskel* administrationInstruction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_EnteralFormula_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class NutritionOrder_Administration_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    schedule ();

    virtual void
    quantity ();

    virtual void
    rateQuantity ();

    virtual void
    rateRatio ();

    virtual void
    post_NutritionOrder_Administration ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Timing_pskel& /* schedule */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Quantity_pskel& /* rateQuantity */,
             ::fhir::Ratio_pskel& /* rateRatio */);

    // Individual element parsers.
    //
    void
    schedule_parser (::fhir::Timing_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    rateQuantity_parser (::fhir::Quantity_pskel&);

    void
    rateRatio_parser (::fhir::Ratio_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    NutritionOrder_Administration_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    NutritionOrder_Administration_pskel* NutritionOrder_Administration_impl_;
    NutritionOrder_Administration_pskel (NutritionOrder_Administration_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Timing_pskel* schedule_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Quantity_pskel* rateQuantity_parser_;
    ::fhir::Ratio_pskel* rateRatio_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::NutritionOrder_Administration_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Observation_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    basedOn ();

    virtual void
    partOf ();

    virtual void
    status ();

    virtual void
    category ();

    virtual void
    code ();

    virtual void
    subject ();

    virtual void
    focus ();

    virtual void
    encounter ();

    virtual void
    effectiveDateTime ();

    virtual void
    effectivePeriod ();

    virtual void
    effectiveTiming ();

    virtual void
    effectiveInstant ();

    virtual void
    issued ();

    virtual void
    performer ();

    virtual void
    valueQuantity ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueString ();

    virtual void
    valueBoolean ();

    virtual void
    valueInteger ();

    virtual void
    valueRange ();

    virtual void
    valueRatio ();

    virtual void
    valueSampledData ();

    virtual void
    valueTime ();

    virtual void
    valueDateTime ();

    virtual void
    valuePeriod ();

    virtual void
    dataAbsentReason ();

    virtual void
    interpretation ();

    virtual void
    note ();

    virtual void
    bodySite ();

    virtual void
    method ();

    virtual void
    specimen ();

    virtual void
    device ();

    virtual void
    referenceRange ();

    virtual void
    hasMember ();

    virtual void
    derivedFrom ();

    virtual void
    component ();

    virtual void
    post_Observation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::ObservationStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* focus */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* effectiveDateTime */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::Timing_pskel& /* effectiveTiming */,
             ::fhir::instant_pskel& /* effectiveInstant */,
             ::fhir::instant_pskel& /* issued */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Ratio_pskel& /* valueRatio */,
             ::fhir::SampledData_pskel& /* valueSampledData */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::CodeableConcept_pskel& /* dataAbsentReason */,
             ::fhir::CodeableConcept_pskel& /* interpretation */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::Reference_pskel& /* specimen */,
             ::fhir::Reference_pskel& /* device */,
             ::fhir::Observation_ReferenceRange_pskel& /* referenceRange */,
             ::fhir::Reference_pskel& /* hasMember */,
             ::fhir::Reference_pskel& /* derivedFrom */,
             ::fhir::Observation_Component_pskel& /* component */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::ObservationStatus_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    focus_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    effectiveDateTime_parser (::fhir::dateTime_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    effectiveTiming_parser (::fhir::Timing_pskel&);

    void
    effectiveInstant_parser (::fhir::instant_pskel&);

    void
    issued_parser (::fhir::instant_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueRatio_parser (::fhir::Ratio_pskel&);

    void
    valueSampledData_parser (::fhir::SampledData_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    dataAbsentReason_parser (::fhir::CodeableConcept_pskel&);

    void
    interpretation_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    specimen_parser (::fhir::Reference_pskel&);

    void
    device_parser (::fhir::Reference_pskel&);

    void
    referenceRange_parser (::fhir::Observation_ReferenceRange_pskel&);

    void
    hasMember_parser (::fhir::Reference_pskel&);

    void
    derivedFrom_parser (::fhir::Reference_pskel&);

    void
    component_parser (::fhir::Observation_Component_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Observation_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Observation_pskel* Observation_impl_;
    Observation_pskel (Observation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::ObservationStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* focus_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* effectiveDateTime_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::Timing_pskel* effectiveTiming_parser_;
    ::fhir::instant_pskel* effectiveInstant_parser_;
    ::fhir::instant_pskel* issued_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Ratio_pskel* valueRatio_parser_;
    ::fhir::SampledData_pskel* valueSampledData_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::CodeableConcept_pskel* dataAbsentReason_parser_;
    ::fhir::CodeableConcept_pskel* interpretation_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::Reference_pskel* specimen_parser_;
    ::fhir::Reference_pskel* device_parser_;
    ::fhir::Observation_ReferenceRange_pskel* referenceRange_parser_;
    ::fhir::Reference_pskel* hasMember_parser_;
    ::fhir::Reference_pskel* derivedFrom_parser_;
    ::fhir::Observation_Component_pskel* component_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Observation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Observation_ReferenceRange_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    low ();

    virtual void
    high ();

    virtual void
    type ();

    virtual void
    appliesTo ();

    virtual void
    age ();

    virtual void
    text ();

    virtual void
    post_Observation_ReferenceRange ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* low */,
             ::fhir::Quantity_pskel& /* high */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* appliesTo */,
             ::fhir::Range_pskel& /* age */,
             ::fhir::string_pskel& /* text */);

    // Individual element parsers.
    //
    void
    low_parser (::fhir::Quantity_pskel&);

    void
    high_parser (::fhir::Quantity_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    appliesTo_parser (::fhir::CodeableConcept_pskel&);

    void
    age_parser (::fhir::Range_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Observation_ReferenceRange_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Observation_ReferenceRange_pskel* Observation_ReferenceRange_impl_;
    Observation_ReferenceRange_pskel (Observation_ReferenceRange_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* low_parser_;
    ::fhir::Quantity_pskel* high_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* appliesTo_parser_;
    ::fhir::Range_pskel* age_parser_;
    ::fhir::string_pskel* text_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Observation_ReferenceRange_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Observation_Component_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    valueQuantity ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueString ();

    virtual void
    valueBoolean ();

    virtual void
    valueInteger ();

    virtual void
    valueRange ();

    virtual void
    valueRatio ();

    virtual void
    valueSampledData ();

    virtual void
    valueTime ();

    virtual void
    valueDateTime ();

    virtual void
    valuePeriod ();

    virtual void
    dataAbsentReason ();

    virtual void
    interpretation ();

    virtual void
    referenceRange ();

    virtual void
    post_Observation_Component ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Ratio_pskel& /* valueRatio */,
             ::fhir::SampledData_pskel& /* valueSampledData */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::CodeableConcept_pskel& /* dataAbsentReason */,
             ::fhir::CodeableConcept_pskel& /* interpretation */,
             ::fhir::Observation_ReferenceRange_pskel& /* referenceRange */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueRatio_parser (::fhir::Ratio_pskel&);

    void
    valueSampledData_parser (::fhir::SampledData_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    dataAbsentReason_parser (::fhir::CodeableConcept_pskel&);

    void
    interpretation_parser (::fhir::CodeableConcept_pskel&);

    void
    referenceRange_parser (::fhir::Observation_ReferenceRange_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Observation_Component_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Observation_Component_pskel* Observation_Component_impl_;
    Observation_Component_pskel (Observation_Component_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Ratio_pskel* valueRatio_parser_;
    ::fhir::SampledData_pskel* valueSampledData_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::CodeableConcept_pskel* dataAbsentReason_parser_;
    ::fhir::CodeableConcept_pskel* interpretation_parser_;
    ::fhir::Observation_ReferenceRange_pskel* referenceRange_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Observation_Component_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ObservationDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    code ();

    virtual void
    identifier ();

    virtual void
    permittedDataType ();

    virtual void
    multipleResultsAllowed ();

    virtual void
    method ();

    virtual void
    preferredReportName ();

    virtual void
    quantitativeDetails ();

    virtual void
    qualifiedInterval ();

    virtual void
    validCodedValueSet ();

    virtual void
    normalCodedValueSet ();

    virtual void
    abnormalCodedValueSet ();

    virtual void
    criticalCodedValueSet ();

    virtual void
    post_ObservationDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ObservationDataType_pskel& /* permittedDataType */,
             ::fhir::boolean_pskel& /* multipleResultsAllowed */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::string_pskel& /* preferredReportName */,
             ::fhir::ObservationDefinition_QuantitativeDetails_pskel& /* quantitativeDetails */,
             ::fhir::ObservationDefinition_QualifiedInterval_pskel& /* qualifiedInterval */,
             ::fhir::Reference_pskel& /* validCodedValueSet */,
             ::fhir::Reference_pskel& /* normalCodedValueSet */,
             ::fhir::Reference_pskel& /* abnormalCodedValueSet */,
             ::fhir::Reference_pskel& /* criticalCodedValueSet */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    permittedDataType_parser (::fhir::ObservationDataType_pskel&);

    void
    multipleResultsAllowed_parser (::fhir::boolean_pskel&);

    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    preferredReportName_parser (::fhir::string_pskel&);

    void
    quantitativeDetails_parser (::fhir::ObservationDefinition_QuantitativeDetails_pskel&);

    void
    qualifiedInterval_parser (::fhir::ObservationDefinition_QualifiedInterval_pskel&);

    void
    validCodedValueSet_parser (::fhir::Reference_pskel&);

    void
    normalCodedValueSet_parser (::fhir::Reference_pskel&);

    void
    abnormalCodedValueSet_parser (::fhir::Reference_pskel&);

    void
    criticalCodedValueSet_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ObservationDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ObservationDefinition_pskel* ObservationDefinition_impl_;
    ObservationDefinition_pskel (ObservationDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ObservationDataType_pskel* permittedDataType_parser_;
    ::fhir::boolean_pskel* multipleResultsAllowed_parser_;
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::string_pskel* preferredReportName_parser_;
    ::fhir::ObservationDefinition_QuantitativeDetails_pskel* quantitativeDetails_parser_;
    ::fhir::ObservationDefinition_QualifiedInterval_pskel* qualifiedInterval_parser_;
    ::fhir::Reference_pskel* validCodedValueSet_parser_;
    ::fhir::Reference_pskel* normalCodedValueSet_parser_;
    ::fhir::Reference_pskel* abnormalCodedValueSet_parser_;
    ::fhir::Reference_pskel* criticalCodedValueSet_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ObservationDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ObservationDefinition_QuantitativeDetails_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    customaryUnit ();

    virtual void
    unit ();

    virtual void
    conversionFactor ();

    virtual void
    decimalPrecision ();

    virtual void
    post_ObservationDefinition_QuantitativeDetails ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* customaryUnit */,
             ::fhir::CodeableConcept_pskel& /* unit */,
             ::fhir::decimal_pskel& /* conversionFactor */,
             ::fhir::integer_pskel& /* decimalPrecision */);

    // Individual element parsers.
    //
    void
    customaryUnit_parser (::fhir::CodeableConcept_pskel&);

    void
    unit_parser (::fhir::CodeableConcept_pskel&);

    void
    conversionFactor_parser (::fhir::decimal_pskel&);

    void
    decimalPrecision_parser (::fhir::integer_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ObservationDefinition_QuantitativeDetails_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ObservationDefinition_QuantitativeDetails_pskel* ObservationDefinition_QuantitativeDetails_impl_;
    ObservationDefinition_QuantitativeDetails_pskel (ObservationDefinition_QuantitativeDetails_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* customaryUnit_parser_;
    ::fhir::CodeableConcept_pskel* unit_parser_;
    ::fhir::decimal_pskel* conversionFactor_parser_;
    ::fhir::integer_pskel* decimalPrecision_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ObservationDefinition_QuantitativeDetails_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ObservationDefinition_QualifiedInterval_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    range ();

    virtual void
    context ();

    virtual void
    appliesTo ();

    virtual void
    gender ();

    virtual void
    age ();

    virtual void
    gestationalAge ();

    virtual void
    condition ();

    virtual void
    post_ObservationDefinition_QualifiedInterval ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ObservationRangeCategory_pskel& /* category */,
             ::fhir::Range_pskel& /* range */,
             ::fhir::CodeableConcept_pskel& /* context */,
             ::fhir::CodeableConcept_pskel& /* appliesTo */,
             ::fhir::AdministrativeGender_pskel& /* gender */,
             ::fhir::Range_pskel& /* age */,
             ::fhir::Range_pskel& /* gestationalAge */,
             ::fhir::string_pskel& /* condition */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::ObservationRangeCategory_pskel&);

    void
    range_parser (::fhir::Range_pskel&);

    void
    context_parser (::fhir::CodeableConcept_pskel&);

    void
    appliesTo_parser (::fhir::CodeableConcept_pskel&);

    void
    gender_parser (::fhir::AdministrativeGender_pskel&);

    void
    age_parser (::fhir::Range_pskel&);

    void
    gestationalAge_parser (::fhir::Range_pskel&);

    void
    condition_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ObservationDefinition_QualifiedInterval_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ObservationDefinition_QualifiedInterval_pskel* ObservationDefinition_QualifiedInterval_impl_;
    ObservationDefinition_QualifiedInterval_pskel (ObservationDefinition_QualifiedInterval_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ObservationRangeCategory_pskel* category_parser_;
    ::fhir::Range_pskel* range_parser_;
    ::fhir::CodeableConcept_pskel* context_parser_;
    ::fhir::CodeableConcept_pskel* appliesTo_parser_;
    ::fhir::AdministrativeGender_pskel* gender_parser_;
    ::fhir::Range_pskel* age_parser_;
    ::fhir::Range_pskel* gestationalAge_parser_;
    ::fhir::string_pskel* condition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ObservationDefinition_QualifiedInterval_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ObservationDataType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ObservationDataType_list ();

    // Constructor.
    //
    ObservationDataType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ObservationDataType_list_pskel* ObservationDataType_list_impl_;
    ObservationDataType_list_pskel (ObservationDataType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ObservationDataType_list_pskel_enums_[11UL];
  };

  class ObservationDataType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ObservationDataType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ObservationDataType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ObservationDataType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ObservationDataType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ObservationDataType_pskel* ObservationDataType_impl_;
    ObservationDataType_pskel (ObservationDataType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ObservationDataType_list_pskel* value_parser_;
  };

  class ObservationRangeCategory_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ObservationRangeCategory_list ();

    // Constructor.
    //
    ObservationRangeCategory_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ObservationRangeCategory_list_pskel* ObservationRangeCategory_list_impl_;
    ObservationRangeCategory_list_pskel (ObservationRangeCategory_list_pskel*, void*);

    protected:
    static const char* const _xsde_ObservationRangeCategory_list_pskel_enums_[3UL];
  };

  class ObservationRangeCategory_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ObservationRangeCategory ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ObservationRangeCategory_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ObservationRangeCategory_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ObservationRangeCategory_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ObservationRangeCategory_pskel* ObservationRangeCategory_impl_;
    ObservationRangeCategory_pskel (ObservationRangeCategory_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ObservationRangeCategory_list_pskel* value_parser_;
  };

  class OperationDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    kind ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    affectsState ();

    virtual void
    code ();

    virtual void
    comment ();

    virtual void
    base ();

    virtual void
    resource ();

    virtual void
    system ();

    virtual void
    type ();

    virtual void
    instance ();

    virtual void
    inputProfile ();

    virtual void
    outputProfile ();

    virtual void
    parameter ();

    virtual void
    overload ();

    virtual void
    post_OperationDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::OperationKind_pskel& /* kind */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::boolean_pskel& /* affectsState */,
             ::fhir::code_pskel& /* code */,
             ::fhir::markdown_pskel& /* comment */,
             ::fhir::canonical_pskel& /* base */,
             ::fhir::code_pskel& /* resource */,
             ::fhir::boolean_pskel& /* system */,
             ::fhir::boolean_pskel& /* type */,
             ::fhir::boolean_pskel& /* instance */,
             ::fhir::canonical_pskel& /* inputProfile */,
             ::fhir::canonical_pskel& /* outputProfile */,
             ::fhir::OperationDefinition_Parameter_pskel& /* parameter */,
             ::fhir::OperationDefinition_Overload_pskel& /* overload */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    kind_parser (::fhir::OperationKind_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    affectsState_parser (::fhir::boolean_pskel&);

    void
    code_parser (::fhir::code_pskel&);

    void
    comment_parser (::fhir::markdown_pskel&);

    void
    base_parser (::fhir::canonical_pskel&);

    void
    resource_parser (::fhir::code_pskel&);

    void
    system_parser (::fhir::boolean_pskel&);

    void
    type_parser (::fhir::boolean_pskel&);

    void
    instance_parser (::fhir::boolean_pskel&);

    void
    inputProfile_parser (::fhir::canonical_pskel&);

    void
    outputProfile_parser (::fhir::canonical_pskel&);

    void
    parameter_parser (::fhir::OperationDefinition_Parameter_pskel&);

    void
    overload_parser (::fhir::OperationDefinition_Overload_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    OperationDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationDefinition_pskel* OperationDefinition_impl_;
    OperationDefinition_pskel (OperationDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::OperationKind_pskel* kind_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::boolean_pskel* affectsState_parser_;
    ::fhir::code_pskel* code_parser_;
    ::fhir::markdown_pskel* comment_parser_;
    ::fhir::canonical_pskel* base_parser_;
    ::fhir::code_pskel* resource_parser_;
    ::fhir::boolean_pskel* system_parser_;
    ::fhir::boolean_pskel* type_parser_;
    ::fhir::boolean_pskel* instance_parser_;
    ::fhir::canonical_pskel* inputProfile_parser_;
    ::fhir::canonical_pskel* outputProfile_parser_;
    ::fhir::OperationDefinition_Parameter_pskel* parameter_parser_;
    ::fhir::OperationDefinition_Overload_pskel* overload_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::OperationDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class OperationDefinition_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    use ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    documentation ();

    virtual void
    type ();

    virtual void
    targetProfile ();

    virtual void
    searchType ();

    virtual void
    binding ();

    virtual void
    referencedFrom ();

    virtual void
    part ();

    virtual void
    post_OperationDefinition_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* name */,
             ::fhir::OperationParameterUse_pskel& /* use */,
             ::fhir::integer_pskel& /* min */,
             ::fhir::string_pskel& /* max */,
             ::fhir::string_pskel& /* documentation */,
             ::fhir::code_pskel& /* type */,
             ::fhir::canonical_pskel& /* targetProfile */,
             ::fhir::SearchParamType_pskel& /* searchType */,
             ::fhir::OperationDefinition_Binding_pskel& /* binding */,
             ::fhir::OperationDefinition_ReferencedFrom_pskel& /* referencedFrom */,
             ::fhir::OperationDefinition_Parameter_pskel& /* part */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::code_pskel&);

    void
    use_parser (::fhir::OperationParameterUse_pskel&);

    void
    min_parser (::fhir::integer_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::code_pskel&);

    void
    targetProfile_parser (::fhir::canonical_pskel&);

    void
    searchType_parser (::fhir::SearchParamType_pskel&);

    void
    binding_parser (::fhir::OperationDefinition_Binding_pskel&);

    void
    referencedFrom_parser (::fhir::OperationDefinition_ReferencedFrom_pskel&);

    void
    part_parser (::fhir::OperationDefinition_Parameter_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    OperationDefinition_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationDefinition_Parameter_pskel* OperationDefinition_Parameter_impl_;
    OperationDefinition_Parameter_pskel (OperationDefinition_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* name_parser_;
    ::fhir::OperationParameterUse_pskel* use_parser_;
    ::fhir::integer_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;
    ::fhir::string_pskel* documentation_parser_;
    ::fhir::code_pskel* type_parser_;
    ::fhir::canonical_pskel* targetProfile_parser_;
    ::fhir::SearchParamType_pskel* searchType_parser_;
    ::fhir::OperationDefinition_Binding_pskel* binding_parser_;
    ::fhir::OperationDefinition_ReferencedFrom_pskel* referencedFrom_parser_;
    ::fhir::OperationDefinition_Parameter_pskel* part_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::OperationDefinition_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class OperationDefinition_Binding_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    strength ();

    virtual void
    valueSet ();

    virtual void
    post_OperationDefinition_Binding ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::BindingStrength_pskel& /* strength */,
             ::fhir::canonical_pskel& /* valueSet */);

    // Individual element parsers.
    //
    void
    strength_parser (::fhir::BindingStrength_pskel&);

    void
    valueSet_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    OperationDefinition_Binding_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationDefinition_Binding_pskel* OperationDefinition_Binding_impl_;
    OperationDefinition_Binding_pskel (OperationDefinition_Binding_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::BindingStrength_pskel* strength_parser_;
    ::fhir::canonical_pskel* valueSet_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::OperationDefinition_Binding_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class OperationDefinition_ReferencedFrom_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    source ();

    virtual void
    sourceId ();

    virtual void
    post_OperationDefinition_ReferencedFrom ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* source */,
             ::fhir::string_pskel& /* sourceId */);

    // Individual element parsers.
    //
    void
    source_parser (::fhir::string_pskel&);

    void
    sourceId_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    OperationDefinition_ReferencedFrom_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationDefinition_ReferencedFrom_pskel* OperationDefinition_ReferencedFrom_impl_;
    OperationDefinition_ReferencedFrom_pskel (OperationDefinition_ReferencedFrom_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* source_parser_;
    ::fhir::string_pskel* sourceId_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::OperationDefinition_ReferencedFrom_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class OperationDefinition_Overload_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    parameterName ();

    virtual void
    comment ();

    virtual void
    post_OperationDefinition_Overload ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* parameterName */,
             ::fhir::string_pskel& /* comment */);

    // Individual element parsers.
    //
    void
    parameterName_parser (::fhir::string_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    OperationDefinition_Overload_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationDefinition_Overload_pskel* OperationDefinition_Overload_impl_;
    OperationDefinition_Overload_pskel (OperationDefinition_Overload_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* parameterName_parser_;
    ::fhir::string_pskel* comment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::OperationDefinition_Overload_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class OperationParameterUse_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_OperationParameterUse_list ();

    // Constructor.
    //
    OperationParameterUse_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationParameterUse_list_pskel* OperationParameterUse_list_impl_;
    OperationParameterUse_list_pskel (OperationParameterUse_list_pskel*, void*);

    protected:
    static const char* const _xsde_OperationParameterUse_list_pskel_enums_[2UL];
  };

  class OperationParameterUse_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_OperationParameterUse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::OperationParameterUse_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::OperationParameterUse_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    OperationParameterUse_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationParameterUse_pskel* OperationParameterUse_impl_;
    OperationParameterUse_pskel (OperationParameterUse_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::OperationParameterUse_list_pskel* value_parser_;
  };

  class OperationKind_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_OperationKind_list ();

    // Constructor.
    //
    OperationKind_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationKind_list_pskel* OperationKind_list_impl_;
    OperationKind_list_pskel (OperationKind_list_pskel*, void*);

    protected:
    static const char* const _xsde_OperationKind_list_pskel_enums_[2UL];
  };

  class OperationKind_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_OperationKind ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::OperationKind_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::OperationKind_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    OperationKind_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationKind_pskel* OperationKind_impl_;
    OperationKind_pskel (OperationKind_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::OperationKind_list_pskel* value_parser_;
  };

  class OperationOutcome_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    issue ();

    virtual void
    post_OperationOutcome ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::OperationOutcome_Issue_pskel& /* issue */);

    // Individual element parsers.
    //
    void
    issue_parser (::fhir::OperationOutcome_Issue_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    OperationOutcome_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationOutcome_pskel* OperationOutcome_impl_;
    OperationOutcome_pskel (OperationOutcome_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::OperationOutcome_Issue_pskel* issue_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::OperationOutcome_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class OperationOutcome_Issue_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    severity ();

    virtual void
    code ();

    virtual void
    details ();

    virtual void
    diagnostics ();

    virtual void
    location ();

    virtual void
    expression ();

    virtual void
    post_OperationOutcome_Issue ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::IssueSeverity_pskel& /* severity */,
             ::fhir::IssueType_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* details */,
             ::fhir::string_pskel& /* diagnostics */,
             ::fhir::string_pskel& /* location */,
             ::fhir::string_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    severity_parser (::fhir::IssueSeverity_pskel&);

    void
    code_parser (::fhir::IssueType_pskel&);

    void
    details_parser (::fhir::CodeableConcept_pskel&);

    void
    diagnostics_parser (::fhir::string_pskel&);

    void
    location_parser (::fhir::string_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    OperationOutcome_Issue_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    OperationOutcome_Issue_pskel* OperationOutcome_Issue_impl_;
    OperationOutcome_Issue_pskel (OperationOutcome_Issue_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::IssueSeverity_pskel* severity_parser_;
    ::fhir::IssueType_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* details_parser_;
    ::fhir::string_pskel* diagnostics_parser_;
    ::fhir::string_pskel* location_parser_;
    ::fhir::string_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::OperationOutcome_Issue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class IssueType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_IssueType_list ();

    // Constructor.
    //
    IssueType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    IssueType_list_pskel* IssueType_list_impl_;
    IssueType_list_pskel (IssueType_list_pskel*, void*);

    protected:
    static const char* const _xsde_IssueType_list_pskel_enums_[31UL];
  };

  class IssueType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_IssueType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::IssueType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::IssueType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    IssueType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    IssueType_pskel* IssueType_impl_;
    IssueType_pskel (IssueType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::IssueType_list_pskel* value_parser_;
  };

  class IssueSeverity_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_IssueSeverity_list ();

    // Constructor.
    //
    IssueSeverity_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    IssueSeverity_list_pskel* IssueSeverity_list_impl_;
    IssueSeverity_list_pskel (IssueSeverity_list_pskel*, void*);

    protected:
    static const char* const _xsde_IssueSeverity_list_pskel_enums_[4UL];
  };

  class IssueSeverity_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_IssueSeverity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::IssueSeverity_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::IssueSeverity_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    IssueSeverity_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    IssueSeverity_pskel* IssueSeverity_impl_;
    IssueSeverity_pskel (IssueSeverity_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::IssueSeverity_list_pskel* value_parser_;
  };

  class Organization_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    active ();

    virtual void
    type ();

    virtual void
    name ();

    virtual void
    alias ();

    virtual void
    telecom ();

    virtual void
    address ();

    virtual void
    partOf ();

    virtual void
    contact ();

    virtual void
    endpoint ();

    virtual void
    post_Organization ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* alias */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::Address_pskel& /* address */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::Organization_Contact_pskel& /* contact */,
             ::fhir::Reference_pskel& /* endpoint */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    alias_parser (::fhir::string_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    address_parser (::fhir::Address_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    contact_parser (::fhir::Organization_Contact_pskel&);

    void
    endpoint_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Organization_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Organization_pskel* Organization_impl_;
    Organization_pskel (Organization_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* alias_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::Address_pskel* address_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::Organization_Contact_pskel* contact_parser_;
    ::fhir::Reference_pskel* endpoint_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Organization_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Organization_Contact_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    purpose ();

    virtual void
    name ();

    virtual void
    telecom ();

    virtual void
    address ();

    virtual void
    post_Organization_Contact ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* purpose */,
             ::fhir::HumanName_pskel& /* name */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::Address_pskel& /* address */);

    // Individual element parsers.
    //
    void
    purpose_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::HumanName_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    address_parser (::fhir::Address_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Organization_Contact_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Organization_Contact_pskel* Organization_Contact_impl_;
    Organization_Contact_pskel (Organization_Contact_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* purpose_parser_;
    ::fhir::HumanName_pskel* name_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::Address_pskel* address_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Organization_Contact_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class OrganizationAffiliation_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    active ();

    virtual void
    period ();

    virtual void
    organization ();

    virtual void
    participatingOrganization ();

    virtual void
    network ();

    virtual void
    code ();

    virtual void
    specialty ();

    virtual void
    location ();

    virtual void
    healthcareService ();

    virtual void
    telecom ();

    virtual void
    endpoint ();

    virtual void
    post_OrganizationAffiliation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* organization */,
             ::fhir::Reference_pskel& /* participatingOrganization */,
             ::fhir::Reference_pskel& /* network */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* specialty */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::Reference_pskel& /* healthcareService */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::Reference_pskel& /* endpoint */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    organization_parser (::fhir::Reference_pskel&);

    void
    participatingOrganization_parser (::fhir::Reference_pskel&);

    void
    network_parser (::fhir::Reference_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    specialty_parser (::fhir::CodeableConcept_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    healthcareService_parser (::fhir::Reference_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    endpoint_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    OrganizationAffiliation_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    OrganizationAffiliation_pskel* OrganizationAffiliation_impl_;
    OrganizationAffiliation_pskel (OrganizationAffiliation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* organization_parser_;
    ::fhir::Reference_pskel* participatingOrganization_parser_;
    ::fhir::Reference_pskel* network_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* specialty_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::Reference_pskel* healthcareService_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::Reference_pskel* endpoint_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::OrganizationAffiliation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Parameters_pskel: public ::fhir::Resource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    parameter ();

    virtual void
    post_Parameters ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Parameters_Parameter_pskel& /* parameter */);

    // Individual element parsers.
    //
    void
    parameter_parser (::fhir::Parameters_Parameter_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Parameters_pskel (::fhir::Resource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Parameters_pskel* Parameters_impl_;
    Parameters_pskel (Parameters_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Parameters_Parameter_pskel* parameter_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Parameters_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Parameters_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    valueBase64Binary ();

    virtual void
    valueBoolean ();

    virtual void
    valueCanonical ();

    virtual void
    valueCode ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueDecimal ();

    virtual void
    valueId ();

    virtual void
    valueInstant ();

    virtual void
    valueInteger ();

    virtual void
    valueMarkdown ();

    virtual void
    valueOid ();

    virtual void
    valuePositiveInt ();

    virtual void
    valueString ();

    virtual void
    valueTime ();

    virtual void
    valueUnsignedInt ();

    virtual void
    valueUri ();

    virtual void
    valueUrl ();

    virtual void
    valueUuid ();

    virtual void
    valueAddress ();

    virtual void
    valueAge ();

    virtual void
    valueAnnotation ();

    virtual void
    valueAttachment ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueCoding ();

    virtual void
    valueContactPoint ();

    virtual void
    valueCount ();

    virtual void
    valueDistance ();

    virtual void
    valueDuration ();

    virtual void
    valueHumanName ();

    virtual void
    valueIdentifier ();

    virtual void
    valueMoney ();

    virtual void
    valuePeriod ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueRatio ();

    virtual void
    valueReference ();

    virtual void
    valueSampledData ();

    virtual void
    valueSignature ();

    virtual void
    valueTiming ();

    virtual void
    valueContactDetail ();

    virtual void
    valueContributor ();

    virtual void
    valueDataRequirement ();

    virtual void
    valueExpression ();

    virtual void
    valueParameterDefinition ();

    virtual void
    valueRelatedArtifact ();

    virtual void
    valueTriggerDefinition ();

    virtual void
    valueUsageContext ();

    virtual void
    valueDosage ();

    virtual void
    valueMeta ();

    virtual void
    resource ();

    virtual void
    part ();

    virtual void
    post_Parameters_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::canonical_pskel& /* valueCanonical */,
             ::fhir::code_pskel& /* valueCode */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::id_pskel& /* valueId */,
             ::fhir::instant_pskel& /* valueInstant */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::markdown_pskel& /* valueMarkdown */,
             ::fhir::oid_pskel& /* valueOid */,
             ::fhir::positiveInt_pskel& /* valuePositiveInt */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::unsignedInt_pskel& /* valueUnsignedInt */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::url_pskel& /* valueUrl */,
             ::fhir::uuid_pskel& /* valueUuid */,
             ::fhir::Address_pskel& /* valueAddress */,
             ::fhir::Age_pskel& /* valueAge */,
             ::fhir::Annotation_pskel& /* valueAnnotation */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::ContactPoint_pskel& /* valueContactPoint */,
             ::fhir::Count_pskel& /* valueCount */,
             ::fhir::Distance_pskel& /* valueDistance */,
             ::fhir::Duration_pskel& /* valueDuration */,
             ::fhir::HumanName_pskel& /* valueHumanName */,
             ::fhir::Identifier_pskel& /* valueIdentifier */,
             ::fhir::Money_pskel& /* valueMoney */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Ratio_pskel& /* valueRatio */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::SampledData_pskel& /* valueSampledData */,
             ::fhir::Signature_pskel& /* valueSignature */,
             ::fhir::Timing_pskel& /* valueTiming */,
             ::fhir::ContactDetail_pskel& /* valueContactDetail */,
             ::fhir::Contributor_pskel& /* valueContributor */,
             ::fhir::DataRequirement_pskel& /* valueDataRequirement */,
             ::fhir::Expression_pskel& /* valueExpression */,
             ::fhir::ParameterDefinition_pskel& /* valueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* valueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* valueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* valueUsageContext */,
             ::fhir::Dosage_pskel& /* valueDosage */,
             ::fhir::Meta_pskel& /* valueMeta */,
             ::fhir::ResourceContainer_pskel& /* resource */,
             ::fhir::Parameters_Parameter_pskel& /* part */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueCanonical_parser (::fhir::canonical_pskel&);

    void
    valueCode_parser (::fhir::code_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueId_parser (::fhir::id_pskel&);

    void
    valueInstant_parser (::fhir::instant_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueMarkdown_parser (::fhir::markdown_pskel&);

    void
    valueOid_parser (::fhir::oid_pskel&);

    void
    valuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueUrl_parser (::fhir::url_pskel&);

    void
    valueUuid_parser (::fhir::uuid_pskel&);

    void
    valueAddress_parser (::fhir::Address_pskel&);

    void
    valueAge_parser (::fhir::Age_pskel&);

    void
    valueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    valueCount_parser (::fhir::Count_pskel&);

    void
    valueDistance_parser (::fhir::Distance_pskel&);

    void
    valueDuration_parser (::fhir::Duration_pskel&);

    void
    valueHumanName_parser (::fhir::HumanName_pskel&);

    void
    valueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    valueMoney_parser (::fhir::Money_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueRatio_parser (::fhir::Ratio_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    valueSampledData_parser (::fhir::SampledData_pskel&);

    void
    valueSignature_parser (::fhir::Signature_pskel&);

    void
    valueTiming_parser (::fhir::Timing_pskel&);

    void
    valueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    valueContributor_parser (::fhir::Contributor_pskel&);

    void
    valueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    valueExpression_parser (::fhir::Expression_pskel&);

    void
    valueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    valueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    valueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    valueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    valueDosage_parser (::fhir::Dosage_pskel&);

    void
    valueMeta_parser (::fhir::Meta_pskel&);

    void
    resource_parser (::fhir::ResourceContainer_pskel&);

    void
    part_parser (::fhir::Parameters_Parameter_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Parameters_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Parameters_Parameter_pskel* Parameters_Parameter_impl_;
    Parameters_Parameter_pskel (Parameters_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::canonical_pskel* valueCanonical_parser_;
    ::fhir::code_pskel* valueCode_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::id_pskel* valueId_parser_;
    ::fhir::instant_pskel* valueInstant_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::markdown_pskel* valueMarkdown_parser_;
    ::fhir::oid_pskel* valueOid_parser_;
    ::fhir::positiveInt_pskel* valuePositiveInt_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::unsignedInt_pskel* valueUnsignedInt_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::url_pskel* valueUrl_parser_;
    ::fhir::uuid_pskel* valueUuid_parser_;
    ::fhir::Address_pskel* valueAddress_parser_;
    ::fhir::Age_pskel* valueAge_parser_;
    ::fhir::Annotation_pskel* valueAnnotation_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::ContactPoint_pskel* valueContactPoint_parser_;
    ::fhir::Count_pskel* valueCount_parser_;
    ::fhir::Distance_pskel* valueDistance_parser_;
    ::fhir::Duration_pskel* valueDuration_parser_;
    ::fhir::HumanName_pskel* valueHumanName_parser_;
    ::fhir::Identifier_pskel* valueIdentifier_parser_;
    ::fhir::Money_pskel* valueMoney_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Ratio_pskel* valueRatio_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::SampledData_pskel* valueSampledData_parser_;
    ::fhir::Signature_pskel* valueSignature_parser_;
    ::fhir::Timing_pskel* valueTiming_parser_;
    ::fhir::ContactDetail_pskel* valueContactDetail_parser_;
    ::fhir::Contributor_pskel* valueContributor_parser_;
    ::fhir::DataRequirement_pskel* valueDataRequirement_parser_;
    ::fhir::Expression_pskel* valueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* valueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* valueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* valueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* valueUsageContext_parser_;
    ::fhir::Dosage_pskel* valueDosage_parser_;
    ::fhir::Meta_pskel* valueMeta_parser_;
    ::fhir::ResourceContainer_pskel* resource_parser_;
    ::fhir::Parameters_Parameter_pskel* part_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Parameters_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Patient_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    active ();

    virtual void
    name ();

    virtual void
    telecom ();

    virtual void
    gender ();

    virtual void
    birthDate ();

    virtual void
    deceasedBoolean ();

    virtual void
    deceasedDateTime ();

    virtual void
    address ();

    virtual void
    maritalStatus ();

    virtual void
    multipleBirthBoolean ();

    virtual void
    multipleBirthInteger ();

    virtual void
    photo ();

    virtual void
    contact ();

    virtual void
    communication ();

    virtual void
    generalPractitioner ();

    virtual void
    managingOrganization ();

    virtual void
    link ();

    virtual void
    post_Patient ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::HumanName_pskel& /* name */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::AdministrativeGender_pskel& /* gender */,
             ::fhir::date_pskel& /* birthDate */,
             ::fhir::boolean_pskel& /* deceasedBoolean */,
             ::fhir::dateTime_pskel& /* deceasedDateTime */,
             ::fhir::Address_pskel& /* address */,
             ::fhir::CodeableConcept_pskel& /* maritalStatus */,
             ::fhir::boolean_pskel& /* multipleBirthBoolean */,
             ::fhir::integer_pskel& /* multipleBirthInteger */,
             ::fhir::Attachment_pskel& /* photo */,
             ::fhir::Patient_Contact_pskel& /* contact */,
             ::fhir::Patient_Communication_pskel& /* communication */,
             ::fhir::Reference_pskel& /* generalPractitioner */,
             ::fhir::Reference_pskel& /* managingOrganization */,
             ::fhir::Patient_Link_pskel& /* link */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    name_parser (::fhir::HumanName_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    gender_parser (::fhir::AdministrativeGender_pskel&);

    void
    birthDate_parser (::fhir::date_pskel&);

    void
    deceasedBoolean_parser (::fhir::boolean_pskel&);

    void
    deceasedDateTime_parser (::fhir::dateTime_pskel&);

    void
    address_parser (::fhir::Address_pskel&);

    void
    maritalStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    multipleBirthBoolean_parser (::fhir::boolean_pskel&);

    void
    multipleBirthInteger_parser (::fhir::integer_pskel&);

    void
    photo_parser (::fhir::Attachment_pskel&);

    void
    contact_parser (::fhir::Patient_Contact_pskel&);

    void
    communication_parser (::fhir::Patient_Communication_pskel&);

    void
    generalPractitioner_parser (::fhir::Reference_pskel&);

    void
    managingOrganization_parser (::fhir::Reference_pskel&);

    void
    link_parser (::fhir::Patient_Link_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Patient_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Patient_pskel* Patient_impl_;
    Patient_pskel (Patient_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::HumanName_pskel* name_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::AdministrativeGender_pskel* gender_parser_;
    ::fhir::date_pskel* birthDate_parser_;
    ::fhir::boolean_pskel* deceasedBoolean_parser_;
    ::fhir::dateTime_pskel* deceasedDateTime_parser_;
    ::fhir::Address_pskel* address_parser_;
    ::fhir::CodeableConcept_pskel* maritalStatus_parser_;
    ::fhir::boolean_pskel* multipleBirthBoolean_parser_;
    ::fhir::integer_pskel* multipleBirthInteger_parser_;
    ::fhir::Attachment_pskel* photo_parser_;
    ::fhir::Patient_Contact_pskel* contact_parser_;
    ::fhir::Patient_Communication_pskel* communication_parser_;
    ::fhir::Reference_pskel* generalPractitioner_parser_;
    ::fhir::Reference_pskel* managingOrganization_parser_;
    ::fhir::Patient_Link_pskel* link_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Patient_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Patient_Contact_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    relationship ();

    virtual void
    name ();

    virtual void
    telecom ();

    virtual void
    address ();

    virtual void
    gender ();

    virtual void
    organization ();

    virtual void
    period ();

    virtual void
    post_Patient_Contact ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* relationship */,
             ::fhir::HumanName_pskel& /* name */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::Address_pskel& /* address */,
             ::fhir::AdministrativeGender_pskel& /* gender */,
             ::fhir::Reference_pskel& /* organization */,
             ::fhir::Period_pskel& /* period */);

    // Individual element parsers.
    //
    void
    relationship_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::HumanName_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    address_parser (::fhir::Address_pskel&);

    void
    gender_parser (::fhir::AdministrativeGender_pskel&);

    void
    organization_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Patient_Contact_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Patient_Contact_pskel* Patient_Contact_impl_;
    Patient_Contact_pskel (Patient_Contact_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* relationship_parser_;
    ::fhir::HumanName_pskel* name_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::Address_pskel* address_parser_;
    ::fhir::AdministrativeGender_pskel* gender_parser_;
    ::fhir::Reference_pskel* organization_parser_;
    ::fhir::Period_pskel* period_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Patient_Contact_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Patient_Communication_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    language ();

    virtual void
    preferred ();

    virtual void
    post_Patient_Communication ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* language */,
             ::fhir::boolean_pskel& /* preferred */);

    // Individual element parsers.
    //
    void
    language_parser (::fhir::CodeableConcept_pskel&);

    void
    preferred_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Patient_Communication_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Patient_Communication_pskel* Patient_Communication_impl_;
    Patient_Communication_pskel (Patient_Communication_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* language_parser_;
    ::fhir::boolean_pskel* preferred_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Patient_Communication_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Patient_Link_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    other ();

    virtual void
    type ();

    virtual void
    post_Patient_Link ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* other */,
             ::fhir::LinkType_pskel& /* type */);

    // Individual element parsers.
    //
    void
    other_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::LinkType_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Patient_Link_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Patient_Link_pskel* Patient_Link_impl_;
    Patient_Link_pskel (Patient_Link_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* other_parser_;
    ::fhir::LinkType_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Patient_Link_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class LinkType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_LinkType_list ();

    // Constructor.
    //
    LinkType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    LinkType_list_pskel* LinkType_list_impl_;
    LinkType_list_pskel (LinkType_list_pskel*, void*);

    protected:
    static const char* const _xsde_LinkType_list_pskel_enums_[4UL];
  };

  class LinkType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_LinkType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::LinkType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::LinkType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    LinkType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    LinkType_pskel* LinkType_impl_;
    LinkType_pskel (LinkType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::LinkType_list_pskel* value_parser_;
  };

  class PaymentNotice_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    request ();

    virtual void
    response ();

    virtual void
    created ();

    virtual void
    provider ();

    virtual void
    payment ();

    virtual void
    paymentDate ();

    virtual void
    payee ();

    virtual void
    recipient ();

    virtual void
    amount ();

    virtual void
    paymentStatus ();

    virtual void
    post_PaymentNotice ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::Reference_pskel& /* request */,
             ::fhir::Reference_pskel& /* response */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* provider */,
             ::fhir::Reference_pskel& /* payment */,
             ::fhir::date_pskel& /* paymentDate */,
             ::fhir::Reference_pskel& /* payee */,
             ::fhir::Reference_pskel& /* recipient */,
             ::fhir::Money_pskel& /* amount */,
             ::fhir::CodeableConcept_pskel& /* paymentStatus */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    request_parser (::fhir::Reference_pskel&);

    void
    response_parser (::fhir::Reference_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    provider_parser (::fhir::Reference_pskel&);

    void
    payment_parser (::fhir::Reference_pskel&);

    void
    paymentDate_parser (::fhir::date_pskel&);

    void
    payee_parser (::fhir::Reference_pskel&);

    void
    recipient_parser (::fhir::Reference_pskel&);

    void
    amount_parser (::fhir::Money_pskel&);

    void
    paymentStatus_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PaymentNotice_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    PaymentNotice_pskel* PaymentNotice_impl_;
    PaymentNotice_pskel (PaymentNotice_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::Reference_pskel* request_parser_;
    ::fhir::Reference_pskel* response_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* provider_parser_;
    ::fhir::Reference_pskel* payment_parser_;
    ::fhir::date_pskel* paymentDate_parser_;
    ::fhir::Reference_pskel* payee_parser_;
    ::fhir::Reference_pskel* recipient_parser_;
    ::fhir::Money_pskel* amount_parser_;
    ::fhir::CodeableConcept_pskel* paymentStatus_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PaymentNotice_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PaymentReconciliation_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    period ();

    virtual void
    created ();

    virtual void
    paymentIssuer ();

    virtual void
    request ();

    virtual void
    requestor ();

    virtual void
    outcome ();

    virtual void
    disposition ();

    virtual void
    paymentDate ();

    virtual void
    paymentAmount ();

    virtual void
    paymentIdentifier ();

    virtual void
    detail ();

    virtual void
    formCode ();

    virtual void
    processNote ();

    virtual void
    post_PaymentReconciliation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* paymentIssuer */,
             ::fhir::Reference_pskel& /* request */,
             ::fhir::Reference_pskel& /* requestor */,
             ::fhir::RemittanceOutcome_pskel& /* outcome */,
             ::fhir::string_pskel& /* disposition */,
             ::fhir::date_pskel& /* paymentDate */,
             ::fhir::Money_pskel& /* paymentAmount */,
             ::fhir::Identifier_pskel& /* paymentIdentifier */,
             ::fhir::PaymentReconciliation_Detail_pskel& /* detail */,
             ::fhir::CodeableConcept_pskel& /* formCode */,
             ::fhir::PaymentReconciliation_ProcessNote_pskel& /* processNote */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    paymentIssuer_parser (::fhir::Reference_pskel&);

    void
    request_parser (::fhir::Reference_pskel&);

    void
    requestor_parser (::fhir::Reference_pskel&);

    void
    outcome_parser (::fhir::RemittanceOutcome_pskel&);

    void
    disposition_parser (::fhir::string_pskel&);

    void
    paymentDate_parser (::fhir::date_pskel&);

    void
    paymentAmount_parser (::fhir::Money_pskel&);

    void
    paymentIdentifier_parser (::fhir::Identifier_pskel&);

    void
    detail_parser (::fhir::PaymentReconciliation_Detail_pskel&);

    void
    formCode_parser (::fhir::CodeableConcept_pskel&);

    void
    processNote_parser (::fhir::PaymentReconciliation_ProcessNote_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PaymentReconciliation_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    PaymentReconciliation_pskel* PaymentReconciliation_impl_;
    PaymentReconciliation_pskel (PaymentReconciliation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* paymentIssuer_parser_;
    ::fhir::Reference_pskel* request_parser_;
    ::fhir::Reference_pskel* requestor_parser_;
    ::fhir::RemittanceOutcome_pskel* outcome_parser_;
    ::fhir::string_pskel* disposition_parser_;
    ::fhir::date_pskel* paymentDate_parser_;
    ::fhir::Money_pskel* paymentAmount_parser_;
    ::fhir::Identifier_pskel* paymentIdentifier_parser_;
    ::fhir::PaymentReconciliation_Detail_pskel* detail_parser_;
    ::fhir::CodeableConcept_pskel* formCode_parser_;
    ::fhir::PaymentReconciliation_ProcessNote_pskel* processNote_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PaymentReconciliation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PaymentReconciliation_Detail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    predecessor ();

    virtual void
    type ();

    virtual void
    request ();

    virtual void
    submitter ();

    virtual void
    response ();

    virtual void
    date ();

    virtual void
    responsible ();

    virtual void
    payee ();

    virtual void
    amount ();

    virtual void
    post_PaymentReconciliation_Detail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Identifier_pskel& /* predecessor */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* request */,
             ::fhir::Reference_pskel& /* submitter */,
             ::fhir::Reference_pskel& /* response */,
             ::fhir::date_pskel& /* date */,
             ::fhir::Reference_pskel& /* responsible */,
             ::fhir::Reference_pskel& /* payee */,
             ::fhir::Money_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    predecessor_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    request_parser (::fhir::Reference_pskel&);

    void
    submitter_parser (::fhir::Reference_pskel&);

    void
    response_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::date_pskel&);

    void
    responsible_parser (::fhir::Reference_pskel&);

    void
    payee_parser (::fhir::Reference_pskel&);

    void
    amount_parser (::fhir::Money_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PaymentReconciliation_Detail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PaymentReconciliation_Detail_pskel* PaymentReconciliation_Detail_impl_;
    PaymentReconciliation_Detail_pskel (PaymentReconciliation_Detail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Identifier_pskel* predecessor_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* request_parser_;
    ::fhir::Reference_pskel* submitter_parser_;
    ::fhir::Reference_pskel* response_parser_;
    ::fhir::date_pskel* date_parser_;
    ::fhir::Reference_pskel* responsible_parser_;
    ::fhir::Reference_pskel* payee_parser_;
    ::fhir::Money_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PaymentReconciliation_Detail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PaymentReconciliation_ProcessNote_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    text ();

    virtual void
    post_PaymentReconciliation_ProcessNote ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::NoteType_pskel& /* type */,
             ::fhir::string_pskel& /* text */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::NoteType_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PaymentReconciliation_ProcessNote_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PaymentReconciliation_ProcessNote_pskel* PaymentReconciliation_ProcessNote_impl_;
    PaymentReconciliation_ProcessNote_pskel (PaymentReconciliation_ProcessNote_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::NoteType_pskel* type_parser_;
    ::fhir::string_pskel* text_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PaymentReconciliation_ProcessNote_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Person_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    name ();

    virtual void
    telecom ();

    virtual void
    gender ();

    virtual void
    birthDate ();

    virtual void
    address ();

    virtual void
    photo ();

    virtual void
    managingOrganization ();

    virtual void
    active ();

    virtual void
    link ();

    virtual void
    post_Person ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::HumanName_pskel& /* name */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::AdministrativeGender_pskel& /* gender */,
             ::fhir::date_pskel& /* birthDate */,
             ::fhir::Address_pskel& /* address */,
             ::fhir::Attachment_pskel& /* photo */,
             ::fhir::Reference_pskel& /* managingOrganization */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::Person_Link_pskel& /* link */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    name_parser (::fhir::HumanName_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    gender_parser (::fhir::AdministrativeGender_pskel&);

    void
    birthDate_parser (::fhir::date_pskel&);

    void
    address_parser (::fhir::Address_pskel&);

    void
    photo_parser (::fhir::Attachment_pskel&);

    void
    managingOrganization_parser (::fhir::Reference_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    link_parser (::fhir::Person_Link_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Person_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Person_pskel* Person_impl_;
    Person_pskel (Person_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::HumanName_pskel* name_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::AdministrativeGender_pskel* gender_parser_;
    ::fhir::date_pskel* birthDate_parser_;
    ::fhir::Address_pskel* address_parser_;
    ::fhir::Attachment_pskel* photo_parser_;
    ::fhir::Reference_pskel* managingOrganization_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::Person_Link_pskel* link_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Person_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Person_Link_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    target ();

    virtual void
    assurance ();

    virtual void
    post_Person_Link ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* target */,
             ::fhir::IdentityAssuranceLevel_pskel& /* assurance */);

    // Individual element parsers.
    //
    void
    target_parser (::fhir::Reference_pskel&);

    void
    assurance_parser (::fhir::IdentityAssuranceLevel_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Person_Link_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Person_Link_pskel* Person_Link_impl_;
    Person_Link_pskel (Person_Link_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* target_parser_;
    ::fhir::IdentityAssuranceLevel_pskel* assurance_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Person_Link_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class IdentityAssuranceLevel_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_IdentityAssuranceLevel_list ();

    // Constructor.
    //
    IdentityAssuranceLevel_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    IdentityAssuranceLevel_list_pskel* IdentityAssuranceLevel_list_impl_;
    IdentityAssuranceLevel_list_pskel (IdentityAssuranceLevel_list_pskel*, void*);

    protected:
    static const char* const _xsde_IdentityAssuranceLevel_list_pskel_enums_[4UL];
  };

  class IdentityAssuranceLevel_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_IdentityAssuranceLevel ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::IdentityAssuranceLevel_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::IdentityAssuranceLevel_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    IdentityAssuranceLevel_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    IdentityAssuranceLevel_pskel* IdentityAssuranceLevel_impl_;
    IdentityAssuranceLevel_pskel (IdentityAssuranceLevel_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::IdentityAssuranceLevel_list_pskel* value_parser_;
  };

  class PlanDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    subtitle ();

    virtual void
    type ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    usage ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    library ();

    virtual void
    goal ();

    virtual void
    action ();

    virtual void
    post_PlanDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::string_pskel& /* usage */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::canonical_pskel& /* library */,
             ::fhir::PlanDefinition_Goal_pskel& /* goal */,
             ::fhir::PlanDefinition_Action_pskel& /* action */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    usage_parser (::fhir::string_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    library_parser (::fhir::canonical_pskel&);

    void
    goal_parser (::fhir::PlanDefinition_Goal_pskel&);

    void
    action_parser (::fhir::PlanDefinition_Action_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_pskel* PlanDefinition_impl_;
    PlanDefinition_pskel (PlanDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::string_pskel* usage_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::canonical_pskel* library_parser_;
    ::fhir::PlanDefinition_Goal_pskel* goal_parser_;
    ::fhir::PlanDefinition_Action_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_Goal_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    description ();

    virtual void
    priority ();

    virtual void
    start ();

    virtual void
    addresses ();

    virtual void
    documentation ();

    virtual void
    target ();

    virtual void
    post_PlanDefinition_Goal ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* start */,
             ::fhir::CodeableConcept_pskel& /* addresses */,
             ::fhir::RelatedArtifact_pskel& /* documentation */,
             ::fhir::PlanDefinition_Target_pskel& /* target */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::CodeableConcept_pskel&);

    void
    start_parser (::fhir::CodeableConcept_pskel&);

    void
    addresses_parser (::fhir::CodeableConcept_pskel&);

    void
    documentation_parser (::fhir::RelatedArtifact_pskel&);

    void
    target_parser (::fhir::PlanDefinition_Target_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_Goal_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_Goal_pskel* PlanDefinition_Goal_impl_;
    PlanDefinition_Goal_pskel (PlanDefinition_Goal_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* start_parser_;
    ::fhir::CodeableConcept_pskel* addresses_parser_;
    ::fhir::RelatedArtifact_pskel* documentation_parser_;
    ::fhir::PlanDefinition_Target_pskel* target_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_Goal_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_Target_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    measure ();

    virtual void
    detailQuantity ();

    virtual void
    detailRange ();

    virtual void
    detailCodeableConcept ();

    virtual void
    due ();

    virtual void
    post_PlanDefinition_Target ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* measure */,
             ::fhir::Quantity_pskel& /* detailQuantity */,
             ::fhir::Range_pskel& /* detailRange */,
             ::fhir::CodeableConcept_pskel& /* detailCodeableConcept */,
             ::fhir::Duration_pskel& /* due */);

    // Individual element parsers.
    //
    void
    measure_parser (::fhir::CodeableConcept_pskel&);

    void
    detailQuantity_parser (::fhir::Quantity_pskel&);

    void
    detailRange_parser (::fhir::Range_pskel&);

    void
    detailCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    due_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_Target_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_Target_pskel* PlanDefinition_Target_impl_;
    PlanDefinition_Target_pskel (PlanDefinition_Target_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* measure_parser_;
    ::fhir::Quantity_pskel* detailQuantity_parser_;
    ::fhir::Range_pskel* detailRange_parser_;
    ::fhir::CodeableConcept_pskel* detailCodeableConcept_parser_;
    ::fhir::Duration_pskel* due_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_Target_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_Action_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    prefix ();

    virtual void
    title ();

    virtual void
    description ();

    virtual void
    textEquivalent ();

    virtual void
    priority ();

    virtual void
    code ();

    virtual void
    reason ();

    virtual void
    documentation ();

    virtual void
    goalId ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    trigger ();

    virtual void
    condition ();

    virtual void
    input ();

    virtual void
    output ();

    virtual void
    relatedAction ();

    virtual void
    timingDateTime ();

    virtual void
    timingAge ();

    virtual void
    timingPeriod ();

    virtual void
    timingDuration ();

    virtual void
    timingRange ();

    virtual void
    timingTiming ();

    virtual void
    participant ();

    virtual void
    type ();

    virtual void
    groupingBehavior ();

    virtual void
    selectionBehavior ();

    virtual void
    requiredBehavior ();

    virtual void
    precheckBehavior ();

    virtual void
    cardinalityBehavior ();

    virtual void
    definitionCanonical ();

    virtual void
    definitionUri ();

    virtual void
    transform ();

    virtual void
    dynamicValue ();

    virtual void
    action ();

    virtual void
    post_PlanDefinition_Action ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* prefix */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* description */,
             ::fhir::string_pskel& /* textEquivalent */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* reason */,
             ::fhir::RelatedArtifact_pskel& /* documentation */,
             ::fhir::id_pskel& /* goalId */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::TriggerDefinition_pskel& /* trigger */,
             ::fhir::PlanDefinition_Condition_pskel& /* condition */,
             ::fhir::DataRequirement_pskel& /* input */,
             ::fhir::DataRequirement_pskel& /* output */,
             ::fhir::PlanDefinition_RelatedAction_pskel& /* relatedAction */,
             ::fhir::dateTime_pskel& /* timingDateTime */,
             ::fhir::Age_pskel& /* timingAge */,
             ::fhir::Period_pskel& /* timingPeriod */,
             ::fhir::Duration_pskel& /* timingDuration */,
             ::fhir::Range_pskel& /* timingRange */,
             ::fhir::Timing_pskel& /* timingTiming */,
             ::fhir::PlanDefinition_Participant_pskel& /* participant */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::ActionGroupingBehavior_pskel& /* groupingBehavior */,
             ::fhir::ActionSelectionBehavior_pskel& /* selectionBehavior */,
             ::fhir::ActionRequiredBehavior_pskel& /* requiredBehavior */,
             ::fhir::ActionPrecheckBehavior_pskel& /* precheckBehavior */,
             ::fhir::ActionCardinalityBehavior_pskel& /* cardinalityBehavior */,
             ::fhir::canonical_pskel& /* definitionCanonical */,
             ::fhir::uri_pskel& /* definitionUri */,
             ::fhir::canonical_pskel& /* transform */,
             ::fhir::PlanDefinition_DynamicValue_pskel& /* dynamicValue */,
             ::fhir::PlanDefinition_Action_pskel& /* action */);

    // Individual element parsers.
    //
    void
    prefix_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    textEquivalent_parser (::fhir::string_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    void
    documentation_parser (::fhir::RelatedArtifact_pskel&);

    void
    goalId_parser (::fhir::id_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    trigger_parser (::fhir::TriggerDefinition_pskel&);

    void
    condition_parser (::fhir::PlanDefinition_Condition_pskel&);

    void
    input_parser (::fhir::DataRequirement_pskel&);

    void
    output_parser (::fhir::DataRequirement_pskel&);

    void
    relatedAction_parser (::fhir::PlanDefinition_RelatedAction_pskel&);

    void
    timingDateTime_parser (::fhir::dateTime_pskel&);

    void
    timingAge_parser (::fhir::Age_pskel&);

    void
    timingPeriod_parser (::fhir::Period_pskel&);

    void
    timingDuration_parser (::fhir::Duration_pskel&);

    void
    timingRange_parser (::fhir::Range_pskel&);

    void
    timingTiming_parser (::fhir::Timing_pskel&);

    void
    participant_parser (::fhir::PlanDefinition_Participant_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    groupingBehavior_parser (::fhir::ActionGroupingBehavior_pskel&);

    void
    selectionBehavior_parser (::fhir::ActionSelectionBehavior_pskel&);

    void
    requiredBehavior_parser (::fhir::ActionRequiredBehavior_pskel&);

    void
    precheckBehavior_parser (::fhir::ActionPrecheckBehavior_pskel&);

    void
    cardinalityBehavior_parser (::fhir::ActionCardinalityBehavior_pskel&);

    void
    definitionCanonical_parser (::fhir::canonical_pskel&);

    void
    definitionUri_parser (::fhir::uri_pskel&);

    void
    transform_parser (::fhir::canonical_pskel&);

    void
    dynamicValue_parser (::fhir::PlanDefinition_DynamicValue_pskel&);

    void
    action_parser (::fhir::PlanDefinition_Action_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_Action_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_Action_pskel* PlanDefinition_Action_impl_;
    PlanDefinition_Action_pskel (PlanDefinition_Action_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* prefix_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::string_pskel* textEquivalent_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;
    ::fhir::RelatedArtifact_pskel* documentation_parser_;
    ::fhir::id_pskel* goalId_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::TriggerDefinition_pskel* trigger_parser_;
    ::fhir::PlanDefinition_Condition_pskel* condition_parser_;
    ::fhir::DataRequirement_pskel* input_parser_;
    ::fhir::DataRequirement_pskel* output_parser_;
    ::fhir::PlanDefinition_RelatedAction_pskel* relatedAction_parser_;
    ::fhir::dateTime_pskel* timingDateTime_parser_;
    ::fhir::Age_pskel* timingAge_parser_;
    ::fhir::Period_pskel* timingPeriod_parser_;
    ::fhir::Duration_pskel* timingDuration_parser_;
    ::fhir::Range_pskel* timingRange_parser_;
    ::fhir::Timing_pskel* timingTiming_parser_;
    ::fhir::PlanDefinition_Participant_pskel* participant_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::ActionGroupingBehavior_pskel* groupingBehavior_parser_;
    ::fhir::ActionSelectionBehavior_pskel* selectionBehavior_parser_;
    ::fhir::ActionRequiredBehavior_pskel* requiredBehavior_parser_;
    ::fhir::ActionPrecheckBehavior_pskel* precheckBehavior_parser_;
    ::fhir::ActionCardinalityBehavior_pskel* cardinalityBehavior_parser_;
    ::fhir::canonical_pskel* definitionCanonical_parser_;
    ::fhir::uri_pskel* definitionUri_parser_;
    ::fhir::canonical_pskel* transform_parser_;
    ::fhir::PlanDefinition_DynamicValue_pskel* dynamicValue_parser_;
    ::fhir::PlanDefinition_Action_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_Action_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_Condition_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    kind ();

    virtual void
    expression ();

    virtual void
    post_PlanDefinition_Condition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ActionConditionKind_pskel& /* kind */,
             ::fhir::Expression_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    kind_parser (::fhir::ActionConditionKind_pskel&);

    void
    expression_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_Condition_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_Condition_pskel* PlanDefinition_Condition_impl_;
    PlanDefinition_Condition_pskel (PlanDefinition_Condition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ActionConditionKind_pskel* kind_parser_;
    ::fhir::Expression_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_Condition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_RelatedAction_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    actionId ();

    virtual void
    relationship ();

    virtual void
    offsetDuration ();

    virtual void
    offsetRange ();

    virtual void
    post_PlanDefinition_RelatedAction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* actionId */,
             ::fhir::ActionRelationshipType_pskel& /* relationship */,
             ::fhir::Duration_pskel& /* offsetDuration */,
             ::fhir::Range_pskel& /* offsetRange */);

    // Individual element parsers.
    //
    void
    actionId_parser (::fhir::id_pskel&);

    void
    relationship_parser (::fhir::ActionRelationshipType_pskel&);

    void
    offsetDuration_parser (::fhir::Duration_pskel&);

    void
    offsetRange_parser (::fhir::Range_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_RelatedAction_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_RelatedAction_pskel* PlanDefinition_RelatedAction_impl_;
    PlanDefinition_RelatedAction_pskel (PlanDefinition_RelatedAction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* actionId_parser_;
    ::fhir::ActionRelationshipType_pskel* relationship_parser_;
    ::fhir::Duration_pskel* offsetDuration_parser_;
    ::fhir::Range_pskel* offsetRange_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_RelatedAction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_Participant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    role ();

    virtual void
    post_PlanDefinition_Participant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ActionParticipantType_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* role */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::ActionParticipantType_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_Participant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_Participant_pskel* PlanDefinition_Participant_impl_;
    PlanDefinition_Participant_pskel (PlanDefinition_Participant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ActionParticipantType_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_Participant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PlanDefinition_DynamicValue_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path ();

    virtual void
    expression ();

    virtual void
    post_PlanDefinition_DynamicValue ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* path */,
             ::fhir::Expression_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    path_parser (::fhir::string_pskel&);

    void
    expression_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PlanDefinition_DynamicValue_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PlanDefinition_DynamicValue_pskel* PlanDefinition_DynamicValue_impl_;
    PlanDefinition_DynamicValue_pskel (PlanDefinition_DynamicValue_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* path_parser_;
    ::fhir::Expression_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PlanDefinition_DynamicValue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ActionRequiredBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionRequiredBehavior_list ();

    // Constructor.
    //
    ActionRequiredBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionRequiredBehavior_list_pskel* ActionRequiredBehavior_list_impl_;
    ActionRequiredBehavior_list_pskel (ActionRequiredBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionRequiredBehavior_list_pskel_enums_[3UL];
  };

  class ActionRequiredBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionRequiredBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionRequiredBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionRequiredBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionRequiredBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionRequiredBehavior_pskel* ActionRequiredBehavior_impl_;
    ActionRequiredBehavior_pskel (ActionRequiredBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionRequiredBehavior_list_pskel* value_parser_;
  };

  class ActionRelationshipType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionRelationshipType_list ();

    // Constructor.
    //
    ActionRelationshipType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionRelationshipType_list_pskel* ActionRelationshipType_list_impl_;
    ActionRelationshipType_list_pskel (ActionRelationshipType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionRelationshipType_list_pskel_enums_[9UL];
  };

  class ActionRelationshipType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionRelationshipType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionRelationshipType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionRelationshipType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionRelationshipType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionRelationshipType_pskel* ActionRelationshipType_impl_;
    ActionRelationshipType_pskel (ActionRelationshipType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionRelationshipType_list_pskel* value_parser_;
  };

  class ActionGroupingBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionGroupingBehavior_list ();

    // Constructor.
    //
    ActionGroupingBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionGroupingBehavior_list_pskel* ActionGroupingBehavior_list_impl_;
    ActionGroupingBehavior_list_pskel (ActionGroupingBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionGroupingBehavior_list_pskel_enums_[3UL];
  };

  class ActionGroupingBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionGroupingBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionGroupingBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionGroupingBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionGroupingBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionGroupingBehavior_pskel* ActionGroupingBehavior_impl_;
    ActionGroupingBehavior_pskel (ActionGroupingBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionGroupingBehavior_list_pskel* value_parser_;
  };

  class ActionSelectionBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionSelectionBehavior_list ();

    // Constructor.
    //
    ActionSelectionBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionSelectionBehavior_list_pskel* ActionSelectionBehavior_list_impl_;
    ActionSelectionBehavior_list_pskel (ActionSelectionBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionSelectionBehavior_list_pskel_enums_[6UL];
  };

  class ActionSelectionBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionSelectionBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionSelectionBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionSelectionBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionSelectionBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionSelectionBehavior_pskel* ActionSelectionBehavior_impl_;
    ActionSelectionBehavior_pskel (ActionSelectionBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionSelectionBehavior_list_pskel* value_parser_;
  };

  class ActionCardinalityBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionCardinalityBehavior_list ();

    // Constructor.
    //
    ActionCardinalityBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionCardinalityBehavior_list_pskel* ActionCardinalityBehavior_list_impl_;
    ActionCardinalityBehavior_list_pskel (ActionCardinalityBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionCardinalityBehavior_list_pskel_enums_[2UL];
  };

  class ActionCardinalityBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionCardinalityBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionCardinalityBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionCardinalityBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionCardinalityBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionCardinalityBehavior_pskel* ActionCardinalityBehavior_impl_;
    ActionCardinalityBehavior_pskel (ActionCardinalityBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionCardinalityBehavior_list_pskel* value_parser_;
  };

  class ActionPrecheckBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionPrecheckBehavior_list ();

    // Constructor.
    //
    ActionPrecheckBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionPrecheckBehavior_list_pskel* ActionPrecheckBehavior_list_impl_;
    ActionPrecheckBehavior_list_pskel (ActionPrecheckBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionPrecheckBehavior_list_pskel_enums_[2UL];
  };

  class ActionPrecheckBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionPrecheckBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionPrecheckBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionPrecheckBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionPrecheckBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionPrecheckBehavior_pskel* ActionPrecheckBehavior_impl_;
    ActionPrecheckBehavior_pskel (ActionPrecheckBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionPrecheckBehavior_list_pskel* value_parser_;
  };

  class ActionConditionKind_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ActionConditionKind_list ();

    // Constructor.
    //
    ActionConditionKind_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionConditionKind_list_pskel* ActionConditionKind_list_impl_;
    ActionConditionKind_list_pskel (ActionConditionKind_list_pskel*, void*);

    protected:
    static const char* const _xsde_ActionConditionKind_list_pskel_enums_[3UL];
  };

  class ActionConditionKind_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ActionConditionKind ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ActionConditionKind_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ActionConditionKind_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionConditionKind_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ActionConditionKind_pskel* ActionConditionKind_impl_;
    ActionConditionKind_pskel (ActionConditionKind_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ActionConditionKind_list_pskel* value_parser_;
  };

  class Practitioner_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    active ();

    virtual void
    name ();

    virtual void
    telecom ();

    virtual void
    address ();

    virtual void
    gender ();

    virtual void
    birthDate ();

    virtual void
    photo ();

    virtual void
    qualification ();

    virtual void
    communication ();

    virtual void
    post_Practitioner ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::HumanName_pskel& /* name */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::Address_pskel& /* address */,
             ::fhir::AdministrativeGender_pskel& /* gender */,
             ::fhir::date_pskel& /* birthDate */,
             ::fhir::Attachment_pskel& /* photo */,
             ::fhir::Practitioner_Qualification_pskel& /* qualification */,
             ::fhir::CodeableConcept_pskel& /* communication */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    name_parser (::fhir::HumanName_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    address_parser (::fhir::Address_pskel&);

    void
    gender_parser (::fhir::AdministrativeGender_pskel&);

    void
    birthDate_parser (::fhir::date_pskel&);

    void
    photo_parser (::fhir::Attachment_pskel&);

    void
    qualification_parser (::fhir::Practitioner_Qualification_pskel&);

    void
    communication_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Practitioner_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Practitioner_pskel* Practitioner_impl_;
    Practitioner_pskel (Practitioner_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::HumanName_pskel* name_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::Address_pskel* address_parser_;
    ::fhir::AdministrativeGender_pskel* gender_parser_;
    ::fhir::date_pskel* birthDate_parser_;
    ::fhir::Attachment_pskel* photo_parser_;
    ::fhir::Practitioner_Qualification_pskel* qualification_parser_;
    ::fhir::CodeableConcept_pskel* communication_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Practitioner_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Practitioner_Qualification_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    code ();

    virtual void
    period ();

    virtual void
    issuer ();

    virtual void
    post_Practitioner_Qualification ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* issuer */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    issuer_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Practitioner_Qualification_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Practitioner_Qualification_pskel* Practitioner_Qualification_impl_;
    Practitioner_Qualification_pskel (Practitioner_Qualification_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* issuer_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Practitioner_Qualification_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PractitionerRole_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    active ();

    virtual void
    period ();

    virtual void
    practitioner ();

    virtual void
    organization ();

    virtual void
    code ();

    virtual void
    specialty ();

    virtual void
    location ();

    virtual void
    healthcareService ();

    virtual void
    telecom ();

    virtual void
    availableTime ();

    virtual void
    notAvailable ();

    virtual void
    availabilityExceptions ();

    virtual void
    endpoint ();

    virtual void
    post_PractitionerRole ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* practitioner */,
             ::fhir::Reference_pskel& /* organization */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* specialty */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::Reference_pskel& /* healthcareService */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::PractitionerRole_AvailableTime_pskel& /* availableTime */,
             ::fhir::PractitionerRole_NotAvailable_pskel& /* notAvailable */,
             ::fhir::string_pskel& /* availabilityExceptions */,
             ::fhir::Reference_pskel& /* endpoint */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    practitioner_parser (::fhir::Reference_pskel&);

    void
    organization_parser (::fhir::Reference_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    specialty_parser (::fhir::CodeableConcept_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    healthcareService_parser (::fhir::Reference_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    availableTime_parser (::fhir::PractitionerRole_AvailableTime_pskel&);

    void
    notAvailable_parser (::fhir::PractitionerRole_NotAvailable_pskel&);

    void
    availabilityExceptions_parser (::fhir::string_pskel&);

    void
    endpoint_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PractitionerRole_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    PractitionerRole_pskel* PractitionerRole_impl_;
    PractitionerRole_pskel (PractitionerRole_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* practitioner_parser_;
    ::fhir::Reference_pskel* organization_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* specialty_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::Reference_pskel* healthcareService_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::PractitionerRole_AvailableTime_pskel* availableTime_parser_;
    ::fhir::PractitionerRole_NotAvailable_pskel* notAvailable_parser_;
    ::fhir::string_pskel* availabilityExceptions_parser_;
    ::fhir::Reference_pskel* endpoint_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PractitionerRole_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PractitionerRole_AvailableTime_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    daysOfWeek ();

    virtual void
    allDay ();

    virtual void
    availableStartTime ();

    virtual void
    availableEndTime ();

    virtual void
    post_PractitionerRole_AvailableTime ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::DaysOfWeek_pskel& /* daysOfWeek */,
             ::fhir::boolean_pskel& /* allDay */,
             ::fhir::time_pskel& /* availableStartTime */,
             ::fhir::time_pskel& /* availableEndTime */);

    // Individual element parsers.
    //
    void
    daysOfWeek_parser (::fhir::DaysOfWeek_pskel&);

    void
    allDay_parser (::fhir::boolean_pskel&);

    void
    availableStartTime_parser (::fhir::time_pskel&);

    void
    availableEndTime_parser (::fhir::time_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PractitionerRole_AvailableTime_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PractitionerRole_AvailableTime_pskel* PractitionerRole_AvailableTime_impl_;
    PractitionerRole_AvailableTime_pskel (PractitionerRole_AvailableTime_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::DaysOfWeek_pskel* daysOfWeek_parser_;
    ::fhir::boolean_pskel* allDay_parser_;
    ::fhir::time_pskel* availableStartTime_parser_;
    ::fhir::time_pskel* availableEndTime_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PractitionerRole_AvailableTime_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class PractitionerRole_NotAvailable_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    during ();

    virtual void
    post_PractitionerRole_NotAvailable ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Period_pskel& /* during */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    during_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    PractitionerRole_NotAvailable_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    PractitionerRole_NotAvailable_pskel* PractitionerRole_NotAvailable_impl_;
    PractitionerRole_NotAvailable_pskel (PractitionerRole_NotAvailable_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::Period_pskel* during_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::PractitionerRole_NotAvailable_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Procedure_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    basedOn ();

    virtual void
    partOf ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    category ();

    virtual void
    code ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    performedDateTime ();

    virtual void
    performedPeriod ();

    virtual void
    performedString ();

    virtual void
    performedAge ();

    virtual void
    performedRange ();

    virtual void
    recorder ();

    virtual void
    asserter ();

    virtual void
    performer ();

    virtual void
    location ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    bodySite ();

    virtual void
    outcome ();

    virtual void
    report ();

    virtual void
    complication ();

    virtual void
    complicationDetail ();

    virtual void
    followUp ();

    virtual void
    note ();

    virtual void
    focalDevice ();

    virtual void
    usedReference ();

    virtual void
    usedCode ();

    virtual void
    post_Procedure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::EventStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* performedDateTime */,
             ::fhir::Period_pskel& /* performedPeriod */,
             ::fhir::string_pskel& /* performedString */,
             ::fhir::Age_pskel& /* performedAge */,
             ::fhir::Range_pskel& /* performedRange */,
             ::fhir::Reference_pskel& /* recorder */,
             ::fhir::Reference_pskel& /* asserter */,
             ::fhir::Procedure_Performer_pskel& /* performer */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::CodeableConcept_pskel& /* outcome */,
             ::fhir::Reference_pskel& /* report */,
             ::fhir::CodeableConcept_pskel& /* complication */,
             ::fhir::Reference_pskel& /* complicationDetail */,
             ::fhir::CodeableConcept_pskel& /* followUp */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::Procedure_FocalDevice_pskel& /* focalDevice */,
             ::fhir::Reference_pskel& /* usedReference */,
             ::fhir::CodeableConcept_pskel& /* usedCode */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::EventStatus_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    performedDateTime_parser (::fhir::dateTime_pskel&);

    void
    performedPeriod_parser (::fhir::Period_pskel&);

    void
    performedString_parser (::fhir::string_pskel&);

    void
    performedAge_parser (::fhir::Age_pskel&);

    void
    performedRange_parser (::fhir::Range_pskel&);

    void
    recorder_parser (::fhir::Reference_pskel&);

    void
    asserter_parser (::fhir::Reference_pskel&);

    void
    performer_parser (::fhir::Procedure_Performer_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    outcome_parser (::fhir::CodeableConcept_pskel&);

    void
    report_parser (::fhir::Reference_pskel&);

    void
    complication_parser (::fhir::CodeableConcept_pskel&);

    void
    complicationDetail_parser (::fhir::Reference_pskel&);

    void
    followUp_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    focalDevice_parser (::fhir::Procedure_FocalDevice_pskel&);

    void
    usedReference_parser (::fhir::Reference_pskel&);

    void
    usedCode_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Procedure_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Procedure_pskel* Procedure_impl_;
    Procedure_pskel (Procedure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::EventStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* performedDateTime_parser_;
    ::fhir::Period_pskel* performedPeriod_parser_;
    ::fhir::string_pskel* performedString_parser_;
    ::fhir::Age_pskel* performedAge_parser_;
    ::fhir::Range_pskel* performedRange_parser_;
    ::fhir::Reference_pskel* recorder_parser_;
    ::fhir::Reference_pskel* asserter_parser_;
    ::fhir::Procedure_Performer_pskel* performer_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::CodeableConcept_pskel* outcome_parser_;
    ::fhir::Reference_pskel* report_parser_;
    ::fhir::CodeableConcept_pskel* complication_parser_;
    ::fhir::Reference_pskel* complicationDetail_parser_;
    ::fhir::CodeableConcept_pskel* followUp_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::Procedure_FocalDevice_pskel* focalDevice_parser_;
    ::fhir::Reference_pskel* usedReference_parser_;
    ::fhir::CodeableConcept_pskel* usedCode_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Procedure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Procedure_Performer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    function ();

    virtual void
    actor ();

    virtual void
    onBehalfOf ();

    virtual void
    post_Procedure_Performer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* function */,
             ::fhir::Reference_pskel& /* actor */,
             ::fhir::Reference_pskel& /* onBehalfOf */);

    // Individual element parsers.
    //
    void
    function_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    void
    onBehalfOf_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Procedure_Performer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Procedure_Performer_pskel* Procedure_Performer_impl_;
    Procedure_Performer_pskel (Procedure_Performer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* function_parser_;
    ::fhir::Reference_pskel* actor_parser_;
    ::fhir::Reference_pskel* onBehalfOf_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Procedure_Performer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Procedure_FocalDevice_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    action ();

    virtual void
    manipulated ();

    virtual void
    post_Procedure_FocalDevice ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* action */,
             ::fhir::Reference_pskel& /* manipulated */);

    // Individual element parsers.
    //
    void
    action_parser (::fhir::CodeableConcept_pskel&);

    void
    manipulated_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Procedure_FocalDevice_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Procedure_FocalDevice_pskel* Procedure_FocalDevice_impl_;
    Procedure_FocalDevice_pskel (Procedure_FocalDevice_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* action_parser_;
    ::fhir::Reference_pskel* manipulated_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Procedure_FocalDevice_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Provenance_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    target ();

    virtual void
    occurredPeriod ();

    virtual void
    occurredDateTime ();

    virtual void
    recorded ();

    virtual void
    policy ();

    virtual void
    location ();

    virtual void
    reason ();

    virtual void
    activity ();

    virtual void
    agent ();

    virtual void
    entity ();

    virtual void
    signature ();

    virtual void
    post_Provenance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* target */,
             ::fhir::Period_pskel& /* occurredPeriod */,
             ::fhir::dateTime_pskel& /* occurredDateTime */,
             ::fhir::instant_pskel& /* recorded */,
             ::fhir::uri_pskel& /* policy */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::CodeableConcept_pskel& /* reason */,
             ::fhir::CodeableConcept_pskel& /* activity */,
             ::fhir::Provenance_Agent_pskel& /* agent */,
             ::fhir::Provenance_Entity_pskel& /* entity */,
             ::fhir::Signature_pskel& /* signature */);

    // Individual element parsers.
    //
    void
    target_parser (::fhir::Reference_pskel&);

    void
    occurredPeriod_parser (::fhir::Period_pskel&);

    void
    occurredDateTime_parser (::fhir::dateTime_pskel&);

    void
    recorded_parser (::fhir::instant_pskel&);

    void
    policy_parser (::fhir::uri_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    reason_parser (::fhir::CodeableConcept_pskel&);

    void
    activity_parser (::fhir::CodeableConcept_pskel&);

    void
    agent_parser (::fhir::Provenance_Agent_pskel&);

    void
    entity_parser (::fhir::Provenance_Entity_pskel&);

    void
    signature_parser (::fhir::Signature_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Provenance_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Provenance_pskel* Provenance_impl_;
    Provenance_pskel (Provenance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* target_parser_;
    ::fhir::Period_pskel* occurredPeriod_parser_;
    ::fhir::dateTime_pskel* occurredDateTime_parser_;
    ::fhir::instant_pskel* recorded_parser_;
    ::fhir::uri_pskel* policy_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::CodeableConcept_pskel* reason_parser_;
    ::fhir::CodeableConcept_pskel* activity_parser_;
    ::fhir::Provenance_Agent_pskel* agent_parser_;
    ::fhir::Provenance_Entity_pskel* entity_parser_;
    ::fhir::Signature_pskel* signature_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Provenance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Provenance_Agent_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    role ();

    virtual void
    who ();

    virtual void
    onBehalfOf ();

    virtual void
    post_Provenance_Agent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::Reference_pskel& /* who */,
             ::fhir::Reference_pskel& /* onBehalfOf */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    who_parser (::fhir::Reference_pskel&);

    void
    onBehalfOf_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Provenance_Agent_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Provenance_Agent_pskel* Provenance_Agent_impl_;
    Provenance_Agent_pskel (Provenance_Agent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::Reference_pskel* who_parser_;
    ::fhir::Reference_pskel* onBehalfOf_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Provenance_Agent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Provenance_Entity_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    role ();

    virtual void
    what ();

    virtual void
    agent ();

    virtual void
    post_Provenance_Entity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ProvenanceEntityRole_pskel& /* role */,
             ::fhir::Reference_pskel& /* what */,
             ::fhir::Provenance_Agent_pskel& /* agent */);

    // Individual element parsers.
    //
    void
    role_parser (::fhir::ProvenanceEntityRole_pskel&);

    void
    what_parser (::fhir::Reference_pskel&);

    void
    agent_parser (::fhir::Provenance_Agent_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Provenance_Entity_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Provenance_Entity_pskel* Provenance_Entity_impl_;
    Provenance_Entity_pskel (Provenance_Entity_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ProvenanceEntityRole_pskel* role_parser_;
    ::fhir::Reference_pskel* what_parser_;
    ::fhir::Provenance_Agent_pskel* agent_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Provenance_Entity_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ProvenanceEntityRole_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ProvenanceEntityRole_list ();

    // Constructor.
    //
    ProvenanceEntityRole_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ProvenanceEntityRole_list_pskel* ProvenanceEntityRole_list_impl_;
    ProvenanceEntityRole_list_pskel (ProvenanceEntityRole_list_pskel*, void*);

    protected:
    static const char* const _xsde_ProvenanceEntityRole_list_pskel_enums_[5UL];
  };

  class ProvenanceEntityRole_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ProvenanceEntityRole ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ProvenanceEntityRole_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ProvenanceEntityRole_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ProvenanceEntityRole_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ProvenanceEntityRole_pskel* ProvenanceEntityRole_impl_;
    ProvenanceEntityRole_pskel (ProvenanceEntityRole_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ProvenanceEntityRole_list_pskel* value_parser_;
  };

  class Questionnaire_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    derivedFrom ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    subjectType ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    code ();

    virtual void
    item ();

    virtual void
    post_Questionnaire ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::canonical_pskel& /* derivedFrom */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::code_pskel& /* subjectType */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::Coding_pskel& /* code */,
             ::fhir::Questionnaire_Item_pskel& /* item */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    derivedFrom_parser (::fhir::canonical_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    subjectType_parser (::fhir::code_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    code_parser (::fhir::Coding_pskel&);

    void
    item_parser (::fhir::Questionnaire_Item_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Questionnaire_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Questionnaire_pskel* Questionnaire_impl_;
    Questionnaire_pskel (Questionnaire_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::canonical_pskel* derivedFrom_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::code_pskel* subjectType_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::Coding_pskel* code_parser_;
    ::fhir::Questionnaire_Item_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Questionnaire_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Questionnaire_Item_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    linkId ();

    virtual void
    definition ();

    virtual void
    code ();

    virtual void
    prefix ();

    virtual void
    text ();

    virtual void
    type ();

    virtual void
    enableWhen ();

    virtual void
    enableBehavior ();

    virtual void
    required ();

    virtual void
    repeats ();

    virtual void
    readOnly ();

    virtual void
    maxLength ();

    virtual void
    answerValueSet ();

    virtual void
    answerOption ();

    virtual void
    initial ();

    virtual void
    item ();

    virtual void
    post_Questionnaire_Item ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* linkId */,
             ::fhir::uri_pskel& /* definition */,
             ::fhir::Coding_pskel& /* code */,
             ::fhir::string_pskel& /* prefix */,
             ::fhir::string_pskel& /* text */,
             ::fhir::QuestionnaireItemType_pskel& /* type */,
             ::fhir::Questionnaire_EnableWhen_pskel& /* enableWhen */,
             ::fhir::EnableWhenBehavior_pskel& /* enableBehavior */,
             ::fhir::boolean_pskel& /* required */,
             ::fhir::boolean_pskel& /* repeats */,
             ::fhir::boolean_pskel& /* readOnly */,
             ::fhir::integer_pskel& /* maxLength */,
             ::fhir::canonical_pskel& /* answerValueSet */,
             ::fhir::Questionnaire_AnswerOption_pskel& /* answerOption */,
             ::fhir::Questionnaire_Initial_pskel& /* initial */,
             ::fhir::Questionnaire_Item_pskel& /* item */);

    // Individual element parsers.
    //
    void
    linkId_parser (::fhir::string_pskel&);

    void
    definition_parser (::fhir::uri_pskel&);

    void
    code_parser (::fhir::Coding_pskel&);

    void
    prefix_parser (::fhir::string_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::QuestionnaireItemType_pskel&);

    void
    enableWhen_parser (::fhir::Questionnaire_EnableWhen_pskel&);

    void
    enableBehavior_parser (::fhir::EnableWhenBehavior_pskel&);

    void
    required_parser (::fhir::boolean_pskel&);

    void
    repeats_parser (::fhir::boolean_pskel&);

    void
    readOnly_parser (::fhir::boolean_pskel&);

    void
    maxLength_parser (::fhir::integer_pskel&);

    void
    answerValueSet_parser (::fhir::canonical_pskel&);

    void
    answerOption_parser (::fhir::Questionnaire_AnswerOption_pskel&);

    void
    initial_parser (::fhir::Questionnaire_Initial_pskel&);

    void
    item_parser (::fhir::Questionnaire_Item_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Questionnaire_Item_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Questionnaire_Item_pskel* Questionnaire_Item_impl_;
    Questionnaire_Item_pskel (Questionnaire_Item_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* linkId_parser_;
    ::fhir::uri_pskel* definition_parser_;
    ::fhir::Coding_pskel* code_parser_;
    ::fhir::string_pskel* prefix_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::QuestionnaireItemType_pskel* type_parser_;
    ::fhir::Questionnaire_EnableWhen_pskel* enableWhen_parser_;
    ::fhir::EnableWhenBehavior_pskel* enableBehavior_parser_;
    ::fhir::boolean_pskel* required_parser_;
    ::fhir::boolean_pskel* repeats_parser_;
    ::fhir::boolean_pskel* readOnly_parser_;
    ::fhir::integer_pskel* maxLength_parser_;
    ::fhir::canonical_pskel* answerValueSet_parser_;
    ::fhir::Questionnaire_AnswerOption_pskel* answerOption_parser_;
    ::fhir::Questionnaire_Initial_pskel* initial_parser_;
    ::fhir::Questionnaire_Item_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Questionnaire_Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Questionnaire_EnableWhen_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    question ();

    virtual void
    operator_ ();

    virtual void
    answerBoolean ();

    virtual void
    answerDecimal ();

    virtual void
    answerInteger ();

    virtual void
    answerDate ();

    virtual void
    answerDateTime ();

    virtual void
    answerTime ();

    virtual void
    answerString ();

    virtual void
    answerCoding ();

    virtual void
    answerQuantity ();

    virtual void
    answerReference ();

    virtual void
    post_Questionnaire_EnableWhen ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* question */,
             ::fhir::QuestionnaireItemOperator_pskel& /* operator */,
             ::fhir::boolean_pskel& /* answerBoolean */,
             ::fhir::decimal_pskel& /* answerDecimal */,
             ::fhir::integer_pskel& /* answerInteger */,
             ::fhir::date_pskel& /* answerDate */,
             ::fhir::dateTime_pskel& /* answerDateTime */,
             ::fhir::time_pskel& /* answerTime */,
             ::fhir::string_pskel& /* answerString */,
             ::fhir::Coding_pskel& /* answerCoding */,
             ::fhir::Quantity_pskel& /* answerQuantity */,
             ::fhir::Reference_pskel& /* answerReference */);

    // Individual element parsers.
    //
    void
    question_parser (::fhir::string_pskel&);

    void
    operator__parser (::fhir::QuestionnaireItemOperator_pskel&);

    void
    answerBoolean_parser (::fhir::boolean_pskel&);

    void
    answerDecimal_parser (::fhir::decimal_pskel&);

    void
    answerInteger_parser (::fhir::integer_pskel&);

    void
    answerDate_parser (::fhir::date_pskel&);

    void
    answerDateTime_parser (::fhir::dateTime_pskel&);

    void
    answerTime_parser (::fhir::time_pskel&);

    void
    answerString_parser (::fhir::string_pskel&);

    void
    answerCoding_parser (::fhir::Coding_pskel&);

    void
    answerQuantity_parser (::fhir::Quantity_pskel&);

    void
    answerReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Questionnaire_EnableWhen_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Questionnaire_EnableWhen_pskel* Questionnaire_EnableWhen_impl_;
    Questionnaire_EnableWhen_pskel (Questionnaire_EnableWhen_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* question_parser_;
    ::fhir::QuestionnaireItemOperator_pskel* operator__parser_;
    ::fhir::boolean_pskel* answerBoolean_parser_;
    ::fhir::decimal_pskel* answerDecimal_parser_;
    ::fhir::integer_pskel* answerInteger_parser_;
    ::fhir::date_pskel* answerDate_parser_;
    ::fhir::dateTime_pskel* answerDateTime_parser_;
    ::fhir::time_pskel* answerTime_parser_;
    ::fhir::string_pskel* answerString_parser_;
    ::fhir::Coding_pskel* answerCoding_parser_;
    ::fhir::Quantity_pskel* answerQuantity_parser_;
    ::fhir::Reference_pskel* answerReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Questionnaire_EnableWhen_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Questionnaire_AnswerOption_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    valueInteger ();

    virtual void
    valueDate ();

    virtual void
    valueTime ();

    virtual void
    valueString ();

    virtual void
    valueCoding ();

    virtual void
    valueReference ();

    virtual void
    initialSelected ();

    virtual void
    post_Questionnaire_AnswerOption ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::boolean_pskel& /* initialSelected */);

    // Individual element parsers.
    //
    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    initialSelected_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Questionnaire_AnswerOption_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Questionnaire_AnswerOption_pskel* Questionnaire_AnswerOption_impl_;
    Questionnaire_AnswerOption_pskel (Questionnaire_AnswerOption_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::boolean_pskel* initialSelected_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Questionnaire_AnswerOption_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Questionnaire_Initial_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    valueBoolean ();

    virtual void
    valueDecimal ();

    virtual void
    valueInteger ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueTime ();

    virtual void
    valueString ();

    virtual void
    valueUri ();

    virtual void
    valueAttachment ();

    virtual void
    valueCoding ();

    virtual void
    valueQuantity ();

    virtual void
    valueReference ();

    virtual void
    post_Questionnaire_Initial ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Reference_pskel& /* valueReference */);

    // Individual element parsers.
    //
    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Questionnaire_Initial_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Questionnaire_Initial_pskel* Questionnaire_Initial_impl_;
    Questionnaire_Initial_pskel (Questionnaire_Initial_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Questionnaire_Initial_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class QuestionnaireItemType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_QuestionnaireItemType_list ();

    // Constructor.
    //
    QuestionnaireItemType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuestionnaireItemType_list_pskel* QuestionnaireItemType_list_impl_;
    QuestionnaireItemType_list_pskel (QuestionnaireItemType_list_pskel*, void*);

    protected:
    static const char* const _xsde_QuestionnaireItemType_list_pskel_enums_[16UL];
  };

  class QuestionnaireItemType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_QuestionnaireItemType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::QuestionnaireItemType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::QuestionnaireItemType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    QuestionnaireItemType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuestionnaireItemType_pskel* QuestionnaireItemType_impl_;
    QuestionnaireItemType_pskel (QuestionnaireItemType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::QuestionnaireItemType_list_pskel* value_parser_;
  };

  class EnableWhenBehavior_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EnableWhenBehavior_list ();

    // Constructor.
    //
    EnableWhenBehavior_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EnableWhenBehavior_list_pskel* EnableWhenBehavior_list_impl_;
    EnableWhenBehavior_list_pskel (EnableWhenBehavior_list_pskel*, void*);

    protected:
    static const char* const _xsde_EnableWhenBehavior_list_pskel_enums_[2UL];
  };

  class EnableWhenBehavior_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EnableWhenBehavior ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EnableWhenBehavior_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EnableWhenBehavior_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EnableWhenBehavior_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EnableWhenBehavior_pskel* EnableWhenBehavior_impl_;
    EnableWhenBehavior_pskel (EnableWhenBehavior_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EnableWhenBehavior_list_pskel* value_parser_;
  };

  class QuestionnaireItemOperator_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_QuestionnaireItemOperator_list ();

    // Constructor.
    //
    QuestionnaireItemOperator_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuestionnaireItemOperator_list_pskel* QuestionnaireItemOperator_list_impl_;
    QuestionnaireItemOperator_list_pskel (QuestionnaireItemOperator_list_pskel*, void*);

    protected:
    static const char* const _xsde_QuestionnaireItemOperator_list_pskel_enums_[7UL];
  };

  class QuestionnaireItemOperator_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_QuestionnaireItemOperator ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::QuestionnaireItemOperator_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::QuestionnaireItemOperator_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    QuestionnaireItemOperator_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuestionnaireItemOperator_pskel* QuestionnaireItemOperator_impl_;
    QuestionnaireItemOperator_pskel (QuestionnaireItemOperator_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::QuestionnaireItemOperator_list_pskel* value_parser_;
  };

  class QuestionnaireResponse_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    basedOn ();

    virtual void
    partOf ();

    virtual void
    questionnaire ();

    virtual void
    status ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    authored ();

    virtual void
    author ();

    virtual void
    source ();

    virtual void
    item ();

    virtual void
    post_QuestionnaireResponse ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::canonical_pskel& /* questionnaire */,
             ::fhir::QuestionnaireResponseStatus_pskel& /* status */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* authored */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::Reference_pskel& /* source */,
             ::fhir::QuestionnaireResponse_Item_pskel& /* item */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    questionnaire_parser (::fhir::canonical_pskel&);

    void
    status_parser (::fhir::QuestionnaireResponseStatus_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    authored_parser (::fhir::dateTime_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    void
    item_parser (::fhir::QuestionnaireResponse_Item_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    QuestionnaireResponse_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuestionnaireResponse_pskel* QuestionnaireResponse_impl_;
    QuestionnaireResponse_pskel (QuestionnaireResponse_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::canonical_pskel* questionnaire_parser_;
    ::fhir::QuestionnaireResponseStatus_pskel* status_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* authored_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::Reference_pskel* source_parser_;
    ::fhir::QuestionnaireResponse_Item_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::QuestionnaireResponse_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class QuestionnaireResponse_Item_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    linkId ();

    virtual void
    definition ();

    virtual void
    text ();

    virtual void
    answer ();

    virtual void
    item ();

    virtual void
    post_QuestionnaireResponse_Item ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* linkId */,
             ::fhir::uri_pskel& /* definition */,
             ::fhir::string_pskel& /* text */,
             ::fhir::QuestionnaireResponse_Answer_pskel& /* answer */,
             ::fhir::QuestionnaireResponse_Item_pskel& /* item */);

    // Individual element parsers.
    //
    void
    linkId_parser (::fhir::string_pskel&);

    void
    definition_parser (::fhir::uri_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    answer_parser (::fhir::QuestionnaireResponse_Answer_pskel&);

    void
    item_parser (::fhir::QuestionnaireResponse_Item_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    QuestionnaireResponse_Item_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuestionnaireResponse_Item_pskel* QuestionnaireResponse_Item_impl_;
    QuestionnaireResponse_Item_pskel (QuestionnaireResponse_Item_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* linkId_parser_;
    ::fhir::uri_pskel* definition_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::QuestionnaireResponse_Answer_pskel* answer_parser_;
    ::fhir::QuestionnaireResponse_Item_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::QuestionnaireResponse_Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class QuestionnaireResponse_Answer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    valueBoolean ();

    virtual void
    valueDecimal ();

    virtual void
    valueInteger ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueTime ();

    virtual void
    valueString ();

    virtual void
    valueUri ();

    virtual void
    valueAttachment ();

    virtual void
    valueCoding ();

    virtual void
    valueQuantity ();

    virtual void
    valueReference ();

    virtual void
    item ();

    virtual void
    post_QuestionnaireResponse_Answer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::QuestionnaireResponse_Item_pskel& /* item */);

    // Individual element parsers.
    //
    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    item_parser (::fhir::QuestionnaireResponse_Item_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    QuestionnaireResponse_Answer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuestionnaireResponse_Answer_pskel* QuestionnaireResponse_Answer_impl_;
    QuestionnaireResponse_Answer_pskel (QuestionnaireResponse_Answer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::QuestionnaireResponse_Item_pskel* item_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::QuestionnaireResponse_Answer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class QuestionnaireResponseStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_QuestionnaireResponseStatus_list ();

    // Constructor.
    //
    QuestionnaireResponseStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuestionnaireResponseStatus_list_pskel* QuestionnaireResponseStatus_list_impl_;
    QuestionnaireResponseStatus_list_pskel (QuestionnaireResponseStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_QuestionnaireResponseStatus_list_pskel_enums_[5UL];
  };

  class QuestionnaireResponseStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_QuestionnaireResponseStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::QuestionnaireResponseStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::QuestionnaireResponseStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    QuestionnaireResponseStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    QuestionnaireResponseStatus_pskel* QuestionnaireResponseStatus_impl_;
    QuestionnaireResponseStatus_pskel (QuestionnaireResponseStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::QuestionnaireResponseStatus_list_pskel* value_parser_;
  };

  class RelatedPerson_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    active ();

    virtual void
    patient ();

    virtual void
    relationship ();

    virtual void
    name ();

    virtual void
    telecom ();

    virtual void
    gender ();

    virtual void
    birthDate ();

    virtual void
    address ();

    virtual void
    photo ();

    virtual void
    period ();

    virtual void
    communication ();

    virtual void
    post_RelatedPerson ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::CodeableConcept_pskel& /* relationship */,
             ::fhir::HumanName_pskel& /* name */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::AdministrativeGender_pskel& /* gender */,
             ::fhir::date_pskel& /* birthDate */,
             ::fhir::Address_pskel& /* address */,
             ::fhir::Attachment_pskel& /* photo */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::RelatedPerson_Communication_pskel& /* communication */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    relationship_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::HumanName_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    gender_parser (::fhir::AdministrativeGender_pskel&);

    void
    birthDate_parser (::fhir::date_pskel&);

    void
    address_parser (::fhir::Address_pskel&);

    void
    photo_parser (::fhir::Attachment_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    communication_parser (::fhir::RelatedPerson_Communication_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RelatedPerson_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    RelatedPerson_pskel* RelatedPerson_impl_;
    RelatedPerson_pskel (RelatedPerson_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::CodeableConcept_pskel* relationship_parser_;
    ::fhir::HumanName_pskel* name_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::AdministrativeGender_pskel* gender_parser_;
    ::fhir::date_pskel* birthDate_parser_;
    ::fhir::Address_pskel* address_parser_;
    ::fhir::Attachment_pskel* photo_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::RelatedPerson_Communication_pskel* communication_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RelatedPerson_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RelatedPerson_Communication_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    language ();

    virtual void
    preferred ();

    virtual void
    post_RelatedPerson_Communication ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* language */,
             ::fhir::boolean_pskel& /* preferred */);

    // Individual element parsers.
    //
    void
    language_parser (::fhir::CodeableConcept_pskel&);

    void
    preferred_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RelatedPerson_Communication_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    RelatedPerson_Communication_pskel* RelatedPerson_Communication_impl_;
    RelatedPerson_Communication_pskel (RelatedPerson_Communication_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* language_parser_;
    ::fhir::boolean_pskel* preferred_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RelatedPerson_Communication_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RequestGroup_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    basedOn ();

    virtual void
    replaces ();

    virtual void
    groupIdentifier ();

    virtual void
    status ();

    virtual void
    intent ();

    virtual void
    priority ();

    virtual void
    code ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    authoredOn ();

    virtual void
    author ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    note ();

    virtual void
    action ();

    virtual void
    post_RequestGroup ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* replaces */,
             ::fhir::Identifier_pskel& /* groupIdentifier */,
             ::fhir::RequestStatus_pskel& /* status */,
             ::fhir::RequestIntent_pskel& /* intent */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* authoredOn */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::RequestGroup_Action_pskel& /* action */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    replaces_parser (::fhir::Reference_pskel&);

    void
    groupIdentifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::RequestStatus_pskel&);

    void
    intent_parser (::fhir::RequestIntent_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    authoredOn_parser (::fhir::dateTime_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    action_parser (::fhir::RequestGroup_Action_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestGroup_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestGroup_pskel* RequestGroup_impl_;
    RequestGroup_pskel (RequestGroup_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* replaces_parser_;
    ::fhir::Identifier_pskel* groupIdentifier_parser_;
    ::fhir::RequestStatus_pskel* status_parser_;
    ::fhir::RequestIntent_pskel* intent_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* authoredOn_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::RequestGroup_Action_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RequestGroup_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RequestGroup_Action_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    prefix ();

    virtual void
    title ();

    virtual void
    description ();

    virtual void
    textEquivalent ();

    virtual void
    priority ();

    virtual void
    code ();

    virtual void
    documentation ();

    virtual void
    condition ();

    virtual void
    relatedAction ();

    virtual void
    timingDateTime ();

    virtual void
    timingAge ();

    virtual void
    timingPeriod ();

    virtual void
    timingDuration ();

    virtual void
    timingRange ();

    virtual void
    timingTiming ();

    virtual void
    participant ();

    virtual void
    type ();

    virtual void
    groupingBehavior ();

    virtual void
    selectionBehavior ();

    virtual void
    requiredBehavior ();

    virtual void
    precheckBehavior ();

    virtual void
    cardinalityBehavior ();

    virtual void
    resource ();

    virtual void
    action ();

    virtual void
    post_RequestGroup_Action ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* prefix */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* description */,
             ::fhir::string_pskel& /* textEquivalent */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::RelatedArtifact_pskel& /* documentation */,
             ::fhir::RequestGroup_Condition_pskel& /* condition */,
             ::fhir::RequestGroup_RelatedAction_pskel& /* relatedAction */,
             ::fhir::dateTime_pskel& /* timingDateTime */,
             ::fhir::Age_pskel& /* timingAge */,
             ::fhir::Period_pskel& /* timingPeriod */,
             ::fhir::Duration_pskel& /* timingDuration */,
             ::fhir::Range_pskel& /* timingRange */,
             ::fhir::Timing_pskel& /* timingTiming */,
             ::fhir::Reference_pskel& /* participant */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::ActionGroupingBehavior_pskel& /* groupingBehavior */,
             ::fhir::ActionSelectionBehavior_pskel& /* selectionBehavior */,
             ::fhir::ActionRequiredBehavior_pskel& /* requiredBehavior */,
             ::fhir::ActionPrecheckBehavior_pskel& /* precheckBehavior */,
             ::fhir::ActionCardinalityBehavior_pskel& /* cardinalityBehavior */,
             ::fhir::Reference_pskel& /* resource */,
             ::fhir::RequestGroup_Action_pskel& /* action */);

    // Individual element parsers.
    //
    void
    prefix_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    textEquivalent_parser (::fhir::string_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    documentation_parser (::fhir::RelatedArtifact_pskel&);

    void
    condition_parser (::fhir::RequestGroup_Condition_pskel&);

    void
    relatedAction_parser (::fhir::RequestGroup_RelatedAction_pskel&);

    void
    timingDateTime_parser (::fhir::dateTime_pskel&);

    void
    timingAge_parser (::fhir::Age_pskel&);

    void
    timingPeriod_parser (::fhir::Period_pskel&);

    void
    timingDuration_parser (::fhir::Duration_pskel&);

    void
    timingRange_parser (::fhir::Range_pskel&);

    void
    timingTiming_parser (::fhir::Timing_pskel&);

    void
    participant_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    groupingBehavior_parser (::fhir::ActionGroupingBehavior_pskel&);

    void
    selectionBehavior_parser (::fhir::ActionSelectionBehavior_pskel&);

    void
    requiredBehavior_parser (::fhir::ActionRequiredBehavior_pskel&);

    void
    precheckBehavior_parser (::fhir::ActionPrecheckBehavior_pskel&);

    void
    cardinalityBehavior_parser (::fhir::ActionCardinalityBehavior_pskel&);

    void
    resource_parser (::fhir::Reference_pskel&);

    void
    action_parser (::fhir::RequestGroup_Action_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestGroup_Action_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestGroup_Action_pskel* RequestGroup_Action_impl_;
    RequestGroup_Action_pskel (RequestGroup_Action_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* prefix_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::string_pskel* textEquivalent_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::RelatedArtifact_pskel* documentation_parser_;
    ::fhir::RequestGroup_Condition_pskel* condition_parser_;
    ::fhir::RequestGroup_RelatedAction_pskel* relatedAction_parser_;
    ::fhir::dateTime_pskel* timingDateTime_parser_;
    ::fhir::Age_pskel* timingAge_parser_;
    ::fhir::Period_pskel* timingPeriod_parser_;
    ::fhir::Duration_pskel* timingDuration_parser_;
    ::fhir::Range_pskel* timingRange_parser_;
    ::fhir::Timing_pskel* timingTiming_parser_;
    ::fhir::Reference_pskel* participant_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::ActionGroupingBehavior_pskel* groupingBehavior_parser_;
    ::fhir::ActionSelectionBehavior_pskel* selectionBehavior_parser_;
    ::fhir::ActionRequiredBehavior_pskel* requiredBehavior_parser_;
    ::fhir::ActionPrecheckBehavior_pskel* precheckBehavior_parser_;
    ::fhir::ActionCardinalityBehavior_pskel* cardinalityBehavior_parser_;
    ::fhir::Reference_pskel* resource_parser_;
    ::fhir::RequestGroup_Action_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RequestGroup_Action_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RequestGroup_Condition_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    kind ();

    virtual void
    expression ();

    virtual void
    post_RequestGroup_Condition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ActionConditionKind_pskel& /* kind */,
             ::fhir::Expression_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    kind_parser (::fhir::ActionConditionKind_pskel&);

    void
    expression_parser (::fhir::Expression_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestGroup_Condition_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestGroup_Condition_pskel* RequestGroup_Condition_impl_;
    RequestGroup_Condition_pskel (RequestGroup_Condition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ActionConditionKind_pskel* kind_parser_;
    ::fhir::Expression_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RequestGroup_Condition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RequestGroup_RelatedAction_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    actionId ();

    virtual void
    relationship ();

    virtual void
    offsetDuration ();

    virtual void
    offsetRange ();

    virtual void
    post_RequestGroup_RelatedAction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* actionId */,
             ::fhir::ActionRelationshipType_pskel& /* relationship */,
             ::fhir::Duration_pskel& /* offsetDuration */,
             ::fhir::Range_pskel& /* offsetRange */);

    // Individual element parsers.
    //
    void
    actionId_parser (::fhir::id_pskel&);

    void
    relationship_parser (::fhir::ActionRelationshipType_pskel&);

    void
    offsetDuration_parser (::fhir::Duration_pskel&);

    void
    offsetRange_parser (::fhir::Range_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RequestGroup_RelatedAction_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    RequestGroup_RelatedAction_pskel* RequestGroup_RelatedAction_impl_;
    RequestGroup_RelatedAction_pskel (RequestGroup_RelatedAction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* actionId_parser_;
    ::fhir::ActionRelationshipType_pskel* relationship_parser_;
    ::fhir::Duration_pskel* offsetDuration_parser_;
    ::fhir::Range_pskel* offsetRange_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RequestGroup_RelatedAction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ResearchDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    shortTitle ();

    virtual void
    subtitle ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    comment ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    usage ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    library ();

    virtual void
    population ();

    virtual void
    exposure ();

    virtual void
    exposureAlternative ();

    virtual void
    outcome ();

    virtual void
    post_ResearchDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* shortTitle */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::string_pskel& /* usage */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::canonical_pskel& /* library */,
             ::fhir::Reference_pskel& /* population */,
             ::fhir::Reference_pskel& /* exposure */,
             ::fhir::Reference_pskel& /* exposureAlternative */,
             ::fhir::Reference_pskel& /* outcome */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    shortTitle_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    usage_parser (::fhir::string_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    library_parser (::fhir::canonical_pskel&);

    void
    population_parser (::fhir::Reference_pskel&);

    void
    exposure_parser (::fhir::Reference_pskel&);

    void
    exposureAlternative_parser (::fhir::Reference_pskel&);

    void
    outcome_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResearchDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchDefinition_pskel* ResearchDefinition_impl_;
    ResearchDefinition_pskel (ResearchDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* shortTitle_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::string_pskel* comment_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::string_pskel* usage_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::canonical_pskel* library_parser_;
    ::fhir::Reference_pskel* population_parser_;
    ::fhir::Reference_pskel* exposure_parser_;
    ::fhir::Reference_pskel* exposureAlternative_parser_;
    ::fhir::Reference_pskel* outcome_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ResearchDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ResearchElementDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    shortTitle ();

    virtual void
    subtitle ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    subjectCodeableConcept ();

    virtual void
    subjectReference ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    comment ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    usage ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    library ();

    virtual void
    type ();

    virtual void
    variableType ();

    virtual void
    characteristic ();

    virtual void
    post_ResearchElementDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* shortTitle */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::CodeableConcept_pskel& /* subjectCodeableConcept */,
             ::fhir::Reference_pskel& /* subjectReference */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::string_pskel& /* usage */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::canonical_pskel& /* library */,
             ::fhir::ResearchElementType_pskel& /* type */,
             ::fhir::VariableType_pskel& /* variableType */,
             ::fhir::ResearchElementDefinition_Characteristic_pskel& /* characteristic */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    shortTitle_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    subjectCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    subjectReference_parser (::fhir::Reference_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    usage_parser (::fhir::string_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    library_parser (::fhir::canonical_pskel&);

    void
    type_parser (::fhir::ResearchElementType_pskel&);

    void
    variableType_parser (::fhir::VariableType_pskel&);

    void
    characteristic_parser (::fhir::ResearchElementDefinition_Characteristic_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResearchElementDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchElementDefinition_pskel* ResearchElementDefinition_impl_;
    ResearchElementDefinition_pskel (ResearchElementDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* shortTitle_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::CodeableConcept_pskel* subjectCodeableConcept_parser_;
    ::fhir::Reference_pskel* subjectReference_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::string_pskel* comment_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::string_pskel* usage_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::canonical_pskel* library_parser_;
    ::fhir::ResearchElementType_pskel* type_parser_;
    ::fhir::VariableType_pskel* variableType_parser_;
    ::fhir::ResearchElementDefinition_Characteristic_pskel* characteristic_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ResearchElementDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ResearchElementDefinition_Characteristic_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    definitionCodeableConcept ();

    virtual void
    definitionCanonical ();

    virtual void
    definitionExpression ();

    virtual void
    definitionDataRequirement ();

    virtual void
    usageContext ();

    virtual void
    exclude ();

    virtual void
    unitOfMeasure ();

    virtual void
    studyEffectiveDescription ();

    virtual void
    studyEffectiveDateTime ();

    virtual void
    studyEffectivePeriod ();

    virtual void
    studyEffectiveDuration ();

    virtual void
    studyEffectiveTiming ();

    virtual void
    studyEffectiveTimeFromStart ();

    virtual void
    studyEffectiveGroupMeasure ();

    virtual void
    participantEffectiveDescription ();

    virtual void
    participantEffectiveDateTime ();

    virtual void
    participantEffectivePeriod ();

    virtual void
    participantEffectiveDuration ();

    virtual void
    participantEffectiveTiming ();

    virtual void
    participantEffectiveTimeFromStart ();

    virtual void
    participantEffectiveGroupMeasure ();

    virtual void
    post_ResearchElementDefinition_Characteristic ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* definitionCodeableConcept */,
             ::fhir::canonical_pskel& /* definitionCanonical */,
             ::fhir::Expression_pskel& /* definitionExpression */,
             ::fhir::DataRequirement_pskel& /* definitionDataRequirement */,
             ::fhir::UsageContext_pskel& /* usageContext */,
             ::fhir::boolean_pskel& /* exclude */,
             ::fhir::CodeableConcept_pskel& /* unitOfMeasure */,
             ::fhir::string_pskel& /* studyEffectiveDescription */,
             ::fhir::dateTime_pskel& /* studyEffectiveDateTime */,
             ::fhir::Period_pskel& /* studyEffectivePeriod */,
             ::fhir::Duration_pskel& /* studyEffectiveDuration */,
             ::fhir::Timing_pskel& /* studyEffectiveTiming */,
             ::fhir::Duration_pskel& /* studyEffectiveTimeFromStart */,
             ::fhir::GroupMeasure_pskel& /* studyEffectiveGroupMeasure */,
             ::fhir::string_pskel& /* participantEffectiveDescription */,
             ::fhir::dateTime_pskel& /* participantEffectiveDateTime */,
             ::fhir::Period_pskel& /* participantEffectivePeriod */,
             ::fhir::Duration_pskel& /* participantEffectiveDuration */,
             ::fhir::Timing_pskel& /* participantEffectiveTiming */,
             ::fhir::Duration_pskel& /* participantEffectiveTimeFromStart */,
             ::fhir::GroupMeasure_pskel& /* participantEffectiveGroupMeasure */);

    // Individual element parsers.
    //
    void
    definitionCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    definitionCanonical_parser (::fhir::canonical_pskel&);

    void
    definitionExpression_parser (::fhir::Expression_pskel&);

    void
    definitionDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    usageContext_parser (::fhir::UsageContext_pskel&);

    void
    exclude_parser (::fhir::boolean_pskel&);

    void
    unitOfMeasure_parser (::fhir::CodeableConcept_pskel&);

    void
    studyEffectiveDescription_parser (::fhir::string_pskel&);

    void
    studyEffectiveDateTime_parser (::fhir::dateTime_pskel&);

    void
    studyEffectivePeriod_parser (::fhir::Period_pskel&);

    void
    studyEffectiveDuration_parser (::fhir::Duration_pskel&);

    void
    studyEffectiveTiming_parser (::fhir::Timing_pskel&);

    void
    studyEffectiveTimeFromStart_parser (::fhir::Duration_pskel&);

    void
    studyEffectiveGroupMeasure_parser (::fhir::GroupMeasure_pskel&);

    void
    participantEffectiveDescription_parser (::fhir::string_pskel&);

    void
    participantEffectiveDateTime_parser (::fhir::dateTime_pskel&);

    void
    participantEffectivePeriod_parser (::fhir::Period_pskel&);

    void
    participantEffectiveDuration_parser (::fhir::Duration_pskel&);

    void
    participantEffectiveTiming_parser (::fhir::Timing_pskel&);

    void
    participantEffectiveTimeFromStart_parser (::fhir::Duration_pskel&);

    void
    participantEffectiveGroupMeasure_parser (::fhir::GroupMeasure_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResearchElementDefinition_Characteristic_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchElementDefinition_Characteristic_pskel* ResearchElementDefinition_Characteristic_impl_;
    ResearchElementDefinition_Characteristic_pskel (ResearchElementDefinition_Characteristic_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* definitionCodeableConcept_parser_;
    ::fhir::canonical_pskel* definitionCanonical_parser_;
    ::fhir::Expression_pskel* definitionExpression_parser_;
    ::fhir::DataRequirement_pskel* definitionDataRequirement_parser_;
    ::fhir::UsageContext_pskel* usageContext_parser_;
    ::fhir::boolean_pskel* exclude_parser_;
    ::fhir::CodeableConcept_pskel* unitOfMeasure_parser_;
    ::fhir::string_pskel* studyEffectiveDescription_parser_;
    ::fhir::dateTime_pskel* studyEffectiveDateTime_parser_;
    ::fhir::Period_pskel* studyEffectivePeriod_parser_;
    ::fhir::Duration_pskel* studyEffectiveDuration_parser_;
    ::fhir::Timing_pskel* studyEffectiveTiming_parser_;
    ::fhir::Duration_pskel* studyEffectiveTimeFromStart_parser_;
    ::fhir::GroupMeasure_pskel* studyEffectiveGroupMeasure_parser_;
    ::fhir::string_pskel* participantEffectiveDescription_parser_;
    ::fhir::dateTime_pskel* participantEffectiveDateTime_parser_;
    ::fhir::Period_pskel* participantEffectivePeriod_parser_;
    ::fhir::Duration_pskel* participantEffectiveDuration_parser_;
    ::fhir::Timing_pskel* participantEffectiveTiming_parser_;
    ::fhir::Duration_pskel* participantEffectiveTimeFromStart_parser_;
    ::fhir::GroupMeasure_pskel* participantEffectiveGroupMeasure_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ResearchElementDefinition_Characteristic_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ResearchElementType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ResearchElementType_list ();

    // Constructor.
    //
    ResearchElementType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchElementType_list_pskel* ResearchElementType_list_impl_;
    ResearchElementType_list_pskel (ResearchElementType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ResearchElementType_list_pskel_enums_[3UL];
  };

  class ResearchElementType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ResearchElementType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ResearchElementType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ResearchElementType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResearchElementType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchElementType_pskel* ResearchElementType_impl_;
    ResearchElementType_pskel (ResearchElementType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ResearchElementType_list_pskel* value_parser_;
  };

  class VariableType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_VariableType_list ();

    // Constructor.
    //
    VariableType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    VariableType_list_pskel* VariableType_list_impl_;
    VariableType_list_pskel (VariableType_list_pskel*, void*);

    protected:
    static const char* const _xsde_VariableType_list_pskel_enums_[3UL];
  };

  class VariableType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_VariableType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::VariableType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::VariableType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VariableType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    VariableType_pskel* VariableType_impl_;
    VariableType_pskel (VariableType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::VariableType_list_pskel* value_parser_;
  };

  class ResearchStudy_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    title ();

    virtual void
    protocol ();

    virtual void
    partOf ();

    virtual void
    status ();

    virtual void
    primaryPurposeType ();

    virtual void
    phase ();

    virtual void
    category ();

    virtual void
    focus ();

    virtual void
    condition ();

    virtual void
    contact ();

    virtual void
    relatedArtifact ();

    virtual void
    keyword ();

    virtual void
    location ();

    virtual void
    description ();

    virtual void
    enrollment ();

    virtual void
    period ();

    virtual void
    sponsor ();

    virtual void
    principalInvestigator ();

    virtual void
    site ();

    virtual void
    reasonStopped ();

    virtual void
    note ();

    virtual void
    arm ();

    virtual void
    objective ();

    virtual void
    post_ResearchStudy ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* title */,
             ::fhir::Reference_pskel& /* protocol */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::ResearchStudyStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* primaryPurposeType */,
             ::fhir::CodeableConcept_pskel& /* phase */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* focus */,
             ::fhir::CodeableConcept_pskel& /* condition */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::CodeableConcept_pskel& /* keyword */,
             ::fhir::CodeableConcept_pskel& /* location */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::Reference_pskel& /* enrollment */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* sponsor */,
             ::fhir::Reference_pskel& /* principalInvestigator */,
             ::fhir::Reference_pskel& /* site */,
             ::fhir::CodeableConcept_pskel& /* reasonStopped */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::ResearchStudy_Arm_pskel& /* arm */,
             ::fhir::ResearchStudy_Objective_pskel& /* objective */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    protocol_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::ResearchStudyStatus_pskel&);

    void
    primaryPurposeType_parser (::fhir::CodeableConcept_pskel&);

    void
    phase_parser (::fhir::CodeableConcept_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    focus_parser (::fhir::CodeableConcept_pskel&);

    void
    condition_parser (::fhir::CodeableConcept_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    keyword_parser (::fhir::CodeableConcept_pskel&);

    void
    location_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    enrollment_parser (::fhir::Reference_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    sponsor_parser (::fhir::Reference_pskel&);

    void
    principalInvestigator_parser (::fhir::Reference_pskel&);

    void
    site_parser (::fhir::Reference_pskel&);

    void
    reasonStopped_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    arm_parser (::fhir::ResearchStudy_Arm_pskel&);

    void
    objective_parser (::fhir::ResearchStudy_Objective_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResearchStudy_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchStudy_pskel* ResearchStudy_impl_;
    ResearchStudy_pskel (ResearchStudy_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::Reference_pskel* protocol_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::ResearchStudyStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* primaryPurposeType_parser_;
    ::fhir::CodeableConcept_pskel* phase_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* focus_parser_;
    ::fhir::CodeableConcept_pskel* condition_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::CodeableConcept_pskel* keyword_parser_;
    ::fhir::CodeableConcept_pskel* location_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::Reference_pskel* enrollment_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* sponsor_parser_;
    ::fhir::Reference_pskel* principalInvestigator_parser_;
    ::fhir::Reference_pskel* site_parser_;
    ::fhir::CodeableConcept_pskel* reasonStopped_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::ResearchStudy_Arm_pskel* arm_parser_;
    ::fhir::ResearchStudy_Objective_pskel* objective_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ResearchStudy_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ResearchStudy_Arm_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    type ();

    virtual void
    description ();

    virtual void
    post_ResearchStudy_Arm ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* description */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResearchStudy_Arm_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchStudy_Arm_pskel* ResearchStudy_Arm_impl_;
    ResearchStudy_Arm_pskel (ResearchStudy_Arm_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ResearchStudy_Arm_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ResearchStudy_Objective_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    type ();

    virtual void
    post_ResearchStudy_Objective ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::CodeableConcept_pskel& /* type */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResearchStudy_Objective_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchStudy_Objective_pskel* ResearchStudy_Objective_impl_;
    ResearchStudy_Objective_pskel (ResearchStudy_Objective_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ResearchStudy_Objective_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ResearchStudyStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ResearchStudyStatus_list ();

    // Constructor.
    //
    ResearchStudyStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchStudyStatus_list_pskel* ResearchStudyStatus_list_impl_;
    ResearchStudyStatus_list_pskel (ResearchStudyStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ResearchStudyStatus_list_pskel_enums_[11UL];
  };

  class ResearchStudyStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ResearchStudyStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ResearchStudyStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ResearchStudyStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResearchStudyStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchStudyStatus_pskel* ResearchStudyStatus_impl_;
    ResearchStudyStatus_pskel (ResearchStudyStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ResearchStudyStatus_list_pskel* value_parser_;
  };

  class ResearchSubject_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    period ();

    virtual void
    study ();

    virtual void
    individual ();

    virtual void
    assignedArm ();

    virtual void
    actualArm ();

    virtual void
    consent ();

    virtual void
    post_ResearchSubject ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::ResearchSubjectStatus_pskel& /* status */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* study */,
             ::fhir::Reference_pskel& /* individual */,
             ::fhir::string_pskel& /* assignedArm */,
             ::fhir::string_pskel& /* actualArm */,
             ::fhir::Reference_pskel& /* consent */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::ResearchSubjectStatus_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    study_parser (::fhir::Reference_pskel&);

    void
    individual_parser (::fhir::Reference_pskel&);

    void
    assignedArm_parser (::fhir::string_pskel&);

    void
    actualArm_parser (::fhir::string_pskel&);

    void
    consent_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResearchSubject_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchSubject_pskel* ResearchSubject_impl_;
    ResearchSubject_pskel (ResearchSubject_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::ResearchSubjectStatus_pskel* status_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* study_parser_;
    ::fhir::Reference_pskel* individual_parser_;
    ::fhir::string_pskel* assignedArm_parser_;
    ::fhir::string_pskel* actualArm_parser_;
    ::fhir::Reference_pskel* consent_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ResearchSubject_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ResearchSubjectStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ResearchSubjectStatus_list ();

    // Constructor.
    //
    ResearchSubjectStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchSubjectStatus_list_pskel* ResearchSubjectStatus_list_impl_;
    ResearchSubjectStatus_list_pskel (ResearchSubjectStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ResearchSubjectStatus_list_pskel_enums_[13UL];
  };

  class ResearchSubjectStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ResearchSubjectStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ResearchSubjectStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ResearchSubjectStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResearchSubjectStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResearchSubjectStatus_pskel* ResearchSubjectStatus_impl_;
    ResearchSubjectStatus_pskel (ResearchSubjectStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ResearchSubjectStatus_list_pskel* value_parser_;
  };

  class RiskAssessment_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    basedOn ();

    virtual void
    parent ();

    virtual void
    status ();

    virtual void
    method ();

    virtual void
    code ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrencePeriod ();

    virtual void
    condition ();

    virtual void
    performer ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    basis ();

    virtual void
    prediction ();

    virtual void
    mitigation ();

    virtual void
    note ();

    virtual void
    post_RiskAssessment ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* parent */,
             ::fhir::ObservationStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::Period_pskel& /* occurrencePeriod */,
             ::fhir::Reference_pskel& /* condition */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Reference_pskel& /* basis */,
             ::fhir::RiskAssessment_Prediction_pskel& /* prediction */,
             ::fhir::string_pskel& /* mitigation */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    parent_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::ObservationStatus_pskel&);

    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrencePeriod_parser (::fhir::Period_pskel&);

    void
    condition_parser (::fhir::Reference_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    basis_parser (::fhir::Reference_pskel&);

    void
    prediction_parser (::fhir::RiskAssessment_Prediction_pskel&);

    void
    mitigation_parser (::fhir::string_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RiskAssessment_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    RiskAssessment_pskel* RiskAssessment_impl_;
    RiskAssessment_pskel (RiskAssessment_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* parent_parser_;
    ::fhir::ObservationStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::Period_pskel* occurrencePeriod_parser_;
    ::fhir::Reference_pskel* condition_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Reference_pskel* basis_parser_;
    ::fhir::RiskAssessment_Prediction_pskel* prediction_parser_;
    ::fhir::string_pskel* mitigation_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RiskAssessment_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RiskAssessment_Prediction_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    outcome ();

    virtual void
    probabilityDecimal ();

    virtual void
    probabilityRange ();

    virtual void
    qualitativeRisk ();

    virtual void
    relativeRisk ();

    virtual void
    whenPeriod ();

    virtual void
    whenRange ();

    virtual void
    rationale ();

    virtual void
    post_RiskAssessment_Prediction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* outcome */,
             ::fhir::decimal_pskel& /* probabilityDecimal */,
             ::fhir::Range_pskel& /* probabilityRange */,
             ::fhir::CodeableConcept_pskel& /* qualitativeRisk */,
             ::fhir::decimal_pskel& /* relativeRisk */,
             ::fhir::Period_pskel& /* whenPeriod */,
             ::fhir::Range_pskel& /* whenRange */,
             ::fhir::string_pskel& /* rationale */);

    // Individual element parsers.
    //
    void
    outcome_parser (::fhir::CodeableConcept_pskel&);

    void
    probabilityDecimal_parser (::fhir::decimal_pskel&);

    void
    probabilityRange_parser (::fhir::Range_pskel&);

    void
    qualitativeRisk_parser (::fhir::CodeableConcept_pskel&);

    void
    relativeRisk_parser (::fhir::decimal_pskel&);

    void
    whenPeriod_parser (::fhir::Period_pskel&);

    void
    whenRange_parser (::fhir::Range_pskel&);

    void
    rationale_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RiskAssessment_Prediction_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    RiskAssessment_Prediction_pskel* RiskAssessment_Prediction_impl_;
    RiskAssessment_Prediction_pskel (RiskAssessment_Prediction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* outcome_parser_;
    ::fhir::decimal_pskel* probabilityDecimal_parser_;
    ::fhir::Range_pskel* probabilityRange_parser_;
    ::fhir::CodeableConcept_pskel* qualitativeRisk_parser_;
    ::fhir::decimal_pskel* relativeRisk_parser_;
    ::fhir::Period_pskel* whenPeriod_parser_;
    ::fhir::Range_pskel* whenRange_parser_;
    ::fhir::string_pskel* rationale_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RiskAssessment_Prediction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RiskEvidenceSynthesis_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    note ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    copyright ();

    virtual void
    approvalDate ();

    virtual void
    lastReviewDate ();

    virtual void
    effectivePeriod ();

    virtual void
    topic ();

    virtual void
    author ();

    virtual void
    editor ();

    virtual void
    reviewer ();

    virtual void
    endorser ();

    virtual void
    relatedArtifact ();

    virtual void
    synthesisType ();

    virtual void
    studyType ();

    virtual void
    population ();

    virtual void
    exposure ();

    virtual void
    outcome ();

    virtual void
    sampleSize ();

    virtual void
    riskEstimate ();

    virtual void
    certainty ();

    virtual void
    post_RiskEvidenceSynthesis ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::date_pskel& /* approvalDate */,
             ::fhir::date_pskel& /* lastReviewDate */,
             ::fhir::Period_pskel& /* effectivePeriod */,
             ::fhir::CodeableConcept_pskel& /* topic */,
             ::fhir::ContactDetail_pskel& /* author */,
             ::fhir::ContactDetail_pskel& /* editor */,
             ::fhir::ContactDetail_pskel& /* reviewer */,
             ::fhir::ContactDetail_pskel& /* endorser */,
             ::fhir::RelatedArtifact_pskel& /* relatedArtifact */,
             ::fhir::CodeableConcept_pskel& /* synthesisType */,
             ::fhir::CodeableConcept_pskel& /* studyType */,
             ::fhir::Reference_pskel& /* population */,
             ::fhir::Reference_pskel& /* exposure */,
             ::fhir::Reference_pskel& /* outcome */,
             ::fhir::RiskEvidenceSynthesis_SampleSize_pskel& /* sampleSize */,
             ::fhir::RiskEvidenceSynthesis_RiskEstimate_pskel& /* riskEstimate */,
             ::fhir::RiskEvidenceSynthesis_Certainty_pskel& /* certainty */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    approvalDate_parser (::fhir::date_pskel&);

    void
    lastReviewDate_parser (::fhir::date_pskel&);

    void
    effectivePeriod_parser (::fhir::Period_pskel&);

    void
    topic_parser (::fhir::CodeableConcept_pskel&);

    void
    author_parser (::fhir::ContactDetail_pskel&);

    void
    editor_parser (::fhir::ContactDetail_pskel&);

    void
    reviewer_parser (::fhir::ContactDetail_pskel&);

    void
    endorser_parser (::fhir::ContactDetail_pskel&);

    void
    relatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    synthesisType_parser (::fhir::CodeableConcept_pskel&);

    void
    studyType_parser (::fhir::CodeableConcept_pskel&);

    void
    population_parser (::fhir::Reference_pskel&);

    void
    exposure_parser (::fhir::Reference_pskel&);

    void
    outcome_parser (::fhir::Reference_pskel&);

    void
    sampleSize_parser (::fhir::RiskEvidenceSynthesis_SampleSize_pskel&);

    void
    riskEstimate_parser (::fhir::RiskEvidenceSynthesis_RiskEstimate_pskel&);

    void
    certainty_parser (::fhir::RiskEvidenceSynthesis_Certainty_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RiskEvidenceSynthesis_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    RiskEvidenceSynthesis_pskel* RiskEvidenceSynthesis_impl_;
    RiskEvidenceSynthesis_pskel (RiskEvidenceSynthesis_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::date_pskel* approvalDate_parser_;
    ::fhir::date_pskel* lastReviewDate_parser_;
    ::fhir::Period_pskel* effectivePeriod_parser_;
    ::fhir::CodeableConcept_pskel* topic_parser_;
    ::fhir::ContactDetail_pskel* author_parser_;
    ::fhir::ContactDetail_pskel* editor_parser_;
    ::fhir::ContactDetail_pskel* reviewer_parser_;
    ::fhir::ContactDetail_pskel* endorser_parser_;
    ::fhir::RelatedArtifact_pskel* relatedArtifact_parser_;
    ::fhir::CodeableConcept_pskel* synthesisType_parser_;
    ::fhir::CodeableConcept_pskel* studyType_parser_;
    ::fhir::Reference_pskel* population_parser_;
    ::fhir::Reference_pskel* exposure_parser_;
    ::fhir::Reference_pskel* outcome_parser_;
    ::fhir::RiskEvidenceSynthesis_SampleSize_pskel* sampleSize_parser_;
    ::fhir::RiskEvidenceSynthesis_RiskEstimate_pskel* riskEstimate_parser_;
    ::fhir::RiskEvidenceSynthesis_Certainty_pskel* certainty_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RiskEvidenceSynthesis_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RiskEvidenceSynthesis_SampleSize_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    numberOfStudies ();

    virtual void
    numberOfParticipants ();

    virtual void
    post_RiskEvidenceSynthesis_SampleSize ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::integer_pskel& /* numberOfStudies */,
             ::fhir::integer_pskel& /* numberOfParticipants */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    numberOfStudies_parser (::fhir::integer_pskel&);

    void
    numberOfParticipants_parser (::fhir::integer_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RiskEvidenceSynthesis_SampleSize_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    RiskEvidenceSynthesis_SampleSize_pskel* RiskEvidenceSynthesis_SampleSize_impl_;
    RiskEvidenceSynthesis_SampleSize_pskel (RiskEvidenceSynthesis_SampleSize_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::integer_pskel* numberOfStudies_parser_;
    ::fhir::integer_pskel* numberOfParticipants_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RiskEvidenceSynthesis_SampleSize_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RiskEvidenceSynthesis_RiskEstimate_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    type ();

    virtual void
    value ();

    virtual void
    unitOfMeasure ();

    virtual void
    denominatorCount ();

    virtual void
    numeratorCount ();

    virtual void
    precisionEstimate ();

    virtual void
    post_RiskEvidenceSynthesis_RiskEstimate ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::decimal_pskel& /* value */,
             ::fhir::CodeableConcept_pskel& /* unitOfMeasure */,
             ::fhir::integer_pskel& /* denominatorCount */,
             ::fhir::integer_pskel& /* numeratorCount */,
             ::fhir::RiskEvidenceSynthesis_PrecisionEstimate_pskel& /* precisionEstimate */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    value_parser (::fhir::decimal_pskel&);

    void
    unitOfMeasure_parser (::fhir::CodeableConcept_pskel&);

    void
    denominatorCount_parser (::fhir::integer_pskel&);

    void
    numeratorCount_parser (::fhir::integer_pskel&);

    void
    precisionEstimate_parser (::fhir::RiskEvidenceSynthesis_PrecisionEstimate_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RiskEvidenceSynthesis_RiskEstimate_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    RiskEvidenceSynthesis_RiskEstimate_pskel* RiskEvidenceSynthesis_RiskEstimate_impl_;
    RiskEvidenceSynthesis_RiskEstimate_pskel (RiskEvidenceSynthesis_RiskEstimate_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::decimal_pskel* value_parser_;
    ::fhir::CodeableConcept_pskel* unitOfMeasure_parser_;
    ::fhir::integer_pskel* denominatorCount_parser_;
    ::fhir::integer_pskel* numeratorCount_parser_;
    ::fhir::RiskEvidenceSynthesis_PrecisionEstimate_pskel* precisionEstimate_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RiskEvidenceSynthesis_RiskEstimate_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RiskEvidenceSynthesis_PrecisionEstimate_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    level ();

    virtual void
    from ();

    virtual void
    to ();

    virtual void
    post_RiskEvidenceSynthesis_PrecisionEstimate ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::decimal_pskel& /* level */,
             ::fhir::decimal_pskel& /* from */,
             ::fhir::decimal_pskel& /* to */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    level_parser (::fhir::decimal_pskel&);

    void
    from_parser (::fhir::decimal_pskel&);

    void
    to_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RiskEvidenceSynthesis_PrecisionEstimate_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    RiskEvidenceSynthesis_PrecisionEstimate_pskel* RiskEvidenceSynthesis_PrecisionEstimate_impl_;
    RiskEvidenceSynthesis_PrecisionEstimate_pskel (RiskEvidenceSynthesis_PrecisionEstimate_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::decimal_pskel* level_parser_;
    ::fhir::decimal_pskel* from_parser_;
    ::fhir::decimal_pskel* to_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RiskEvidenceSynthesis_PrecisionEstimate_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RiskEvidenceSynthesis_Certainty_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    rating ();

    virtual void
    note ();

    virtual void
    certaintySubcomponent ();

    virtual void
    post_RiskEvidenceSynthesis_Certainty ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* rating */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::RiskEvidenceSynthesis_CertaintySubcomponent_pskel& /* certaintySubcomponent */);

    // Individual element parsers.
    //
    void
    rating_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    certaintySubcomponent_parser (::fhir::RiskEvidenceSynthesis_CertaintySubcomponent_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RiskEvidenceSynthesis_Certainty_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    RiskEvidenceSynthesis_Certainty_pskel* RiskEvidenceSynthesis_Certainty_impl_;
    RiskEvidenceSynthesis_Certainty_pskel (RiskEvidenceSynthesis_Certainty_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* rating_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::RiskEvidenceSynthesis_CertaintySubcomponent_pskel* certaintySubcomponent_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RiskEvidenceSynthesis_Certainty_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class RiskEvidenceSynthesis_CertaintySubcomponent_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    rating ();

    virtual void
    note ();

    virtual void
    post_RiskEvidenceSynthesis_CertaintySubcomponent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* rating */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    rating_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RiskEvidenceSynthesis_CertaintySubcomponent_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    RiskEvidenceSynthesis_CertaintySubcomponent_pskel* RiskEvidenceSynthesis_CertaintySubcomponent_impl_;
    RiskEvidenceSynthesis_CertaintySubcomponent_pskel (RiskEvidenceSynthesis_CertaintySubcomponent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* rating_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::RiskEvidenceSynthesis_CertaintySubcomponent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Schedule_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    active ();

    virtual void
    serviceCategory ();

    virtual void
    serviceType ();

    virtual void
    specialty ();

    virtual void
    actor ();

    virtual void
    planningHorizon ();

    virtual void
    comment ();

    virtual void
    post_Schedule ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::boolean_pskel& /* active */,
             ::fhir::CodeableConcept_pskel& /* serviceCategory */,
             ::fhir::CodeableConcept_pskel& /* serviceType */,
             ::fhir::CodeableConcept_pskel& /* specialty */,
             ::fhir::Reference_pskel& /* actor */,
             ::fhir::Period_pskel& /* planningHorizon */,
             ::fhir::string_pskel& /* comment */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    active_parser (::fhir::boolean_pskel&);

    void
    serviceCategory_parser (::fhir::CodeableConcept_pskel&);

    void
    serviceType_parser (::fhir::CodeableConcept_pskel&);

    void
    specialty_parser (::fhir::CodeableConcept_pskel&);

    void
    actor_parser (::fhir::Reference_pskel&);

    void
    planningHorizon_parser (::fhir::Period_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Schedule_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Schedule_pskel* Schedule_impl_;
    Schedule_pskel (Schedule_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::boolean_pskel* active_parser_;
    ::fhir::CodeableConcept_pskel* serviceCategory_parser_;
    ::fhir::CodeableConcept_pskel* serviceType_parser_;
    ::fhir::CodeableConcept_pskel* specialty_parser_;
    ::fhir::Reference_pskel* actor_parser_;
    ::fhir::Period_pskel* planningHorizon_parser_;
    ::fhir::string_pskel* comment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Schedule_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SearchParameter_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    derivedFrom ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    code ();

    virtual void
    base ();

    virtual void
    type ();

    virtual void
    expression ();

    virtual void
    xpath ();

    virtual void
    xpathUsage ();

    virtual void
    target ();

    virtual void
    multipleOr ();

    virtual void
    multipleAnd ();

    virtual void
    comparator ();

    virtual void
    modifier ();

    virtual void
    chain ();

    virtual void
    component ();

    virtual void
    post_SearchParameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::canonical_pskel& /* derivedFrom */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::code_pskel& /* code */,
             ::fhir::code_pskel& /* base */,
             ::fhir::SearchParamType_pskel& /* type */,
             ::fhir::string_pskel& /* expression */,
             ::fhir::string_pskel& /* xpath */,
             ::fhir::XPathUsageType_pskel& /* xpathUsage */,
             ::fhir::code_pskel& /* target */,
             ::fhir::boolean_pskel& /* multipleOr */,
             ::fhir::boolean_pskel& /* multipleAnd */,
             ::fhir::SearchComparator_pskel& /* comparator */,
             ::fhir::SearchModifierCode_pskel& /* modifier */,
             ::fhir::string_pskel& /* chain */,
             ::fhir::SearchParameter_Component_pskel& /* component */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    derivedFrom_parser (::fhir::canonical_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    code_parser (::fhir::code_pskel&);

    void
    base_parser (::fhir::code_pskel&);

    void
    type_parser (::fhir::SearchParamType_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    void
    xpath_parser (::fhir::string_pskel&);

    void
    xpathUsage_parser (::fhir::XPathUsageType_pskel&);

    void
    target_parser (::fhir::code_pskel&);

    void
    multipleOr_parser (::fhir::boolean_pskel&);

    void
    multipleAnd_parser (::fhir::boolean_pskel&);

    void
    comparator_parser (::fhir::SearchComparator_pskel&);

    void
    modifier_parser (::fhir::SearchModifierCode_pskel&);

    void
    chain_parser (::fhir::string_pskel&);

    void
    component_parser (::fhir::SearchParameter_Component_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SearchParameter_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchParameter_pskel* SearchParameter_impl_;
    SearchParameter_pskel (SearchParameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::canonical_pskel* derivedFrom_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::code_pskel* code_parser_;
    ::fhir::code_pskel* base_parser_;
    ::fhir::SearchParamType_pskel* type_parser_;
    ::fhir::string_pskel* expression_parser_;
    ::fhir::string_pskel* xpath_parser_;
    ::fhir::XPathUsageType_pskel* xpathUsage_parser_;
    ::fhir::code_pskel* target_parser_;
    ::fhir::boolean_pskel* multipleOr_parser_;
    ::fhir::boolean_pskel* multipleAnd_parser_;
    ::fhir::SearchComparator_pskel* comparator_parser_;
    ::fhir::SearchModifierCode_pskel* modifier_parser_;
    ::fhir::string_pskel* chain_parser_;
    ::fhir::SearchParameter_Component_pskel* component_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SearchParameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SearchParameter_Component_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    definition ();

    virtual void
    expression ();

    virtual void
    post_SearchParameter_Component ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::canonical_pskel& /* definition */,
             ::fhir::string_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    definition_parser (::fhir::canonical_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SearchParameter_Component_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchParameter_Component_pskel* SearchParameter_Component_impl_;
    SearchParameter_Component_pskel (SearchParameter_Component_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::canonical_pskel* definition_parser_;
    ::fhir::string_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SearchParameter_Component_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class XPathUsageType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_XPathUsageType_list ();

    // Constructor.
    //
    XPathUsageType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    XPathUsageType_list_pskel* XPathUsageType_list_impl_;
    XPathUsageType_list_pskel (XPathUsageType_list_pskel*, void*);

    protected:
    static const char* const _xsde_XPathUsageType_list_pskel_enums_[5UL];
  };

  class XPathUsageType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_XPathUsageType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::XPathUsageType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::XPathUsageType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    XPathUsageType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    XPathUsageType_pskel* XPathUsageType_impl_;
    XPathUsageType_pskel (XPathUsageType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::XPathUsageType_list_pskel* value_parser_;
  };

  class SearchModifierCode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SearchModifierCode_list ();

    // Constructor.
    //
    SearchModifierCode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchModifierCode_list_pskel* SearchModifierCode_list_impl_;
    SearchModifierCode_list_pskel (SearchModifierCode_list_pskel*, void*);

    protected:
    static const char* const _xsde_SearchModifierCode_list_pskel_enums_[12UL];
  };

  class SearchModifierCode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SearchModifierCode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SearchModifierCode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SearchModifierCode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SearchModifierCode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchModifierCode_pskel* SearchModifierCode_impl_;
    SearchModifierCode_pskel (SearchModifierCode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SearchModifierCode_list_pskel* value_parser_;
  };

  class SearchComparator_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SearchComparator_list ();

    // Constructor.
    //
    SearchComparator_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchComparator_list_pskel* SearchComparator_list_impl_;
    SearchComparator_list_pskel (SearchComparator_list_pskel*, void*);

    protected:
    static const char* const _xsde_SearchComparator_list_pskel_enums_[9UL];
  };

  class SearchComparator_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SearchComparator ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SearchComparator_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SearchComparator_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SearchComparator_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SearchComparator_pskel* SearchComparator_impl_;
    SearchComparator_pskel (SearchComparator_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SearchComparator_list_pskel* value_parser_;
  };

  class ServiceRequest_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    basedOn ();

    virtual void
    replaces ();

    virtual void
    requisition ();

    virtual void
    status ();

    virtual void
    intent ();

    virtual void
    category ();

    virtual void
    priority ();

    virtual void
    doNotPerform ();

    virtual void
    code ();

    virtual void
    orderDetail ();

    virtual void
    quantityQuantity ();

    virtual void
    quantityRatio ();

    virtual void
    quantityRange ();

    virtual void
    subject ();

    virtual void
    encounter ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrencePeriod ();

    virtual void
    occurrenceTiming ();

    virtual void
    asNeededBoolean ();

    virtual void
    asNeededCodeableConcept ();

    virtual void
    authoredOn ();

    virtual void
    requester ();

    virtual void
    performerType ();

    virtual void
    performer ();

    virtual void
    locationCode ();

    virtual void
    locationReference ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    insurance ();

    virtual void
    supportingInfo ();

    virtual void
    specimen ();

    virtual void
    bodySite ();

    virtual void
    note ();

    virtual void
    patientInstruction ();

    virtual void
    relevantHistory ();

    virtual void
    post_ServiceRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* replaces */,
             ::fhir::Identifier_pskel& /* requisition */,
             ::fhir::RequestStatus_pskel& /* status */,
             ::fhir::RequestIntent_pskel& /* intent */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::boolean_pskel& /* doNotPerform */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* orderDetail */,
             ::fhir::Quantity_pskel& /* quantityQuantity */,
             ::fhir::Ratio_pskel& /* quantityRatio */,
             ::fhir::Range_pskel& /* quantityRange */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::Period_pskel& /* occurrencePeriod */,
             ::fhir::Timing_pskel& /* occurrenceTiming */,
             ::fhir::boolean_pskel& /* asNeededBoolean */,
             ::fhir::CodeableConcept_pskel& /* asNeededCodeableConcept */,
             ::fhir::dateTime_pskel& /* authoredOn */,
             ::fhir::Reference_pskel& /* requester */,
             ::fhir::CodeableConcept_pskel& /* performerType */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::CodeableConcept_pskel& /* locationCode */,
             ::fhir::Reference_pskel& /* locationReference */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Reference_pskel& /* insurance */,
             ::fhir::Reference_pskel& /* supportingInfo */,
             ::fhir::Reference_pskel& /* specimen */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::string_pskel& /* patientInstruction */,
             ::fhir::Reference_pskel& /* relevantHistory */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    replaces_parser (::fhir::Reference_pskel&);

    void
    requisition_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::RequestStatus_pskel&);

    void
    intent_parser (::fhir::RequestIntent_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    doNotPerform_parser (::fhir::boolean_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    orderDetail_parser (::fhir::CodeableConcept_pskel&);

    void
    quantityQuantity_parser (::fhir::Quantity_pskel&);

    void
    quantityRatio_parser (::fhir::Ratio_pskel&);

    void
    quantityRange_parser (::fhir::Range_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrencePeriod_parser (::fhir::Period_pskel&);

    void
    occurrenceTiming_parser (::fhir::Timing_pskel&);

    void
    asNeededBoolean_parser (::fhir::boolean_pskel&);

    void
    asNeededCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    authoredOn_parser (::fhir::dateTime_pskel&);

    void
    requester_parser (::fhir::Reference_pskel&);

    void
    performerType_parser (::fhir::CodeableConcept_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    locationCode_parser (::fhir::CodeableConcept_pskel&);

    void
    locationReference_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    insurance_parser (::fhir::Reference_pskel&);

    void
    supportingInfo_parser (::fhir::Reference_pskel&);

    void
    specimen_parser (::fhir::Reference_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    patientInstruction_parser (::fhir::string_pskel&);

    void
    relevantHistory_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ServiceRequest_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ServiceRequest_pskel* ServiceRequest_impl_;
    ServiceRequest_pskel (ServiceRequest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* replaces_parser_;
    ::fhir::Identifier_pskel* requisition_parser_;
    ::fhir::RequestStatus_pskel* status_parser_;
    ::fhir::RequestIntent_pskel* intent_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::boolean_pskel* doNotPerform_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* orderDetail_parser_;
    ::fhir::Quantity_pskel* quantityQuantity_parser_;
    ::fhir::Ratio_pskel* quantityRatio_parser_;
    ::fhir::Range_pskel* quantityRange_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::Period_pskel* occurrencePeriod_parser_;
    ::fhir::Timing_pskel* occurrenceTiming_parser_;
    ::fhir::boolean_pskel* asNeededBoolean_parser_;
    ::fhir::CodeableConcept_pskel* asNeededCodeableConcept_parser_;
    ::fhir::dateTime_pskel* authoredOn_parser_;
    ::fhir::Reference_pskel* requester_parser_;
    ::fhir::CodeableConcept_pskel* performerType_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::CodeableConcept_pskel* locationCode_parser_;
    ::fhir::Reference_pskel* locationReference_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Reference_pskel* insurance_parser_;
    ::fhir::Reference_pskel* supportingInfo_parser_;
    ::fhir::Reference_pskel* specimen_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::string_pskel* patientInstruction_parser_;
    ::fhir::Reference_pskel* relevantHistory_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ServiceRequest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Slot_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    serviceCategory ();

    virtual void
    serviceType ();

    virtual void
    specialty ();

    virtual void
    appointmentType ();

    virtual void
    schedule ();

    virtual void
    status ();

    virtual void
    start ();

    virtual void
    end ();

    virtual void
    overbooked ();

    virtual void
    comment ();

    virtual void
    post_Slot ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* serviceCategory */,
             ::fhir::CodeableConcept_pskel& /* serviceType */,
             ::fhir::CodeableConcept_pskel& /* specialty */,
             ::fhir::CodeableConcept_pskel& /* appointmentType */,
             ::fhir::Reference_pskel& /* schedule */,
             ::fhir::SlotStatus_pskel& /* status */,
             ::fhir::instant_pskel& /* start */,
             ::fhir::instant_pskel& /* end */,
             ::fhir::boolean_pskel& /* overbooked */,
             ::fhir::string_pskel& /* comment */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    serviceCategory_parser (::fhir::CodeableConcept_pskel&);

    void
    serviceType_parser (::fhir::CodeableConcept_pskel&);

    void
    specialty_parser (::fhir::CodeableConcept_pskel&);

    void
    appointmentType_parser (::fhir::CodeableConcept_pskel&);

    void
    schedule_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::SlotStatus_pskel&);

    void
    start_parser (::fhir::instant_pskel&);

    void
    end_parser (::fhir::instant_pskel&);

    void
    overbooked_parser (::fhir::boolean_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Slot_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Slot_pskel* Slot_impl_;
    Slot_pskel (Slot_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* serviceCategory_parser_;
    ::fhir::CodeableConcept_pskel* serviceType_parser_;
    ::fhir::CodeableConcept_pskel* specialty_parser_;
    ::fhir::CodeableConcept_pskel* appointmentType_parser_;
    ::fhir::Reference_pskel* schedule_parser_;
    ::fhir::SlotStatus_pskel* status_parser_;
    ::fhir::instant_pskel* start_parser_;
    ::fhir::instant_pskel* end_parser_;
    ::fhir::boolean_pskel* overbooked_parser_;
    ::fhir::string_pskel* comment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Slot_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SlotStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SlotStatus_list ();

    // Constructor.
    //
    SlotStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SlotStatus_list_pskel* SlotStatus_list_impl_;
    SlotStatus_list_pskel (SlotStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_SlotStatus_list_pskel_enums_[5UL];
  };

  class SlotStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SlotStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SlotStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SlotStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SlotStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SlotStatus_pskel* SlotStatus_impl_;
    SlotStatus_pskel (SlotStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SlotStatus_list_pskel* value_parser_;
  };

  class Specimen_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    accessionIdentifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    subject ();

    virtual void
    receivedTime ();

    virtual void
    parent ();

    virtual void
    request ();

    virtual void
    collection ();

    virtual void
    processing ();

    virtual void
    container ();

    virtual void
    condition ();

    virtual void
    note ();

    virtual void
    post_Specimen ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Identifier_pskel& /* accessionIdentifier */,
             ::fhir::SpecimenStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::dateTime_pskel& /* receivedTime */,
             ::fhir::Reference_pskel& /* parent */,
             ::fhir::Reference_pskel& /* request */,
             ::fhir::Specimen_Collection_pskel& /* collection */,
             ::fhir::Specimen_Processing_pskel& /* processing */,
             ::fhir::Specimen_Container_pskel& /* container */,
             ::fhir::CodeableConcept_pskel& /* condition */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    accessionIdentifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::SpecimenStatus_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    receivedTime_parser (::fhir::dateTime_pskel&);

    void
    parent_parser (::fhir::Reference_pskel&);

    void
    request_parser (::fhir::Reference_pskel&);

    void
    collection_parser (::fhir::Specimen_Collection_pskel&);

    void
    processing_parser (::fhir::Specimen_Processing_pskel&);

    void
    container_parser (::fhir::Specimen_Container_pskel&);

    void
    condition_parser (::fhir::CodeableConcept_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Specimen_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Specimen_pskel* Specimen_impl_;
    Specimen_pskel (Specimen_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Identifier_pskel* accessionIdentifier_parser_;
    ::fhir::SpecimenStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::dateTime_pskel* receivedTime_parser_;
    ::fhir::Reference_pskel* parent_parser_;
    ::fhir::Reference_pskel* request_parser_;
    ::fhir::Specimen_Collection_pskel* collection_parser_;
    ::fhir::Specimen_Processing_pskel* processing_parser_;
    ::fhir::Specimen_Container_pskel* container_parser_;
    ::fhir::CodeableConcept_pskel* condition_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Specimen_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Specimen_Collection_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    collector ();

    virtual void
    collectedDateTime ();

    virtual void
    collectedPeriod ();

    virtual void
    duration ();

    virtual void
    quantity ();

    virtual void
    method ();

    virtual void
    bodySite ();

    virtual void
    fastingStatusCodeableConcept ();

    virtual void
    fastingStatusDuration ();

    virtual void
    post_Specimen_Collection ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* collector */,
             ::fhir::dateTime_pskel& /* collectedDateTime */,
             ::fhir::Period_pskel& /* collectedPeriod */,
             ::fhir::Duration_pskel& /* duration */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::CodeableConcept_pskel& /* bodySite */,
             ::fhir::CodeableConcept_pskel& /* fastingStatusCodeableConcept */,
             ::fhir::Duration_pskel& /* fastingStatusDuration */);

    // Individual element parsers.
    //
    void
    collector_parser (::fhir::Reference_pskel&);

    void
    collectedDateTime_parser (::fhir::dateTime_pskel&);

    void
    collectedPeriod_parser (::fhir::Period_pskel&);

    void
    duration_parser (::fhir::Duration_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    bodySite_parser (::fhir::CodeableConcept_pskel&);

    void
    fastingStatusCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    fastingStatusDuration_parser (::fhir::Duration_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Specimen_Collection_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Specimen_Collection_pskel* Specimen_Collection_impl_;
    Specimen_Collection_pskel (Specimen_Collection_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* collector_parser_;
    ::fhir::dateTime_pskel* collectedDateTime_parser_;
    ::fhir::Period_pskel* collectedPeriod_parser_;
    ::fhir::Duration_pskel* duration_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::CodeableConcept_pskel* bodySite_parser_;
    ::fhir::CodeableConcept_pskel* fastingStatusCodeableConcept_parser_;
    ::fhir::Duration_pskel* fastingStatusDuration_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Specimen_Collection_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Specimen_Processing_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    procedure ();

    virtual void
    additive ();

    virtual void
    timeDateTime ();

    virtual void
    timePeriod ();

    virtual void
    post_Specimen_Processing ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* procedure */,
             ::fhir::Reference_pskel& /* additive */,
             ::fhir::dateTime_pskel& /* timeDateTime */,
             ::fhir::Period_pskel& /* timePeriod */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    procedure_parser (::fhir::CodeableConcept_pskel&);

    void
    additive_parser (::fhir::Reference_pskel&);

    void
    timeDateTime_parser (::fhir::dateTime_pskel&);

    void
    timePeriod_parser (::fhir::Period_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Specimen_Processing_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Specimen_Processing_pskel* Specimen_Processing_impl_;
    Specimen_Processing_pskel (Specimen_Processing_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* procedure_parser_;
    ::fhir::Reference_pskel* additive_parser_;
    ::fhir::dateTime_pskel* timeDateTime_parser_;
    ::fhir::Period_pskel* timePeriod_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Specimen_Processing_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Specimen_Container_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    description ();

    virtual void
    type ();

    virtual void
    capacity ();

    virtual void
    specimenQuantity ();

    virtual void
    additiveCodeableConcept ();

    virtual void
    additiveReference ();

    virtual void
    post_Specimen_Container ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* description */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* capacity */,
             ::fhir::Quantity_pskel& /* specimenQuantity */,
             ::fhir::CodeableConcept_pskel& /* additiveCodeableConcept */,
             ::fhir::Reference_pskel& /* additiveReference */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    capacity_parser (::fhir::Quantity_pskel&);

    void
    specimenQuantity_parser (::fhir::Quantity_pskel&);

    void
    additiveCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    additiveReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Specimen_Container_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Specimen_Container_pskel* Specimen_Container_impl_;
    Specimen_Container_pskel (Specimen_Container_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* capacity_parser_;
    ::fhir::Quantity_pskel* specimenQuantity_parser_;
    ::fhir::CodeableConcept_pskel* additiveCodeableConcept_parser_;
    ::fhir::Reference_pskel* additiveReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Specimen_Container_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SpecimenStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SpecimenStatus_list ();

    // Constructor.
    //
    SpecimenStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SpecimenStatus_list_pskel* SpecimenStatus_list_impl_;
    SpecimenStatus_list_pskel (SpecimenStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_SpecimenStatus_list_pskel_enums_[4UL];
  };

  class SpecimenStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SpecimenStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SpecimenStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SpecimenStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SpecimenStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SpecimenStatus_pskel* SpecimenStatus_impl_;
    SpecimenStatus_pskel (SpecimenStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SpecimenStatus_list_pskel* value_parser_;
  };

  class SpecimenDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    typeCollected ();

    virtual void
    patientPreparation ();

    virtual void
    timeAspect ();

    virtual void
    collection ();

    virtual void
    typeTested ();

    virtual void
    post_SpecimenDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* typeCollected */,
             ::fhir::CodeableConcept_pskel& /* patientPreparation */,
             ::fhir::string_pskel& /* timeAspect */,
             ::fhir::CodeableConcept_pskel& /* collection */,
             ::fhir::SpecimenDefinition_TypeTested_pskel& /* typeTested */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    typeCollected_parser (::fhir::CodeableConcept_pskel&);

    void
    patientPreparation_parser (::fhir::CodeableConcept_pskel&);

    void
    timeAspect_parser (::fhir::string_pskel&);

    void
    collection_parser (::fhir::CodeableConcept_pskel&);

    void
    typeTested_parser (::fhir::SpecimenDefinition_TypeTested_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SpecimenDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SpecimenDefinition_pskel* SpecimenDefinition_impl_;
    SpecimenDefinition_pskel (SpecimenDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* typeCollected_parser_;
    ::fhir::CodeableConcept_pskel* patientPreparation_parser_;
    ::fhir::string_pskel* timeAspect_parser_;
    ::fhir::CodeableConcept_pskel* collection_parser_;
    ::fhir::SpecimenDefinition_TypeTested_pskel* typeTested_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SpecimenDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SpecimenDefinition_TypeTested_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    isDerived ();

    virtual void
    type ();

    virtual void
    preference ();

    virtual void
    container ();

    virtual void
    requirement ();

    virtual void
    retentionTime ();

    virtual void
    rejectionCriterion ();

    virtual void
    handling ();

    virtual void
    post_SpecimenDefinition_TypeTested ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* isDerived */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::SpecimenContainedPreference_pskel& /* preference */,
             ::fhir::SpecimenDefinition_Container_pskel& /* container */,
             ::fhir::string_pskel& /* requirement */,
             ::fhir::Duration_pskel& /* retentionTime */,
             ::fhir::CodeableConcept_pskel& /* rejectionCriterion */,
             ::fhir::SpecimenDefinition_Handling_pskel& /* handling */);

    // Individual element parsers.
    //
    void
    isDerived_parser (::fhir::boolean_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    preference_parser (::fhir::SpecimenContainedPreference_pskel&);

    void
    container_parser (::fhir::SpecimenDefinition_Container_pskel&);

    void
    requirement_parser (::fhir::string_pskel&);

    void
    retentionTime_parser (::fhir::Duration_pskel&);

    void
    rejectionCriterion_parser (::fhir::CodeableConcept_pskel&);

    void
    handling_parser (::fhir::SpecimenDefinition_Handling_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SpecimenDefinition_TypeTested_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SpecimenDefinition_TypeTested_pskel* SpecimenDefinition_TypeTested_impl_;
    SpecimenDefinition_TypeTested_pskel (SpecimenDefinition_TypeTested_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* isDerived_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::SpecimenContainedPreference_pskel* preference_parser_;
    ::fhir::SpecimenDefinition_Container_pskel* container_parser_;
    ::fhir::string_pskel* requirement_parser_;
    ::fhir::Duration_pskel* retentionTime_parser_;
    ::fhir::CodeableConcept_pskel* rejectionCriterion_parser_;
    ::fhir::SpecimenDefinition_Handling_pskel* handling_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SpecimenDefinition_TypeTested_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SpecimenDefinition_Container_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    material ();

    virtual void
    type ();

    virtual void
    cap ();

    virtual void
    description ();

    virtual void
    capacity ();

    virtual void
    minimumVolumeQuantity ();

    virtual void
    minimumVolumeString ();

    virtual void
    additive ();

    virtual void
    preparation ();

    virtual void
    post_SpecimenDefinition_Container ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* material */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* cap */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Quantity_pskel& /* capacity */,
             ::fhir::Quantity_pskel& /* minimumVolumeQuantity */,
             ::fhir::string_pskel& /* minimumVolumeString */,
             ::fhir::SpecimenDefinition_Additive_pskel& /* additive */,
             ::fhir::string_pskel& /* preparation */);

    // Individual element parsers.
    //
    void
    material_parser (::fhir::CodeableConcept_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    cap_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    capacity_parser (::fhir::Quantity_pskel&);

    void
    minimumVolumeQuantity_parser (::fhir::Quantity_pskel&);

    void
    minimumVolumeString_parser (::fhir::string_pskel&);

    void
    additive_parser (::fhir::SpecimenDefinition_Additive_pskel&);

    void
    preparation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SpecimenDefinition_Container_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SpecimenDefinition_Container_pskel* SpecimenDefinition_Container_impl_;
    SpecimenDefinition_Container_pskel (SpecimenDefinition_Container_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* material_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* cap_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Quantity_pskel* capacity_parser_;
    ::fhir::Quantity_pskel* minimumVolumeQuantity_parser_;
    ::fhir::string_pskel* minimumVolumeString_parser_;
    ::fhir::SpecimenDefinition_Additive_pskel* additive_parser_;
    ::fhir::string_pskel* preparation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SpecimenDefinition_Container_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SpecimenDefinition_Additive_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    additiveCodeableConcept ();

    virtual void
    additiveReference ();

    virtual void
    post_SpecimenDefinition_Additive ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* additiveCodeableConcept */,
             ::fhir::Reference_pskel& /* additiveReference */);

    // Individual element parsers.
    //
    void
    additiveCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    additiveReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SpecimenDefinition_Additive_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SpecimenDefinition_Additive_pskel* SpecimenDefinition_Additive_impl_;
    SpecimenDefinition_Additive_pskel (SpecimenDefinition_Additive_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* additiveCodeableConcept_parser_;
    ::fhir::Reference_pskel* additiveReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SpecimenDefinition_Additive_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SpecimenDefinition_Handling_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    temperatureQualifier ();

    virtual void
    temperatureRange ();

    virtual void
    maxDuration ();

    virtual void
    instruction ();

    virtual void
    post_SpecimenDefinition_Handling ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* temperatureQualifier */,
             ::fhir::Range_pskel& /* temperatureRange */,
             ::fhir::Duration_pskel& /* maxDuration */,
             ::fhir::string_pskel& /* instruction */);

    // Individual element parsers.
    //
    void
    temperatureQualifier_parser (::fhir::CodeableConcept_pskel&);

    void
    temperatureRange_parser (::fhir::Range_pskel&);

    void
    maxDuration_parser (::fhir::Duration_pskel&);

    void
    instruction_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SpecimenDefinition_Handling_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SpecimenDefinition_Handling_pskel* SpecimenDefinition_Handling_impl_;
    SpecimenDefinition_Handling_pskel (SpecimenDefinition_Handling_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* temperatureQualifier_parser_;
    ::fhir::Range_pskel* temperatureRange_parser_;
    ::fhir::Duration_pskel* maxDuration_parser_;
    ::fhir::string_pskel* instruction_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SpecimenDefinition_Handling_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SpecimenContainedPreference_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SpecimenContainedPreference_list ();

    // Constructor.
    //
    SpecimenContainedPreference_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SpecimenContainedPreference_list_pskel* SpecimenContainedPreference_list_impl_;
    SpecimenContainedPreference_list_pskel (SpecimenContainedPreference_list_pskel*, void*);

    protected:
    static const char* const _xsde_SpecimenContainedPreference_list_pskel_enums_[2UL];
  };

  class SpecimenContainedPreference_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SpecimenContainedPreference ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SpecimenContainedPreference_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SpecimenContainedPreference_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SpecimenContainedPreference_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SpecimenContainedPreference_pskel* SpecimenContainedPreference_impl_;
    SpecimenContainedPreference_pskel (SpecimenContainedPreference_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SpecimenContainedPreference_list_pskel* value_parser_;
  };

  class StructureDefinition_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    keyword ();

    virtual void
    fhirVersion ();

    virtual void
    mapping ();

    virtual void
    kind ();

    virtual void
    abstract ();

    virtual void
    context ();

    virtual void
    contextInvariant ();

    virtual void
    type ();

    virtual void
    baseDefinition ();

    virtual void
    derivation ();

    virtual void
    snapshot ();

    virtual void
    differential ();

    virtual void
    post_StructureDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::Coding_pskel& /* keyword */,
             ::fhir::FHIRVersion_pskel& /* fhirVersion */,
             ::fhir::StructureDefinition_Mapping_pskel& /* mapping */,
             ::fhir::StructureDefinitionKind_pskel& /* kind */,
             ::fhir::boolean_pskel& /* abstract */,
             ::fhir::StructureDefinition_Context_pskel& /* context */,
             ::fhir::string_pskel& /* contextInvariant */,
             ::fhir::uri_pskel& /* type */,
             ::fhir::canonical_pskel& /* baseDefinition */,
             ::fhir::TypeDerivationRule_pskel& /* derivation */,
             ::fhir::StructureDefinition_Snapshot_pskel& /* snapshot */,
             ::fhir::StructureDefinition_Differential_pskel& /* differential */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    keyword_parser (::fhir::Coding_pskel&);

    void
    fhirVersion_parser (::fhir::FHIRVersion_pskel&);

    void
    mapping_parser (::fhir::StructureDefinition_Mapping_pskel&);

    void
    kind_parser (::fhir::StructureDefinitionKind_pskel&);

    void
    abstract_parser (::fhir::boolean_pskel&);

    void
    context_parser (::fhir::StructureDefinition_Context_pskel&);

    void
    contextInvariant_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::uri_pskel&);

    void
    baseDefinition_parser (::fhir::canonical_pskel&);

    void
    derivation_parser (::fhir::TypeDerivationRule_pskel&);

    void
    snapshot_parser (::fhir::StructureDefinition_Snapshot_pskel&);

    void
    differential_parser (::fhir::StructureDefinition_Differential_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureDefinition_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureDefinition_pskel* StructureDefinition_impl_;
    StructureDefinition_pskel (StructureDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::Coding_pskel* keyword_parser_;
    ::fhir::FHIRVersion_pskel* fhirVersion_parser_;
    ::fhir::StructureDefinition_Mapping_pskel* mapping_parser_;
    ::fhir::StructureDefinitionKind_pskel* kind_parser_;
    ::fhir::boolean_pskel* abstract_parser_;
    ::fhir::StructureDefinition_Context_pskel* context_parser_;
    ::fhir::string_pskel* contextInvariant_parser_;
    ::fhir::uri_pskel* type_parser_;
    ::fhir::canonical_pskel* baseDefinition_parser_;
    ::fhir::TypeDerivationRule_pskel* derivation_parser_;
    ::fhir::StructureDefinition_Snapshot_pskel* snapshot_parser_;
    ::fhir::StructureDefinition_Differential_pskel* differential_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureDefinition_Mapping_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identity ();

    virtual void
    uri ();

    virtual void
    name ();

    virtual void
    comment ();

    virtual void
    post_StructureDefinition_Mapping ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* identity */,
             ::fhir::uri_pskel& /* uri */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* comment */);

    // Individual element parsers.
    //
    void
    identity_parser (::fhir::id_pskel&);

    void
    uri_parser (::fhir::uri_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureDefinition_Mapping_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureDefinition_Mapping_pskel* StructureDefinition_Mapping_impl_;
    StructureDefinition_Mapping_pskel (StructureDefinition_Mapping_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* identity_parser_;
    ::fhir::uri_pskel* uri_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* comment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureDefinition_Mapping_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureDefinition_Context_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    expression ();

    virtual void
    post_StructureDefinition_Context ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ExtensionContextType_pskel& /* type */,
             ::fhir::string_pskel& /* expression */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::ExtensionContextType_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureDefinition_Context_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureDefinition_Context_pskel* StructureDefinition_Context_impl_;
    StructureDefinition_Context_pskel (StructureDefinition_Context_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ExtensionContextType_pskel* type_parser_;
    ::fhir::string_pskel* expression_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureDefinition_Context_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureDefinition_Snapshot_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    element ();

    virtual void
    post_StructureDefinition_Snapshot ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ElementDefinition_pskel& /* element */);

    // Individual element parsers.
    //
    void
    element_parser (::fhir::ElementDefinition_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureDefinition_Snapshot_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureDefinition_Snapshot_pskel* StructureDefinition_Snapshot_impl_;
    StructureDefinition_Snapshot_pskel (StructureDefinition_Snapshot_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ElementDefinition_pskel* element_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureDefinition_Snapshot_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureDefinition_Differential_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    element ();

    virtual void
    post_StructureDefinition_Differential ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::ElementDefinition_pskel& /* element */);

    // Individual element parsers.
    //
    void
    element_parser (::fhir::ElementDefinition_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureDefinition_Differential_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureDefinition_Differential_pskel* StructureDefinition_Differential_impl_;
    StructureDefinition_Differential_pskel (StructureDefinition_Differential_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::ElementDefinition_pskel* element_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureDefinition_Differential_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureDefinitionKind_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureDefinitionKind_list ();

    // Constructor.
    //
    StructureDefinitionKind_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureDefinitionKind_list_pskel* StructureDefinitionKind_list_impl_;
    StructureDefinitionKind_list_pskel (StructureDefinitionKind_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureDefinitionKind_list_pskel_enums_[4UL];
  };

  class StructureDefinitionKind_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureDefinitionKind ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureDefinitionKind_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureDefinitionKind_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureDefinitionKind_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureDefinitionKind_pskel* StructureDefinitionKind_impl_;
    StructureDefinitionKind_pskel (StructureDefinitionKind_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureDefinitionKind_list_pskel* value_parser_;
  };

  class TypeDerivationRule_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TypeDerivationRule_list ();

    // Constructor.
    //
    TypeDerivationRule_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TypeDerivationRule_list_pskel* TypeDerivationRule_list_impl_;
    TypeDerivationRule_list_pskel (TypeDerivationRule_list_pskel*, void*);

    protected:
    static const char* const _xsde_TypeDerivationRule_list_pskel_enums_[2UL];
  };

  class TypeDerivationRule_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TypeDerivationRule ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TypeDerivationRule_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TypeDerivationRule_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TypeDerivationRule_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TypeDerivationRule_pskel* TypeDerivationRule_impl_;
    TypeDerivationRule_pskel (TypeDerivationRule_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TypeDerivationRule_list_pskel* value_parser_;
  };

  class ExtensionContextType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ExtensionContextType_list ();

    // Constructor.
    //
    ExtensionContextType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExtensionContextType_list_pskel* ExtensionContextType_list_impl_;
    ExtensionContextType_list_pskel (ExtensionContextType_list_pskel*, void*);

    protected:
    static const char* const _xsde_ExtensionContextType_list_pskel_enums_[3UL];
  };

  class ExtensionContextType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ExtensionContextType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ExtensionContextType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ExtensionContextType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ExtensionContextType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ExtensionContextType_pskel* ExtensionContextType_impl_;
    ExtensionContextType_pskel (ExtensionContextType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ExtensionContextType_list_pskel* value_parser_;
  };

  class StructureMap_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    structure ();

    virtual void
    import ();

    virtual void
    group ();

    virtual void
    post_StructureMap ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::StructureMap_Structure_pskel& /* structure */,
             ::fhir::canonical_pskel& /* import */,
             ::fhir::StructureMap_Group_pskel& /* group */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    structure_parser (::fhir::StructureMap_Structure_pskel&);

    void
    import_parser (::fhir::canonical_pskel&);

    void
    group_parser (::fhir::StructureMap_Group_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_pskel* StructureMap_impl_;
    StructureMap_pskel (StructureMap_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::StructureMap_Structure_pskel* structure_parser_;
    ::fhir::canonical_pskel* import_parser_;
    ::fhir::StructureMap_Group_pskel* group_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Structure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    mode ();

    virtual void
    alias ();

    virtual void
    documentation ();

    virtual void
    post_StructureMap_Structure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::canonical_pskel& /* url */,
             ::fhir::StructureMapModelMode_pskel& /* mode */,
             ::fhir::string_pskel& /* alias */,
             ::fhir::string_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::canonical_pskel&);

    void
    mode_parser (::fhir::StructureMapModelMode_pskel&);

    void
    alias_parser (::fhir::string_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Structure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Structure_pskel* StructureMap_Structure_impl_;
    StructureMap_Structure_pskel (StructureMap_Structure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::canonical_pskel* url_parser_;
    ::fhir::StructureMapModelMode_pskel* mode_parser_;
    ::fhir::string_pskel* alias_parser_;
    ::fhir::string_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Structure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Group_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    extends ();

    virtual void
    typeMode ();

    virtual void
    documentation ();

    virtual void
    input ();

    virtual void
    rule ();

    virtual void
    post_StructureMap_Group ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* name */,
             ::fhir::id_pskel& /* extends */,
             ::fhir::StructureMapGroupTypeMode_pskel& /* typeMode */,
             ::fhir::string_pskel& /* documentation */,
             ::fhir::StructureMap_Input_pskel& /* input */,
             ::fhir::StructureMap_Rule_pskel& /* rule */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::id_pskel&);

    void
    extends_parser (::fhir::id_pskel&);

    void
    typeMode_parser (::fhir::StructureMapGroupTypeMode_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    void
    input_parser (::fhir::StructureMap_Input_pskel&);

    void
    rule_parser (::fhir::StructureMap_Rule_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Group_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Group_pskel* StructureMap_Group_impl_;
    StructureMap_Group_pskel (StructureMap_Group_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* name_parser_;
    ::fhir::id_pskel* extends_parser_;
    ::fhir::StructureMapGroupTypeMode_pskel* typeMode_parser_;
    ::fhir::string_pskel* documentation_parser_;
    ::fhir::StructureMap_Input_pskel* input_parser_;
    ::fhir::StructureMap_Rule_pskel* rule_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Group_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Input_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    type ();

    virtual void
    mode ();

    virtual void
    documentation ();

    virtual void
    post_StructureMap_Input ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* name */,
             ::fhir::string_pskel& /* type */,
             ::fhir::StructureMapInputMode_pskel& /* mode */,
             ::fhir::string_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::id_pskel&);

    void
    type_parser (::fhir::string_pskel&);

    void
    mode_parser (::fhir::StructureMapInputMode_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Input_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Input_pskel* StructureMap_Input_impl_;
    StructureMap_Input_pskel (StructureMap_Input_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* name_parser_;
    ::fhir::string_pskel* type_parser_;
    ::fhir::StructureMapInputMode_pskel* mode_parser_;
    ::fhir::string_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Input_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Rule_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    source ();

    virtual void
    target ();

    virtual void
    rule ();

    virtual void
    dependent ();

    virtual void
    documentation ();

    virtual void
    post_StructureMap_Rule ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* name */,
             ::fhir::StructureMap_Source_pskel& /* source */,
             ::fhir::StructureMap_Target_pskel& /* target */,
             ::fhir::StructureMap_Rule_pskel& /* rule */,
             ::fhir::StructureMap_Dependent_pskel& /* dependent */,
             ::fhir::string_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::id_pskel&);

    void
    source_parser (::fhir::StructureMap_Source_pskel&);

    void
    target_parser (::fhir::StructureMap_Target_pskel&);

    void
    rule_parser (::fhir::StructureMap_Rule_pskel&);

    void
    dependent_parser (::fhir::StructureMap_Dependent_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Rule_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Rule_pskel* StructureMap_Rule_impl_;
    StructureMap_Rule_pskel (StructureMap_Rule_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* name_parser_;
    ::fhir::StructureMap_Source_pskel* source_parser_;
    ::fhir::StructureMap_Target_pskel* target_parser_;
    ::fhir::StructureMap_Rule_pskel* rule_parser_;
    ::fhir::StructureMap_Dependent_pskel* dependent_parser_;
    ::fhir::string_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Rule_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Source_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    context ();

    virtual void
    min ();

    virtual void
    max ();

    virtual void
    type ();

    virtual void
    defaultValueBase64Binary ();

    virtual void
    defaultValueBoolean ();

    virtual void
    defaultValueCanonical ();

    virtual void
    defaultValueCode ();

    virtual void
    defaultValueDate ();

    virtual void
    defaultValueDateTime ();

    virtual void
    defaultValueDecimal ();

    virtual void
    defaultValueId ();

    virtual void
    defaultValueInstant ();

    virtual void
    defaultValueInteger ();

    virtual void
    defaultValueMarkdown ();

    virtual void
    defaultValueOid ();

    virtual void
    defaultValuePositiveInt ();

    virtual void
    defaultValueString ();

    virtual void
    defaultValueTime ();

    virtual void
    defaultValueUnsignedInt ();

    virtual void
    defaultValueUri ();

    virtual void
    defaultValueUrl ();

    virtual void
    defaultValueUuid ();

    virtual void
    defaultValueAddress ();

    virtual void
    defaultValueAge ();

    virtual void
    defaultValueAnnotation ();

    virtual void
    defaultValueAttachment ();

    virtual void
    defaultValueCodeableConcept ();

    virtual void
    defaultValueCoding ();

    virtual void
    defaultValueContactPoint ();

    virtual void
    defaultValueCount ();

    virtual void
    defaultValueDistance ();

    virtual void
    defaultValueDuration ();

    virtual void
    defaultValueHumanName ();

    virtual void
    defaultValueIdentifier ();

    virtual void
    defaultValueMoney ();

    virtual void
    defaultValuePeriod ();

    virtual void
    defaultValueQuantity ();

    virtual void
    defaultValueRange ();

    virtual void
    defaultValueRatio ();

    virtual void
    defaultValueReference ();

    virtual void
    defaultValueSampledData ();

    virtual void
    defaultValueSignature ();

    virtual void
    defaultValueTiming ();

    virtual void
    defaultValueContactDetail ();

    virtual void
    defaultValueContributor ();

    virtual void
    defaultValueDataRequirement ();

    virtual void
    defaultValueExpression ();

    virtual void
    defaultValueParameterDefinition ();

    virtual void
    defaultValueRelatedArtifact ();

    virtual void
    defaultValueTriggerDefinition ();

    virtual void
    defaultValueUsageContext ();

    virtual void
    defaultValueDosage ();

    virtual void
    defaultValueMeta ();

    virtual void
    element ();

    virtual void
    listMode ();

    virtual void
    variable ();

    virtual void
    condition ();

    virtual void
    check ();

    virtual void
    logMessage ();

    virtual void
    post_StructureMap_Source ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* context */,
             ::fhir::integer_pskel& /* min */,
             ::fhir::string_pskel& /* max */,
             ::fhir::string_pskel& /* type */,
             ::fhir::base64Binary_pskel& /* defaultValueBase64Binary */,
             ::fhir::boolean_pskel& /* defaultValueBoolean */,
             ::fhir::canonical_pskel& /* defaultValueCanonical */,
             ::fhir::code_pskel& /* defaultValueCode */,
             ::fhir::date_pskel& /* defaultValueDate */,
             ::fhir::dateTime_pskel& /* defaultValueDateTime */,
             ::fhir::decimal_pskel& /* defaultValueDecimal */,
             ::fhir::id_pskel& /* defaultValueId */,
             ::fhir::instant_pskel& /* defaultValueInstant */,
             ::fhir::integer_pskel& /* defaultValueInteger */,
             ::fhir::markdown_pskel& /* defaultValueMarkdown */,
             ::fhir::oid_pskel& /* defaultValueOid */,
             ::fhir::positiveInt_pskel& /* defaultValuePositiveInt */,
             ::fhir::string_pskel& /* defaultValueString */,
             ::fhir::time_pskel& /* defaultValueTime */,
             ::fhir::unsignedInt_pskel& /* defaultValueUnsignedInt */,
             ::fhir::uri_pskel& /* defaultValueUri */,
             ::fhir::url_pskel& /* defaultValueUrl */,
             ::fhir::uuid_pskel& /* defaultValueUuid */,
             ::fhir::Address_pskel& /* defaultValueAddress */,
             ::fhir::Age_pskel& /* defaultValueAge */,
             ::fhir::Annotation_pskel& /* defaultValueAnnotation */,
             ::fhir::Attachment_pskel& /* defaultValueAttachment */,
             ::fhir::CodeableConcept_pskel& /* defaultValueCodeableConcept */,
             ::fhir::Coding_pskel& /* defaultValueCoding */,
             ::fhir::ContactPoint_pskel& /* defaultValueContactPoint */,
             ::fhir::Count_pskel& /* defaultValueCount */,
             ::fhir::Distance_pskel& /* defaultValueDistance */,
             ::fhir::Duration_pskel& /* defaultValueDuration */,
             ::fhir::HumanName_pskel& /* defaultValueHumanName */,
             ::fhir::Identifier_pskel& /* defaultValueIdentifier */,
             ::fhir::Money_pskel& /* defaultValueMoney */,
             ::fhir::Period_pskel& /* defaultValuePeriod */,
             ::fhir::Quantity_pskel& /* defaultValueQuantity */,
             ::fhir::Range_pskel& /* defaultValueRange */,
             ::fhir::Ratio_pskel& /* defaultValueRatio */,
             ::fhir::Reference_pskel& /* defaultValueReference */,
             ::fhir::SampledData_pskel& /* defaultValueSampledData */,
             ::fhir::Signature_pskel& /* defaultValueSignature */,
             ::fhir::Timing_pskel& /* defaultValueTiming */,
             ::fhir::ContactDetail_pskel& /* defaultValueContactDetail */,
             ::fhir::Contributor_pskel& /* defaultValueContributor */,
             ::fhir::DataRequirement_pskel& /* defaultValueDataRequirement */,
             ::fhir::Expression_pskel& /* defaultValueExpression */,
             ::fhir::ParameterDefinition_pskel& /* defaultValueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* defaultValueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* defaultValueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* defaultValueUsageContext */,
             ::fhir::Dosage_pskel& /* defaultValueDosage */,
             ::fhir::Meta_pskel& /* defaultValueMeta */,
             ::fhir::string_pskel& /* element */,
             ::fhir::StructureMapSourceListMode_pskel& /* listMode */,
             ::fhir::id_pskel& /* variable */,
             ::fhir::string_pskel& /* condition */,
             ::fhir::string_pskel& /* check */,
             ::fhir::string_pskel& /* logMessage */);

    // Individual element parsers.
    //
    void
    context_parser (::fhir::id_pskel&);

    void
    min_parser (::fhir::integer_pskel&);

    void
    max_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::string_pskel&);

    void
    defaultValueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    defaultValueBoolean_parser (::fhir::boolean_pskel&);

    void
    defaultValueCanonical_parser (::fhir::canonical_pskel&);

    void
    defaultValueCode_parser (::fhir::code_pskel&);

    void
    defaultValueDate_parser (::fhir::date_pskel&);

    void
    defaultValueDateTime_parser (::fhir::dateTime_pskel&);

    void
    defaultValueDecimal_parser (::fhir::decimal_pskel&);

    void
    defaultValueId_parser (::fhir::id_pskel&);

    void
    defaultValueInstant_parser (::fhir::instant_pskel&);

    void
    defaultValueInteger_parser (::fhir::integer_pskel&);

    void
    defaultValueMarkdown_parser (::fhir::markdown_pskel&);

    void
    defaultValueOid_parser (::fhir::oid_pskel&);

    void
    defaultValuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    defaultValueString_parser (::fhir::string_pskel&);

    void
    defaultValueTime_parser (::fhir::time_pskel&);

    void
    defaultValueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    defaultValueUri_parser (::fhir::uri_pskel&);

    void
    defaultValueUrl_parser (::fhir::url_pskel&);

    void
    defaultValueUuid_parser (::fhir::uuid_pskel&);

    void
    defaultValueAddress_parser (::fhir::Address_pskel&);

    void
    defaultValueAge_parser (::fhir::Age_pskel&);

    void
    defaultValueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    defaultValueAttachment_parser (::fhir::Attachment_pskel&);

    void
    defaultValueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    defaultValueCoding_parser (::fhir::Coding_pskel&);

    void
    defaultValueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    defaultValueCount_parser (::fhir::Count_pskel&);

    void
    defaultValueDistance_parser (::fhir::Distance_pskel&);

    void
    defaultValueDuration_parser (::fhir::Duration_pskel&);

    void
    defaultValueHumanName_parser (::fhir::HumanName_pskel&);

    void
    defaultValueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    defaultValueMoney_parser (::fhir::Money_pskel&);

    void
    defaultValuePeriod_parser (::fhir::Period_pskel&);

    void
    defaultValueQuantity_parser (::fhir::Quantity_pskel&);

    void
    defaultValueRange_parser (::fhir::Range_pskel&);

    void
    defaultValueRatio_parser (::fhir::Ratio_pskel&);

    void
    defaultValueReference_parser (::fhir::Reference_pskel&);

    void
    defaultValueSampledData_parser (::fhir::SampledData_pskel&);

    void
    defaultValueSignature_parser (::fhir::Signature_pskel&);

    void
    defaultValueTiming_parser (::fhir::Timing_pskel&);

    void
    defaultValueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    defaultValueContributor_parser (::fhir::Contributor_pskel&);

    void
    defaultValueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    defaultValueExpression_parser (::fhir::Expression_pskel&);

    void
    defaultValueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    defaultValueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    defaultValueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    defaultValueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    defaultValueDosage_parser (::fhir::Dosage_pskel&);

    void
    defaultValueMeta_parser (::fhir::Meta_pskel&);

    void
    element_parser (::fhir::string_pskel&);

    void
    listMode_parser (::fhir::StructureMapSourceListMode_pskel&);

    void
    variable_parser (::fhir::id_pskel&);

    void
    condition_parser (::fhir::string_pskel&);

    void
    check_parser (::fhir::string_pskel&);

    void
    logMessage_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Source_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Source_pskel* StructureMap_Source_impl_;
    StructureMap_Source_pskel (StructureMap_Source_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* context_parser_;
    ::fhir::integer_pskel* min_parser_;
    ::fhir::string_pskel* max_parser_;
    ::fhir::string_pskel* type_parser_;
    ::fhir::base64Binary_pskel* defaultValueBase64Binary_parser_;
    ::fhir::boolean_pskel* defaultValueBoolean_parser_;
    ::fhir::canonical_pskel* defaultValueCanonical_parser_;
    ::fhir::code_pskel* defaultValueCode_parser_;
    ::fhir::date_pskel* defaultValueDate_parser_;
    ::fhir::dateTime_pskel* defaultValueDateTime_parser_;
    ::fhir::decimal_pskel* defaultValueDecimal_parser_;
    ::fhir::id_pskel* defaultValueId_parser_;
    ::fhir::instant_pskel* defaultValueInstant_parser_;
    ::fhir::integer_pskel* defaultValueInteger_parser_;
    ::fhir::markdown_pskel* defaultValueMarkdown_parser_;
    ::fhir::oid_pskel* defaultValueOid_parser_;
    ::fhir::positiveInt_pskel* defaultValuePositiveInt_parser_;
    ::fhir::string_pskel* defaultValueString_parser_;
    ::fhir::time_pskel* defaultValueTime_parser_;
    ::fhir::unsignedInt_pskel* defaultValueUnsignedInt_parser_;
    ::fhir::uri_pskel* defaultValueUri_parser_;
    ::fhir::url_pskel* defaultValueUrl_parser_;
    ::fhir::uuid_pskel* defaultValueUuid_parser_;
    ::fhir::Address_pskel* defaultValueAddress_parser_;
    ::fhir::Age_pskel* defaultValueAge_parser_;
    ::fhir::Annotation_pskel* defaultValueAnnotation_parser_;
    ::fhir::Attachment_pskel* defaultValueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* defaultValueCodeableConcept_parser_;
    ::fhir::Coding_pskel* defaultValueCoding_parser_;
    ::fhir::ContactPoint_pskel* defaultValueContactPoint_parser_;
    ::fhir::Count_pskel* defaultValueCount_parser_;
    ::fhir::Distance_pskel* defaultValueDistance_parser_;
    ::fhir::Duration_pskel* defaultValueDuration_parser_;
    ::fhir::HumanName_pskel* defaultValueHumanName_parser_;
    ::fhir::Identifier_pskel* defaultValueIdentifier_parser_;
    ::fhir::Money_pskel* defaultValueMoney_parser_;
    ::fhir::Period_pskel* defaultValuePeriod_parser_;
    ::fhir::Quantity_pskel* defaultValueQuantity_parser_;
    ::fhir::Range_pskel* defaultValueRange_parser_;
    ::fhir::Ratio_pskel* defaultValueRatio_parser_;
    ::fhir::Reference_pskel* defaultValueReference_parser_;
    ::fhir::SampledData_pskel* defaultValueSampledData_parser_;
    ::fhir::Signature_pskel* defaultValueSignature_parser_;
    ::fhir::Timing_pskel* defaultValueTiming_parser_;
    ::fhir::ContactDetail_pskel* defaultValueContactDetail_parser_;
    ::fhir::Contributor_pskel* defaultValueContributor_parser_;
    ::fhir::DataRequirement_pskel* defaultValueDataRequirement_parser_;
    ::fhir::Expression_pskel* defaultValueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* defaultValueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* defaultValueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* defaultValueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* defaultValueUsageContext_parser_;
    ::fhir::Dosage_pskel* defaultValueDosage_parser_;
    ::fhir::Meta_pskel* defaultValueMeta_parser_;
    ::fhir::string_pskel* element_parser_;
    ::fhir::StructureMapSourceListMode_pskel* listMode_parser_;
    ::fhir::id_pskel* variable_parser_;
    ::fhir::string_pskel* condition_parser_;
    ::fhir::string_pskel* check_parser_;
    ::fhir::string_pskel* logMessage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Source_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Target_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    context ();

    virtual void
    contextType ();

    virtual void
    element ();

    virtual void
    variable ();

    virtual void
    listMode ();

    virtual void
    listRuleId ();

    virtual void
    transform ();

    virtual void
    parameter ();

    virtual void
    post_StructureMap_Target ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* context */,
             ::fhir::StructureMapContextType_pskel& /* contextType */,
             ::fhir::string_pskel& /* element */,
             ::fhir::id_pskel& /* variable */,
             ::fhir::StructureMapTargetListMode_pskel& /* listMode */,
             ::fhir::id_pskel& /* listRuleId */,
             ::fhir::StructureMapTransform_pskel& /* transform */,
             ::fhir::StructureMap_Parameter_pskel& /* parameter */);

    // Individual element parsers.
    //
    void
    context_parser (::fhir::id_pskel&);

    void
    contextType_parser (::fhir::StructureMapContextType_pskel&);

    void
    element_parser (::fhir::string_pskel&);

    void
    variable_parser (::fhir::id_pskel&);

    void
    listMode_parser (::fhir::StructureMapTargetListMode_pskel&);

    void
    listRuleId_parser (::fhir::id_pskel&);

    void
    transform_parser (::fhir::StructureMapTransform_pskel&);

    void
    parameter_parser (::fhir::StructureMap_Parameter_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Target_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Target_pskel* StructureMap_Target_impl_;
    StructureMap_Target_pskel (StructureMap_Target_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* context_parser_;
    ::fhir::StructureMapContextType_pskel* contextType_parser_;
    ::fhir::string_pskel* element_parser_;
    ::fhir::id_pskel* variable_parser_;
    ::fhir::StructureMapTargetListMode_pskel* listMode_parser_;
    ::fhir::id_pskel* listRuleId_parser_;
    ::fhir::StructureMapTransform_pskel* transform_parser_;
    ::fhir::StructureMap_Parameter_pskel* parameter_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Target_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    valueId ();

    virtual void
    valueString ();

    virtual void
    valueBoolean ();

    virtual void
    valueInteger ();

    virtual void
    valueDecimal ();

    virtual void
    post_StructureMap_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* valueId */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::decimal_pskel& /* valueDecimal */);

    // Individual element parsers.
    //
    void
    valueId_parser (::fhir::id_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Parameter_pskel* StructureMap_Parameter_impl_;
    StructureMap_Parameter_pskel (StructureMap_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* valueId_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMap_Dependent_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    variable ();

    virtual void
    post_StructureMap_Dependent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::id_pskel& /* name */,
             ::fhir::string_pskel& /* variable */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::id_pskel&);

    void
    variable_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMap_Dependent_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMap_Dependent_pskel* StructureMap_Dependent_impl_;
    StructureMap_Dependent_pskel (StructureMap_Dependent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::id_pskel* name_parser_;
    ::fhir::string_pskel* variable_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::StructureMap_Dependent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class StructureMapInputMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapInputMode_list ();

    // Constructor.
    //
    StructureMapInputMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapInputMode_list_pskel* StructureMapInputMode_list_impl_;
    StructureMapInputMode_list_pskel (StructureMapInputMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapInputMode_list_pskel_enums_[2UL];
  };

  class StructureMapInputMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapInputMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapInputMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapInputMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapInputMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapInputMode_pskel* StructureMapInputMode_impl_;
    StructureMapInputMode_pskel (StructureMapInputMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapInputMode_list_pskel* value_parser_;
  };

  class StructureMapContextType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapContextType_list ();

    // Constructor.
    //
    StructureMapContextType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapContextType_list_pskel* StructureMapContextType_list_impl_;
    StructureMapContextType_list_pskel (StructureMapContextType_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapContextType_list_pskel_enums_[2UL];
  };

  class StructureMapContextType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapContextType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapContextType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapContextType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapContextType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapContextType_pskel* StructureMapContextType_impl_;
    StructureMapContextType_pskel (StructureMapContextType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapContextType_list_pskel* value_parser_;
  };

  class StructureMapTargetListMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapTargetListMode_list ();

    // Constructor.
    //
    StructureMapTargetListMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapTargetListMode_list_pskel* StructureMapTargetListMode_list_impl_;
    StructureMapTargetListMode_list_pskel (StructureMapTargetListMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapTargetListMode_list_pskel_enums_[4UL];
  };

  class StructureMapTargetListMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapTargetListMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapTargetListMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapTargetListMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapTargetListMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapTargetListMode_pskel* StructureMapTargetListMode_impl_;
    StructureMapTargetListMode_pskel (StructureMapTargetListMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapTargetListMode_list_pskel* value_parser_;
  };

  class StructureMapTransform_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapTransform_list ();

    // Constructor.
    //
    StructureMapTransform_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapTransform_list_pskel* StructureMapTransform_list_impl_;
    StructureMapTransform_list_pskel (StructureMapTransform_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapTransform_list_pskel_enums_[17UL];
  };

  class StructureMapTransform_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapTransform ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapTransform_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapTransform_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapTransform_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapTransform_pskel* StructureMapTransform_impl_;
    StructureMapTransform_pskel (StructureMapTransform_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapTransform_list_pskel* value_parser_;
  };

  class StructureMapSourceListMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapSourceListMode_list ();

    // Constructor.
    //
    StructureMapSourceListMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapSourceListMode_list_pskel* StructureMapSourceListMode_list_impl_;
    StructureMapSourceListMode_list_pskel (StructureMapSourceListMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapSourceListMode_list_pskel_enums_[5UL];
  };

  class StructureMapSourceListMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapSourceListMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapSourceListMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapSourceListMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapSourceListMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapSourceListMode_pskel* StructureMapSourceListMode_impl_;
    StructureMapSourceListMode_pskel (StructureMapSourceListMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapSourceListMode_list_pskel* value_parser_;
  };

  class StructureMapGroupTypeMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapGroupTypeMode_list ();

    // Constructor.
    //
    StructureMapGroupTypeMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapGroupTypeMode_list_pskel* StructureMapGroupTypeMode_list_impl_;
    StructureMapGroupTypeMode_list_pskel (StructureMapGroupTypeMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapGroupTypeMode_list_pskel_enums_[3UL];
  };

  class StructureMapGroupTypeMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapGroupTypeMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapGroupTypeMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapGroupTypeMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapGroupTypeMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapGroupTypeMode_pskel* StructureMapGroupTypeMode_impl_;
    StructureMapGroupTypeMode_pskel (StructureMapGroupTypeMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapGroupTypeMode_list_pskel* value_parser_;
  };

  class StructureMapModelMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_StructureMapModelMode_list ();

    // Constructor.
    //
    StructureMapModelMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapModelMode_list_pskel* StructureMapModelMode_list_impl_;
    StructureMapModelMode_list_pskel (StructureMapModelMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_StructureMapModelMode_list_pskel_enums_[4UL];
  };

  class StructureMapModelMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_StructureMapModelMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::StructureMapModelMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::StructureMapModelMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    StructureMapModelMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    StructureMapModelMode_pskel* StructureMapModelMode_impl_;
    StructureMapModelMode_pskel (StructureMapModelMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::StructureMapModelMode_list_pskel* value_parser_;
  };

  class Subscription_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    status ();

    virtual void
    contact ();

    virtual void
    end ();

    virtual void
    reason ();

    virtual void
    criteria ();

    virtual void
    error ();

    virtual void
    channel ();

    virtual void
    post_Subscription ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::SubscriptionStatus_pskel& /* status */,
             ::fhir::ContactPoint_pskel& /* contact */,
             ::fhir::instant_pskel& /* end */,
             ::fhir::string_pskel& /* reason */,
             ::fhir::string_pskel& /* criteria */,
             ::fhir::string_pskel& /* error */,
             ::fhir::Subscription_Channel_pskel& /* channel */);

    // Individual element parsers.
    //
    void
    status_parser (::fhir::SubscriptionStatus_pskel&);

    void
    contact_parser (::fhir::ContactPoint_pskel&);

    void
    end_parser (::fhir::instant_pskel&);

    void
    reason_parser (::fhir::string_pskel&);

    void
    criteria_parser (::fhir::string_pskel&);

    void
    error_parser (::fhir::string_pskel&);

    void
    channel_parser (::fhir::Subscription_Channel_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Subscription_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Subscription_pskel* Subscription_impl_;
    Subscription_pskel (Subscription_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::SubscriptionStatus_pskel* status_parser_;
    ::fhir::ContactPoint_pskel* contact_parser_;
    ::fhir::instant_pskel* end_parser_;
    ::fhir::string_pskel* reason_parser_;
    ::fhir::string_pskel* criteria_parser_;
    ::fhir::string_pskel* error_parser_;
    ::fhir::Subscription_Channel_pskel* channel_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Subscription_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Subscription_Channel_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    endpoint ();

    virtual void
    payload ();

    virtual void
    header ();

    virtual void
    post_Subscription_Channel ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::SubscriptionChannelType_pskel& /* type */,
             ::fhir::url_pskel& /* endpoint */,
             ::fhir::code_pskel& /* payload */,
             ::fhir::string_pskel& /* header */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::SubscriptionChannelType_pskel&);

    void
    endpoint_parser (::fhir::url_pskel&);

    void
    payload_parser (::fhir::code_pskel&);

    void
    header_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Subscription_Channel_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Subscription_Channel_pskel* Subscription_Channel_impl_;
    Subscription_Channel_pskel (Subscription_Channel_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::SubscriptionChannelType_pskel* type_parser_;
    ::fhir::url_pskel* endpoint_parser_;
    ::fhir::code_pskel* payload_parser_;
    ::fhir::string_pskel* header_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Subscription_Channel_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubscriptionStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SubscriptionStatus_list ();

    // Constructor.
    //
    SubscriptionStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubscriptionStatus_list_pskel* SubscriptionStatus_list_impl_;
    SubscriptionStatus_list_pskel (SubscriptionStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_SubscriptionStatus_list_pskel_enums_[4UL];
  };

  class SubscriptionStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SubscriptionStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SubscriptionStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SubscriptionStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubscriptionStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubscriptionStatus_pskel* SubscriptionStatus_impl_;
    SubscriptionStatus_pskel (SubscriptionStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SubscriptionStatus_list_pskel* value_parser_;
  };

  class SubscriptionChannelType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SubscriptionChannelType_list ();

    // Constructor.
    //
    SubscriptionChannelType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubscriptionChannelType_list_pskel* SubscriptionChannelType_list_impl_;
    SubscriptionChannelType_list_pskel (SubscriptionChannelType_list_pskel*, void*);

    protected:
    static const char* const _xsde_SubscriptionChannelType_list_pskel_enums_[5UL];
  };

  class SubscriptionChannelType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SubscriptionChannelType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SubscriptionChannelType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SubscriptionChannelType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubscriptionChannelType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubscriptionChannelType_pskel* SubscriptionChannelType_impl_;
    SubscriptionChannelType_pskel (SubscriptionChannelType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SubscriptionChannelType_list_pskel* value_parser_;
  };

  class Substance_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    category ();

    virtual void
    code ();

    virtual void
    description ();

    virtual void
    instance ();

    virtual void
    ingredient ();

    virtual void
    post_Substance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FHIRSubstanceStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Substance_Instance_pskel& /* instance */,
             ::fhir::Substance_Ingredient_pskel& /* ingredient */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FHIRSubstanceStatus_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    instance_parser (::fhir::Substance_Instance_pskel&);

    void
    ingredient_parser (::fhir::Substance_Ingredient_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Substance_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Substance_pskel* Substance_impl_;
    Substance_pskel (Substance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FHIRSubstanceStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Substance_Instance_pskel* instance_parser_;
    ::fhir::Substance_Ingredient_pskel* ingredient_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Substance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Substance_Instance_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    expiry ();

    virtual void
    quantity ();

    virtual void
    post_Substance_Instance ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::dateTime_pskel& /* expiry */,
             ::fhir::Quantity_pskel& /* quantity */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    expiry_parser (::fhir::dateTime_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Substance_Instance_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Substance_Instance_pskel* Substance_Instance_impl_;
    Substance_Instance_pskel (Substance_Instance_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::dateTime_pskel* expiry_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Substance_Instance_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Substance_Ingredient_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    quantity ();

    virtual void
    substanceCodeableConcept ();

    virtual void
    substanceReference ();

    virtual void
    post_Substance_Ingredient ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Ratio_pskel& /* quantity */,
             ::fhir::CodeableConcept_pskel& /* substanceCodeableConcept */,
             ::fhir::Reference_pskel& /* substanceReference */);

    // Individual element parsers.
    //
    void
    quantity_parser (::fhir::Ratio_pskel&);

    void
    substanceCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    substanceReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Substance_Ingredient_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Substance_Ingredient_pskel* Substance_Ingredient_impl_;
    Substance_Ingredient_pskel (Substance_Ingredient_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Ratio_pskel* quantity_parser_;
    ::fhir::CodeableConcept_pskel* substanceCodeableConcept_parser_;
    ::fhir::Reference_pskel* substanceReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Substance_Ingredient_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class FHIRSubstanceStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FHIRSubstanceStatus_list ();

    // Constructor.
    //
    FHIRSubstanceStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    FHIRSubstanceStatus_list_pskel* FHIRSubstanceStatus_list_impl_;
    FHIRSubstanceStatus_list_pskel (FHIRSubstanceStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_FHIRSubstanceStatus_list_pskel_enums_[3UL];
  };

  class FHIRSubstanceStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_FHIRSubstanceStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::FHIRSubstanceStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::FHIRSubstanceStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    FHIRSubstanceStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    FHIRSubstanceStatus_pskel* FHIRSubstanceStatus_impl_;
    FHIRSubstanceStatus_pskel (FHIRSubstanceStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::FHIRSubstanceStatus_list_pskel* value_parser_;
  };

  class SubstanceNucleicAcid_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequenceType ();

    virtual void
    numberOfSubunits ();

    virtual void
    areaOfHybridisation ();

    virtual void
    oligoNucleotideType ();

    virtual void
    subunit ();

    virtual void
    post_SubstanceNucleicAcid ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* sequenceType */,
             ::fhir::integer_pskel& /* numberOfSubunits */,
             ::fhir::string_pskel& /* areaOfHybridisation */,
             ::fhir::CodeableConcept_pskel& /* oligoNucleotideType */,
             ::fhir::SubstanceNucleicAcid_Subunit_pskel& /* subunit */);

    // Individual element parsers.
    //
    void
    sequenceType_parser (::fhir::CodeableConcept_pskel&);

    void
    numberOfSubunits_parser (::fhir::integer_pskel&);

    void
    areaOfHybridisation_parser (::fhir::string_pskel&);

    void
    oligoNucleotideType_parser (::fhir::CodeableConcept_pskel&);

    void
    subunit_parser (::fhir::SubstanceNucleicAcid_Subunit_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceNucleicAcid_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceNucleicAcid_pskel* SubstanceNucleicAcid_impl_;
    SubstanceNucleicAcid_pskel (SubstanceNucleicAcid_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* sequenceType_parser_;
    ::fhir::integer_pskel* numberOfSubunits_parser_;
    ::fhir::string_pskel* areaOfHybridisation_parser_;
    ::fhir::CodeableConcept_pskel* oligoNucleotideType_parser_;
    ::fhir::SubstanceNucleicAcid_Subunit_pskel* subunit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceNucleicAcid_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceNucleicAcid_Subunit_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    subunit ();

    virtual void
    sequence ();

    virtual void
    length ();

    virtual void
    sequenceAttachment ();

    virtual void
    fivePrime ();

    virtual void
    threePrime ();

    virtual void
    linkage ();

    virtual void
    sugar ();

    virtual void
    post_SubstanceNucleicAcid_Subunit ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* subunit */,
             ::fhir::string_pskel& /* sequence */,
             ::fhir::integer_pskel& /* length */,
             ::fhir::Attachment_pskel& /* sequenceAttachment */,
             ::fhir::CodeableConcept_pskel& /* fivePrime */,
             ::fhir::CodeableConcept_pskel& /* threePrime */,
             ::fhir::SubstanceNucleicAcid_Linkage_pskel& /* linkage */,
             ::fhir::SubstanceNucleicAcid_Sugar_pskel& /* sugar */);

    // Individual element parsers.
    //
    void
    subunit_parser (::fhir::integer_pskel&);

    void
    sequence_parser (::fhir::string_pskel&);

    void
    length_parser (::fhir::integer_pskel&);

    void
    sequenceAttachment_parser (::fhir::Attachment_pskel&);

    void
    fivePrime_parser (::fhir::CodeableConcept_pskel&);

    void
    threePrime_parser (::fhir::CodeableConcept_pskel&);

    void
    linkage_parser (::fhir::SubstanceNucleicAcid_Linkage_pskel&);

    void
    sugar_parser (::fhir::SubstanceNucleicAcid_Sugar_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceNucleicAcid_Subunit_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceNucleicAcid_Subunit_pskel* SubstanceNucleicAcid_Subunit_impl_;
    SubstanceNucleicAcid_Subunit_pskel (SubstanceNucleicAcid_Subunit_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* subunit_parser_;
    ::fhir::string_pskel* sequence_parser_;
    ::fhir::integer_pskel* length_parser_;
    ::fhir::Attachment_pskel* sequenceAttachment_parser_;
    ::fhir::CodeableConcept_pskel* fivePrime_parser_;
    ::fhir::CodeableConcept_pskel* threePrime_parser_;
    ::fhir::SubstanceNucleicAcid_Linkage_pskel* linkage_parser_;
    ::fhir::SubstanceNucleicAcid_Sugar_pskel* sugar_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceNucleicAcid_Subunit_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceNucleicAcid_Linkage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    connectivity ();

    virtual void
    identifier ();

    virtual void
    name ();

    virtual void
    residueSite ();

    virtual void
    post_SubstanceNucleicAcid_Linkage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* connectivity */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* residueSite */);

    // Individual element parsers.
    //
    void
    connectivity_parser (::fhir::string_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    residueSite_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceNucleicAcid_Linkage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceNucleicAcid_Linkage_pskel* SubstanceNucleicAcid_Linkage_impl_;
    SubstanceNucleicAcid_Linkage_pskel (SubstanceNucleicAcid_Linkage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* connectivity_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* residueSite_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceNucleicAcid_Linkage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceNucleicAcid_Sugar_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    name ();

    virtual void
    residueSite ();

    virtual void
    post_SubstanceNucleicAcid_Sugar ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* residueSite */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    residueSite_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceNucleicAcid_Sugar_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceNucleicAcid_Sugar_pskel* SubstanceNucleicAcid_Sugar_impl_;
    SubstanceNucleicAcid_Sugar_pskel (SubstanceNucleicAcid_Sugar_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* residueSite_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceNucleicAcid_Sugar_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstancePolymer_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    class_ ();

    virtual void
    geometry ();

    virtual void
    copolymerConnectivity ();

    virtual void
    modification ();

    virtual void
    monomerSet ();

    virtual void
    repeat ();

    virtual void
    post_SubstancePolymer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* class */,
             ::fhir::CodeableConcept_pskel& /* geometry */,
             ::fhir::CodeableConcept_pskel& /* copolymerConnectivity */,
             ::fhir::string_pskel& /* modification */,
             ::fhir::SubstancePolymer_MonomerSet_pskel& /* monomerSet */,
             ::fhir::SubstancePolymer_Repeat_pskel& /* repeat */);

    // Individual element parsers.
    //
    void
    class__parser (::fhir::CodeableConcept_pskel&);

    void
    geometry_parser (::fhir::CodeableConcept_pskel&);

    void
    copolymerConnectivity_parser (::fhir::CodeableConcept_pskel&);

    void
    modification_parser (::fhir::string_pskel&);

    void
    monomerSet_parser (::fhir::SubstancePolymer_MonomerSet_pskel&);

    void
    repeat_parser (::fhir::SubstancePolymer_Repeat_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstancePolymer_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstancePolymer_pskel* SubstancePolymer_impl_;
    SubstancePolymer_pskel (SubstancePolymer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* class__parser_;
    ::fhir::CodeableConcept_pskel* geometry_parser_;
    ::fhir::CodeableConcept_pskel* copolymerConnectivity_parser_;
    ::fhir::string_pskel* modification_parser_;
    ::fhir::SubstancePolymer_MonomerSet_pskel* monomerSet_parser_;
    ::fhir::SubstancePolymer_Repeat_pskel* repeat_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstancePolymer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstancePolymer_MonomerSet_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    ratioType ();

    virtual void
    startingMaterial ();

    virtual void
    post_SubstancePolymer_MonomerSet ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* ratioType */,
             ::fhir::SubstancePolymer_StartingMaterial_pskel& /* startingMaterial */);

    // Individual element parsers.
    //
    void
    ratioType_parser (::fhir::CodeableConcept_pskel&);

    void
    startingMaterial_parser (::fhir::SubstancePolymer_StartingMaterial_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstancePolymer_MonomerSet_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstancePolymer_MonomerSet_pskel* SubstancePolymer_MonomerSet_impl_;
    SubstancePolymer_MonomerSet_pskel (SubstancePolymer_MonomerSet_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* ratioType_parser_;
    ::fhir::SubstancePolymer_StartingMaterial_pskel* startingMaterial_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstancePolymer_MonomerSet_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstancePolymer_StartingMaterial_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    material ();

    virtual void
    type ();

    virtual void
    isDefining ();

    virtual void
    amount ();

    virtual void
    post_SubstancePolymer_StartingMaterial ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* material */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::boolean_pskel& /* isDefining */,
             ::fhir::SubstanceAmount_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    material_parser (::fhir::CodeableConcept_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    isDefining_parser (::fhir::boolean_pskel&);

    void
    amount_parser (::fhir::SubstanceAmount_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstancePolymer_StartingMaterial_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstancePolymer_StartingMaterial_pskel* SubstancePolymer_StartingMaterial_impl_;
    SubstancePolymer_StartingMaterial_pskel (SubstancePolymer_StartingMaterial_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* material_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::boolean_pskel* isDefining_parser_;
    ::fhir::SubstanceAmount_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstancePolymer_StartingMaterial_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstancePolymer_Repeat_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    numberOfUnits ();

    virtual void
    averageMolecularFormula ();

    virtual void
    repeatUnitAmountType ();

    virtual void
    repeatUnit ();

    virtual void
    post_SubstancePolymer_Repeat ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* numberOfUnits */,
             ::fhir::string_pskel& /* averageMolecularFormula */,
             ::fhir::CodeableConcept_pskel& /* repeatUnitAmountType */,
             ::fhir::SubstancePolymer_RepeatUnit_pskel& /* repeatUnit */);

    // Individual element parsers.
    //
    void
    numberOfUnits_parser (::fhir::integer_pskel&);

    void
    averageMolecularFormula_parser (::fhir::string_pskel&);

    void
    repeatUnitAmountType_parser (::fhir::CodeableConcept_pskel&);

    void
    repeatUnit_parser (::fhir::SubstancePolymer_RepeatUnit_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstancePolymer_Repeat_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstancePolymer_Repeat_pskel* SubstancePolymer_Repeat_impl_;
    SubstancePolymer_Repeat_pskel (SubstancePolymer_Repeat_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* numberOfUnits_parser_;
    ::fhir::string_pskel* averageMolecularFormula_parser_;
    ::fhir::CodeableConcept_pskel* repeatUnitAmountType_parser_;
    ::fhir::SubstancePolymer_RepeatUnit_pskel* repeatUnit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstancePolymer_Repeat_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstancePolymer_RepeatUnit_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    orientationOfPolymerisation ();

    virtual void
    repeatUnit ();

    virtual void
    amount ();

    virtual void
    degreeOfPolymerisation ();

    virtual void
    structuralRepresentation ();

    virtual void
    post_SubstancePolymer_RepeatUnit ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* orientationOfPolymerisation */,
             ::fhir::string_pskel& /* repeatUnit */,
             ::fhir::SubstanceAmount_pskel& /* amount */,
             ::fhir::SubstancePolymer_DegreeOfPolymerisation_pskel& /* degreeOfPolymerisation */,
             ::fhir::SubstancePolymer_StructuralRepresentation_pskel& /* structuralRepresentation */);

    // Individual element parsers.
    //
    void
    orientationOfPolymerisation_parser (::fhir::CodeableConcept_pskel&);

    void
    repeatUnit_parser (::fhir::string_pskel&);

    void
    amount_parser (::fhir::SubstanceAmount_pskel&);

    void
    degreeOfPolymerisation_parser (::fhir::SubstancePolymer_DegreeOfPolymerisation_pskel&);

    void
    structuralRepresentation_parser (::fhir::SubstancePolymer_StructuralRepresentation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstancePolymer_RepeatUnit_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstancePolymer_RepeatUnit_pskel* SubstancePolymer_RepeatUnit_impl_;
    SubstancePolymer_RepeatUnit_pskel (SubstancePolymer_RepeatUnit_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* orientationOfPolymerisation_parser_;
    ::fhir::string_pskel* repeatUnit_parser_;
    ::fhir::SubstanceAmount_pskel* amount_parser_;
    ::fhir::SubstancePolymer_DegreeOfPolymerisation_pskel* degreeOfPolymerisation_parser_;
    ::fhir::SubstancePolymer_StructuralRepresentation_pskel* structuralRepresentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstancePolymer_RepeatUnit_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstancePolymer_DegreeOfPolymerisation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    degree ();

    virtual void
    amount ();

    virtual void
    post_SubstancePolymer_DegreeOfPolymerisation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* degree */,
             ::fhir::SubstanceAmount_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    degree_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::SubstanceAmount_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstancePolymer_DegreeOfPolymerisation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstancePolymer_DegreeOfPolymerisation_pskel* SubstancePolymer_DegreeOfPolymerisation_impl_;
    SubstancePolymer_DegreeOfPolymerisation_pskel (SubstancePolymer_DegreeOfPolymerisation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* degree_parser_;
    ::fhir::SubstanceAmount_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstancePolymer_DegreeOfPolymerisation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstancePolymer_StructuralRepresentation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    representation ();

    virtual void
    attachment ();

    virtual void
    post_SubstancePolymer_StructuralRepresentation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* representation */,
             ::fhir::Attachment_pskel& /* attachment */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    representation_parser (::fhir::string_pskel&);

    void
    attachment_parser (::fhir::Attachment_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstancePolymer_StructuralRepresentation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstancePolymer_StructuralRepresentation_pskel* SubstancePolymer_StructuralRepresentation_impl_;
    SubstancePolymer_StructuralRepresentation_pskel (SubstancePolymer_StructuralRepresentation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* representation_parser_;
    ::fhir::Attachment_pskel* attachment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstancePolymer_StructuralRepresentation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceProtein_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sequenceType ();

    virtual void
    numberOfSubunits ();

    virtual void
    disulfideLinkage ();

    virtual void
    subunit ();

    virtual void
    post_SubstanceProtein ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* sequenceType */,
             ::fhir::integer_pskel& /* numberOfSubunits */,
             ::fhir::string_pskel& /* disulfideLinkage */,
             ::fhir::SubstanceProtein_Subunit_pskel& /* subunit */);

    // Individual element parsers.
    //
    void
    sequenceType_parser (::fhir::CodeableConcept_pskel&);

    void
    numberOfSubunits_parser (::fhir::integer_pskel&);

    void
    disulfideLinkage_parser (::fhir::string_pskel&);

    void
    subunit_parser (::fhir::SubstanceProtein_Subunit_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceProtein_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceProtein_pskel* SubstanceProtein_impl_;
    SubstanceProtein_pskel (SubstanceProtein_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* sequenceType_parser_;
    ::fhir::integer_pskel* numberOfSubunits_parser_;
    ::fhir::string_pskel* disulfideLinkage_parser_;
    ::fhir::SubstanceProtein_Subunit_pskel* subunit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceProtein_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceProtein_Subunit_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    subunit ();

    virtual void
    sequence ();

    virtual void
    length ();

    virtual void
    sequenceAttachment ();

    virtual void
    nTerminalModificationId ();

    virtual void
    nTerminalModification ();

    virtual void
    cTerminalModificationId ();

    virtual void
    cTerminalModification ();

    virtual void
    post_SubstanceProtein_Subunit ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* subunit */,
             ::fhir::string_pskel& /* sequence */,
             ::fhir::integer_pskel& /* length */,
             ::fhir::Attachment_pskel& /* sequenceAttachment */,
             ::fhir::Identifier_pskel& /* nTerminalModificationId */,
             ::fhir::string_pskel& /* nTerminalModification */,
             ::fhir::Identifier_pskel& /* cTerminalModificationId */,
             ::fhir::string_pskel& /* cTerminalModification */);

    // Individual element parsers.
    //
    void
    subunit_parser (::fhir::integer_pskel&);

    void
    sequence_parser (::fhir::string_pskel&);

    void
    length_parser (::fhir::integer_pskel&);

    void
    sequenceAttachment_parser (::fhir::Attachment_pskel&);

    void
    nTerminalModificationId_parser (::fhir::Identifier_pskel&);

    void
    nTerminalModification_parser (::fhir::string_pskel&);

    void
    cTerminalModificationId_parser (::fhir::Identifier_pskel&);

    void
    cTerminalModification_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceProtein_Subunit_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceProtein_Subunit_pskel* SubstanceProtein_Subunit_impl_;
    SubstanceProtein_Subunit_pskel (SubstanceProtein_Subunit_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* subunit_parser_;
    ::fhir::string_pskel* sequence_parser_;
    ::fhir::integer_pskel* length_parser_;
    ::fhir::Attachment_pskel* sequenceAttachment_parser_;
    ::fhir::Identifier_pskel* nTerminalModificationId_parser_;
    ::fhir::string_pskel* nTerminalModification_parser_;
    ::fhir::Identifier_pskel* cTerminalModificationId_parser_;
    ::fhir::string_pskel* cTerminalModification_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceProtein_Subunit_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceReferenceInformation_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    comment ();

    virtual void
    gene ();

    virtual void
    geneElement ();

    virtual void
    classification ();

    virtual void
    target ();

    virtual void
    post_SubstanceReferenceInformation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::SubstanceReferenceInformation_Gene_pskel& /* gene */,
             ::fhir::SubstanceReferenceInformation_GeneElement_pskel& /* geneElement */,
             ::fhir::SubstanceReferenceInformation_Classification_pskel& /* classification */,
             ::fhir::SubstanceReferenceInformation_Target_pskel& /* target */);

    // Individual element parsers.
    //
    void
    comment_parser (::fhir::string_pskel&);

    void
    gene_parser (::fhir::SubstanceReferenceInformation_Gene_pskel&);

    void
    geneElement_parser (::fhir::SubstanceReferenceInformation_GeneElement_pskel&);

    void
    classification_parser (::fhir::SubstanceReferenceInformation_Classification_pskel&);

    void
    target_parser (::fhir::SubstanceReferenceInformation_Target_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceReferenceInformation_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceReferenceInformation_pskel* SubstanceReferenceInformation_impl_;
    SubstanceReferenceInformation_pskel (SubstanceReferenceInformation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* comment_parser_;
    ::fhir::SubstanceReferenceInformation_Gene_pskel* gene_parser_;
    ::fhir::SubstanceReferenceInformation_GeneElement_pskel* geneElement_parser_;
    ::fhir::SubstanceReferenceInformation_Classification_pskel* classification_parser_;
    ::fhir::SubstanceReferenceInformation_Target_pskel* target_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceReferenceInformation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceReferenceInformation_Gene_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    geneSequenceOrigin ();

    virtual void
    gene ();

    virtual void
    source ();

    virtual void
    post_SubstanceReferenceInformation_Gene ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* geneSequenceOrigin */,
             ::fhir::CodeableConcept_pskel& /* gene */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    geneSequenceOrigin_parser (::fhir::CodeableConcept_pskel&);

    void
    gene_parser (::fhir::CodeableConcept_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceReferenceInformation_Gene_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceReferenceInformation_Gene_pskel* SubstanceReferenceInformation_Gene_impl_;
    SubstanceReferenceInformation_Gene_pskel (SubstanceReferenceInformation_Gene_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* geneSequenceOrigin_parser_;
    ::fhir::CodeableConcept_pskel* gene_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceReferenceInformation_Gene_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceReferenceInformation_GeneElement_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    element ();

    virtual void
    source ();

    virtual void
    post_SubstanceReferenceInformation_GeneElement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Identifier_pskel& /* element */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    element_parser (::fhir::Identifier_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceReferenceInformation_GeneElement_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceReferenceInformation_GeneElement_pskel* SubstanceReferenceInformation_GeneElement_impl_;
    SubstanceReferenceInformation_GeneElement_pskel (SubstanceReferenceInformation_GeneElement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Identifier_pskel* element_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceReferenceInformation_GeneElement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceReferenceInformation_Classification_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    domain ();

    virtual void
    classification ();

    virtual void
    subtype ();

    virtual void
    source ();

    virtual void
    post_SubstanceReferenceInformation_Classification ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* domain */,
             ::fhir::CodeableConcept_pskel& /* classification */,
             ::fhir::CodeableConcept_pskel& /* subtype */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    domain_parser (::fhir::CodeableConcept_pskel&);

    void
    classification_parser (::fhir::CodeableConcept_pskel&);

    void
    subtype_parser (::fhir::CodeableConcept_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceReferenceInformation_Classification_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceReferenceInformation_Classification_pskel* SubstanceReferenceInformation_Classification_impl_;
    SubstanceReferenceInformation_Classification_pskel (SubstanceReferenceInformation_Classification_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* domain_parser_;
    ::fhir::CodeableConcept_pskel* classification_parser_;
    ::fhir::CodeableConcept_pskel* subtype_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceReferenceInformation_Classification_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceReferenceInformation_Target_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    target ();

    virtual void
    type ();

    virtual void
    interaction ();

    virtual void
    organism ();

    virtual void
    organismType ();

    virtual void
    amountQuantity ();

    virtual void
    amountRange ();

    virtual void
    amountString ();

    virtual void
    amountType ();

    virtual void
    source ();

    virtual void
    post_SubstanceReferenceInformation_Target ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* target */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* interaction */,
             ::fhir::CodeableConcept_pskel& /* organism */,
             ::fhir::CodeableConcept_pskel& /* organismType */,
             ::fhir::Quantity_pskel& /* amountQuantity */,
             ::fhir::Range_pskel& /* amountRange */,
             ::fhir::string_pskel& /* amountString */,
             ::fhir::CodeableConcept_pskel& /* amountType */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    target_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    interaction_parser (::fhir::CodeableConcept_pskel&);

    void
    organism_parser (::fhir::CodeableConcept_pskel&);

    void
    organismType_parser (::fhir::CodeableConcept_pskel&);

    void
    amountQuantity_parser (::fhir::Quantity_pskel&);

    void
    amountRange_parser (::fhir::Range_pskel&);

    void
    amountString_parser (::fhir::string_pskel&);

    void
    amountType_parser (::fhir::CodeableConcept_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceReferenceInformation_Target_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceReferenceInformation_Target_pskel* SubstanceReferenceInformation_Target_impl_;
    SubstanceReferenceInformation_Target_pskel (SubstanceReferenceInformation_Target_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* target_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* interaction_parser_;
    ::fhir::CodeableConcept_pskel* organism_parser_;
    ::fhir::CodeableConcept_pskel* organismType_parser_;
    ::fhir::Quantity_pskel* amountQuantity_parser_;
    ::fhir::Range_pskel* amountRange_parser_;
    ::fhir::string_pskel* amountString_parser_;
    ::fhir::CodeableConcept_pskel* amountType_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceReferenceInformation_Target_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sourceMaterialClass ();

    virtual void
    sourceMaterialType ();

    virtual void
    sourceMaterialState ();

    virtual void
    organismId ();

    virtual void
    organismName ();

    virtual void
    parentSubstanceId ();

    virtual void
    parentSubstanceName ();

    virtual void
    countryOfOrigin ();

    virtual void
    geographicalLocation ();

    virtual void
    developmentStage ();

    virtual void
    fractionDescription ();

    virtual void
    organism ();

    virtual void
    partDescription ();

    virtual void
    post_SubstanceSourceMaterial ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* sourceMaterialClass */,
             ::fhir::CodeableConcept_pskel& /* sourceMaterialType */,
             ::fhir::CodeableConcept_pskel& /* sourceMaterialState */,
             ::fhir::Identifier_pskel& /* organismId */,
             ::fhir::string_pskel& /* organismName */,
             ::fhir::Identifier_pskel& /* parentSubstanceId */,
             ::fhir::string_pskel& /* parentSubstanceName */,
             ::fhir::CodeableConcept_pskel& /* countryOfOrigin */,
             ::fhir::string_pskel& /* geographicalLocation */,
             ::fhir::CodeableConcept_pskel& /* developmentStage */,
             ::fhir::SubstanceSourceMaterial_FractionDescription_pskel& /* fractionDescription */,
             ::fhir::SubstanceSourceMaterial_Organism_pskel& /* organism */,
             ::fhir::SubstanceSourceMaterial_PartDescription_pskel& /* partDescription */);

    // Individual element parsers.
    //
    void
    sourceMaterialClass_parser (::fhir::CodeableConcept_pskel&);

    void
    sourceMaterialType_parser (::fhir::CodeableConcept_pskel&);

    void
    sourceMaterialState_parser (::fhir::CodeableConcept_pskel&);

    void
    organismId_parser (::fhir::Identifier_pskel&);

    void
    organismName_parser (::fhir::string_pskel&);

    void
    parentSubstanceId_parser (::fhir::Identifier_pskel&);

    void
    parentSubstanceName_parser (::fhir::string_pskel&);

    void
    countryOfOrigin_parser (::fhir::CodeableConcept_pskel&);

    void
    geographicalLocation_parser (::fhir::string_pskel&);

    void
    developmentStage_parser (::fhir::CodeableConcept_pskel&);

    void
    fractionDescription_parser (::fhir::SubstanceSourceMaterial_FractionDescription_pskel&);

    void
    organism_parser (::fhir::SubstanceSourceMaterial_Organism_pskel&);

    void
    partDescription_parser (::fhir::SubstanceSourceMaterial_PartDescription_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_pskel* SubstanceSourceMaterial_impl_;
    SubstanceSourceMaterial_pskel (SubstanceSourceMaterial_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* sourceMaterialClass_parser_;
    ::fhir::CodeableConcept_pskel* sourceMaterialType_parser_;
    ::fhir::CodeableConcept_pskel* sourceMaterialState_parser_;
    ::fhir::Identifier_pskel* organismId_parser_;
    ::fhir::string_pskel* organismName_parser_;
    ::fhir::Identifier_pskel* parentSubstanceId_parser_;
    ::fhir::string_pskel* parentSubstanceName_parser_;
    ::fhir::CodeableConcept_pskel* countryOfOrigin_parser_;
    ::fhir::string_pskel* geographicalLocation_parser_;
    ::fhir::CodeableConcept_pskel* developmentStage_parser_;
    ::fhir::SubstanceSourceMaterial_FractionDescription_pskel* fractionDescription_parser_;
    ::fhir::SubstanceSourceMaterial_Organism_pskel* organism_parser_;
    ::fhir::SubstanceSourceMaterial_PartDescription_pskel* partDescription_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_FractionDescription_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    fraction ();

    virtual void
    materialType ();

    virtual void
    post_SubstanceSourceMaterial_FractionDescription ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* fraction */,
             ::fhir::CodeableConcept_pskel& /* materialType */);

    // Individual element parsers.
    //
    void
    fraction_parser (::fhir::string_pskel&);

    void
    materialType_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_FractionDescription_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_FractionDescription_pskel* SubstanceSourceMaterial_FractionDescription_impl_;
    SubstanceSourceMaterial_FractionDescription_pskel (SubstanceSourceMaterial_FractionDescription_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* fraction_parser_;
    ::fhir::CodeableConcept_pskel* materialType_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_FractionDescription_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_Organism_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    family ();

    virtual void
    genus ();

    virtual void
    species ();

    virtual void
    intraspecificType ();

    virtual void
    intraspecificDescription ();

    virtual void
    author ();

    virtual void
    hybrid ();

    virtual void
    organismGeneral ();

    virtual void
    post_SubstanceSourceMaterial_Organism ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* family */,
             ::fhir::CodeableConcept_pskel& /* genus */,
             ::fhir::CodeableConcept_pskel& /* species */,
             ::fhir::CodeableConcept_pskel& /* intraspecificType */,
             ::fhir::string_pskel& /* intraspecificDescription */,
             ::fhir::SubstanceSourceMaterial_Author_pskel& /* author */,
             ::fhir::SubstanceSourceMaterial_Hybrid_pskel& /* hybrid */,
             ::fhir::SubstanceSourceMaterial_OrganismGeneral_pskel& /* organismGeneral */);

    // Individual element parsers.
    //
    void
    family_parser (::fhir::CodeableConcept_pskel&);

    void
    genus_parser (::fhir::CodeableConcept_pskel&);

    void
    species_parser (::fhir::CodeableConcept_pskel&);

    void
    intraspecificType_parser (::fhir::CodeableConcept_pskel&);

    void
    intraspecificDescription_parser (::fhir::string_pskel&);

    void
    author_parser (::fhir::SubstanceSourceMaterial_Author_pskel&);

    void
    hybrid_parser (::fhir::SubstanceSourceMaterial_Hybrid_pskel&);

    void
    organismGeneral_parser (::fhir::SubstanceSourceMaterial_OrganismGeneral_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_Organism_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_Organism_pskel* SubstanceSourceMaterial_Organism_impl_;
    SubstanceSourceMaterial_Organism_pskel (SubstanceSourceMaterial_Organism_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* family_parser_;
    ::fhir::CodeableConcept_pskel* genus_parser_;
    ::fhir::CodeableConcept_pskel* species_parser_;
    ::fhir::CodeableConcept_pskel* intraspecificType_parser_;
    ::fhir::string_pskel* intraspecificDescription_parser_;
    ::fhir::SubstanceSourceMaterial_Author_pskel* author_parser_;
    ::fhir::SubstanceSourceMaterial_Hybrid_pskel* hybrid_parser_;
    ::fhir::SubstanceSourceMaterial_OrganismGeneral_pskel* organismGeneral_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_Organism_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_Author_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    authorType ();

    virtual void
    authorDescription ();

    virtual void
    post_SubstanceSourceMaterial_Author ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* authorType */,
             ::fhir::string_pskel& /* authorDescription */);

    // Individual element parsers.
    //
    void
    authorType_parser (::fhir::CodeableConcept_pskel&);

    void
    authorDescription_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_Author_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_Author_pskel* SubstanceSourceMaterial_Author_impl_;
    SubstanceSourceMaterial_Author_pskel (SubstanceSourceMaterial_Author_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* authorType_parser_;
    ::fhir::string_pskel* authorDescription_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_Author_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_Hybrid_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    maternalOrganismId ();

    virtual void
    maternalOrganismName ();

    virtual void
    paternalOrganismId ();

    virtual void
    paternalOrganismName ();

    virtual void
    hybridType ();

    virtual void
    post_SubstanceSourceMaterial_Hybrid ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* maternalOrganismId */,
             ::fhir::string_pskel& /* maternalOrganismName */,
             ::fhir::string_pskel& /* paternalOrganismId */,
             ::fhir::string_pskel& /* paternalOrganismName */,
             ::fhir::CodeableConcept_pskel& /* hybridType */);

    // Individual element parsers.
    //
    void
    maternalOrganismId_parser (::fhir::string_pskel&);

    void
    maternalOrganismName_parser (::fhir::string_pskel&);

    void
    paternalOrganismId_parser (::fhir::string_pskel&);

    void
    paternalOrganismName_parser (::fhir::string_pskel&);

    void
    hybridType_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_Hybrid_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_Hybrid_pskel* SubstanceSourceMaterial_Hybrid_impl_;
    SubstanceSourceMaterial_Hybrid_pskel (SubstanceSourceMaterial_Hybrid_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* maternalOrganismId_parser_;
    ::fhir::string_pskel* maternalOrganismName_parser_;
    ::fhir::string_pskel* paternalOrganismId_parser_;
    ::fhir::string_pskel* paternalOrganismName_parser_;
    ::fhir::CodeableConcept_pskel* hybridType_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_Hybrid_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_OrganismGeneral_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    kingdom ();

    virtual void
    phylum ();

    virtual void
    class_ ();

    virtual void
    order ();

    virtual void
    post_SubstanceSourceMaterial_OrganismGeneral ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* kingdom */,
             ::fhir::CodeableConcept_pskel& /* phylum */,
             ::fhir::CodeableConcept_pskel& /* class */,
             ::fhir::CodeableConcept_pskel& /* order */);

    // Individual element parsers.
    //
    void
    kingdom_parser (::fhir::CodeableConcept_pskel&);

    void
    phylum_parser (::fhir::CodeableConcept_pskel&);

    void
    class__parser (::fhir::CodeableConcept_pskel&);

    void
    order_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_OrganismGeneral_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_OrganismGeneral_pskel* SubstanceSourceMaterial_OrganismGeneral_impl_;
    SubstanceSourceMaterial_OrganismGeneral_pskel (SubstanceSourceMaterial_OrganismGeneral_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* kingdom_parser_;
    ::fhir::CodeableConcept_pskel* phylum_parser_;
    ::fhir::CodeableConcept_pskel* class__parser_;
    ::fhir::CodeableConcept_pskel* order_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_OrganismGeneral_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_PartDescription_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    part ();

    virtual void
    partLocation ();

    virtual void
    post_SubstanceSourceMaterial_PartDescription ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* part */,
             ::fhir::CodeableConcept_pskel& /* partLocation */);

    // Individual element parsers.
    //
    void
    part_parser (::fhir::CodeableConcept_pskel&);

    void
    partLocation_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_PartDescription_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_PartDescription_pskel* SubstanceSourceMaterial_PartDescription_impl_;
    SubstanceSourceMaterial_PartDescription_pskel (SubstanceSourceMaterial_PartDescription_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* part_parser_;
    ::fhir::CodeableConcept_pskel* partLocation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_PartDescription_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    status ();

    virtual void
    domain ();

    virtual void
    description ();

    virtual void
    source ();

    virtual void
    comment ();

    virtual void
    moiety ();

    virtual void
    property ();

    virtual void
    referenceInformation ();

    virtual void
    structure ();

    virtual void
    code ();

    virtual void
    name ();

    virtual void
    molecularWeight ();

    virtual void
    relationship ();

    virtual void
    nucleicAcid ();

    virtual void
    polymer ();

    virtual void
    protein ();

    virtual void
    sourceMaterial ();

    virtual void
    post_SubstanceSpecification ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* domain */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Reference_pskel& /* source */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::SubstanceSpecification_Moiety_pskel& /* moiety */,
             ::fhir::SubstanceSpecification_Property_pskel& /* property */,
             ::fhir::Reference_pskel& /* referenceInformation */,
             ::fhir::SubstanceSpecification_Structure_pskel& /* structure */,
             ::fhir::SubstanceSpecification_Code_pskel& /* code */,
             ::fhir::SubstanceSpecification_Name_pskel& /* name */,
             ::fhir::SubstanceSpecification_MolecularWeight_pskel& /* molecularWeight */,
             ::fhir::SubstanceSpecification_Relationship_pskel& /* relationship */,
             ::fhir::Reference_pskel& /* nucleicAcid */,
             ::fhir::Reference_pskel& /* polymer */,
             ::fhir::Reference_pskel& /* protein */,
             ::fhir::Reference_pskel& /* sourceMaterial */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    domain_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    void
    moiety_parser (::fhir::SubstanceSpecification_Moiety_pskel&);

    void
    property_parser (::fhir::SubstanceSpecification_Property_pskel&);

    void
    referenceInformation_parser (::fhir::Reference_pskel&);

    void
    structure_parser (::fhir::SubstanceSpecification_Structure_pskel&);

    void
    code_parser (::fhir::SubstanceSpecification_Code_pskel&);

    void
    name_parser (::fhir::SubstanceSpecification_Name_pskel&);

    void
    molecularWeight_parser (::fhir::SubstanceSpecification_MolecularWeight_pskel&);

    void
    relationship_parser (::fhir::SubstanceSpecification_Relationship_pskel&);

    void
    nucleicAcid_parser (::fhir::Reference_pskel&);

    void
    polymer_parser (::fhir::Reference_pskel&);

    void
    protein_parser (::fhir::Reference_pskel&);

    void
    sourceMaterial_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_pskel* SubstanceSpecification_impl_;
    SubstanceSpecification_pskel (SubstanceSpecification_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* domain_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Reference_pskel* source_parser_;
    ::fhir::string_pskel* comment_parser_;
    ::fhir::SubstanceSpecification_Moiety_pskel* moiety_parser_;
    ::fhir::SubstanceSpecification_Property_pskel* property_parser_;
    ::fhir::Reference_pskel* referenceInformation_parser_;
    ::fhir::SubstanceSpecification_Structure_pskel* structure_parser_;
    ::fhir::SubstanceSpecification_Code_pskel* code_parser_;
    ::fhir::SubstanceSpecification_Name_pskel* name_parser_;
    ::fhir::SubstanceSpecification_MolecularWeight_pskel* molecularWeight_parser_;
    ::fhir::SubstanceSpecification_Relationship_pskel* relationship_parser_;
    ::fhir::Reference_pskel* nucleicAcid_parser_;
    ::fhir::Reference_pskel* polymer_parser_;
    ::fhir::Reference_pskel* protein_parser_;
    ::fhir::Reference_pskel* sourceMaterial_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Moiety_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    role ();

    virtual void
    identifier ();

    virtual void
    name ();

    virtual void
    stereochemistry ();

    virtual void
    opticalActivity ();

    virtual void
    molecularFormula ();

    virtual void
    amountQuantity ();

    virtual void
    amountString ();

    virtual void
    post_SubstanceSpecification_Moiety ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* name */,
             ::fhir::CodeableConcept_pskel& /* stereochemistry */,
             ::fhir::CodeableConcept_pskel& /* opticalActivity */,
             ::fhir::string_pskel& /* molecularFormula */,
             ::fhir::Quantity_pskel& /* amountQuantity */,
             ::fhir::string_pskel& /* amountString */);

    // Individual element parsers.
    //
    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    stereochemistry_parser (::fhir::CodeableConcept_pskel&);

    void
    opticalActivity_parser (::fhir::CodeableConcept_pskel&);

    void
    molecularFormula_parser (::fhir::string_pskel&);

    void
    amountQuantity_parser (::fhir::Quantity_pskel&);

    void
    amountString_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Moiety_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Moiety_pskel* SubstanceSpecification_Moiety_impl_;
    SubstanceSpecification_Moiety_pskel (SubstanceSpecification_Moiety_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::CodeableConcept_pskel* stereochemistry_parser_;
    ::fhir::CodeableConcept_pskel* opticalActivity_parser_;
    ::fhir::string_pskel* molecularFormula_parser_;
    ::fhir::Quantity_pskel* amountQuantity_parser_;
    ::fhir::string_pskel* amountString_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Moiety_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Property_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    code ();

    virtual void
    parameters ();

    virtual void
    definingSubstanceReference ();

    virtual void
    definingSubstanceCodeableConcept ();

    virtual void
    amountQuantity ();

    virtual void
    amountString ();

    virtual void
    post_SubstanceSpecification_Property ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* parameters */,
             ::fhir::Reference_pskel& /* definingSubstanceReference */,
             ::fhir::CodeableConcept_pskel& /* definingSubstanceCodeableConcept */,
             ::fhir::Quantity_pskel& /* amountQuantity */,
             ::fhir::string_pskel& /* amountString */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    parameters_parser (::fhir::string_pskel&);

    void
    definingSubstanceReference_parser (::fhir::Reference_pskel&);

    void
    definingSubstanceCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    amountQuantity_parser (::fhir::Quantity_pskel&);

    void
    amountString_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Property_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Property_pskel* SubstanceSpecification_Property_impl_;
    SubstanceSpecification_Property_pskel (SubstanceSpecification_Property_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* parameters_parser_;
    ::fhir::Reference_pskel* definingSubstanceReference_parser_;
    ::fhir::CodeableConcept_pskel* definingSubstanceCodeableConcept_parser_;
    ::fhir::Quantity_pskel* amountQuantity_parser_;
    ::fhir::string_pskel* amountString_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Property_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Structure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    stereochemistry ();

    virtual void
    opticalActivity ();

    virtual void
    molecularFormula ();

    virtual void
    molecularFormulaByMoiety ();

    virtual void
    isotope ();

    virtual void
    molecularWeight ();

    virtual void
    source ();

    virtual void
    representation ();

    virtual void
    post_SubstanceSpecification_Structure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* stereochemistry */,
             ::fhir::CodeableConcept_pskel& /* opticalActivity */,
             ::fhir::string_pskel& /* molecularFormula */,
             ::fhir::string_pskel& /* molecularFormulaByMoiety */,
             ::fhir::SubstanceSpecification_Isotope_pskel& /* isotope */,
             ::fhir::SubstanceSpecification_MolecularWeight_pskel& /* molecularWeight */,
             ::fhir::Reference_pskel& /* source */,
             ::fhir::SubstanceSpecification_Representation_pskel& /* representation */);

    // Individual element parsers.
    //
    void
    stereochemistry_parser (::fhir::CodeableConcept_pskel&);

    void
    opticalActivity_parser (::fhir::CodeableConcept_pskel&);

    void
    molecularFormula_parser (::fhir::string_pskel&);

    void
    molecularFormulaByMoiety_parser (::fhir::string_pskel&);

    void
    isotope_parser (::fhir::SubstanceSpecification_Isotope_pskel&);

    void
    molecularWeight_parser (::fhir::SubstanceSpecification_MolecularWeight_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    void
    representation_parser (::fhir::SubstanceSpecification_Representation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Structure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Structure_pskel* SubstanceSpecification_Structure_impl_;
    SubstanceSpecification_Structure_pskel (SubstanceSpecification_Structure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* stereochemistry_parser_;
    ::fhir::CodeableConcept_pskel* opticalActivity_parser_;
    ::fhir::string_pskel* molecularFormula_parser_;
    ::fhir::string_pskel* molecularFormulaByMoiety_parser_;
    ::fhir::SubstanceSpecification_Isotope_pskel* isotope_parser_;
    ::fhir::SubstanceSpecification_MolecularWeight_pskel* molecularWeight_parser_;
    ::fhir::Reference_pskel* source_parser_;
    ::fhir::SubstanceSpecification_Representation_pskel* representation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Structure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Isotope_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    name ();

    virtual void
    substitution ();

    virtual void
    halfLife ();

    virtual void
    molecularWeight ();

    virtual void
    post_SubstanceSpecification_Isotope ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* name */,
             ::fhir::CodeableConcept_pskel& /* substitution */,
             ::fhir::Quantity_pskel& /* halfLife */,
             ::fhir::SubstanceSpecification_MolecularWeight_pskel& /* molecularWeight */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    name_parser (::fhir::CodeableConcept_pskel&);

    void
    substitution_parser (::fhir::CodeableConcept_pskel&);

    void
    halfLife_parser (::fhir::Quantity_pskel&);

    void
    molecularWeight_parser (::fhir::SubstanceSpecification_MolecularWeight_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Isotope_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Isotope_pskel* SubstanceSpecification_Isotope_impl_;
    SubstanceSpecification_Isotope_pskel (SubstanceSpecification_Isotope_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* name_parser_;
    ::fhir::CodeableConcept_pskel* substitution_parser_;
    ::fhir::Quantity_pskel* halfLife_parser_;
    ::fhir::SubstanceSpecification_MolecularWeight_pskel* molecularWeight_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Isotope_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_MolecularWeight_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    method ();

    virtual void
    type ();

    virtual void
    amount ();

    virtual void
    post_SubstanceSpecification_MolecularWeight ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* method */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Quantity_pskel& /* amount */);

    // Individual element parsers.
    //
    void
    method_parser (::fhir::CodeableConcept_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    amount_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_MolecularWeight_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_MolecularWeight_pskel* SubstanceSpecification_MolecularWeight_impl_;
    SubstanceSpecification_MolecularWeight_pskel (SubstanceSpecification_MolecularWeight_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* method_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Quantity_pskel* amount_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_MolecularWeight_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Representation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    representation ();

    virtual void
    attachment ();

    virtual void
    post_SubstanceSpecification_Representation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* representation */,
             ::fhir::Attachment_pskel& /* attachment */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    representation_parser (::fhir::string_pskel&);

    void
    attachment_parser (::fhir::Attachment_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Representation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Representation_pskel* SubstanceSpecification_Representation_impl_;
    SubstanceSpecification_Representation_pskel (SubstanceSpecification_Representation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* representation_parser_;
    ::fhir::Attachment_pskel* attachment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Representation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Code_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    status ();

    virtual void
    statusDate ();

    virtual void
    comment ();

    virtual void
    source ();

    virtual void
    post_SubstanceSpecification_Code ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::dateTime_pskel& /* statusDate */,
             ::fhir::string_pskel& /* comment */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    statusDate_parser (::fhir::dateTime_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Code_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Code_pskel* SubstanceSpecification_Code_impl_;
    SubstanceSpecification_Code_pskel (SubstanceSpecification_Code_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::dateTime_pskel* statusDate_parser_;
    ::fhir::string_pskel* comment_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Code_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Name_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    type ();

    virtual void
    status ();

    virtual void
    preferred ();

    virtual void
    language ();

    virtual void
    domain ();

    virtual void
    jurisdiction ();

    virtual void
    synonym ();

    virtual void
    translation ();

    virtual void
    official ();

    virtual void
    source ();

    virtual void
    post_SubstanceSpecification_Name ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::boolean_pskel& /* preferred */,
             ::fhir::CodeableConcept_pskel& /* language */,
             ::fhir::CodeableConcept_pskel& /* domain */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::SubstanceSpecification_Name_pskel& /* synonym */,
             ::fhir::SubstanceSpecification_Name_pskel& /* translation */,
             ::fhir::SubstanceSpecification_Official_pskel& /* official */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    preferred_parser (::fhir::boolean_pskel&);

    void
    language_parser (::fhir::CodeableConcept_pskel&);

    void
    domain_parser (::fhir::CodeableConcept_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    synonym_parser (::fhir::SubstanceSpecification_Name_pskel&);

    void
    translation_parser (::fhir::SubstanceSpecification_Name_pskel&);

    void
    official_parser (::fhir::SubstanceSpecification_Official_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Name_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Name_pskel* SubstanceSpecification_Name_impl_;
    SubstanceSpecification_Name_pskel (SubstanceSpecification_Name_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::boolean_pskel* preferred_parser_;
    ::fhir::CodeableConcept_pskel* language_parser_;
    ::fhir::CodeableConcept_pskel* domain_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::SubstanceSpecification_Name_pskel* synonym_parser_;
    ::fhir::SubstanceSpecification_Name_pskel* translation_parser_;
    ::fhir::SubstanceSpecification_Official_pskel* official_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Name_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Official_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    authority ();

    virtual void
    status ();

    virtual void
    date ();

    virtual void
    post_SubstanceSpecification_Official ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* authority */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::dateTime_pskel& /* date */);

    // Individual element parsers.
    //
    void
    authority_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Official_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Official_pskel* SubstanceSpecification_Official_impl_;
    SubstanceSpecification_Official_pskel (SubstanceSpecification_Official_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* authority_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::dateTime_pskel* date_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Official_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSpecification_Relationship_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    substanceReference ();

    virtual void
    substanceCodeableConcept ();

    virtual void
    relationship ();

    virtual void
    isDefining ();

    virtual void
    amountQuantity ();

    virtual void
    amountRange ();

    virtual void
    amountRatio ();

    virtual void
    amountString ();

    virtual void
    amountRatioLowLimit ();

    virtual void
    amountType ();

    virtual void
    source ();

    virtual void
    post_SubstanceSpecification_Relationship ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* substanceReference */,
             ::fhir::CodeableConcept_pskel& /* substanceCodeableConcept */,
             ::fhir::CodeableConcept_pskel& /* relationship */,
             ::fhir::boolean_pskel& /* isDefining */,
             ::fhir::Quantity_pskel& /* amountQuantity */,
             ::fhir::Range_pskel& /* amountRange */,
             ::fhir::Ratio_pskel& /* amountRatio */,
             ::fhir::string_pskel& /* amountString */,
             ::fhir::Ratio_pskel& /* amountRatioLowLimit */,
             ::fhir::CodeableConcept_pskel& /* amountType */,
             ::fhir::Reference_pskel& /* source */);

    // Individual element parsers.
    //
    void
    substanceReference_parser (::fhir::Reference_pskel&);

    void
    substanceCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    relationship_parser (::fhir::CodeableConcept_pskel&);

    void
    isDefining_parser (::fhir::boolean_pskel&);

    void
    amountQuantity_parser (::fhir::Quantity_pskel&);

    void
    amountRange_parser (::fhir::Range_pskel&);

    void
    amountRatio_parser (::fhir::Ratio_pskel&);

    void
    amountString_parser (::fhir::string_pskel&);

    void
    amountRatioLowLimit_parser (::fhir::Ratio_pskel&);

    void
    amountType_parser (::fhir::CodeableConcept_pskel&);

    void
    source_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSpecification_Relationship_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSpecification_Relationship_pskel* SubstanceSpecification_Relationship_impl_;
    SubstanceSpecification_Relationship_pskel (SubstanceSpecification_Relationship_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* substanceReference_parser_;
    ::fhir::CodeableConcept_pskel* substanceCodeableConcept_parser_;
    ::fhir::CodeableConcept_pskel* relationship_parser_;
    ::fhir::boolean_pskel* isDefining_parser_;
    ::fhir::Quantity_pskel* amountQuantity_parser_;
    ::fhir::Range_pskel* amountRange_parser_;
    ::fhir::Ratio_pskel* amountRatio_parser_;
    ::fhir::string_pskel* amountString_parser_;
    ::fhir::Ratio_pskel* amountRatioLowLimit_parser_;
    ::fhir::CodeableConcept_pskel* amountType_parser_;
    ::fhir::Reference_pskel* source_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSpecification_Relationship_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SupplyDelivery_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    basedOn ();

    virtual void
    partOf ();

    virtual void
    status ();

    virtual void
    patient ();

    virtual void
    type ();

    virtual void
    suppliedItem ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrencePeriod ();

    virtual void
    occurrenceTiming ();

    virtual void
    supplier ();

    virtual void
    destination ();

    virtual void
    receiver ();

    virtual void
    post_SupplyDelivery ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::SupplyDeliveryStatus_pskel& /* status */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::SupplyDelivery_SuppliedItem_pskel& /* suppliedItem */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::Period_pskel& /* occurrencePeriod */,
             ::fhir::Timing_pskel& /* occurrenceTiming */,
             ::fhir::Reference_pskel& /* supplier */,
             ::fhir::Reference_pskel& /* destination */,
             ::fhir::Reference_pskel& /* receiver */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::SupplyDeliveryStatus_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    suppliedItem_parser (::fhir::SupplyDelivery_SuppliedItem_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrencePeriod_parser (::fhir::Period_pskel&);

    void
    occurrenceTiming_parser (::fhir::Timing_pskel&);

    void
    supplier_parser (::fhir::Reference_pskel&);

    void
    destination_parser (::fhir::Reference_pskel&);

    void
    receiver_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SupplyDelivery_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SupplyDelivery_pskel* SupplyDelivery_impl_;
    SupplyDelivery_pskel (SupplyDelivery_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::SupplyDeliveryStatus_pskel* status_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::SupplyDelivery_SuppliedItem_pskel* suppliedItem_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::Period_pskel* occurrencePeriod_parser_;
    ::fhir::Timing_pskel* occurrenceTiming_parser_;
    ::fhir::Reference_pskel* supplier_parser_;
    ::fhir::Reference_pskel* destination_parser_;
    ::fhir::Reference_pskel* receiver_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SupplyDelivery_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SupplyDelivery_SuppliedItem_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    quantity ();

    virtual void
    itemCodeableConcept ();

    virtual void
    itemReference ();

    virtual void
    post_SupplyDelivery_SuppliedItem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::CodeableConcept_pskel& /* itemCodeableConcept */,
             ::fhir::Reference_pskel& /* itemReference */);

    // Individual element parsers.
    //
    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    itemCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    itemReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SupplyDelivery_SuppliedItem_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SupplyDelivery_SuppliedItem_pskel* SupplyDelivery_SuppliedItem_impl_;
    SupplyDelivery_SuppliedItem_pskel (SupplyDelivery_SuppliedItem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::CodeableConcept_pskel* itemCodeableConcept_parser_;
    ::fhir::Reference_pskel* itemReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SupplyDelivery_SuppliedItem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SupplyDeliveryStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SupplyDeliveryStatus_list ();

    // Constructor.
    //
    SupplyDeliveryStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SupplyDeliveryStatus_list_pskel* SupplyDeliveryStatus_list_impl_;
    SupplyDeliveryStatus_list_pskel (SupplyDeliveryStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_SupplyDeliveryStatus_list_pskel_enums_[4UL];
  };

  class SupplyDeliveryStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SupplyDeliveryStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SupplyDeliveryStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SupplyDeliveryStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SupplyDeliveryStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SupplyDeliveryStatus_pskel* SupplyDeliveryStatus_impl_;
    SupplyDeliveryStatus_pskel (SupplyDeliveryStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SupplyDeliveryStatus_list_pskel* value_parser_;
  };

  class SupplyRequest_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    category ();

    virtual void
    priority ();

    virtual void
    itemCodeableConcept ();

    virtual void
    itemReference ();

    virtual void
    quantity ();

    virtual void
    parameter ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrencePeriod ();

    virtual void
    occurrenceTiming ();

    virtual void
    authoredOn ();

    virtual void
    requester ();

    virtual void
    supplier ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    deliverFrom ();

    virtual void
    deliverTo ();

    virtual void
    post_SupplyRequest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::SupplyRequestStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* itemCodeableConcept */,
             ::fhir::Reference_pskel& /* itemReference */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::SupplyRequest_Parameter_pskel& /* parameter */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::Period_pskel& /* occurrencePeriod */,
             ::fhir::Timing_pskel& /* occurrenceTiming */,
             ::fhir::dateTime_pskel& /* authoredOn */,
             ::fhir::Reference_pskel& /* requester */,
             ::fhir::Reference_pskel& /* supplier */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Reference_pskel& /* deliverFrom */,
             ::fhir::Reference_pskel& /* deliverTo */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::SupplyRequestStatus_pskel&);

    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    itemCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    itemReference_parser (::fhir::Reference_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    parameter_parser (::fhir::SupplyRequest_Parameter_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrencePeriod_parser (::fhir::Period_pskel&);

    void
    occurrenceTiming_parser (::fhir::Timing_pskel&);

    void
    authoredOn_parser (::fhir::dateTime_pskel&);

    void
    requester_parser (::fhir::Reference_pskel&);

    void
    supplier_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    deliverFrom_parser (::fhir::Reference_pskel&);

    void
    deliverTo_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SupplyRequest_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SupplyRequest_pskel* SupplyRequest_impl_;
    SupplyRequest_pskel (SupplyRequest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::SupplyRequestStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* itemCodeableConcept_parser_;
    ::fhir::Reference_pskel* itemReference_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::SupplyRequest_Parameter_pskel* parameter_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::Period_pskel* occurrencePeriod_parser_;
    ::fhir::Timing_pskel* occurrenceTiming_parser_;
    ::fhir::dateTime_pskel* authoredOn_parser_;
    ::fhir::Reference_pskel* requester_parser_;
    ::fhir::Reference_pskel* supplier_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Reference_pskel* deliverFrom_parser_;
    ::fhir::Reference_pskel* deliverTo_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SupplyRequest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SupplyRequest_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueBoolean ();

    virtual void
    post_SupplyRequest_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::boolean_pskel& /* valueBoolean */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SupplyRequest_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SupplyRequest_Parameter_pskel* SupplyRequest_Parameter_impl_;
    SupplyRequest_Parameter_pskel (SupplyRequest_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SupplyRequest_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SupplyRequestStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SupplyRequestStatus_list ();

    // Constructor.
    //
    SupplyRequestStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SupplyRequestStatus_list_pskel* SupplyRequestStatus_list_impl_;
    SupplyRequestStatus_list_pskel (SupplyRequestStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_SupplyRequestStatus_list_pskel_enums_[7UL];
  };

  class SupplyRequestStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SupplyRequestStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SupplyRequestStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SupplyRequestStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SupplyRequestStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SupplyRequestStatus_pskel* SupplyRequestStatus_impl_;
    SupplyRequestStatus_pskel (SupplyRequestStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SupplyRequestStatus_list_pskel* value_parser_;
  };

  class Task_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    basedOn ();

    virtual void
    groupIdentifier ();

    virtual void
    partOf ();

    virtual void
    status ();

    virtual void
    statusReason ();

    virtual void
    businessStatus ();

    virtual void
    intent ();

    virtual void
    priority ();

    virtual void
    code ();

    virtual void
    description ();

    virtual void
    focus ();

    virtual void
    for_ ();

    virtual void
    encounter ();

    virtual void
    executionPeriod ();

    virtual void
    authoredOn ();

    virtual void
    lastModified ();

    virtual void
    requester ();

    virtual void
    performerType ();

    virtual void
    owner ();

    virtual void
    location ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    insurance ();

    virtual void
    note ();

    virtual void
    relevantHistory ();

    virtual void
    restriction ();

    virtual void
    input ();

    virtual void
    output ();

    virtual void
    post_Task ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::canonical_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::Reference_pskel& /* basedOn */,
             ::fhir::Identifier_pskel& /* groupIdentifier */,
             ::fhir::Reference_pskel& /* partOf */,
             ::fhir::TaskStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* statusReason */,
             ::fhir::CodeableConcept_pskel& /* businessStatus */,
             ::fhir::TaskIntent_pskel& /* intent */,
             ::fhir::RequestPriority_pskel& /* priority */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* description */,
             ::fhir::Reference_pskel& /* focus */,
             ::fhir::Reference_pskel& /* for */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::Period_pskel& /* executionPeriod */,
             ::fhir::dateTime_pskel& /* authoredOn */,
             ::fhir::dateTime_pskel& /* lastModified */,
             ::fhir::Reference_pskel& /* requester */,
             ::fhir::CodeableConcept_pskel& /* performerType */,
             ::fhir::Reference_pskel& /* owner */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::Reference_pskel& /* insurance */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::Reference_pskel& /* relevantHistory */,
             ::fhir::Task_Restriction_pskel& /* restriction */,
             ::fhir::Task_Input_pskel& /* input */,
             ::fhir::Task_Output_pskel& /* output */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    instantiatesCanonical_parser (::fhir::canonical_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    basedOn_parser (::fhir::Reference_pskel&);

    void
    groupIdentifier_parser (::fhir::Identifier_pskel&);

    void
    partOf_parser (::fhir::Reference_pskel&);

    void
    status_parser (::fhir::TaskStatus_pskel&);

    void
    statusReason_parser (::fhir::CodeableConcept_pskel&);

    void
    businessStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    intent_parser (::fhir::TaskIntent_pskel&);

    void
    priority_parser (::fhir::RequestPriority_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    focus_parser (::fhir::Reference_pskel&);

    void
    for__parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    executionPeriod_parser (::fhir::Period_pskel&);

    void
    authoredOn_parser (::fhir::dateTime_pskel&);

    void
    lastModified_parser (::fhir::dateTime_pskel&);

    void
    requester_parser (::fhir::Reference_pskel&);

    void
    performerType_parser (::fhir::CodeableConcept_pskel&);

    void
    owner_parser (::fhir::Reference_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    insurance_parser (::fhir::Reference_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    relevantHistory_parser (::fhir::Reference_pskel&);

    void
    restriction_parser (::fhir::Task_Restriction_pskel&);

    void
    input_parser (::fhir::Task_Input_pskel&);

    void
    output_parser (::fhir::Task_Output_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Task_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Task_pskel* Task_impl_;
    Task_pskel (Task_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::canonical_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::Reference_pskel* basedOn_parser_;
    ::fhir::Identifier_pskel* groupIdentifier_parser_;
    ::fhir::Reference_pskel* partOf_parser_;
    ::fhir::TaskStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* statusReason_parser_;
    ::fhir::CodeableConcept_pskel* businessStatus_parser_;
    ::fhir::TaskIntent_pskel* intent_parser_;
    ::fhir::RequestPriority_pskel* priority_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::Reference_pskel* focus_parser_;
    ::fhir::Reference_pskel* for__parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::Period_pskel* executionPeriod_parser_;
    ::fhir::dateTime_pskel* authoredOn_parser_;
    ::fhir::dateTime_pskel* lastModified_parser_;
    ::fhir::Reference_pskel* requester_parser_;
    ::fhir::CodeableConcept_pskel* performerType_parser_;
    ::fhir::Reference_pskel* owner_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::Reference_pskel* insurance_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::Reference_pskel* relevantHistory_parser_;
    ::fhir::Task_Restriction_pskel* restriction_parser_;
    ::fhir::Task_Input_pskel* input_parser_;
    ::fhir::Task_Output_pskel* output_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Task_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Task_Restriction_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    repetitions ();

    virtual void
    period ();

    virtual void
    recipient ();

    virtual void
    post_Task_Restriction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::positiveInt_pskel& /* repetitions */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* recipient */);

    // Individual element parsers.
    //
    void
    repetitions_parser (::fhir::positiveInt_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    recipient_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Task_Restriction_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Task_Restriction_pskel* Task_Restriction_impl_;
    Task_Restriction_pskel (Task_Restriction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::positiveInt_pskel* repetitions_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* recipient_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Task_Restriction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Task_Input_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    valueBase64Binary ();

    virtual void
    valueBoolean ();

    virtual void
    valueCanonical ();

    virtual void
    valueCode ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueDecimal ();

    virtual void
    valueId ();

    virtual void
    valueInstant ();

    virtual void
    valueInteger ();

    virtual void
    valueMarkdown ();

    virtual void
    valueOid ();

    virtual void
    valuePositiveInt ();

    virtual void
    valueString ();

    virtual void
    valueTime ();

    virtual void
    valueUnsignedInt ();

    virtual void
    valueUri ();

    virtual void
    valueUrl ();

    virtual void
    valueUuid ();

    virtual void
    valueAddress ();

    virtual void
    valueAge ();

    virtual void
    valueAnnotation ();

    virtual void
    valueAttachment ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueCoding ();

    virtual void
    valueContactPoint ();

    virtual void
    valueCount ();

    virtual void
    valueDistance ();

    virtual void
    valueDuration ();

    virtual void
    valueHumanName ();

    virtual void
    valueIdentifier ();

    virtual void
    valueMoney ();

    virtual void
    valuePeriod ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueRatio ();

    virtual void
    valueReference ();

    virtual void
    valueSampledData ();

    virtual void
    valueSignature ();

    virtual void
    valueTiming ();

    virtual void
    valueContactDetail ();

    virtual void
    valueContributor ();

    virtual void
    valueDataRequirement ();

    virtual void
    valueExpression ();

    virtual void
    valueParameterDefinition ();

    virtual void
    valueRelatedArtifact ();

    virtual void
    valueTriggerDefinition ();

    virtual void
    valueUsageContext ();

    virtual void
    valueDosage ();

    virtual void
    valueMeta ();

    virtual void
    post_Task_Input ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::canonical_pskel& /* valueCanonical */,
             ::fhir::code_pskel& /* valueCode */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::id_pskel& /* valueId */,
             ::fhir::instant_pskel& /* valueInstant */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::markdown_pskel& /* valueMarkdown */,
             ::fhir::oid_pskel& /* valueOid */,
             ::fhir::positiveInt_pskel& /* valuePositiveInt */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::unsignedInt_pskel& /* valueUnsignedInt */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::url_pskel& /* valueUrl */,
             ::fhir::uuid_pskel& /* valueUuid */,
             ::fhir::Address_pskel& /* valueAddress */,
             ::fhir::Age_pskel& /* valueAge */,
             ::fhir::Annotation_pskel& /* valueAnnotation */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::ContactPoint_pskel& /* valueContactPoint */,
             ::fhir::Count_pskel& /* valueCount */,
             ::fhir::Distance_pskel& /* valueDistance */,
             ::fhir::Duration_pskel& /* valueDuration */,
             ::fhir::HumanName_pskel& /* valueHumanName */,
             ::fhir::Identifier_pskel& /* valueIdentifier */,
             ::fhir::Money_pskel& /* valueMoney */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Ratio_pskel& /* valueRatio */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::SampledData_pskel& /* valueSampledData */,
             ::fhir::Signature_pskel& /* valueSignature */,
             ::fhir::Timing_pskel& /* valueTiming */,
             ::fhir::ContactDetail_pskel& /* valueContactDetail */,
             ::fhir::Contributor_pskel& /* valueContributor */,
             ::fhir::DataRequirement_pskel& /* valueDataRequirement */,
             ::fhir::Expression_pskel& /* valueExpression */,
             ::fhir::ParameterDefinition_pskel& /* valueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* valueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* valueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* valueUsageContext */,
             ::fhir::Dosage_pskel& /* valueDosage */,
             ::fhir::Meta_pskel& /* valueMeta */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueCanonical_parser (::fhir::canonical_pskel&);

    void
    valueCode_parser (::fhir::code_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueId_parser (::fhir::id_pskel&);

    void
    valueInstant_parser (::fhir::instant_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueMarkdown_parser (::fhir::markdown_pskel&);

    void
    valueOid_parser (::fhir::oid_pskel&);

    void
    valuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueUrl_parser (::fhir::url_pskel&);

    void
    valueUuid_parser (::fhir::uuid_pskel&);

    void
    valueAddress_parser (::fhir::Address_pskel&);

    void
    valueAge_parser (::fhir::Age_pskel&);

    void
    valueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    valueCount_parser (::fhir::Count_pskel&);

    void
    valueDistance_parser (::fhir::Distance_pskel&);

    void
    valueDuration_parser (::fhir::Duration_pskel&);

    void
    valueHumanName_parser (::fhir::HumanName_pskel&);

    void
    valueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    valueMoney_parser (::fhir::Money_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueRatio_parser (::fhir::Ratio_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    valueSampledData_parser (::fhir::SampledData_pskel&);

    void
    valueSignature_parser (::fhir::Signature_pskel&);

    void
    valueTiming_parser (::fhir::Timing_pskel&);

    void
    valueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    valueContributor_parser (::fhir::Contributor_pskel&);

    void
    valueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    valueExpression_parser (::fhir::Expression_pskel&);

    void
    valueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    valueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    valueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    valueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    valueDosage_parser (::fhir::Dosage_pskel&);

    void
    valueMeta_parser (::fhir::Meta_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Task_Input_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Task_Input_pskel* Task_Input_impl_;
    Task_Input_pskel (Task_Input_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::canonical_pskel* valueCanonical_parser_;
    ::fhir::code_pskel* valueCode_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::id_pskel* valueId_parser_;
    ::fhir::instant_pskel* valueInstant_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::markdown_pskel* valueMarkdown_parser_;
    ::fhir::oid_pskel* valueOid_parser_;
    ::fhir::positiveInt_pskel* valuePositiveInt_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::unsignedInt_pskel* valueUnsignedInt_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::url_pskel* valueUrl_parser_;
    ::fhir::uuid_pskel* valueUuid_parser_;
    ::fhir::Address_pskel* valueAddress_parser_;
    ::fhir::Age_pskel* valueAge_parser_;
    ::fhir::Annotation_pskel* valueAnnotation_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::ContactPoint_pskel* valueContactPoint_parser_;
    ::fhir::Count_pskel* valueCount_parser_;
    ::fhir::Distance_pskel* valueDistance_parser_;
    ::fhir::Duration_pskel* valueDuration_parser_;
    ::fhir::HumanName_pskel* valueHumanName_parser_;
    ::fhir::Identifier_pskel* valueIdentifier_parser_;
    ::fhir::Money_pskel* valueMoney_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Ratio_pskel* valueRatio_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::SampledData_pskel* valueSampledData_parser_;
    ::fhir::Signature_pskel* valueSignature_parser_;
    ::fhir::Timing_pskel* valueTiming_parser_;
    ::fhir::ContactDetail_pskel* valueContactDetail_parser_;
    ::fhir::Contributor_pskel* valueContributor_parser_;
    ::fhir::DataRequirement_pskel* valueDataRequirement_parser_;
    ::fhir::Expression_pskel* valueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* valueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* valueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* valueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* valueUsageContext_parser_;
    ::fhir::Dosage_pskel* valueDosage_parser_;
    ::fhir::Meta_pskel* valueMeta_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Task_Input_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Task_Output_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    valueBase64Binary ();

    virtual void
    valueBoolean ();

    virtual void
    valueCanonical ();

    virtual void
    valueCode ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueDecimal ();

    virtual void
    valueId ();

    virtual void
    valueInstant ();

    virtual void
    valueInteger ();

    virtual void
    valueMarkdown ();

    virtual void
    valueOid ();

    virtual void
    valuePositiveInt ();

    virtual void
    valueString ();

    virtual void
    valueTime ();

    virtual void
    valueUnsignedInt ();

    virtual void
    valueUri ();

    virtual void
    valueUrl ();

    virtual void
    valueUuid ();

    virtual void
    valueAddress ();

    virtual void
    valueAge ();

    virtual void
    valueAnnotation ();

    virtual void
    valueAttachment ();

    virtual void
    valueCodeableConcept ();

    virtual void
    valueCoding ();

    virtual void
    valueContactPoint ();

    virtual void
    valueCount ();

    virtual void
    valueDistance ();

    virtual void
    valueDuration ();

    virtual void
    valueHumanName ();

    virtual void
    valueIdentifier ();

    virtual void
    valueMoney ();

    virtual void
    valuePeriod ();

    virtual void
    valueQuantity ();

    virtual void
    valueRange ();

    virtual void
    valueRatio ();

    virtual void
    valueReference ();

    virtual void
    valueSampledData ();

    virtual void
    valueSignature ();

    virtual void
    valueTiming ();

    virtual void
    valueContactDetail ();

    virtual void
    valueContributor ();

    virtual void
    valueDataRequirement ();

    virtual void
    valueExpression ();

    virtual void
    valueParameterDefinition ();

    virtual void
    valueRelatedArtifact ();

    virtual void
    valueTriggerDefinition ();

    virtual void
    valueUsageContext ();

    virtual void
    valueDosage ();

    virtual void
    valueMeta ();

    virtual void
    post_Task_Output ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::canonical_pskel& /* valueCanonical */,
             ::fhir::code_pskel& /* valueCode */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::id_pskel& /* valueId */,
             ::fhir::instant_pskel& /* valueInstant */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::markdown_pskel& /* valueMarkdown */,
             ::fhir::oid_pskel& /* valueOid */,
             ::fhir::positiveInt_pskel& /* valuePositiveInt */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::unsignedInt_pskel& /* valueUnsignedInt */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::url_pskel& /* valueUrl */,
             ::fhir::uuid_pskel& /* valueUuid */,
             ::fhir::Address_pskel& /* valueAddress */,
             ::fhir::Age_pskel& /* valueAge */,
             ::fhir::Annotation_pskel& /* valueAnnotation */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::CodeableConcept_pskel& /* valueCodeableConcept */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::ContactPoint_pskel& /* valueContactPoint */,
             ::fhir::Count_pskel& /* valueCount */,
             ::fhir::Distance_pskel& /* valueDistance */,
             ::fhir::Duration_pskel& /* valueDuration */,
             ::fhir::HumanName_pskel& /* valueHumanName */,
             ::fhir::Identifier_pskel& /* valueIdentifier */,
             ::fhir::Money_pskel& /* valueMoney */,
             ::fhir::Period_pskel& /* valuePeriod */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Range_pskel& /* valueRange */,
             ::fhir::Ratio_pskel& /* valueRatio */,
             ::fhir::Reference_pskel& /* valueReference */,
             ::fhir::SampledData_pskel& /* valueSampledData */,
             ::fhir::Signature_pskel& /* valueSignature */,
             ::fhir::Timing_pskel& /* valueTiming */,
             ::fhir::ContactDetail_pskel& /* valueContactDetail */,
             ::fhir::Contributor_pskel& /* valueContributor */,
             ::fhir::DataRequirement_pskel& /* valueDataRequirement */,
             ::fhir::Expression_pskel& /* valueExpression */,
             ::fhir::ParameterDefinition_pskel& /* valueParameterDefinition */,
             ::fhir::RelatedArtifact_pskel& /* valueRelatedArtifact */,
             ::fhir::TriggerDefinition_pskel& /* valueTriggerDefinition */,
             ::fhir::UsageContext_pskel& /* valueUsageContext */,
             ::fhir::Dosage_pskel& /* valueDosage */,
             ::fhir::Meta_pskel& /* valueMeta */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueCanonical_parser (::fhir::canonical_pskel&);

    void
    valueCode_parser (::fhir::code_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueId_parser (::fhir::id_pskel&);

    void
    valueInstant_parser (::fhir::instant_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueMarkdown_parser (::fhir::markdown_pskel&);

    void
    valueOid_parser (::fhir::oid_pskel&);

    void
    valuePositiveInt_parser (::fhir::positiveInt_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueUnsignedInt_parser (::fhir::unsignedInt_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueUrl_parser (::fhir::url_pskel&);

    void
    valueUuid_parser (::fhir::uuid_pskel&);

    void
    valueAddress_parser (::fhir::Address_pskel&);

    void
    valueAge_parser (::fhir::Age_pskel&);

    void
    valueAnnotation_parser (::fhir::Annotation_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueContactPoint_parser (::fhir::ContactPoint_pskel&);

    void
    valueCount_parser (::fhir::Count_pskel&);

    void
    valueDistance_parser (::fhir::Distance_pskel&);

    void
    valueDuration_parser (::fhir::Duration_pskel&);

    void
    valueHumanName_parser (::fhir::HumanName_pskel&);

    void
    valueIdentifier_parser (::fhir::Identifier_pskel&);

    void
    valueMoney_parser (::fhir::Money_pskel&);

    void
    valuePeriod_parser (::fhir::Period_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueRange_parser (::fhir::Range_pskel&);

    void
    valueRatio_parser (::fhir::Ratio_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    void
    valueSampledData_parser (::fhir::SampledData_pskel&);

    void
    valueSignature_parser (::fhir::Signature_pskel&);

    void
    valueTiming_parser (::fhir::Timing_pskel&);

    void
    valueContactDetail_parser (::fhir::ContactDetail_pskel&);

    void
    valueContributor_parser (::fhir::Contributor_pskel&);

    void
    valueDataRequirement_parser (::fhir::DataRequirement_pskel&);

    void
    valueExpression_parser (::fhir::Expression_pskel&);

    void
    valueParameterDefinition_parser (::fhir::ParameterDefinition_pskel&);

    void
    valueRelatedArtifact_parser (::fhir::RelatedArtifact_pskel&);

    void
    valueTriggerDefinition_parser (::fhir::TriggerDefinition_pskel&);

    void
    valueUsageContext_parser (::fhir::UsageContext_pskel&);

    void
    valueDosage_parser (::fhir::Dosage_pskel&);

    void
    valueMeta_parser (::fhir::Meta_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Task_Output_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Task_Output_pskel* Task_Output_impl_;
    Task_Output_pskel (Task_Output_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::canonical_pskel* valueCanonical_parser_;
    ::fhir::code_pskel* valueCode_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::id_pskel* valueId_parser_;
    ::fhir::instant_pskel* valueInstant_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::markdown_pskel* valueMarkdown_parser_;
    ::fhir::oid_pskel* valueOid_parser_;
    ::fhir::positiveInt_pskel* valuePositiveInt_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::unsignedInt_pskel* valueUnsignedInt_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::url_pskel* valueUrl_parser_;
    ::fhir::uuid_pskel* valueUuid_parser_;
    ::fhir::Address_pskel* valueAddress_parser_;
    ::fhir::Age_pskel* valueAge_parser_;
    ::fhir::Annotation_pskel* valueAnnotation_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::CodeableConcept_pskel* valueCodeableConcept_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::ContactPoint_pskel* valueContactPoint_parser_;
    ::fhir::Count_pskel* valueCount_parser_;
    ::fhir::Distance_pskel* valueDistance_parser_;
    ::fhir::Duration_pskel* valueDuration_parser_;
    ::fhir::HumanName_pskel* valueHumanName_parser_;
    ::fhir::Identifier_pskel* valueIdentifier_parser_;
    ::fhir::Money_pskel* valueMoney_parser_;
    ::fhir::Period_pskel* valuePeriod_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Range_pskel* valueRange_parser_;
    ::fhir::Ratio_pskel* valueRatio_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;
    ::fhir::SampledData_pskel* valueSampledData_parser_;
    ::fhir::Signature_pskel* valueSignature_parser_;
    ::fhir::Timing_pskel* valueTiming_parser_;
    ::fhir::ContactDetail_pskel* valueContactDetail_parser_;
    ::fhir::Contributor_pskel* valueContributor_parser_;
    ::fhir::DataRequirement_pskel* valueDataRequirement_parser_;
    ::fhir::Expression_pskel* valueExpression_parser_;
    ::fhir::ParameterDefinition_pskel* valueParameterDefinition_parser_;
    ::fhir::RelatedArtifact_pskel* valueRelatedArtifact_parser_;
    ::fhir::TriggerDefinition_pskel* valueTriggerDefinition_parser_;
    ::fhir::UsageContext_pskel* valueUsageContext_parser_;
    ::fhir::Dosage_pskel* valueDosage_parser_;
    ::fhir::Meta_pskel* valueMeta_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Task_Output_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TaskStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TaskStatus_list ();

    // Constructor.
    //
    TaskStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TaskStatus_list_pskel* TaskStatus_list_impl_;
    TaskStatus_list_pskel (TaskStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_TaskStatus_list_pskel_enums_[12UL];
  };

  class TaskStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TaskStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TaskStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TaskStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TaskStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TaskStatus_pskel* TaskStatus_impl_;
    TaskStatus_pskel (TaskStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TaskStatus_list_pskel* value_parser_;
  };

  class TaskIntent_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TaskIntent_list ();

    // Constructor.
    //
    TaskIntent_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TaskIntent_list_pskel* TaskIntent_list_impl_;
    TaskIntent_list_pskel (TaskIntent_list_pskel*, void*);

    protected:
    static const char* const _xsde_TaskIntent_list_pskel_enums_[9UL];
  };

  class TaskIntent_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TaskIntent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TaskIntent_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TaskIntent_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TaskIntent_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TaskIntent_pskel* TaskIntent_impl_;
    TaskIntent_pskel (TaskIntent_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TaskIntent_list_pskel* value_parser_;
  };

  class TerminologyCapabilities_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    kind ();

    virtual void
    software ();

    virtual void
    implementation ();

    virtual void
    lockedDate ();

    virtual void
    codeSystem ();

    virtual void
    expansion ();

    virtual void
    codeSearch ();

    virtual void
    validateCode ();

    virtual void
    translation ();

    virtual void
    closure ();

    virtual void
    post_TerminologyCapabilities ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::CapabilityStatementKind_pskel& /* kind */,
             ::fhir::TerminologyCapabilities_Software_pskel& /* software */,
             ::fhir::TerminologyCapabilities_Implementation_pskel& /* implementation */,
             ::fhir::boolean_pskel& /* lockedDate */,
             ::fhir::TerminologyCapabilities_CodeSystem_pskel& /* codeSystem */,
             ::fhir::TerminologyCapabilities_Expansion_pskel& /* expansion */,
             ::fhir::CodeSearchSupport_pskel& /* codeSearch */,
             ::fhir::TerminologyCapabilities_ValidateCode_pskel& /* validateCode */,
             ::fhir::TerminologyCapabilities_Translation_pskel& /* translation */,
             ::fhir::TerminologyCapabilities_Closure_pskel& /* closure */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    kind_parser (::fhir::CapabilityStatementKind_pskel&);

    void
    software_parser (::fhir::TerminologyCapabilities_Software_pskel&);

    void
    implementation_parser (::fhir::TerminologyCapabilities_Implementation_pskel&);

    void
    lockedDate_parser (::fhir::boolean_pskel&);

    void
    codeSystem_parser (::fhir::TerminologyCapabilities_CodeSystem_pskel&);

    void
    expansion_parser (::fhir::TerminologyCapabilities_Expansion_pskel&);

    void
    codeSearch_parser (::fhir::CodeSearchSupport_pskel&);

    void
    validateCode_parser (::fhir::TerminologyCapabilities_ValidateCode_pskel&);

    void
    translation_parser (::fhir::TerminologyCapabilities_Translation_pskel&);

    void
    closure_parser (::fhir::TerminologyCapabilities_Closure_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_pskel* TerminologyCapabilities_impl_;
    TerminologyCapabilities_pskel (TerminologyCapabilities_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::CapabilityStatementKind_pskel* kind_parser_;
    ::fhir::TerminologyCapabilities_Software_pskel* software_parser_;
    ::fhir::TerminologyCapabilities_Implementation_pskel* implementation_parser_;
    ::fhir::boolean_pskel* lockedDate_parser_;
    ::fhir::TerminologyCapabilities_CodeSystem_pskel* codeSystem_parser_;
    ::fhir::TerminologyCapabilities_Expansion_pskel* expansion_parser_;
    ::fhir::CodeSearchSupport_pskel* codeSearch_parser_;
    ::fhir::TerminologyCapabilities_ValidateCode_pskel* validateCode_parser_;
    ::fhir::TerminologyCapabilities_Translation_pskel* translation_parser_;
    ::fhir::TerminologyCapabilities_Closure_pskel* closure_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Software_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    version ();

    virtual void
    post_TerminologyCapabilities_Software ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* version */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Software_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Software_pskel* TerminologyCapabilities_Software_impl_;
    TerminologyCapabilities_Software_pskel (TerminologyCapabilities_Software_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* version_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Software_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Implementation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    url ();

    virtual void
    post_TerminologyCapabilities_Implementation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::url_pskel& /* url */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    url_parser (::fhir::url_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Implementation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Implementation_pskel* TerminologyCapabilities_Implementation_impl_;
    TerminologyCapabilities_Implementation_pskel (TerminologyCapabilities_Implementation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::url_pskel* url_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Implementation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_CodeSystem_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    uri ();

    virtual void
    version ();

    virtual void
    subsumption ();

    virtual void
    post_TerminologyCapabilities_CodeSystem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::canonical_pskel& /* uri */,
             ::fhir::TerminologyCapabilities_Version_pskel& /* version */,
             ::fhir::boolean_pskel& /* subsumption */);

    // Individual element parsers.
    //
    void
    uri_parser (::fhir::canonical_pskel&);

    void
    version_parser (::fhir::TerminologyCapabilities_Version_pskel&);

    void
    subsumption_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_CodeSystem_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_CodeSystem_pskel* TerminologyCapabilities_CodeSystem_impl_;
    TerminologyCapabilities_CodeSystem_pskel (TerminologyCapabilities_CodeSystem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::canonical_pskel* uri_parser_;
    ::fhir::TerminologyCapabilities_Version_pskel* version_parser_;
    ::fhir::boolean_pskel* subsumption_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_CodeSystem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Version_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    isDefault ();

    virtual void
    compositional ();

    virtual void
    language ();

    virtual void
    filter ();

    virtual void
    property ();

    virtual void
    post_TerminologyCapabilities_Version ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* code */,
             ::fhir::boolean_pskel& /* isDefault */,
             ::fhir::boolean_pskel& /* compositional */,
             ::fhir::code_pskel& /* language */,
             ::fhir::TerminologyCapabilities_Filter_pskel& /* filter */,
             ::fhir::code_pskel& /* property */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::string_pskel&);

    void
    isDefault_parser (::fhir::boolean_pskel&);

    void
    compositional_parser (::fhir::boolean_pskel&);

    void
    language_parser (::fhir::code_pskel&);

    void
    filter_parser (::fhir::TerminologyCapabilities_Filter_pskel&);

    void
    property_parser (::fhir::code_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Version_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Version_pskel* TerminologyCapabilities_Version_impl_;
    TerminologyCapabilities_Version_pskel (TerminologyCapabilities_Version_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* code_parser_;
    ::fhir::boolean_pskel* isDefault_parser_;
    ::fhir::boolean_pskel* compositional_parser_;
    ::fhir::code_pskel* language_parser_;
    ::fhir::TerminologyCapabilities_Filter_pskel* filter_parser_;
    ::fhir::code_pskel* property_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Version_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Filter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    op ();

    virtual void
    post_TerminologyCapabilities_Filter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::code_pskel& /* op */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    op_parser (::fhir::code_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Filter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Filter_pskel* TerminologyCapabilities_Filter_impl_;
    TerminologyCapabilities_Filter_pskel (TerminologyCapabilities_Filter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::code_pskel* op_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Filter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Expansion_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    hierarchical ();

    virtual void
    paging ();

    virtual void
    incomplete ();

    virtual void
    parameter ();

    virtual void
    textFilter ();

    virtual void
    post_TerminologyCapabilities_Expansion ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* hierarchical */,
             ::fhir::boolean_pskel& /* paging */,
             ::fhir::boolean_pskel& /* incomplete */,
             ::fhir::TerminologyCapabilities_Parameter_pskel& /* parameter */,
             ::fhir::markdown_pskel& /* textFilter */);

    // Individual element parsers.
    //
    void
    hierarchical_parser (::fhir::boolean_pskel&);

    void
    paging_parser (::fhir::boolean_pskel&);

    void
    incomplete_parser (::fhir::boolean_pskel&);

    void
    parameter_parser (::fhir::TerminologyCapabilities_Parameter_pskel&);

    void
    textFilter_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Expansion_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Expansion_pskel* TerminologyCapabilities_Expansion_impl_;
    TerminologyCapabilities_Expansion_pskel (TerminologyCapabilities_Expansion_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* hierarchical_parser_;
    ::fhir::boolean_pskel* paging_parser_;
    ::fhir::boolean_pskel* incomplete_parser_;
    ::fhir::TerminologyCapabilities_Parameter_pskel* parameter_parser_;
    ::fhir::markdown_pskel* textFilter_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Expansion_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    documentation ();

    virtual void
    post_TerminologyCapabilities_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* name */,
             ::fhir::string_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::code_pskel&);

    void
    documentation_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Parameter_pskel* TerminologyCapabilities_Parameter_impl_;
    TerminologyCapabilities_Parameter_pskel (TerminologyCapabilities_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* name_parser_;
    ::fhir::string_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_ValidateCode_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    translations ();

    virtual void
    post_TerminologyCapabilities_ValidateCode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* translations */);

    // Individual element parsers.
    //
    void
    translations_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_ValidateCode_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_ValidateCode_pskel* TerminologyCapabilities_ValidateCode_impl_;
    TerminologyCapabilities_ValidateCode_pskel (TerminologyCapabilities_ValidateCode_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* translations_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_ValidateCode_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Translation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    needsMap ();

    virtual void
    post_TerminologyCapabilities_Translation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* needsMap */);

    // Individual element parsers.
    //
    void
    needsMap_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Translation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Translation_pskel* TerminologyCapabilities_Translation_impl_;
    TerminologyCapabilities_Translation_pskel (TerminologyCapabilities_Translation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* needsMap_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Translation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TerminologyCapabilities_Closure_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    translation ();

    virtual void
    post_TerminologyCapabilities_Closure ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* translation */);

    // Individual element parsers.
    //
    void
    translation_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TerminologyCapabilities_Closure_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TerminologyCapabilities_Closure_pskel* TerminologyCapabilities_Closure_impl_;
    TerminologyCapabilities_Closure_pskel (TerminologyCapabilities_Closure_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* translation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TerminologyCapabilities_Closure_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CodeSearchSupport_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CodeSearchSupport_list ();

    // Constructor.
    //
    CodeSearchSupport_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSearchSupport_list_pskel* CodeSearchSupport_list_impl_;
    CodeSearchSupport_list_pskel (CodeSearchSupport_list_pskel*, void*);

    protected:
    static const char* const _xsde_CodeSearchSupport_list_pskel_enums_[2UL];
  };

  class CodeSearchSupport_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CodeSearchSupport ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CodeSearchSupport_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CodeSearchSupport_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CodeSearchSupport_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CodeSearchSupport_pskel* CodeSearchSupport_impl_;
    CodeSearchSupport_pskel (CodeSearchSupport_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CodeSearchSupport_list_pskel* value_parser_;
  };

  class TestReport_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    name ();

    virtual void
    status ();

    virtual void
    testScript ();

    virtual void
    result ();

    virtual void
    score ();

    virtual void
    tester ();

    virtual void
    issued ();

    virtual void
    participant ();

    virtual void
    setup ();

    virtual void
    test ();

    virtual void
    teardown ();

    virtual void
    post_TestReport ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* name */,
             ::fhir::TestReportStatus_pskel& /* status */,
             ::fhir::Reference_pskel& /* testScript */,
             ::fhir::TestReportResult_pskel& /* result */,
             ::fhir::decimal_pskel& /* score */,
             ::fhir::string_pskel& /* tester */,
             ::fhir::dateTime_pskel& /* issued */,
             ::fhir::TestReport_Participant_pskel& /* participant */,
             ::fhir::TestReport_Setup_pskel& /* setup */,
             ::fhir::TestReport_Test_pskel& /* test */,
             ::fhir::TestReport_Teardown_pskel& /* teardown */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::TestReportStatus_pskel&);

    void
    testScript_parser (::fhir::Reference_pskel&);

    void
    result_parser (::fhir::TestReportResult_pskel&);

    void
    score_parser (::fhir::decimal_pskel&);

    void
    tester_parser (::fhir::string_pskel&);

    void
    issued_parser (::fhir::dateTime_pskel&);

    void
    participant_parser (::fhir::TestReport_Participant_pskel&);

    void
    setup_parser (::fhir::TestReport_Setup_pskel&);

    void
    test_parser (::fhir::TestReport_Test_pskel&);

    void
    teardown_parser (::fhir::TestReport_Teardown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReport_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReport_pskel* TestReport_impl_;
    TestReport_pskel (TestReport_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::TestReportStatus_pskel* status_parser_;
    ::fhir::Reference_pskel* testScript_parser_;
    ::fhir::TestReportResult_pskel* result_parser_;
    ::fhir::decimal_pskel* score_parser_;
    ::fhir::string_pskel* tester_parser_;
    ::fhir::dateTime_pskel* issued_parser_;
    ::fhir::TestReport_Participant_pskel* participant_parser_;
    ::fhir::TestReport_Setup_pskel* setup_parser_;
    ::fhir::TestReport_Test_pskel* test_parser_;
    ::fhir::TestReport_Teardown_pskel* teardown_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestReport_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestReport_Participant_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    uri ();

    virtual void
    display ();

    virtual void
    post_TestReport_Participant ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestReportParticipantType_pskel& /* type */,
             ::fhir::uri_pskel& /* uri */,
             ::fhir::string_pskel& /* display */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::TestReportParticipantType_pskel&);

    void
    uri_parser (::fhir::uri_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReport_Participant_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReport_Participant_pskel* TestReport_Participant_impl_;
    TestReport_Participant_pskel (TestReport_Participant_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestReportParticipantType_pskel* type_parser_;
    ::fhir::uri_pskel* uri_parser_;
    ::fhir::string_pskel* display_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestReport_Participant_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestReport_Setup_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    action ();

    virtual void
    post_TestReport_Setup ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestReport_Action_pskel& /* action */);

    // Individual element parsers.
    //
    void
    action_parser (::fhir::TestReport_Action_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReport_Setup_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReport_Setup_pskel* TestReport_Setup_impl_;
    TestReport_Setup_pskel (TestReport_Setup_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestReport_Action_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestReport_Setup_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestReport_Action_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operation ();

    virtual void
    assert ();

    virtual void
    post_TestReport_Action ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestReport_Operation_pskel& /* operation */,
             ::fhir::TestReport_Assert_pskel& /* assert */);

    // Individual element parsers.
    //
    void
    operation_parser (::fhir::TestReport_Operation_pskel&);

    void
    assert_parser (::fhir::TestReport_Assert_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReport_Action_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReport_Action_pskel* TestReport_Action_impl_;
    TestReport_Action_pskel (TestReport_Action_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestReport_Operation_pskel* operation_parser_;
    ::fhir::TestReport_Assert_pskel* assert_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestReport_Action_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestReport_Operation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    result ();

    virtual void
    message ();

    virtual void
    detail ();

    virtual void
    post_TestReport_Operation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestReportActionResult_pskel& /* result */,
             ::fhir::markdown_pskel& /* message */,
             ::fhir::uri_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    result_parser (::fhir::TestReportActionResult_pskel&);

    void
    message_parser (::fhir::markdown_pskel&);

    void
    detail_parser (::fhir::uri_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReport_Operation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReport_Operation_pskel* TestReport_Operation_impl_;
    TestReport_Operation_pskel (TestReport_Operation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestReportActionResult_pskel* result_parser_;
    ::fhir::markdown_pskel* message_parser_;
    ::fhir::uri_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestReport_Operation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestReport_Assert_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    result ();

    virtual void
    message ();

    virtual void
    detail ();

    virtual void
    post_TestReport_Assert ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestReportActionResult_pskel& /* result */,
             ::fhir::markdown_pskel& /* message */,
             ::fhir::string_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    result_parser (::fhir::TestReportActionResult_pskel&);

    void
    message_parser (::fhir::markdown_pskel&);

    void
    detail_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReport_Assert_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReport_Assert_pskel* TestReport_Assert_impl_;
    TestReport_Assert_pskel (TestReport_Assert_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestReportActionResult_pskel* result_parser_;
    ::fhir::markdown_pskel* message_parser_;
    ::fhir::string_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestReport_Assert_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestReport_Test_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    description ();

    virtual void
    action ();

    virtual void
    post_TestReport_Test ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */,
             ::fhir::TestReport_Action1_pskel& /* action */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    action_parser (::fhir::TestReport_Action1_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReport_Test_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReport_Test_pskel* TestReport_Test_impl_;
    TestReport_Test_pskel (TestReport_Test_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::TestReport_Action1_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestReport_Test_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestReport_Action1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operation ();

    virtual void
    assert ();

    virtual void
    post_TestReport_Action1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestReport_Operation_pskel& /* operation */,
             ::fhir::TestReport_Assert_pskel& /* assert */);

    // Individual element parsers.
    //
    void
    operation_parser (::fhir::TestReport_Operation_pskel&);

    void
    assert_parser (::fhir::TestReport_Assert_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReport_Action1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReport_Action1_pskel* TestReport_Action1_impl_;
    TestReport_Action1_pskel (TestReport_Action1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestReport_Operation_pskel* operation_parser_;
    ::fhir::TestReport_Assert_pskel* assert_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestReport_Action1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestReport_Teardown_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    action ();

    virtual void
    post_TestReport_Teardown ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestReport_Action2_pskel& /* action */);

    // Individual element parsers.
    //
    void
    action_parser (::fhir::TestReport_Action2_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReport_Teardown_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReport_Teardown_pskel* TestReport_Teardown_impl_;
    TestReport_Teardown_pskel (TestReport_Teardown_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestReport_Action2_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestReport_Teardown_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestReport_Action2_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operation ();

    virtual void
    post_TestReport_Action2 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestReport_Operation_pskel& /* operation */);

    // Individual element parsers.
    //
    void
    operation_parser (::fhir::TestReport_Operation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReport_Action2_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReport_Action2_pskel* TestReport_Action2_impl_;
    TestReport_Action2_pskel (TestReport_Action2_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestReport_Operation_pskel* operation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestReport_Action2_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestReportStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TestReportStatus_list ();

    // Constructor.
    //
    TestReportStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReportStatus_list_pskel* TestReportStatus_list_impl_;
    TestReportStatus_list_pskel (TestReportStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_TestReportStatus_list_pskel_enums_[5UL];
  };

  class TestReportStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TestReportStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TestReportStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TestReportStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReportStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReportStatus_pskel* TestReportStatus_impl_;
    TestReportStatus_pskel (TestReportStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TestReportStatus_list_pskel* value_parser_;
  };

  class TestReportActionResult_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TestReportActionResult_list ();

    // Constructor.
    //
    TestReportActionResult_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReportActionResult_list_pskel* TestReportActionResult_list_impl_;
    TestReportActionResult_list_pskel (TestReportActionResult_list_pskel*, void*);

    protected:
    static const char* const _xsde_TestReportActionResult_list_pskel_enums_[5UL];
  };

  class TestReportActionResult_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TestReportActionResult ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TestReportActionResult_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TestReportActionResult_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReportActionResult_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReportActionResult_pskel* TestReportActionResult_impl_;
    TestReportActionResult_pskel (TestReportActionResult_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TestReportActionResult_list_pskel* value_parser_;
  };

  class TestReportParticipantType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TestReportParticipantType_list ();

    // Constructor.
    //
    TestReportParticipantType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReportParticipantType_list_pskel* TestReportParticipantType_list_impl_;
    TestReportParticipantType_list_pskel (TestReportParticipantType_list_pskel*, void*);

    protected:
    static const char* const _xsde_TestReportParticipantType_list_pskel_enums_[3UL];
  };

  class TestReportParticipantType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TestReportParticipantType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TestReportParticipantType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TestReportParticipantType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReportParticipantType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReportParticipantType_pskel* TestReportParticipantType_impl_;
    TestReportParticipantType_pskel (TestReportParticipantType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TestReportParticipantType_list_pskel* value_parser_;
  };

  class TestReportResult_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TestReportResult_list ();

    // Constructor.
    //
    TestReportResult_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReportResult_list_pskel* TestReportResult_list_impl_;
    TestReportResult_list_pskel (TestReportResult_list_pskel*, void*);

    protected:
    static const char* const _xsde_TestReportResult_list_pskel_enums_[3UL];
  };

  class TestReportResult_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TestReportResult ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TestReportResult_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TestReportResult_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestReportResult_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestReportResult_pskel* TestReportResult_impl_;
    TestReportResult_pskel (TestReportResult_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TestReportResult_list_pskel* value_parser_;
  };

  class TestScript_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    origin ();

    virtual void
    destination ();

    virtual void
    metadata ();

    virtual void
    fixture ();

    virtual void
    profile ();

    virtual void
    variable ();

    virtual void
    setup ();

    virtual void
    test ();

    virtual void
    teardown ();

    virtual void
    post_TestScript ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::TestScript_Origin_pskel& /* origin */,
             ::fhir::TestScript_Destination_pskel& /* destination */,
             ::fhir::TestScript_Metadata_pskel& /* metadata */,
             ::fhir::TestScript_Fixture_pskel& /* fixture */,
             ::fhir::Reference_pskel& /* profile */,
             ::fhir::TestScript_Variable_pskel& /* variable */,
             ::fhir::TestScript_Setup_pskel& /* setup */,
             ::fhir::TestScript_Test_pskel& /* test */,
             ::fhir::TestScript_Teardown_pskel& /* teardown */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    origin_parser (::fhir::TestScript_Origin_pskel&);

    void
    destination_parser (::fhir::TestScript_Destination_pskel&);

    void
    metadata_parser (::fhir::TestScript_Metadata_pskel&);

    void
    fixture_parser (::fhir::TestScript_Fixture_pskel&);

    void
    profile_parser (::fhir::Reference_pskel&);

    void
    variable_parser (::fhir::TestScript_Variable_pskel&);

    void
    setup_parser (::fhir::TestScript_Setup_pskel&);

    void
    test_parser (::fhir::TestScript_Test_pskel&);

    void
    teardown_parser (::fhir::TestScript_Teardown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_pskel* TestScript_impl_;
    TestScript_pskel (TestScript_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::TestScript_Origin_pskel* origin_parser_;
    ::fhir::TestScript_Destination_pskel* destination_parser_;
    ::fhir::TestScript_Metadata_pskel* metadata_parser_;
    ::fhir::TestScript_Fixture_pskel* fixture_parser_;
    ::fhir::Reference_pskel* profile_parser_;
    ::fhir::TestScript_Variable_pskel* variable_parser_;
    ::fhir::TestScript_Setup_pskel* setup_parser_;
    ::fhir::TestScript_Test_pskel* test_parser_;
    ::fhir::TestScript_Teardown_pskel* teardown_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Origin_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    index ();

    virtual void
    profile ();

    virtual void
    post_TestScript_Origin ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* index */,
             ::fhir::Coding_pskel& /* profile */);

    // Individual element parsers.
    //
    void
    index_parser (::fhir::integer_pskel&);

    void
    profile_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Origin_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Origin_pskel* TestScript_Origin_impl_;
    TestScript_Origin_pskel (TestScript_Origin_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* index_parser_;
    ::fhir::Coding_pskel* profile_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Origin_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Destination_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    index ();

    virtual void
    profile ();

    virtual void
    post_TestScript_Destination ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* index */,
             ::fhir::Coding_pskel& /* profile */);

    // Individual element parsers.
    //
    void
    index_parser (::fhir::integer_pskel&);

    void
    profile_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Destination_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Destination_pskel* TestScript_Destination_impl_;
    TestScript_Destination_pskel (TestScript_Destination_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* index_parser_;
    ::fhir::Coding_pskel* profile_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Destination_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Metadata_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    link ();

    virtual void
    capability ();

    virtual void
    post_TestScript_Metadata ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Link_pskel& /* link */,
             ::fhir::TestScript_Capability_pskel& /* capability */);

    // Individual element parsers.
    //
    void
    link_parser (::fhir::TestScript_Link_pskel&);

    void
    capability_parser (::fhir::TestScript_Capability_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Metadata_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Metadata_pskel* TestScript_Metadata_impl_;
    TestScript_Metadata_pskel (TestScript_Metadata_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Link_pskel* link_parser_;
    ::fhir::TestScript_Capability_pskel* capability_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Metadata_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Link_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    description ();

    virtual void
    post_TestScript_Link ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* description */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Link_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Link_pskel* TestScript_Link_impl_;
    TestScript_Link_pskel (TestScript_Link_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Link_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Capability_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    required ();

    virtual void
    validated ();

    virtual void
    description ();

    virtual void
    origin ();

    virtual void
    destination ();

    virtual void
    link ();

    virtual void
    capabilities ();

    virtual void
    post_TestScript_Capability ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* required */,
             ::fhir::boolean_pskel& /* validated */,
             ::fhir::string_pskel& /* description */,
             ::fhir::integer_pskel& /* origin */,
             ::fhir::integer_pskel& /* destination */,
             ::fhir::uri_pskel& /* link */,
             ::fhir::canonical_pskel& /* capabilities */);

    // Individual element parsers.
    //
    void
    required_parser (::fhir::boolean_pskel&);

    void
    validated_parser (::fhir::boolean_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    origin_parser (::fhir::integer_pskel&);

    void
    destination_parser (::fhir::integer_pskel&);

    void
    link_parser (::fhir::uri_pskel&);

    void
    capabilities_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Capability_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Capability_pskel* TestScript_Capability_impl_;
    TestScript_Capability_pskel (TestScript_Capability_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* required_parser_;
    ::fhir::boolean_pskel* validated_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::integer_pskel* origin_parser_;
    ::fhir::integer_pskel* destination_parser_;
    ::fhir::uri_pskel* link_parser_;
    ::fhir::canonical_pskel* capabilities_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Capability_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Fixture_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    autocreate ();

    virtual void
    autodelete ();

    virtual void
    resource ();

    virtual void
    post_TestScript_Fixture ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* autocreate */,
             ::fhir::boolean_pskel& /* autodelete */,
             ::fhir::Reference_pskel& /* resource */);

    // Individual element parsers.
    //
    void
    autocreate_parser (::fhir::boolean_pskel&);

    void
    autodelete_parser (::fhir::boolean_pskel&);

    void
    resource_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Fixture_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Fixture_pskel* TestScript_Fixture_impl_;
    TestScript_Fixture_pskel (TestScript_Fixture_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* autocreate_parser_;
    ::fhir::boolean_pskel* autodelete_parser_;
    ::fhir::Reference_pskel* resource_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Fixture_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Variable_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    defaultValue ();

    virtual void
    description ();

    virtual void
    expression ();

    virtual void
    headerField ();

    virtual void
    hint ();

    virtual void
    path ();

    virtual void
    sourceId ();

    virtual void
    post_TestScript_Variable ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* defaultValue */,
             ::fhir::string_pskel& /* description */,
             ::fhir::string_pskel& /* expression */,
             ::fhir::string_pskel& /* headerField */,
             ::fhir::string_pskel& /* hint */,
             ::fhir::string_pskel& /* path */,
             ::fhir::id_pskel& /* sourceId */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    defaultValue_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    void
    headerField_parser (::fhir::string_pskel&);

    void
    hint_parser (::fhir::string_pskel&);

    void
    path_parser (::fhir::string_pskel&);

    void
    sourceId_parser (::fhir::id_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Variable_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Variable_pskel* TestScript_Variable_impl_;
    TestScript_Variable_pskel (TestScript_Variable_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* defaultValue_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::string_pskel* expression_parser_;
    ::fhir::string_pskel* headerField_parser_;
    ::fhir::string_pskel* hint_parser_;
    ::fhir::string_pskel* path_parser_;
    ::fhir::id_pskel* sourceId_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Variable_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Setup_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    action ();

    virtual void
    post_TestScript_Setup ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Action_pskel& /* action */);

    // Individual element parsers.
    //
    void
    action_parser (::fhir::TestScript_Action_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Setup_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Setup_pskel* TestScript_Setup_impl_;
    TestScript_Setup_pskel (TestScript_Setup_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Action_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Setup_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Action_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operation ();

    virtual void
    assert ();

    virtual void
    post_TestScript_Action ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Operation_pskel& /* operation */,
             ::fhir::TestScript_Assert_pskel& /* assert */);

    // Individual element parsers.
    //
    void
    operation_parser (::fhir::TestScript_Operation_pskel&);

    void
    assert_parser (::fhir::TestScript_Assert_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Action_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Action_pskel* TestScript_Action_impl_;
    TestScript_Action_pskel (TestScript_Action_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Operation_pskel* operation_parser_;
    ::fhir::TestScript_Assert_pskel* assert_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Action_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Operation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    resource ();

    virtual void
    label ();

    virtual void
    description ();

    virtual void
    accept ();

    virtual void
    contentType ();

    virtual void
    destination ();

    virtual void
    encodeRequestUrl ();

    virtual void
    method ();

    virtual void
    origin ();

    virtual void
    params ();

    virtual void
    requestHeader ();

    virtual void
    requestId ();

    virtual void
    responseId ();

    virtual void
    sourceId ();

    virtual void
    targetId ();

    virtual void
    url ();

    virtual void
    post_TestScript_Operation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* type */,
             ::fhir::code_pskel& /* resource */,
             ::fhir::string_pskel& /* label */,
             ::fhir::string_pskel& /* description */,
             ::fhir::code_pskel& /* accept */,
             ::fhir::code_pskel& /* contentType */,
             ::fhir::integer_pskel& /* destination */,
             ::fhir::boolean_pskel& /* encodeRequestUrl */,
             ::fhir::TestScriptRequestMethodCode_pskel& /* method */,
             ::fhir::integer_pskel& /* origin */,
             ::fhir::string_pskel& /* params */,
             ::fhir::TestScript_RequestHeader_pskel& /* requestHeader */,
             ::fhir::id_pskel& /* requestId */,
             ::fhir::id_pskel& /* responseId */,
             ::fhir::id_pskel& /* sourceId */,
             ::fhir::id_pskel& /* targetId */,
             ::fhir::string_pskel& /* url */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::Coding_pskel&);

    void
    resource_parser (::fhir::code_pskel&);

    void
    label_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    accept_parser (::fhir::code_pskel&);

    void
    contentType_parser (::fhir::code_pskel&);

    void
    destination_parser (::fhir::integer_pskel&);

    void
    encodeRequestUrl_parser (::fhir::boolean_pskel&);

    void
    method_parser (::fhir::TestScriptRequestMethodCode_pskel&);

    void
    origin_parser (::fhir::integer_pskel&);

    void
    params_parser (::fhir::string_pskel&);

    void
    requestHeader_parser (::fhir::TestScript_RequestHeader_pskel&);

    void
    requestId_parser (::fhir::id_pskel&);

    void
    responseId_parser (::fhir::id_pskel&);

    void
    sourceId_parser (::fhir::id_pskel&);

    void
    targetId_parser (::fhir::id_pskel&);

    void
    url_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Operation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Operation_pskel* TestScript_Operation_impl_;
    TestScript_Operation_pskel (TestScript_Operation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* type_parser_;
    ::fhir::code_pskel* resource_parser_;
    ::fhir::string_pskel* label_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::code_pskel* accept_parser_;
    ::fhir::code_pskel* contentType_parser_;
    ::fhir::integer_pskel* destination_parser_;
    ::fhir::boolean_pskel* encodeRequestUrl_parser_;
    ::fhir::TestScriptRequestMethodCode_pskel* method_parser_;
    ::fhir::integer_pskel* origin_parser_;
    ::fhir::string_pskel* params_parser_;
    ::fhir::TestScript_RequestHeader_pskel* requestHeader_parser_;
    ::fhir::id_pskel* requestId_parser_;
    ::fhir::id_pskel* responseId_parser_;
    ::fhir::id_pskel* sourceId_parser_;
    ::fhir::id_pskel* targetId_parser_;
    ::fhir::string_pskel* url_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Operation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_RequestHeader_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    field ();

    virtual void
    value ();

    virtual void
    post_TestScript_RequestHeader ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* field */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    field_parser (::fhir::string_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_RequestHeader_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_RequestHeader_pskel* TestScript_RequestHeader_impl_;
    TestScript_RequestHeader_pskel (TestScript_RequestHeader_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* field_parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_RequestHeader_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Assert_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    label ();

    virtual void
    description ();

    virtual void
    direction ();

    virtual void
    compareToSourceId ();

    virtual void
    compareToSourceExpression ();

    virtual void
    compareToSourcePath ();

    virtual void
    contentType ();

    virtual void
    expression ();

    virtual void
    headerField ();

    virtual void
    minimumId ();

    virtual void
    navigationLinks ();

    virtual void
    operator_ ();

    virtual void
    path ();

    virtual void
    requestMethod ();

    virtual void
    requestURL ();

    virtual void
    resource ();

    virtual void
    response ();

    virtual void
    responseCode ();

    virtual void
    sourceId ();

    virtual void
    validateProfileId ();

    virtual void
    value ();

    virtual void
    warningOnly ();

    virtual void
    post_TestScript_Assert ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* label */,
             ::fhir::string_pskel& /* description */,
             ::fhir::AssertionDirectionType_pskel& /* direction */,
             ::fhir::string_pskel& /* compareToSourceId */,
             ::fhir::string_pskel& /* compareToSourceExpression */,
             ::fhir::string_pskel& /* compareToSourcePath */,
             ::fhir::code_pskel& /* contentType */,
             ::fhir::string_pskel& /* expression */,
             ::fhir::string_pskel& /* headerField */,
             ::fhir::string_pskel& /* minimumId */,
             ::fhir::boolean_pskel& /* navigationLinks */,
             ::fhir::AssertionOperatorType_pskel& /* operator */,
             ::fhir::string_pskel& /* path */,
             ::fhir::TestScriptRequestMethodCode_pskel& /* requestMethod */,
             ::fhir::string_pskel& /* requestURL */,
             ::fhir::code_pskel& /* resource */,
             ::fhir::AssertionResponseTypes_pskel& /* response */,
             ::fhir::string_pskel& /* responseCode */,
             ::fhir::id_pskel& /* sourceId */,
             ::fhir::id_pskel& /* validateProfileId */,
             ::fhir::string_pskel& /* value */,
             ::fhir::boolean_pskel& /* warningOnly */);

    // Individual element parsers.
    //
    void
    label_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    direction_parser (::fhir::AssertionDirectionType_pskel&);

    void
    compareToSourceId_parser (::fhir::string_pskel&);

    void
    compareToSourceExpression_parser (::fhir::string_pskel&);

    void
    compareToSourcePath_parser (::fhir::string_pskel&);

    void
    contentType_parser (::fhir::code_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    void
    headerField_parser (::fhir::string_pskel&);

    void
    minimumId_parser (::fhir::string_pskel&);

    void
    navigationLinks_parser (::fhir::boolean_pskel&);

    void
    operator__parser (::fhir::AssertionOperatorType_pskel&);

    void
    path_parser (::fhir::string_pskel&);

    void
    requestMethod_parser (::fhir::TestScriptRequestMethodCode_pskel&);

    void
    requestURL_parser (::fhir::string_pskel&);

    void
    resource_parser (::fhir::code_pskel&);

    void
    response_parser (::fhir::AssertionResponseTypes_pskel&);

    void
    responseCode_parser (::fhir::string_pskel&);

    void
    sourceId_parser (::fhir::id_pskel&);

    void
    validateProfileId_parser (::fhir::id_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    void
    warningOnly_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Assert_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Assert_pskel* TestScript_Assert_impl_;
    TestScript_Assert_pskel (TestScript_Assert_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* label_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::AssertionDirectionType_pskel* direction_parser_;
    ::fhir::string_pskel* compareToSourceId_parser_;
    ::fhir::string_pskel* compareToSourceExpression_parser_;
    ::fhir::string_pskel* compareToSourcePath_parser_;
    ::fhir::code_pskel* contentType_parser_;
    ::fhir::string_pskel* expression_parser_;
    ::fhir::string_pskel* headerField_parser_;
    ::fhir::string_pskel* minimumId_parser_;
    ::fhir::boolean_pskel* navigationLinks_parser_;
    ::fhir::AssertionOperatorType_pskel* operator__parser_;
    ::fhir::string_pskel* path_parser_;
    ::fhir::TestScriptRequestMethodCode_pskel* requestMethod_parser_;
    ::fhir::string_pskel* requestURL_parser_;
    ::fhir::code_pskel* resource_parser_;
    ::fhir::AssertionResponseTypes_pskel* response_parser_;
    ::fhir::string_pskel* responseCode_parser_;
    ::fhir::id_pskel* sourceId_parser_;
    ::fhir::id_pskel* validateProfileId_parser_;
    ::fhir::string_pskel* value_parser_;
    ::fhir::boolean_pskel* warningOnly_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Assert_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Test_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    description ();

    virtual void
    action ();

    virtual void
    post_TestScript_Test ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */,
             ::fhir::TestScript_Action1_pskel& /* action */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    action_parser (::fhir::TestScript_Action1_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Test_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Test_pskel* TestScript_Test_impl_;
    TestScript_Test_pskel (TestScript_Test_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::TestScript_Action1_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Test_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Action1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operation ();

    virtual void
    assert ();

    virtual void
    post_TestScript_Action1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Operation_pskel& /* operation */,
             ::fhir::TestScript_Assert_pskel& /* assert */);

    // Individual element parsers.
    //
    void
    operation_parser (::fhir::TestScript_Operation_pskel&);

    void
    assert_parser (::fhir::TestScript_Assert_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Action1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Action1_pskel* TestScript_Action1_impl_;
    TestScript_Action1_pskel (TestScript_Action1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Operation_pskel* operation_parser_;
    ::fhir::TestScript_Assert_pskel* assert_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Action1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Teardown_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    action ();

    virtual void
    post_TestScript_Teardown ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Action2_pskel& /* action */);

    // Individual element parsers.
    //
    void
    action_parser (::fhir::TestScript_Action2_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Teardown_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Teardown_pskel* TestScript_Teardown_impl_;
    TestScript_Teardown_pskel (TestScript_Teardown_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Action2_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Teardown_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Action2_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operation ();

    virtual void
    post_TestScript_Action2 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Operation_pskel& /* operation */);

    // Individual element parsers.
    //
    void
    operation_parser (::fhir::TestScript_Operation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Action2_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Action2_pskel* TestScript_Action2_impl_;
    TestScript_Action2_pskel (TestScript_Action2_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Operation_pskel* operation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Action2_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AssertionDirectionType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AssertionDirectionType_list ();

    // Constructor.
    //
    AssertionDirectionType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionDirectionType_list_pskel* AssertionDirectionType_list_impl_;
    AssertionDirectionType_list_pskel (AssertionDirectionType_list_pskel*, void*);

    protected:
    static const char* const _xsde_AssertionDirectionType_list_pskel_enums_[2UL];
  };

  class AssertionDirectionType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AssertionDirectionType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AssertionDirectionType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AssertionDirectionType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AssertionDirectionType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionDirectionType_pskel* AssertionDirectionType_impl_;
    AssertionDirectionType_pskel (AssertionDirectionType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AssertionDirectionType_list_pskel* value_parser_;
  };

  class AssertionOperatorType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AssertionOperatorType_list ();

    // Constructor.
    //
    AssertionOperatorType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionOperatorType_list_pskel* AssertionOperatorType_list_impl_;
    AssertionOperatorType_list_pskel (AssertionOperatorType_list_pskel*, void*);

    protected:
    static const char* const _xsde_AssertionOperatorType_list_pskel_enums_[11UL];
  };

  class AssertionOperatorType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AssertionOperatorType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AssertionOperatorType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AssertionOperatorType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AssertionOperatorType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionOperatorType_pskel* AssertionOperatorType_impl_;
    AssertionOperatorType_pskel (AssertionOperatorType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AssertionOperatorType_list_pskel* value_parser_;
  };

  class AssertionResponseTypes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AssertionResponseTypes_list ();

    // Constructor.
    //
    AssertionResponseTypes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionResponseTypes_list_pskel* AssertionResponseTypes_list_impl_;
    AssertionResponseTypes_list_pskel (AssertionResponseTypes_list_pskel*, void*);

    protected:
    static const char* const _xsde_AssertionResponseTypes_list_pskel_enums_[12UL];
  };

  class AssertionResponseTypes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AssertionResponseTypes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AssertionResponseTypes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AssertionResponseTypes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AssertionResponseTypes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionResponseTypes_pskel* AssertionResponseTypes_impl_;
    AssertionResponseTypes_pskel (AssertionResponseTypes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AssertionResponseTypes_list_pskel* value_parser_;
  };

  class TestScriptRequestMethodCode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TestScriptRequestMethodCode_list ();

    // Constructor.
    //
    TestScriptRequestMethodCode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScriptRequestMethodCode_list_pskel* TestScriptRequestMethodCode_list_impl_;
    TestScriptRequestMethodCode_list_pskel (TestScriptRequestMethodCode_list_pskel*, void*);

    protected:
    static const char* const _xsde_TestScriptRequestMethodCode_list_pskel_enums_[7UL];
  };

  class TestScriptRequestMethodCode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TestScriptRequestMethodCode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TestScriptRequestMethodCode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TestScriptRequestMethodCode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScriptRequestMethodCode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScriptRequestMethodCode_pskel* TestScriptRequestMethodCode_impl_;
    TestScriptRequestMethodCode_pskel (TestScriptRequestMethodCode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TestScriptRequestMethodCode_list_pskel* value_parser_;
  };

  class ValueSet_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    immutable ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    compose ();

    virtual void
    expansion ();

    virtual void
    post_ValueSet ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::boolean_pskel& /* immutable */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::ValueSet_Compose_pskel& /* compose */,
             ::fhir::ValueSet_Expansion_pskel& /* expansion */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    immutable_parser (::fhir::boolean_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    compose_parser (::fhir::ValueSet_Compose_pskel&);

    void
    expansion_parser (::fhir::ValueSet_Expansion_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ValueSet_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    ValueSet_pskel* ValueSet_impl_;
    ValueSet_pskel (ValueSet_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::boolean_pskel* immutable_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::ValueSet_Compose_pskel* compose_parser_;
    ::fhir::ValueSet_Expansion_pskel* expansion_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ValueSet_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ValueSet_Compose_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    lockedDate ();

    virtual void
    inactive ();

    virtual void
    include ();

    virtual void
    exclude ();

    virtual void
    post_ValueSet_Compose ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::date_pskel& /* lockedDate */,
             ::fhir::boolean_pskel& /* inactive */,
             ::fhir::ValueSet_Include_pskel& /* include */,
             ::fhir::ValueSet_Include_pskel& /* exclude */);

    // Individual element parsers.
    //
    void
    lockedDate_parser (::fhir::date_pskel&);

    void
    inactive_parser (::fhir::boolean_pskel&);

    void
    include_parser (::fhir::ValueSet_Include_pskel&);

    void
    exclude_parser (::fhir::ValueSet_Include_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ValueSet_Compose_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ValueSet_Compose_pskel* ValueSet_Compose_impl_;
    ValueSet_Compose_pskel (ValueSet_Compose_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::date_pskel* lockedDate_parser_;
    ::fhir::boolean_pskel* inactive_parser_;
    ::fhir::ValueSet_Include_pskel* include_parser_;
    ::fhir::ValueSet_Include_pskel* exclude_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ValueSet_Compose_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ValueSet_Include_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    system ();

    virtual void
    version ();

    virtual void
    concept ();

    virtual void
    filter ();

    virtual void
    valueSet ();

    virtual void
    post_ValueSet_Include ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* system */,
             ::fhir::string_pskel& /* version */,
             ::fhir::ValueSet_Concept_pskel& /* concept */,
             ::fhir::ValueSet_Filter_pskel& /* filter */,
             ::fhir::canonical_pskel& /* valueSet */);

    // Individual element parsers.
    //
    void
    system_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    concept_parser (::fhir::ValueSet_Concept_pskel&);

    void
    filter_parser (::fhir::ValueSet_Filter_pskel&);

    void
    valueSet_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ValueSet_Include_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ValueSet_Include_pskel* ValueSet_Include_impl_;
    ValueSet_Include_pskel (ValueSet_Include_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* system_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::ValueSet_Concept_pskel* concept_parser_;
    ::fhir::ValueSet_Filter_pskel* filter_parser_;
    ::fhir::canonical_pskel* valueSet_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ValueSet_Include_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ValueSet_Concept_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    display ();

    virtual void
    designation ();

    virtual void
    post_ValueSet_Concept ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* display */,
             ::fhir::ValueSet_Designation_pskel& /* designation */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::code_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    void
    designation_parser (::fhir::ValueSet_Designation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ValueSet_Concept_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ValueSet_Concept_pskel* ValueSet_Concept_impl_;
    ValueSet_Concept_pskel (ValueSet_Concept_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* display_parser_;
    ::fhir::ValueSet_Designation_pskel* designation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ValueSet_Concept_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ValueSet_Designation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    language ();

    virtual void
    use ();

    virtual void
    value ();

    virtual void
    post_ValueSet_Designation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Coding_pskel& /* use */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    language_parser (::fhir::code_pskel&);

    void
    use_parser (::fhir::Coding_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ValueSet_Designation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ValueSet_Designation_pskel* ValueSet_Designation_impl_;
    ValueSet_Designation_pskel (ValueSet_Designation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* language_parser_;
    ::fhir::Coding_pskel* use_parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ValueSet_Designation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ValueSet_Filter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    property ();

    virtual void
    op ();

    virtual void
    value ();

    virtual void
    post_ValueSet_Filter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* property */,
             ::fhir::FilterOperator_pskel& /* op */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    property_parser (::fhir::code_pskel&);

    void
    op_parser (::fhir::FilterOperator_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ValueSet_Filter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ValueSet_Filter_pskel* ValueSet_Filter_impl_;
    ValueSet_Filter_pskel (ValueSet_Filter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* property_parser_;
    ::fhir::FilterOperator_pskel* op_parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ValueSet_Filter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ValueSet_Expansion_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    timestamp ();

    virtual void
    total ();

    virtual void
    offset ();

    virtual void
    parameter ();

    virtual void
    contains ();

    virtual void
    post_ValueSet_Expansion ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* identifier */,
             ::fhir::dateTime_pskel& /* timestamp */,
             ::fhir::integer_pskel& /* total */,
             ::fhir::integer_pskel& /* offset */,
             ::fhir::ValueSet_Parameter_pskel& /* parameter */,
             ::fhir::ValueSet_Contains_pskel& /* contains */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::uri_pskel&);

    void
    timestamp_parser (::fhir::dateTime_pskel&);

    void
    total_parser (::fhir::integer_pskel&);

    void
    offset_parser (::fhir::integer_pskel&);

    void
    parameter_parser (::fhir::ValueSet_Parameter_pskel&);

    void
    contains_parser (::fhir::ValueSet_Contains_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ValueSet_Expansion_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ValueSet_Expansion_pskel* ValueSet_Expansion_impl_;
    ValueSet_Expansion_pskel (ValueSet_Expansion_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* identifier_parser_;
    ::fhir::dateTime_pskel* timestamp_parser_;
    ::fhir::integer_pskel* total_parser_;
    ::fhir::integer_pskel* offset_parser_;
    ::fhir::ValueSet_Parameter_pskel* parameter_parser_;
    ::fhir::ValueSet_Contains_pskel* contains_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ValueSet_Expansion_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ValueSet_Parameter_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    valueString ();

    virtual void
    valueBoolean ();

    virtual void
    valueInteger ();

    virtual void
    valueDecimal ();

    virtual void
    valueUri ();

    virtual void
    valueCode ();

    virtual void
    valueDateTime ();

    virtual void
    post_ValueSet_Parameter ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::code_pskel& /* valueCode */,
             ::fhir::dateTime_pskel& /* valueDateTime */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueCode_parser (::fhir::code_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ValueSet_Parameter_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ValueSet_Parameter_pskel* ValueSet_Parameter_impl_;
    ValueSet_Parameter_pskel (ValueSet_Parameter_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::code_pskel* valueCode_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ValueSet_Parameter_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ValueSet_Contains_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    system ();

    virtual void
    abstract ();

    virtual void
    inactive ();

    virtual void
    version ();

    virtual void
    code ();

    virtual void
    display ();

    virtual void
    designation ();

    virtual void
    contains ();

    virtual void
    post_ValueSet_Contains ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* system */,
             ::fhir::boolean_pskel& /* abstract */,
             ::fhir::boolean_pskel& /* inactive */,
             ::fhir::string_pskel& /* version */,
             ::fhir::code_pskel& /* code */,
             ::fhir::string_pskel& /* display */,
             ::fhir::ValueSet_Designation_pskel& /* designation */,
             ::fhir::ValueSet_Contains_pskel& /* contains */);

    // Individual element parsers.
    //
    void
    system_parser (::fhir::uri_pskel&);

    void
    abstract_parser (::fhir::boolean_pskel&);

    void
    inactive_parser (::fhir::boolean_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    code_parser (::fhir::code_pskel&);

    void
    display_parser (::fhir::string_pskel&);

    void
    designation_parser (::fhir::ValueSet_Designation_pskel&);

    void
    contains_parser (::fhir::ValueSet_Contains_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ValueSet_Contains_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    ValueSet_Contains_pskel* ValueSet_Contains_impl_;
    ValueSet_Contains_pskel (ValueSet_Contains_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* system_parser_;
    ::fhir::boolean_pskel* abstract_parser_;
    ::fhir::boolean_pskel* inactive_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::code_pskel* code_parser_;
    ::fhir::string_pskel* display_parser_;
    ::fhir::ValueSet_Designation_pskel* designation_parser_;
    ::fhir::ValueSet_Contains_pskel* contains_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::ValueSet_Contains_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class VerificationResult_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    target ();

    virtual void
    targetLocation ();

    virtual void
    need ();

    virtual void
    status ();

    virtual void
    statusDate ();

    virtual void
    validationType ();

    virtual void
    validationProcess ();

    virtual void
    frequency ();

    virtual void
    lastPerformed ();

    virtual void
    nextScheduled ();

    virtual void
    failureAction ();

    virtual void
    primarySource ();

    virtual void
    attestation ();

    virtual void
    validator ();

    virtual void
    post_VerificationResult ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* target */,
             ::fhir::string_pskel& /* targetLocation */,
             ::fhir::CodeableConcept_pskel& /* need */,
             ::fhir::status_pskel& /* status */,
             ::fhir::dateTime_pskel& /* statusDate */,
             ::fhir::CodeableConcept_pskel& /* validationType */,
             ::fhir::CodeableConcept_pskel& /* validationProcess */,
             ::fhir::Timing_pskel& /* frequency */,
             ::fhir::dateTime_pskel& /* lastPerformed */,
             ::fhir::date_pskel& /* nextScheduled */,
             ::fhir::CodeableConcept_pskel& /* failureAction */,
             ::fhir::VerificationResult_PrimarySource_pskel& /* primarySource */,
             ::fhir::VerificationResult_Attestation_pskel& /* attestation */,
             ::fhir::VerificationResult_Validator_pskel& /* validator */);

    // Individual element parsers.
    //
    void
    target_parser (::fhir::Reference_pskel&);

    void
    targetLocation_parser (::fhir::string_pskel&);

    void
    need_parser (::fhir::CodeableConcept_pskel&);

    void
    status_parser (::fhir::status_pskel&);

    void
    statusDate_parser (::fhir::dateTime_pskel&);

    void
    validationType_parser (::fhir::CodeableConcept_pskel&);

    void
    validationProcess_parser (::fhir::CodeableConcept_pskel&);

    void
    frequency_parser (::fhir::Timing_pskel&);

    void
    lastPerformed_parser (::fhir::dateTime_pskel&);

    void
    nextScheduled_parser (::fhir::date_pskel&);

    void
    failureAction_parser (::fhir::CodeableConcept_pskel&);

    void
    primarySource_parser (::fhir::VerificationResult_PrimarySource_pskel&);

    void
    attestation_parser (::fhir::VerificationResult_Attestation_pskel&);

    void
    validator_parser (::fhir::VerificationResult_Validator_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VerificationResult_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    VerificationResult_pskel* VerificationResult_impl_;
    VerificationResult_pskel (VerificationResult_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* target_parser_;
    ::fhir::string_pskel* targetLocation_parser_;
    ::fhir::CodeableConcept_pskel* need_parser_;
    ::fhir::status_pskel* status_parser_;
    ::fhir::dateTime_pskel* statusDate_parser_;
    ::fhir::CodeableConcept_pskel* validationType_parser_;
    ::fhir::CodeableConcept_pskel* validationProcess_parser_;
    ::fhir::Timing_pskel* frequency_parser_;
    ::fhir::dateTime_pskel* lastPerformed_parser_;
    ::fhir::date_pskel* nextScheduled_parser_;
    ::fhir::CodeableConcept_pskel* failureAction_parser_;
    ::fhir::VerificationResult_PrimarySource_pskel* primarySource_parser_;
    ::fhir::VerificationResult_Attestation_pskel* attestation_parser_;
    ::fhir::VerificationResult_Validator_pskel* validator_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VerificationResult_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class VerificationResult_PrimarySource_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    who ();

    virtual void
    type ();

    virtual void
    communicationMethod ();

    virtual void
    validationStatus ();

    virtual void
    validationDate ();

    virtual void
    canPushUpdates ();

    virtual void
    pushTypeAvailable ();

    virtual void
    post_VerificationResult_PrimarySource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* who */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* communicationMethod */,
             ::fhir::CodeableConcept_pskel& /* validationStatus */,
             ::fhir::dateTime_pskel& /* validationDate */,
             ::fhir::CodeableConcept_pskel& /* canPushUpdates */,
             ::fhir::CodeableConcept_pskel& /* pushTypeAvailable */);

    // Individual element parsers.
    //
    void
    who_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    communicationMethod_parser (::fhir::CodeableConcept_pskel&);

    void
    validationStatus_parser (::fhir::CodeableConcept_pskel&);

    void
    validationDate_parser (::fhir::dateTime_pskel&);

    void
    canPushUpdates_parser (::fhir::CodeableConcept_pskel&);

    void
    pushTypeAvailable_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VerificationResult_PrimarySource_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    VerificationResult_PrimarySource_pskel* VerificationResult_PrimarySource_impl_;
    VerificationResult_PrimarySource_pskel (VerificationResult_PrimarySource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* who_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* communicationMethod_parser_;
    ::fhir::CodeableConcept_pskel* validationStatus_parser_;
    ::fhir::dateTime_pskel* validationDate_parser_;
    ::fhir::CodeableConcept_pskel* canPushUpdates_parser_;
    ::fhir::CodeableConcept_pskel* pushTypeAvailable_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VerificationResult_PrimarySource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class VerificationResult_Attestation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    who ();

    virtual void
    onBehalfOf ();

    virtual void
    communicationMethod ();

    virtual void
    date ();

    virtual void
    sourceIdentityCertificate ();

    virtual void
    proxyIdentityCertificate ();

    virtual void
    proxySignature ();

    virtual void
    sourceSignature ();

    virtual void
    post_VerificationResult_Attestation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* who */,
             ::fhir::Reference_pskel& /* onBehalfOf */,
             ::fhir::CodeableConcept_pskel& /* communicationMethod */,
             ::fhir::date_pskel& /* date */,
             ::fhir::string_pskel& /* sourceIdentityCertificate */,
             ::fhir::string_pskel& /* proxyIdentityCertificate */,
             ::fhir::Signature_pskel& /* proxySignature */,
             ::fhir::Signature_pskel& /* sourceSignature */);

    // Individual element parsers.
    //
    void
    who_parser (::fhir::Reference_pskel&);

    void
    onBehalfOf_parser (::fhir::Reference_pskel&);

    void
    communicationMethod_parser (::fhir::CodeableConcept_pskel&);

    void
    date_parser (::fhir::date_pskel&);

    void
    sourceIdentityCertificate_parser (::fhir::string_pskel&);

    void
    proxyIdentityCertificate_parser (::fhir::string_pskel&);

    void
    proxySignature_parser (::fhir::Signature_pskel&);

    void
    sourceSignature_parser (::fhir::Signature_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VerificationResult_Attestation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    VerificationResult_Attestation_pskel* VerificationResult_Attestation_impl_;
    VerificationResult_Attestation_pskel (VerificationResult_Attestation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* who_parser_;
    ::fhir::Reference_pskel* onBehalfOf_parser_;
    ::fhir::CodeableConcept_pskel* communicationMethod_parser_;
    ::fhir::date_pskel* date_parser_;
    ::fhir::string_pskel* sourceIdentityCertificate_parser_;
    ::fhir::string_pskel* proxyIdentityCertificate_parser_;
    ::fhir::Signature_pskel* proxySignature_parser_;
    ::fhir::Signature_pskel* sourceSignature_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VerificationResult_Attestation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class VerificationResult_Validator_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    organization ();

    virtual void
    identityCertificate ();

    virtual void
    attestationSignature ();

    virtual void
    post_VerificationResult_Validator ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* organization */,
             ::fhir::string_pskel& /* identityCertificate */,
             ::fhir::Signature_pskel& /* attestationSignature */);

    // Individual element parsers.
    //
    void
    organization_parser (::fhir::Reference_pskel&);

    void
    identityCertificate_parser (::fhir::string_pskel&);

    void
    attestationSignature_parser (::fhir::Signature_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VerificationResult_Validator_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    VerificationResult_Validator_pskel* VerificationResult_Validator_impl_;
    VerificationResult_Validator_pskel (VerificationResult_Validator_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* organization_parser_;
    ::fhir::string_pskel* identityCertificate_parser_;
    ::fhir::Signature_pskel* attestationSignature_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VerificationResult_Validator_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class status_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_status_list ();

    // Constructor.
    //
    status_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    status_list_pskel* status_list_impl_;
    status_list_pskel (status_list_pskel*, void*);

    protected:
    static const char* const _xsde_status_list_pskel_enums_[6UL];
  };

  class status_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_status ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::status_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::status_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    status_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    status_pskel* status_impl_;
    status_pskel (status_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::status_list_pskel* value_parser_;
  };

  class VisionPrescription_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    created ();

    virtual void
    patient ();

    virtual void
    encounter ();

    virtual void
    dateWritten ();

    virtual void
    prescriber ();

    virtual void
    lensSpecification ();

    virtual void
    post_VisionPrescription ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::FinancialResourceStatusCodes_pskel& /* status */,
             ::fhir::dateTime_pskel& /* created */,
             ::fhir::Reference_pskel& /* patient */,
             ::fhir::Reference_pskel& /* encounter */,
             ::fhir::dateTime_pskel& /* dateWritten */,
             ::fhir::Reference_pskel& /* prescriber */,
             ::fhir::VisionPrescription_LensSpecification_pskel& /* lensSpecification */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::FinancialResourceStatusCodes_pskel&);

    void
    created_parser (::fhir::dateTime_pskel&);

    void
    patient_parser (::fhir::Reference_pskel&);

    void
    encounter_parser (::fhir::Reference_pskel&);

    void
    dateWritten_parser (::fhir::dateTime_pskel&);

    void
    prescriber_parser (::fhir::Reference_pskel&);

    void
    lensSpecification_parser (::fhir::VisionPrescription_LensSpecification_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VisionPrescription_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    VisionPrescription_pskel* VisionPrescription_impl_;
    VisionPrescription_pskel (VisionPrescription_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::FinancialResourceStatusCodes_pskel* status_parser_;
    ::fhir::dateTime_pskel* created_parser_;
    ::fhir::Reference_pskel* patient_parser_;
    ::fhir::Reference_pskel* encounter_parser_;
    ::fhir::dateTime_pskel* dateWritten_parser_;
    ::fhir::Reference_pskel* prescriber_parser_;
    ::fhir::VisionPrescription_LensSpecification_pskel* lensSpecification_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VisionPrescription_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class VisionPrescription_LensSpecification_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    product ();

    virtual void
    eye ();

    virtual void
    sphere ();

    virtual void
    cylinder ();

    virtual void
    axis ();

    virtual void
    prism ();

    virtual void
    add ();

    virtual void
    power ();

    virtual void
    backCurve ();

    virtual void
    diameter ();

    virtual void
    duration ();

    virtual void
    color ();

    virtual void
    brand ();

    virtual void
    note ();

    virtual void
    post_VisionPrescription_LensSpecification ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* product */,
             ::fhir::VisionEyes_pskel& /* eye */,
             ::fhir::decimal_pskel& /* sphere */,
             ::fhir::decimal_pskel& /* cylinder */,
             ::fhir::integer_pskel& /* axis */,
             ::fhir::VisionPrescription_Prism_pskel& /* prism */,
             ::fhir::decimal_pskel& /* add */,
             ::fhir::decimal_pskel& /* power */,
             ::fhir::decimal_pskel& /* backCurve */,
             ::fhir::decimal_pskel& /* diameter */,
             ::fhir::Quantity_pskel& /* duration */,
             ::fhir::string_pskel& /* color */,
             ::fhir::string_pskel& /* brand */,
             ::fhir::Annotation_pskel& /* note */);

    // Individual element parsers.
    //
    void
    product_parser (::fhir::CodeableConcept_pskel&);

    void
    eye_parser (::fhir::VisionEyes_pskel&);

    void
    sphere_parser (::fhir::decimal_pskel&);

    void
    cylinder_parser (::fhir::decimal_pskel&);

    void
    axis_parser (::fhir::integer_pskel&);

    void
    prism_parser (::fhir::VisionPrescription_Prism_pskel&);

    void
    add_parser (::fhir::decimal_pskel&);

    void
    power_parser (::fhir::decimal_pskel&);

    void
    backCurve_parser (::fhir::decimal_pskel&);

    void
    diameter_parser (::fhir::decimal_pskel&);

    void
    duration_parser (::fhir::Quantity_pskel&);

    void
    color_parser (::fhir::string_pskel&);

    void
    brand_parser (::fhir::string_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VisionPrescription_LensSpecification_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    VisionPrescription_LensSpecification_pskel* VisionPrescription_LensSpecification_impl_;
    VisionPrescription_LensSpecification_pskel (VisionPrescription_LensSpecification_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* product_parser_;
    ::fhir::VisionEyes_pskel* eye_parser_;
    ::fhir::decimal_pskel* sphere_parser_;
    ::fhir::decimal_pskel* cylinder_parser_;
    ::fhir::integer_pskel* axis_parser_;
    ::fhir::VisionPrescription_Prism_pskel* prism_parser_;
    ::fhir::decimal_pskel* add_parser_;
    ::fhir::decimal_pskel* power_parser_;
    ::fhir::decimal_pskel* backCurve_parser_;
    ::fhir::decimal_pskel* diameter_parser_;
    ::fhir::Quantity_pskel* duration_parser_;
    ::fhir::string_pskel* color_parser_;
    ::fhir::string_pskel* brand_parser_;
    ::fhir::Annotation_pskel* note_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VisionPrescription_LensSpecification_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class VisionPrescription_Prism_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    amount ();

    virtual void
    base ();

    virtual void
    post_VisionPrescription_Prism ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::decimal_pskel& /* amount */,
             ::fhir::VisionBase_pskel& /* base */);

    // Individual element parsers.
    //
    void
    amount_parser (::fhir::decimal_pskel&);

    void
    base_parser (::fhir::VisionBase_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VisionPrescription_Prism_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    VisionPrescription_Prism_pskel* VisionPrescription_Prism_impl_;
    VisionPrescription_Prism_pskel (VisionPrescription_Prism_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::decimal_pskel* amount_parser_;
    ::fhir::VisionBase_pskel* base_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::VisionPrescription_Prism_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class VisionBase_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_VisionBase_list ();

    // Constructor.
    //
    VisionBase_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    VisionBase_list_pskel* VisionBase_list_impl_;
    VisionBase_list_pskel (VisionBase_list_pskel*, void*);

    protected:
    static const char* const _xsde_VisionBase_list_pskel_enums_[4UL];
  };

  class VisionBase_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_VisionBase ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::VisionBase_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::VisionBase_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VisionBase_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    VisionBase_pskel* VisionBase_impl_;
    VisionBase_pskel (VisionBase_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::VisionBase_list_pskel* value_parser_;
  };

  class VisionEyes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_VisionEyes_list ();

    // Constructor.
    //
    VisionEyes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    VisionEyes_list_pskel* VisionEyes_list_impl_;
    VisionEyes_list_pskel (VisionEyes_list_pskel*, void*);

    protected:
    static const char* const _xsde_VisionEyes_list_pskel_enums_[2UL];
  };

  class VisionEyes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_VisionEyes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::VisionEyes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::VisionEyes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    VisionEyes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    VisionEyes_pskel* VisionEyes_impl_;
    VisionEyes_pskel (VisionEyes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::VisionEyes_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // FHIR_SINGLE_PSKEL_HXX
