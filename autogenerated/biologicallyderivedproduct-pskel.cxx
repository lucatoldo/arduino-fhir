// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "biologicallyderivedproduct-pskel.hxx"

namespace fhir
{
  // BiologicallyDerivedProduct_pskel
  //

  void BiologicallyDerivedProduct_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  productCategory_parser (::fhir::BiologicallyDerivedProductCategory_pskel& p)
  {
    this->productCategory_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  productCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productCode_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  status_parser (::fhir::BiologicallyDerivedProductStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  request_parser (::fhir::Reference_pskel& p)
  {
    this->request_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  quantity_parser (::fhir::integer_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  parent_parser (::fhir::Reference_pskel& p)
  {
    this->parent_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  collection_parser (::fhir::BiologicallyDerivedProduct_Collection_pskel& p)
  {
    this->collection_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  processing_parser (::fhir::BiologicallyDerivedProduct_Processing_pskel& p)
  {
    this->processing_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  manipulation_parser (::fhir::BiologicallyDerivedProduct_Manipulation_pskel& p)
  {
    this->manipulation_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  storage_parser (::fhir::BiologicallyDerivedProduct_Storage_pskel& p)
  {
    this->storage_parser_ = &p;
  }

  void BiologicallyDerivedProduct_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::BiologicallyDerivedProductCategory_pskel& productCategory,
           ::fhir::CodeableConcept_pskel& productCode,
           ::fhir::BiologicallyDerivedProductStatus_pskel& status,
           ::fhir::Reference_pskel& request,
           ::fhir::integer_pskel& quantity,
           ::fhir::Reference_pskel& parent,
           ::fhir::BiologicallyDerivedProduct_Collection_pskel& collection,
           ::fhir::BiologicallyDerivedProduct_Processing_pskel& processing,
           ::fhir::BiologicallyDerivedProduct_Manipulation_pskel& manipulation,
           ::fhir::BiologicallyDerivedProduct_Storage_pskel& storage)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->productCategory_parser_ = &productCategory;
    this->productCode_parser_ = &productCode;
    this->status_parser_ = &status;
    this->request_parser_ = &request;
    this->quantity_parser_ = &quantity;
    this->parent_parser_ = &parent;
    this->collection_parser_ = &collection;
    this->processing_parser_ = &processing;
    this->manipulation_parser_ = &manipulation;
    this->storage_parser_ = &storage;
  }

  BiologicallyDerivedProduct_pskel::
  BiologicallyDerivedProduct_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    BiologicallyDerivedProduct_impl_ (0),
    identifier_parser_ (0),
    productCategory_parser_ (0),
    productCode_parser_ (0),
    status_parser_ (0),
    request_parser_ (0),
    quantity_parser_ (0),
    parent_parser_ (0),
    collection_parser_ (0),
    processing_parser_ (0),
    manipulation_parser_ (0),
    storage_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  BiologicallyDerivedProduct_pskel::
  BiologicallyDerivedProduct_pskel (BiologicallyDerivedProduct_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    BiologicallyDerivedProduct_impl_ (impl),
    identifier_parser_ (0),
    productCategory_parser_ (0),
    productCode_parser_ (0),
    status_parser_ (0),
    request_parser_ (0),
    quantity_parser_ (0),
    parent_parser_ (0),
    collection_parser_ (0),
    processing_parser_ (0),
    manipulation_parser_ (0),
    storage_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // BiologicallyDerivedProduct_Collection_pskel
  //

  void BiologicallyDerivedProduct_Collection_pskel::
  collector_parser (::fhir::Reference_pskel& p)
  {
    this->collector_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  collectedDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->collectedDateTime_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  collectedPeriod_parser (::fhir::Period_pskel& p)
  {
    this->collectedPeriod_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& collector,
           ::fhir::Reference_pskel& source,
           ::fhir::dateTime_pskel& collectedDateTime,
           ::fhir::Period_pskel& collectedPeriod)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->collector_parser_ = &collector;
    this->source_parser_ = &source;
    this->collectedDateTime_parser_ = &collectedDateTime;
    this->collectedPeriod_parser_ = &collectedPeriod;
  }

  BiologicallyDerivedProduct_Collection_pskel::
  BiologicallyDerivedProduct_Collection_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    BiologicallyDerivedProduct_Collection_impl_ (0),
    collector_parser_ (0),
    source_parser_ (0),
    collectedDateTime_parser_ (0),
    collectedPeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  BiologicallyDerivedProduct_Collection_pskel::
  BiologicallyDerivedProduct_Collection_pskel (BiologicallyDerivedProduct_Collection_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    BiologicallyDerivedProduct_Collection_impl_ (impl),
    collector_parser_ (0),
    source_parser_ (0),
    collectedDateTime_parser_ (0),
    collectedPeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // BiologicallyDerivedProduct_Processing_pskel
  //

  void BiologicallyDerivedProduct_Processing_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  procedure_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->procedure_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  additive_parser (::fhir::Reference_pskel& p)
  {
    this->additive_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  timeDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->timeDateTime_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  timePeriod_parser (::fhir::Period_pskel& p)
  {
    this->timePeriod_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& description,
           ::fhir::CodeableConcept_pskel& procedure,
           ::fhir::Reference_pskel& additive,
           ::fhir::dateTime_pskel& timeDateTime,
           ::fhir::Period_pskel& timePeriod)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->description_parser_ = &description;
    this->procedure_parser_ = &procedure;
    this->additive_parser_ = &additive;
    this->timeDateTime_parser_ = &timeDateTime;
    this->timePeriod_parser_ = &timePeriod;
  }

  BiologicallyDerivedProduct_Processing_pskel::
  BiologicallyDerivedProduct_Processing_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    BiologicallyDerivedProduct_Processing_impl_ (0),
    description_parser_ (0),
    procedure_parser_ (0),
    additive_parser_ (0),
    timeDateTime_parser_ (0),
    timePeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  BiologicallyDerivedProduct_Processing_pskel::
  BiologicallyDerivedProduct_Processing_pskel (BiologicallyDerivedProduct_Processing_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    BiologicallyDerivedProduct_Processing_impl_ (impl),
    description_parser_ (0),
    procedure_parser_ (0),
    additive_parser_ (0),
    timeDateTime_parser_ (0),
    timePeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // BiologicallyDerivedProduct_Manipulation_pskel
  //

  void BiologicallyDerivedProduct_Manipulation_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Manipulation_pskel::
  timeDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->timeDateTime_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Manipulation_pskel::
  timePeriod_parser (::fhir::Period_pskel& p)
  {
    this->timePeriod_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Manipulation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& description,
           ::fhir::dateTime_pskel& timeDateTime,
           ::fhir::Period_pskel& timePeriod)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->description_parser_ = &description;
    this->timeDateTime_parser_ = &timeDateTime;
    this->timePeriod_parser_ = &timePeriod;
  }

  BiologicallyDerivedProduct_Manipulation_pskel::
  BiologicallyDerivedProduct_Manipulation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    BiologicallyDerivedProduct_Manipulation_impl_ (0),
    description_parser_ (0),
    timeDateTime_parser_ (0),
    timePeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  BiologicallyDerivedProduct_Manipulation_pskel::
  BiologicallyDerivedProduct_Manipulation_pskel (BiologicallyDerivedProduct_Manipulation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    BiologicallyDerivedProduct_Manipulation_impl_ (impl),
    description_parser_ (0),
    timeDateTime_parser_ (0),
    timePeriod_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // BiologicallyDerivedProduct_Storage_pskel
  //

  void BiologicallyDerivedProduct_Storage_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  temperature_parser (::fhir::decimal_pskel& p)
  {
    this->temperature_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  scale_parser (::fhir::BiologicallyDerivedProductStorageScale_pskel& p)
  {
    this->scale_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  duration_parser (::fhir::Period_pskel& p)
  {
    this->duration_parser_ = &p;
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& description,
           ::fhir::decimal_pskel& temperature,
           ::fhir::BiologicallyDerivedProductStorageScale_pskel& scale,
           ::fhir::Period_pskel& duration)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->description_parser_ = &description;
    this->temperature_parser_ = &temperature;
    this->scale_parser_ = &scale;
    this->duration_parser_ = &duration;
  }

  BiologicallyDerivedProduct_Storage_pskel::
  BiologicallyDerivedProduct_Storage_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    BiologicallyDerivedProduct_Storage_impl_ (0),
    description_parser_ (0),
    temperature_parser_ (0),
    scale_parser_ (0),
    duration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  BiologicallyDerivedProduct_Storage_pskel::
  BiologicallyDerivedProduct_Storage_pskel (BiologicallyDerivedProduct_Storage_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    BiologicallyDerivedProduct_Storage_impl_ (impl),
    description_parser_ (0),
    temperature_parser_ (0),
    scale_parser_ (0),
    duration_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // BiologicallyDerivedProductCategory_list_pskel
  //

  BiologicallyDerivedProductCategory_list_pskel::
  BiologicallyDerivedProductCategory_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    BiologicallyDerivedProductCategory_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_BiologicallyDerivedProductCategory_list_pskel_enums_, 5UL);
  }

  BiologicallyDerivedProductCategory_list_pskel::
  BiologicallyDerivedProductCategory_list_pskel (BiologicallyDerivedProductCategory_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    BiologicallyDerivedProductCategory_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_BiologicallyDerivedProductCategory_list_pskel_enums_, 5UL);
  }

  // BiologicallyDerivedProductCategory_pskel
  //

  void BiologicallyDerivedProductCategory_pskel::
  value_parser (::fhir::BiologicallyDerivedProductCategory_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void BiologicallyDerivedProductCategory_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::BiologicallyDerivedProductCategory_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  BiologicallyDerivedProductCategory_pskel::
  BiologicallyDerivedProductCategory_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    BiologicallyDerivedProductCategory_impl_ (0),
    value_parser_ (0)
  {
  }

  BiologicallyDerivedProductCategory_pskel::
  BiologicallyDerivedProductCategory_pskel (BiologicallyDerivedProductCategory_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    BiologicallyDerivedProductCategory_impl_ (impl),
    value_parser_ (0)
  {
  }

  // BiologicallyDerivedProductStatus_list_pskel
  //

  BiologicallyDerivedProductStatus_list_pskel::
  BiologicallyDerivedProductStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    BiologicallyDerivedProductStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_BiologicallyDerivedProductStatus_list_pskel_enums_, 2UL);
  }

  BiologicallyDerivedProductStatus_list_pskel::
  BiologicallyDerivedProductStatus_list_pskel (BiologicallyDerivedProductStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    BiologicallyDerivedProductStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_BiologicallyDerivedProductStatus_list_pskel_enums_, 2UL);
  }

  // BiologicallyDerivedProductStatus_pskel
  //

  void BiologicallyDerivedProductStatus_pskel::
  value_parser (::fhir::BiologicallyDerivedProductStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void BiologicallyDerivedProductStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::BiologicallyDerivedProductStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  BiologicallyDerivedProductStatus_pskel::
  BiologicallyDerivedProductStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    BiologicallyDerivedProductStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  BiologicallyDerivedProductStatus_pskel::
  BiologicallyDerivedProductStatus_pskel (BiologicallyDerivedProductStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    BiologicallyDerivedProductStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // BiologicallyDerivedProductStorageScale_list_pskel
  //

  BiologicallyDerivedProductStorageScale_list_pskel::
  BiologicallyDerivedProductStorageScale_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    BiologicallyDerivedProductStorageScale_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_BiologicallyDerivedProductStorageScale_list_pskel_enums_, 3UL);
  }

  BiologicallyDerivedProductStorageScale_list_pskel::
  BiologicallyDerivedProductStorageScale_list_pskel (BiologicallyDerivedProductStorageScale_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    BiologicallyDerivedProductStorageScale_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_BiologicallyDerivedProductStorageScale_list_pskel_enums_, 3UL);
  }

  // BiologicallyDerivedProductStorageScale_pskel
  //

  void BiologicallyDerivedProductStorageScale_pskel::
  value_parser (::fhir::BiologicallyDerivedProductStorageScale_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void BiologicallyDerivedProductStorageScale_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::BiologicallyDerivedProductStorageScale_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  BiologicallyDerivedProductStorageScale_pskel::
  BiologicallyDerivedProductStorageScale_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    BiologicallyDerivedProductStorageScale_impl_ (0),
    value_parser_ (0)
  {
  }

  BiologicallyDerivedProductStorageScale_pskel::
  BiologicallyDerivedProductStorageScale_pskel (BiologicallyDerivedProductStorageScale_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    BiologicallyDerivedProductStorageScale_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // BiologicallyDerivedProduct_pskel
  //

  void BiologicallyDerivedProduct_pskel::
  identifier ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->identifier ();
  }

  void BiologicallyDerivedProduct_pskel::
  productCategory ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->productCategory ();
  }

  void BiologicallyDerivedProduct_pskel::
  productCode ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->productCode ();
  }

  void BiologicallyDerivedProduct_pskel::
  status ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->status ();
  }

  void BiologicallyDerivedProduct_pskel::
  request ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->request ();
  }

  void BiologicallyDerivedProduct_pskel::
  quantity ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->quantity ();
  }

  void BiologicallyDerivedProduct_pskel::
  parent ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->parent ();
  }

  void BiologicallyDerivedProduct_pskel::
  collection ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->collection ();
  }

  void BiologicallyDerivedProduct_pskel::
  processing ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->processing ();
  }

  void BiologicallyDerivedProduct_pskel::
  manipulation ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->manipulation ();
  }

  void BiologicallyDerivedProduct_pskel::
  storage ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->storage ();
  }

  void BiologicallyDerivedProduct_pskel::
  post_BiologicallyDerivedProduct ()
  {
    if (this->BiologicallyDerivedProduct_impl_)
      this->BiologicallyDerivedProduct_impl_->post_BiologicallyDerivedProduct ();
    else
      post_DomainResource ();
  }

  void BiologicallyDerivedProduct_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->productCategory_parser_)
      this->productCategory_parser_->_reset ();

    if (this->productCode_parser_)
      this->productCode_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->request_parser_)
      this->request_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->parent_parser_)
      this->parent_parser_->_reset ();

    if (this->collection_parser_)
      this->collection_parser_->_reset ();

    if (this->processing_parser_)
      this->processing_parser_->_reset ();

    if (this->manipulation_parser_)
      this->manipulation_parser_->_reset ();

    if (this->storage_parser_)
      this->storage_parser_->_reset ();

    this->resetting_ = false;
  }

  // BiologicallyDerivedProduct_Collection_pskel
  //

  void BiologicallyDerivedProduct_Collection_pskel::
  collector ()
  {
    if (this->BiologicallyDerivedProduct_Collection_impl_)
      this->BiologicallyDerivedProduct_Collection_impl_->collector ();
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  source ()
  {
    if (this->BiologicallyDerivedProduct_Collection_impl_)
      this->BiologicallyDerivedProduct_Collection_impl_->source ();
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  collectedDateTime ()
  {
    if (this->BiologicallyDerivedProduct_Collection_impl_)
      this->BiologicallyDerivedProduct_Collection_impl_->collectedDateTime ();
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  collectedPeriod ()
  {
    if (this->BiologicallyDerivedProduct_Collection_impl_)
      this->BiologicallyDerivedProduct_Collection_impl_->collectedPeriod ();
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  post_BiologicallyDerivedProduct_Collection ()
  {
    if (this->BiologicallyDerivedProduct_Collection_impl_)
      this->BiologicallyDerivedProduct_Collection_impl_->post_BiologicallyDerivedProduct_Collection ();
    else
      post_BackboneElement ();
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->collector_parser_)
      this->collector_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->collectedDateTime_parser_)
      this->collectedDateTime_parser_->_reset ();

    if (this->collectedPeriod_parser_)
      this->collectedPeriod_parser_->_reset ();

    this->resetting_ = false;
  }

  // BiologicallyDerivedProduct_Processing_pskel
  //

  void BiologicallyDerivedProduct_Processing_pskel::
  description ()
  {
    if (this->BiologicallyDerivedProduct_Processing_impl_)
      this->BiologicallyDerivedProduct_Processing_impl_->description ();
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  procedure ()
  {
    if (this->BiologicallyDerivedProduct_Processing_impl_)
      this->BiologicallyDerivedProduct_Processing_impl_->procedure ();
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  additive ()
  {
    if (this->BiologicallyDerivedProduct_Processing_impl_)
      this->BiologicallyDerivedProduct_Processing_impl_->additive ();
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  timeDateTime ()
  {
    if (this->BiologicallyDerivedProduct_Processing_impl_)
      this->BiologicallyDerivedProduct_Processing_impl_->timeDateTime ();
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  timePeriod ()
  {
    if (this->BiologicallyDerivedProduct_Processing_impl_)
      this->BiologicallyDerivedProduct_Processing_impl_->timePeriod ();
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  post_BiologicallyDerivedProduct_Processing ()
  {
    if (this->BiologicallyDerivedProduct_Processing_impl_)
      this->BiologicallyDerivedProduct_Processing_impl_->post_BiologicallyDerivedProduct_Processing ();
    else
      post_BackboneElement ();
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->procedure_parser_)
      this->procedure_parser_->_reset ();

    if (this->additive_parser_)
      this->additive_parser_->_reset ();

    if (this->timeDateTime_parser_)
      this->timeDateTime_parser_->_reset ();

    if (this->timePeriod_parser_)
      this->timePeriod_parser_->_reset ();

    this->resetting_ = false;
  }

  // BiologicallyDerivedProduct_Manipulation_pskel
  //

  void BiologicallyDerivedProduct_Manipulation_pskel::
  description ()
  {
    if (this->BiologicallyDerivedProduct_Manipulation_impl_)
      this->BiologicallyDerivedProduct_Manipulation_impl_->description ();
  }

  void BiologicallyDerivedProduct_Manipulation_pskel::
  timeDateTime ()
  {
    if (this->BiologicallyDerivedProduct_Manipulation_impl_)
      this->BiologicallyDerivedProduct_Manipulation_impl_->timeDateTime ();
  }

  void BiologicallyDerivedProduct_Manipulation_pskel::
  timePeriod ()
  {
    if (this->BiologicallyDerivedProduct_Manipulation_impl_)
      this->BiologicallyDerivedProduct_Manipulation_impl_->timePeriod ();
  }

  void BiologicallyDerivedProduct_Manipulation_pskel::
  post_BiologicallyDerivedProduct_Manipulation ()
  {
    if (this->BiologicallyDerivedProduct_Manipulation_impl_)
      this->BiologicallyDerivedProduct_Manipulation_impl_->post_BiologicallyDerivedProduct_Manipulation ();
    else
      post_BackboneElement ();
  }

  void BiologicallyDerivedProduct_Manipulation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->timeDateTime_parser_)
      this->timeDateTime_parser_->_reset ();

    if (this->timePeriod_parser_)
      this->timePeriod_parser_->_reset ();

    this->resetting_ = false;
  }

  // BiologicallyDerivedProduct_Storage_pskel
  //

  void BiologicallyDerivedProduct_Storage_pskel::
  description ()
  {
    if (this->BiologicallyDerivedProduct_Storage_impl_)
      this->BiologicallyDerivedProduct_Storage_impl_->description ();
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  temperature ()
  {
    if (this->BiologicallyDerivedProduct_Storage_impl_)
      this->BiologicallyDerivedProduct_Storage_impl_->temperature ();
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  scale ()
  {
    if (this->BiologicallyDerivedProduct_Storage_impl_)
      this->BiologicallyDerivedProduct_Storage_impl_->scale ();
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  duration ()
  {
    if (this->BiologicallyDerivedProduct_Storage_impl_)
      this->BiologicallyDerivedProduct_Storage_impl_->duration ();
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  post_BiologicallyDerivedProduct_Storage ()
  {
    if (this->BiologicallyDerivedProduct_Storage_impl_)
      this->BiologicallyDerivedProduct_Storage_impl_->post_BiologicallyDerivedProduct_Storage ();
    else
      post_BackboneElement ();
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->temperature_parser_)
      this->temperature_parser_->_reset ();

    if (this->scale_parser_)
      this->scale_parser_->_reset ();

    if (this->duration_parser_)
      this->duration_parser_->_reset ();

    this->resetting_ = false;
  }

  // BiologicallyDerivedProductCategory_list_pskel
  //

  void BiologicallyDerivedProductCategory_list_pskel::
  post_BiologicallyDerivedProductCategory_list ()
  {
    if (this->BiologicallyDerivedProductCategory_list_impl_)
      this->BiologicallyDerivedProductCategory_list_impl_->post_BiologicallyDerivedProductCategory_list ();
    else
      post_code_primitive ();
  }

  const char* const BiologicallyDerivedProductCategory_list_pskel::_xsde_BiologicallyDerivedProductCategory_list_pskel_enums_[5UL] = 
  {
    "biologicalAgent",
    "cells",
    "fluid",
    "organ",
    "tissue"
  };

  // BiologicallyDerivedProductCategory_pskel
  //

  void BiologicallyDerivedProductCategory_pskel::
  value ()
  {
    if (this->BiologicallyDerivedProductCategory_impl_)
      this->BiologicallyDerivedProductCategory_impl_->value ();
  }

  void BiologicallyDerivedProductCategory_pskel::
  post_BiologicallyDerivedProductCategory ()
  {
    if (this->BiologicallyDerivedProductCategory_impl_)
      this->BiologicallyDerivedProductCategory_impl_->post_BiologicallyDerivedProductCategory ();
    else
      post_Element ();
  }

  void BiologicallyDerivedProductCategory_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // BiologicallyDerivedProductStatus_list_pskel
  //

  void BiologicallyDerivedProductStatus_list_pskel::
  post_BiologicallyDerivedProductStatus_list ()
  {
    if (this->BiologicallyDerivedProductStatus_list_impl_)
      this->BiologicallyDerivedProductStatus_list_impl_->post_BiologicallyDerivedProductStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const BiologicallyDerivedProductStatus_list_pskel::_xsde_BiologicallyDerivedProductStatus_list_pskel_enums_[2UL] = 
  {
    "available",
    "unavailable"
  };

  // BiologicallyDerivedProductStatus_pskel
  //

  void BiologicallyDerivedProductStatus_pskel::
  value ()
  {
    if (this->BiologicallyDerivedProductStatus_impl_)
      this->BiologicallyDerivedProductStatus_impl_->value ();
  }

  void BiologicallyDerivedProductStatus_pskel::
  post_BiologicallyDerivedProductStatus ()
  {
    if (this->BiologicallyDerivedProductStatus_impl_)
      this->BiologicallyDerivedProductStatus_impl_->post_BiologicallyDerivedProductStatus ();
    else
      post_Element ();
  }

  void BiologicallyDerivedProductStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // BiologicallyDerivedProductStorageScale_list_pskel
  //

  void BiologicallyDerivedProductStorageScale_list_pskel::
  post_BiologicallyDerivedProductStorageScale_list ()
  {
    if (this->BiologicallyDerivedProductStorageScale_list_impl_)
      this->BiologicallyDerivedProductStorageScale_list_impl_->post_BiologicallyDerivedProductStorageScale_list ();
    else
      post_code_primitive ();
  }

  const char* const BiologicallyDerivedProductStorageScale_list_pskel::_xsde_BiologicallyDerivedProductStorageScale_list_pskel_enums_[3UL] = 
  {
    "celsius",
    "farenheit",
    "kelvin"
  };

  // BiologicallyDerivedProductStorageScale_pskel
  //

  void BiologicallyDerivedProductStorageScale_pskel::
  value ()
  {
    if (this->BiologicallyDerivedProductStorageScale_impl_)
      this->BiologicallyDerivedProductStorageScale_impl_->value ();
  }

  void BiologicallyDerivedProductStorageScale_pskel::
  post_BiologicallyDerivedProductStorageScale ()
  {
    if (this->BiologicallyDerivedProductStorageScale_impl_)
      this->BiologicallyDerivedProductStorageScale_impl_->post_BiologicallyDerivedProductStorageScale ();
    else
      post_Element ();
  }

  void BiologicallyDerivedProductStorageScale_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for BiologicallyDerivedProduct_pskel.
  //
  bool BiologicallyDerivedProduct_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "productCategory" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "productCode" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "request" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "quantity" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "parent" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "collection" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "processing" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "manipulation" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "storage" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &BiologicallyDerivedProduct_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool BiologicallyDerivedProduct_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void BiologicallyDerivedProduct_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void BiologicallyDerivedProduct_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void BiologicallyDerivedProduct_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "productCategory" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productCategory_parser_)
            {
              this->productCategory_parser_->pre ();
              ctx.nested_parser (this->productCategory_parser_);
            }
          }
          else
          {
            if (this->productCategory_parser_ != 0)
            {
              this->productCategory_parser_->post_BiologicallyDerivedProductCategory ();
              this->productCategory ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "productCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productCode_parser_)
            {
              this->productCode_parser_->pre ();
              ctx.nested_parser (this->productCode_parser_);
            }
          }
          else
          {
            if (this->productCode_parser_ != 0)
            {
              this->productCode_parser_->post_CodeableConcept ();
              this->productCode ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_BiologicallyDerivedProductStatus ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "request" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->request_parser_)
            {
              this->request_parser_->pre ();
              ctx.nested_parser (this->request_parser_);
            }
          }
          else
          {
            if (this->request_parser_ != 0)
            {
              this->request_parser_->post_Reference ();
              this->request ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_integer ();
              this->quantity ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "parent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parent_parser_)
            {
              this->parent_parser_->pre ();
              ctx.nested_parser (this->parent_parser_);
            }
          }
          else
          {
            if (this->parent_parser_ != 0)
            {
              this->parent_parser_->post_Reference ();
              this->parent ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "collection" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->collection_parser_)
            {
              this->collection_parser_->pre ();
              ctx.nested_parser (this->collection_parser_);
            }
          }
          else
          {
            if (this->collection_parser_ != 0)
            {
              this->collection_parser_->post_BiologicallyDerivedProduct_Collection ();
              this->collection ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "processing" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->processing_parser_)
            {
              this->processing_parser_->pre ();
              ctx.nested_parser (this->processing_parser_);
            }
          }
          else
          {
            if (this->processing_parser_ != 0)
            {
              this->processing_parser_->post_BiologicallyDerivedProduct_Processing ();
              this->processing ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "manipulation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manipulation_parser_)
            {
              this->manipulation_parser_->pre ();
              ctx.nested_parser (this->manipulation_parser_);
            }
          }
          else
          {
            if (this->manipulation_parser_ != 0)
            {
              this->manipulation_parser_->post_BiologicallyDerivedProduct_Manipulation ();
              this->manipulation ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "storage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->storage_parser_)
            {
              this->storage_parser_->pre ();
              ctx.nested_parser (this->storage_parser_);
            }
          }
          else
          {
            if (this->storage_parser_ != 0)
            {
              this->storage_parser_->post_BiologicallyDerivedProduct_Storage ();
              this->storage ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for BiologicallyDerivedProduct_Collection_pskel.
  //
  bool BiologicallyDerivedProduct_Collection_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "collector" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "source" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "collectedDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "collectedPeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &BiologicallyDerivedProduct_Collection_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool BiologicallyDerivedProduct_Collection_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void BiologicallyDerivedProduct_Collection_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "collector" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->collector_parser_)
            {
              this->collector_parser_->pre ();
              ctx.nested_parser (this->collector_parser_);
            }
          }
          else
          {
            if (this->collector_parser_ != 0)
            {
              this->collector_parser_->post_Reference ();
              this->collector ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "collectedDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->collectedDateTime_parser_)
            {
              this->collectedDateTime_parser_->pre ();
              ctx.nested_parser (this->collectedDateTime_parser_);
            }
          }
          else
          {
            if (this->collectedDateTime_parser_ != 0)
            {
              this->collectedDateTime_parser_->post_dateTime ();
              this->collectedDateTime ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "collectedPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->collectedPeriod_parser_)
            {
              this->collectedPeriod_parser_->pre ();
              ctx.nested_parser (this->collectedPeriod_parser_);
            }
          }
          else
          {
            if (this->collectedPeriod_parser_ != 0)
            {
              this->collectedPeriod_parser_->post_Period ();
              this->collectedPeriod ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for BiologicallyDerivedProduct_Processing_pskel.
  //
  bool BiologicallyDerivedProduct_Processing_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "procedure" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "additive" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "timeDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "timePeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &BiologicallyDerivedProduct_Processing_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool BiologicallyDerivedProduct_Processing_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void BiologicallyDerivedProduct_Processing_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "procedure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->procedure_parser_)
            {
              this->procedure_parser_->pre ();
              ctx.nested_parser (this->procedure_parser_);
            }
          }
          else
          {
            if (this->procedure_parser_ != 0)
            {
              this->procedure_parser_->post_CodeableConcept ();
              this->procedure ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "additive" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->additive_parser_)
            {
              this->additive_parser_->pre ();
              ctx.nested_parser (this->additive_parser_);
            }
          }
          else
          {
            if (this->additive_parser_ != 0)
            {
              this->additive_parser_->post_Reference ();
              this->additive ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "timeDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timeDateTime_parser_)
            {
              this->timeDateTime_parser_->pre ();
              ctx.nested_parser (this->timeDateTime_parser_);
            }
          }
          else
          {
            if (this->timeDateTime_parser_ != 0)
            {
              this->timeDateTime_parser_->post_dateTime ();
              this->timeDateTime ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "timePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timePeriod_parser_)
            {
              this->timePeriod_parser_->pre ();
              ctx.nested_parser (this->timePeriod_parser_);
            }
          }
          else
          {
            if (this->timePeriod_parser_ != 0)
            {
              this->timePeriod_parser_->post_Period ();
              this->timePeriod ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for BiologicallyDerivedProduct_Manipulation_pskel.
  //
  bool BiologicallyDerivedProduct_Manipulation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "timeDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "timePeriod" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &BiologicallyDerivedProduct_Manipulation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool BiologicallyDerivedProduct_Manipulation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void BiologicallyDerivedProduct_Manipulation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void BiologicallyDerivedProduct_Manipulation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void BiologicallyDerivedProduct_Manipulation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "timeDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timeDateTime_parser_)
            {
              this->timeDateTime_parser_->pre ();
              ctx.nested_parser (this->timeDateTime_parser_);
            }
          }
          else
          {
            if (this->timeDateTime_parser_ != 0)
            {
              this->timeDateTime_parser_->post_dateTime ();
              this->timeDateTime ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "timePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timePeriod_parser_)
            {
              this->timePeriod_parser_->pre ();
              ctx.nested_parser (this->timePeriod_parser_);
            }
          }
          else
          {
            if (this->timePeriod_parser_ != 0)
            {
              this->timePeriod_parser_->post_Period ();
              this->timePeriod ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for BiologicallyDerivedProduct_Storage_pskel.
  //
  bool BiologicallyDerivedProduct_Storage_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "temperature" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "scale" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "duration" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &BiologicallyDerivedProduct_Storage_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool BiologicallyDerivedProduct_Storage_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void BiologicallyDerivedProduct_Storage_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "temperature" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->temperature_parser_)
            {
              this->temperature_parser_->pre ();
              ctx.nested_parser (this->temperature_parser_);
            }
          }
          else
          {
            if (this->temperature_parser_ != 0)
            {
              this->temperature_parser_->post_decimal ();
              this->temperature ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "scale" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->scale_parser_)
            {
              this->scale_parser_->pre ();
              ctx.nested_parser (this->scale_parser_);
            }
          }
          else
          {
            if (this->scale_parser_ != 0)
            {
              this->scale_parser_->post_BiologicallyDerivedProductStorageScale ();
              this->scale ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "duration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->duration_parser_)
            {
              this->duration_parser_->pre ();
              ctx.nested_parser (this->duration_parser_);
            }
          }
          else
          {
            if (this->duration_parser_ != 0)
            {
              this->duration_parser_->post_Period ();
              this->duration ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for BiologicallyDerivedProductCategory_pskel.
  //
  bool BiologicallyDerivedProductCategory_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_BiologicallyDerivedProductCategory_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for BiologicallyDerivedProductStatus_pskel.
  //
  bool BiologicallyDerivedProductStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_BiologicallyDerivedProductStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for BiologicallyDerivedProductStorageScale_pskel.
  //
  bool BiologicallyDerivedProductStorageScale_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_BiologicallyDerivedProductStorageScale_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

