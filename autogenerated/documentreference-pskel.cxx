// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "documentreference-pskel.hxx"

namespace fhir
{
  // DocumentReference_pskel
  //

  void DocumentReference_pskel::
  masterIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->masterIdentifier_parser_ = &p;
  }

  void DocumentReference_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void DocumentReference_pskel::
  status_parser (::fhir::DocumentReferenceStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void DocumentReference_pskel::
  docStatus_parser (::fhir::CompositionStatus_pskel& p)
  {
    this->docStatus_parser_ = &p;
  }

  void DocumentReference_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void DocumentReference_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void DocumentReference_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void DocumentReference_pskel::
  date_parser (::fhir::instant_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void DocumentReference_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void DocumentReference_pskel::
  authenticator_parser (::fhir::Reference_pskel& p)
  {
    this->authenticator_parser_ = &p;
  }

  void DocumentReference_pskel::
  custodian_parser (::fhir::Reference_pskel& p)
  {
    this->custodian_parser_ = &p;
  }

  void DocumentReference_pskel::
  relatesTo_parser (::fhir::DocumentReference_RelatesTo_pskel& p)
  {
    this->relatesTo_parser_ = &p;
  }

  void DocumentReference_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void DocumentReference_pskel::
  securityLabel_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->securityLabel_parser_ = &p;
  }

  void DocumentReference_pskel::
  content_parser (::fhir::DocumentReference_Content_pskel& p)
  {
    this->content_parser_ = &p;
  }

  void DocumentReference_pskel::
  context_parser (::fhir::DocumentReference_Context_pskel& p)
  {
    this->context_parser_ = &p;
  }

  void DocumentReference_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& masterIdentifier,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::DocumentReferenceStatus_pskel& status,
           ::fhir::CompositionStatus_pskel& docStatus,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::Reference_pskel& subject,
           ::fhir::instant_pskel& date,
           ::fhir::Reference_pskel& author,
           ::fhir::Reference_pskel& authenticator,
           ::fhir::Reference_pskel& custodian,
           ::fhir::DocumentReference_RelatesTo_pskel& relatesTo,
           ::fhir::string_pskel& description,
           ::fhir::CodeableConcept_pskel& securityLabel,
           ::fhir::DocumentReference_Content_pskel& content,
           ::fhir::DocumentReference_Context_pskel& context)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->masterIdentifier_parser_ = &masterIdentifier;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->docStatus_parser_ = &docStatus;
    this->type_parser_ = &type;
    this->category_parser_ = &category;
    this->subject_parser_ = &subject;
    this->date_parser_ = &date;
    this->author_parser_ = &author;
    this->authenticator_parser_ = &authenticator;
    this->custodian_parser_ = &custodian;
    this->relatesTo_parser_ = &relatesTo;
    this->description_parser_ = &description;
    this->securityLabel_parser_ = &securityLabel;
    this->content_parser_ = &content;
    this->context_parser_ = &context;
  }

  DocumentReference_pskel::
  DocumentReference_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    DocumentReference_impl_ (0),
    masterIdentifier_parser_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    docStatus_parser_ (0),
    type_parser_ (0),
    category_parser_ (0),
    subject_parser_ (0),
    date_parser_ (0),
    author_parser_ (0),
    authenticator_parser_ (0),
    custodian_parser_ (0),
    relatesTo_parser_ (0),
    description_parser_ (0),
    securityLabel_parser_ (0),
    content_parser_ (0),
    context_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DocumentReference_pskel::
  DocumentReference_pskel (DocumentReference_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    DocumentReference_impl_ (impl),
    masterIdentifier_parser_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    docStatus_parser_ (0),
    type_parser_ (0),
    category_parser_ (0),
    subject_parser_ (0),
    date_parser_ (0),
    author_parser_ (0),
    authenticator_parser_ (0),
    custodian_parser_ (0),
    relatesTo_parser_ (0),
    description_parser_ (0),
    securityLabel_parser_ (0),
    content_parser_ (0),
    context_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DocumentReference_RelatesTo_pskel
  //

  void DocumentReference_RelatesTo_pskel::
  code_parser (::fhir::DocumentRelationshipType_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void DocumentReference_RelatesTo_pskel::
  target_parser (::fhir::Reference_pskel& p)
  {
    this->target_parser_ = &p;
  }

  void DocumentReference_RelatesTo_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::DocumentRelationshipType_pskel& code,
           ::fhir::Reference_pskel& target)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->target_parser_ = &target;
  }

  DocumentReference_RelatesTo_pskel::
  DocumentReference_RelatesTo_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DocumentReference_RelatesTo_impl_ (0),
    code_parser_ (0),
    target_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DocumentReference_RelatesTo_pskel::
  DocumentReference_RelatesTo_pskel (DocumentReference_RelatesTo_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DocumentReference_RelatesTo_impl_ (impl),
    code_parser_ (0),
    target_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DocumentReference_Content_pskel
  //

  void DocumentReference_Content_pskel::
  attachment_parser (::fhir::Attachment_pskel& p)
  {
    this->attachment_parser_ = &p;
  }

  void DocumentReference_Content_pskel::
  format_parser (::fhir::Coding_pskel& p)
  {
    this->format_parser_ = &p;
  }

  void DocumentReference_Content_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Attachment_pskel& attachment,
           ::fhir::Coding_pskel& format)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->attachment_parser_ = &attachment;
    this->format_parser_ = &format;
  }

  DocumentReference_Content_pskel::
  DocumentReference_Content_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DocumentReference_Content_impl_ (0),
    attachment_parser_ (0),
    format_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DocumentReference_Content_pskel::
  DocumentReference_Content_pskel (DocumentReference_Content_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DocumentReference_Content_impl_ (impl),
    attachment_parser_ (0),
    format_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // DocumentReference_Context_pskel
  //

  void DocumentReference_Context_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void DocumentReference_Context_pskel::
  event_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->event_parser_ = &p;
  }

  void DocumentReference_Context_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void DocumentReference_Context_pskel::
  facilityType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->facilityType_parser_ = &p;
  }

  void DocumentReference_Context_pskel::
  practiceSetting_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->practiceSetting_parser_ = &p;
  }

  void DocumentReference_Context_pskel::
  sourcePatientInfo_parser (::fhir::Reference_pskel& p)
  {
    this->sourcePatientInfo_parser_ = &p;
  }

  void DocumentReference_Context_pskel::
  related_parser (::fhir::Reference_pskel& p)
  {
    this->related_parser_ = &p;
  }

  void DocumentReference_Context_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& encounter,
           ::fhir::CodeableConcept_pskel& event,
           ::fhir::Period_pskel& period,
           ::fhir::CodeableConcept_pskel& facilityType,
           ::fhir::CodeableConcept_pskel& practiceSetting,
           ::fhir::Reference_pskel& sourcePatientInfo,
           ::fhir::Reference_pskel& related)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->encounter_parser_ = &encounter;
    this->event_parser_ = &event;
    this->period_parser_ = &period;
    this->facilityType_parser_ = &facilityType;
    this->practiceSetting_parser_ = &practiceSetting;
    this->sourcePatientInfo_parser_ = &sourcePatientInfo;
    this->related_parser_ = &related;
  }

  DocumentReference_Context_pskel::
  DocumentReference_Context_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    DocumentReference_Context_impl_ (0),
    encounter_parser_ (0),
    event_parser_ (0),
    period_parser_ (0),
    facilityType_parser_ (0),
    practiceSetting_parser_ (0),
    sourcePatientInfo_parser_ (0),
    related_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  DocumentReference_Context_pskel::
  DocumentReference_Context_pskel (DocumentReference_Context_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    DocumentReference_Context_impl_ (impl),
    encounter_parser_ (0),
    event_parser_ (0),
    period_parser_ (0),
    facilityType_parser_ (0),
    practiceSetting_parser_ (0),
    sourcePatientInfo_parser_ (0),
    related_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // DocumentReference_pskel
  //

  void DocumentReference_pskel::
  masterIdentifier ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->masterIdentifier ();
  }

  void DocumentReference_pskel::
  identifier ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->identifier ();
  }

  void DocumentReference_pskel::
  status ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->status ();
  }

  void DocumentReference_pskel::
  docStatus ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->docStatus ();
  }

  void DocumentReference_pskel::
  type ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->type ();
  }

  void DocumentReference_pskel::
  category ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->category ();
  }

  void DocumentReference_pskel::
  subject ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->subject ();
  }

  void DocumentReference_pskel::
  date ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->date ();
  }

  void DocumentReference_pskel::
  author ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->author ();
  }

  void DocumentReference_pskel::
  authenticator ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->authenticator ();
  }

  void DocumentReference_pskel::
  custodian ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->custodian ();
  }

  void DocumentReference_pskel::
  relatesTo ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->relatesTo ();
  }

  void DocumentReference_pskel::
  description ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->description ();
  }

  void DocumentReference_pskel::
  securityLabel ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->securityLabel ();
  }

  void DocumentReference_pskel::
  content ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->content ();
  }

  void DocumentReference_pskel::
  context ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->context ();
  }

  void DocumentReference_pskel::
  post_DocumentReference ()
  {
    if (this->DocumentReference_impl_)
      this->DocumentReference_impl_->post_DocumentReference ();
    else
      post_DomainResource ();
  }

  void DocumentReference_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->masterIdentifier_parser_)
      this->masterIdentifier_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->docStatus_parser_)
      this->docStatus_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->authenticator_parser_)
      this->authenticator_parser_->_reset ();

    if (this->custodian_parser_)
      this->custodian_parser_->_reset ();

    if (this->relatesTo_parser_)
      this->relatesTo_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->securityLabel_parser_)
      this->securityLabel_parser_->_reset ();

    if (this->content_parser_)
      this->content_parser_->_reset ();

    if (this->context_parser_)
      this->context_parser_->_reset ();

    this->resetting_ = false;
  }

  // DocumentReference_RelatesTo_pskel
  //

  void DocumentReference_RelatesTo_pskel::
  code ()
  {
    if (this->DocumentReference_RelatesTo_impl_)
      this->DocumentReference_RelatesTo_impl_->code ();
  }

  void DocumentReference_RelatesTo_pskel::
  target ()
  {
    if (this->DocumentReference_RelatesTo_impl_)
      this->DocumentReference_RelatesTo_impl_->target ();
  }

  void DocumentReference_RelatesTo_pskel::
  post_DocumentReference_RelatesTo ()
  {
    if (this->DocumentReference_RelatesTo_impl_)
      this->DocumentReference_RelatesTo_impl_->post_DocumentReference_RelatesTo ();
    else
      post_BackboneElement ();
  }

  void DocumentReference_RelatesTo_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->target_parser_)
      this->target_parser_->_reset ();

    this->resetting_ = false;
  }

  // DocumentReference_Content_pskel
  //

  void DocumentReference_Content_pskel::
  attachment ()
  {
    if (this->DocumentReference_Content_impl_)
      this->DocumentReference_Content_impl_->attachment ();
  }

  void DocumentReference_Content_pskel::
  format ()
  {
    if (this->DocumentReference_Content_impl_)
      this->DocumentReference_Content_impl_->format ();
  }

  void DocumentReference_Content_pskel::
  post_DocumentReference_Content ()
  {
    if (this->DocumentReference_Content_impl_)
      this->DocumentReference_Content_impl_->post_DocumentReference_Content ();
    else
      post_BackboneElement ();
  }

  void DocumentReference_Content_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->attachment_parser_)
      this->attachment_parser_->_reset ();

    if (this->format_parser_)
      this->format_parser_->_reset ();

    this->resetting_ = false;
  }

  // DocumentReference_Context_pskel
  //

  void DocumentReference_Context_pskel::
  encounter ()
  {
    if (this->DocumentReference_Context_impl_)
      this->DocumentReference_Context_impl_->encounter ();
  }

  void DocumentReference_Context_pskel::
  event ()
  {
    if (this->DocumentReference_Context_impl_)
      this->DocumentReference_Context_impl_->event ();
  }

  void DocumentReference_Context_pskel::
  period ()
  {
    if (this->DocumentReference_Context_impl_)
      this->DocumentReference_Context_impl_->period ();
  }

  void DocumentReference_Context_pskel::
  facilityType ()
  {
    if (this->DocumentReference_Context_impl_)
      this->DocumentReference_Context_impl_->facilityType ();
  }

  void DocumentReference_Context_pskel::
  practiceSetting ()
  {
    if (this->DocumentReference_Context_impl_)
      this->DocumentReference_Context_impl_->practiceSetting ();
  }

  void DocumentReference_Context_pskel::
  sourcePatientInfo ()
  {
    if (this->DocumentReference_Context_impl_)
      this->DocumentReference_Context_impl_->sourcePatientInfo ();
  }

  void DocumentReference_Context_pskel::
  related ()
  {
    if (this->DocumentReference_Context_impl_)
      this->DocumentReference_Context_impl_->related ();
  }

  void DocumentReference_Context_pskel::
  post_DocumentReference_Context ()
  {
    if (this->DocumentReference_Context_impl_)
      this->DocumentReference_Context_impl_->post_DocumentReference_Context ();
    else
      post_BackboneElement ();
  }

  void DocumentReference_Context_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->event_parser_)
      this->event_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->facilityType_parser_)
      this->facilityType_parser_->_reset ();

    if (this->practiceSetting_parser_)
      this->practiceSetting_parser_->_reset ();

    if (this->sourcePatientInfo_parser_)
      this->sourcePatientInfo_parser_->_reset ();

    if (this->related_parser_)
      this->related_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for DocumentReference_pskel.
  //
  bool DocumentReference_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "masterIdentifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DocumentReference_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DocumentReference_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DocumentReference_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void DocumentReference_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DocumentReference_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "masterIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->masterIdentifier_parser_)
            {
              this->masterIdentifier_parser_->pre ();
              ctx.nested_parser (this->masterIdentifier_parser_);
            }
          }
          else
          {
            if (this->masterIdentifier_parser_ != 0)
            {
              this->masterIdentifier_parser_->post_Identifier ();
              this->masterIdentifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_DocumentReferenceStatus ();
              this->status ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "docStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->docStatus_parser_)
            {
              this->docStatus_parser_->pre ();
              ctx.nested_parser (this->docStatus_parser_);
            }
          }
          else
          {
            if (this->docStatus_parser_ != 0)
            {
              this->docStatus_parser_->post_CompositionStatus ();
              this->docStatus ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_instant ();
              this->date ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "authenticator" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authenticator_parser_)
            {
              this->authenticator_parser_->pre ();
              ctx.nested_parser (this->authenticator_parser_);
            }
          }
          else
          {
            if (this->authenticator_parser_ != 0)
            {
              this->authenticator_parser_->post_Reference ();
              this->authenticator ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "custodian" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->custodian_parser_)
            {
              this->custodian_parser_->pre ();
              ctx.nested_parser (this->custodian_parser_);
            }
          }
          else
          {
            if (this->custodian_parser_ != 0)
            {
              this->custodian_parser_->post_Reference ();
              this->custodian ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "relatesTo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relatesTo_parser_)
            {
              this->relatesTo_parser_->pre ();
              ctx.nested_parser (this->relatesTo_parser_);
            }
          }
          else
          {
            if (this->relatesTo_parser_ != 0)
            {
              this->relatesTo_parser_->post_DocumentReference_RelatesTo ();
              this->relatesTo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "securityLabel" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->securityLabel_parser_)
            {
              this->securityLabel_parser_->pre ();
              ctx.nested_parser (this->securityLabel_parser_);
            }
          }
          else
          {
            if (this->securityLabel_parser_ != 0)
            {
              this->securityLabel_parser_->post_CodeableConcept ();
              this->securityLabel ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "content" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->content_parser_)
            {
              this->content_parser_->pre ();
              ctx.nested_parser (this->content_parser_);
            }
          }
          else
          {
            if (this->content_parser_ != 0)
            {
              this->content_parser_->post_DocumentReference_Content ();
              this->content ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "context" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->context_parser_)
            {
              this->context_parser_->pre ();
              ctx.nested_parser (this->context_parser_);
            }
          }
          else
          {
            if (this->context_parser_ != 0)
            {
              this->context_parser_->post_DocumentReference_Context ();
              this->context ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DocumentReference_RelatesTo_pskel.
  //
  bool DocumentReference_RelatesTo_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DocumentReference_RelatesTo_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DocumentReference_RelatesTo_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DocumentReference_RelatesTo_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DocumentReference_RelatesTo_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DocumentReference_RelatesTo_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_DocumentRelationshipType ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "target" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->target_parser_)
            {
              this->target_parser_->pre ();
              ctx.nested_parser (this->target_parser_);
            }
          }
          else
          {
            if (this->target_parser_ != 0)
            {
              this->target_parser_->post_Reference ();
              this->target ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DocumentReference_Content_pskel.
  //
  bool DocumentReference_Content_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "attachment" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DocumentReference_Content_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DocumentReference_Content_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DocumentReference_Content_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DocumentReference_Content_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DocumentReference_Content_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "attachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->attachment_parser_)
            {
              this->attachment_parser_->pre ();
              ctx.nested_parser (this->attachment_parser_);
            }
          }
          else
          {
            if (this->attachment_parser_ != 0)
            {
              this->attachment_parser_->post_Attachment ();
              this->attachment ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "format" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->format_parser_)
            {
              this->format_parser_->pre ();
              ctx.nested_parser (this->format_parser_);
            }
          }
          else
          {
            if (this->format_parser_ != 0)
            {
              this->format_parser_->post_Coding ();
              this->format ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DocumentReference_Context_pskel.
  //
  bool DocumentReference_Context_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "event" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "facilityType" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "practiceSetting" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "sourcePatientInfo" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "related" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DocumentReference_Context_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DocumentReference_Context_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DocumentReference_Context_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void DocumentReference_Context_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void DocumentReference_Context_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "event" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->event_parser_)
            {
              this->event_parser_->pre ();
              ctx.nested_parser (this->event_parser_);
            }
          }
          else
          {
            if (this->event_parser_ != 0)
            {
              this->event_parser_->post_CodeableConcept ();
              this->event ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "facilityType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->facilityType_parser_)
            {
              this->facilityType_parser_->pre ();
              ctx.nested_parser (this->facilityType_parser_);
            }
          }
          else
          {
            if (this->facilityType_parser_ != 0)
            {
              this->facilityType_parser_->post_CodeableConcept ();
              this->facilityType ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "practiceSetting" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->practiceSetting_parser_)
            {
              this->practiceSetting_parser_->pre ();
              ctx.nested_parser (this->practiceSetting_parser_);
            }
          }
          else
          {
            if (this->practiceSetting_parser_ != 0)
            {
              this->practiceSetting_parser_->post_CodeableConcept ();
              this->practiceSetting ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "sourcePatientInfo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sourcePatientInfo_parser_)
            {
              this->sourcePatientInfo_parser_->pre ();
              ctx.nested_parser (this->sourcePatientInfo_parser_);
            }
          }
          else
          {
            if (this->sourcePatientInfo_parser_ != 0)
            {
              this->sourcePatientInfo_parser_->post_Reference ();
              this->sourcePatientInfo ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "related" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->related_parser_)
            {
              this->related_parser_->pre ();
              ctx.nested_parser (this->related_parser_);
            }
          }
          else
          {
            if (this->related_parser_ != 0)
            {
              this->related_parser_->post_Reference ();
              this->related ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

