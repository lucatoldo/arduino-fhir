// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "immunizationrecommendation-pskel.hxx"

namespace fhir
{
  // ImmunizationRecommendation_pskel
  //

  void ImmunizationRecommendation_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ImmunizationRecommendation_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void ImmunizationRecommendation_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void ImmunizationRecommendation_pskel::
  authority_parser (::fhir::Reference_pskel& p)
  {
    this->authority_parser_ = &p;
  }

  void ImmunizationRecommendation_pskel::
  recommendation_parser (::fhir::ImmunizationRecommendation_Recommendation_pskel& p)
  {
    this->recommendation_parser_ = &p;
  }

  void ImmunizationRecommendation_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& patient,
           ::fhir::dateTime_pskel& date,
           ::fhir::Reference_pskel& authority,
           ::fhir::ImmunizationRecommendation_Recommendation_pskel& recommendation)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->patient_parser_ = &patient;
    this->date_parser_ = &date;
    this->authority_parser_ = &authority;
    this->recommendation_parser_ = &recommendation;
  }

  ImmunizationRecommendation_pskel::
  ImmunizationRecommendation_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ImmunizationRecommendation_impl_ (0),
    identifier_parser_ (0),
    patient_parser_ (0),
    date_parser_ (0),
    authority_parser_ (0),
    recommendation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImmunizationRecommendation_pskel::
  ImmunizationRecommendation_pskel (ImmunizationRecommendation_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ImmunizationRecommendation_impl_ (impl),
    identifier_parser_ (0),
    patient_parser_ (0),
    date_parser_ (0),
    authority_parser_ (0),
    recommendation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImmunizationRecommendation_Recommendation_pskel
  //

  void ImmunizationRecommendation_Recommendation_pskel::
  vaccineCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->vaccineCode_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  targetDisease_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->targetDisease_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  contraindicatedVaccineCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->contraindicatedVaccineCode_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  forecastStatus_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->forecastStatus_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  forecastReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->forecastReason_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  dateCriterion_parser (::fhir::ImmunizationRecommendation_DateCriterion_pskel& p)
  {
    this->dateCriterion_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  series_parser (::fhir::string_pskel& p)
  {
    this->series_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  doseNumberPositiveInt_parser (::fhir::positiveInt_pskel& p)
  {
    this->doseNumberPositiveInt_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  doseNumberString_parser (::fhir::string_pskel& p)
  {
    this->doseNumberString_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  seriesDosesPositiveInt_parser (::fhir::positiveInt_pskel& p)
  {
    this->seriesDosesPositiveInt_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  seriesDosesString_parser (::fhir::string_pskel& p)
  {
    this->seriesDosesString_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  supportingImmunization_parser (::fhir::Reference_pskel& p)
  {
    this->supportingImmunization_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  supportingPatientInformation_parser (::fhir::Reference_pskel& p)
  {
    this->supportingPatientInformation_parser_ = &p;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& vaccineCode,
           ::fhir::CodeableConcept_pskel& targetDisease,
           ::fhir::CodeableConcept_pskel& contraindicatedVaccineCode,
           ::fhir::CodeableConcept_pskel& forecastStatus,
           ::fhir::CodeableConcept_pskel& forecastReason,
           ::fhir::ImmunizationRecommendation_DateCriterion_pskel& dateCriterion,
           ::fhir::string_pskel& description,
           ::fhir::string_pskel& series,
           ::fhir::positiveInt_pskel& doseNumberPositiveInt,
           ::fhir::string_pskel& doseNumberString,
           ::fhir::positiveInt_pskel& seriesDosesPositiveInt,
           ::fhir::string_pskel& seriesDosesString,
           ::fhir::Reference_pskel& supportingImmunization,
           ::fhir::Reference_pskel& supportingPatientInformation)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->vaccineCode_parser_ = &vaccineCode;
    this->targetDisease_parser_ = &targetDisease;
    this->contraindicatedVaccineCode_parser_ = &contraindicatedVaccineCode;
    this->forecastStatus_parser_ = &forecastStatus;
    this->forecastReason_parser_ = &forecastReason;
    this->dateCriterion_parser_ = &dateCriterion;
    this->description_parser_ = &description;
    this->series_parser_ = &series;
    this->doseNumberPositiveInt_parser_ = &doseNumberPositiveInt;
    this->doseNumberString_parser_ = &doseNumberString;
    this->seriesDosesPositiveInt_parser_ = &seriesDosesPositiveInt;
    this->seriesDosesString_parser_ = &seriesDosesString;
    this->supportingImmunization_parser_ = &supportingImmunization;
    this->supportingPatientInformation_parser_ = &supportingPatientInformation;
  }

  ImmunizationRecommendation_Recommendation_pskel::
  ImmunizationRecommendation_Recommendation_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImmunizationRecommendation_Recommendation_impl_ (0),
    vaccineCode_parser_ (0),
    targetDisease_parser_ (0),
    contraindicatedVaccineCode_parser_ (0),
    forecastStatus_parser_ (0),
    forecastReason_parser_ (0),
    dateCriterion_parser_ (0),
    description_parser_ (0),
    series_parser_ (0),
    doseNumberPositiveInt_parser_ (0),
    doseNumberString_parser_ (0),
    seriesDosesPositiveInt_parser_ (0),
    seriesDosesString_parser_ (0),
    supportingImmunization_parser_ (0),
    supportingPatientInformation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImmunizationRecommendation_Recommendation_pskel::
  ImmunizationRecommendation_Recommendation_pskel (ImmunizationRecommendation_Recommendation_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImmunizationRecommendation_Recommendation_impl_ (impl),
    vaccineCode_parser_ (0),
    targetDisease_parser_ (0),
    contraindicatedVaccineCode_parser_ (0),
    forecastStatus_parser_ (0),
    forecastReason_parser_ (0),
    dateCriterion_parser_ (0),
    description_parser_ (0),
    series_parser_ (0),
    doseNumberPositiveInt_parser_ (0),
    doseNumberString_parser_ (0),
    seriesDosesPositiveInt_parser_ (0),
    seriesDosesString_parser_ (0),
    supportingImmunization_parser_ (0),
    supportingPatientInformation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ImmunizationRecommendation_DateCriterion_pskel
  //

  void ImmunizationRecommendation_DateCriterion_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ImmunizationRecommendation_DateCriterion_pskel::
  value_parser (::fhir::dateTime_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ImmunizationRecommendation_DateCriterion_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::dateTime_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->code_parser_ = &code;
    this->value_parser_ = &value;
  }

  ImmunizationRecommendation_DateCriterion_pskel::
  ImmunizationRecommendation_DateCriterion_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ImmunizationRecommendation_DateCriterion_impl_ (0),
    code_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ImmunizationRecommendation_DateCriterion_pskel::
  ImmunizationRecommendation_DateCriterion_pskel (ImmunizationRecommendation_DateCriterion_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ImmunizationRecommendation_DateCriterion_impl_ (impl),
    code_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ImmunizationRecommendation_pskel
  //

  void ImmunizationRecommendation_pskel::
  identifier ()
  {
    if (this->ImmunizationRecommendation_impl_)
      this->ImmunizationRecommendation_impl_->identifier ();
  }

  void ImmunizationRecommendation_pskel::
  patient ()
  {
    if (this->ImmunizationRecommendation_impl_)
      this->ImmunizationRecommendation_impl_->patient ();
  }

  void ImmunizationRecommendation_pskel::
  date ()
  {
    if (this->ImmunizationRecommendation_impl_)
      this->ImmunizationRecommendation_impl_->date ();
  }

  void ImmunizationRecommendation_pskel::
  authority ()
  {
    if (this->ImmunizationRecommendation_impl_)
      this->ImmunizationRecommendation_impl_->authority ();
  }

  void ImmunizationRecommendation_pskel::
  recommendation ()
  {
    if (this->ImmunizationRecommendation_impl_)
      this->ImmunizationRecommendation_impl_->recommendation ();
  }

  void ImmunizationRecommendation_pskel::
  post_ImmunizationRecommendation ()
  {
    if (this->ImmunizationRecommendation_impl_)
      this->ImmunizationRecommendation_impl_->post_ImmunizationRecommendation ();
    else
      post_DomainResource ();
  }

  void ImmunizationRecommendation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->authority_parser_)
      this->authority_parser_->_reset ();

    if (this->recommendation_parser_)
      this->recommendation_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImmunizationRecommendation_Recommendation_pskel
  //

  void ImmunizationRecommendation_Recommendation_pskel::
  vaccineCode ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->vaccineCode ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  targetDisease ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->targetDisease ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  contraindicatedVaccineCode ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->contraindicatedVaccineCode ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  forecastStatus ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->forecastStatus ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  forecastReason ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->forecastReason ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  dateCriterion ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->dateCriterion ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  description ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->description ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  series ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->series ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  doseNumberPositiveInt ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->doseNumberPositiveInt ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  doseNumberString ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->doseNumberString ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  seriesDosesPositiveInt ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->seriesDosesPositiveInt ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  seriesDosesString ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->seriesDosesString ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  supportingImmunization ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->supportingImmunization ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  supportingPatientInformation ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->supportingPatientInformation ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  post_ImmunizationRecommendation_Recommendation ()
  {
    if (this->ImmunizationRecommendation_Recommendation_impl_)
      this->ImmunizationRecommendation_Recommendation_impl_->post_ImmunizationRecommendation_Recommendation ();
    else
      post_BackboneElement ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->vaccineCode_parser_)
      this->vaccineCode_parser_->_reset ();

    if (this->targetDisease_parser_)
      this->targetDisease_parser_->_reset ();

    if (this->contraindicatedVaccineCode_parser_)
      this->contraindicatedVaccineCode_parser_->_reset ();

    if (this->forecastStatus_parser_)
      this->forecastStatus_parser_->_reset ();

    if (this->forecastReason_parser_)
      this->forecastReason_parser_->_reset ();

    if (this->dateCriterion_parser_)
      this->dateCriterion_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->series_parser_)
      this->series_parser_->_reset ();

    if (this->doseNumberPositiveInt_parser_)
      this->doseNumberPositiveInt_parser_->_reset ();

    if (this->doseNumberString_parser_)
      this->doseNumberString_parser_->_reset ();

    if (this->seriesDosesPositiveInt_parser_)
      this->seriesDosesPositiveInt_parser_->_reset ();

    if (this->seriesDosesString_parser_)
      this->seriesDosesString_parser_->_reset ();

    if (this->supportingImmunization_parser_)
      this->supportingImmunization_parser_->_reset ();

    if (this->supportingPatientInformation_parser_)
      this->supportingPatientInformation_parser_->_reset ();

    this->resetting_ = false;
  }

  // ImmunizationRecommendation_DateCriterion_pskel
  //

  void ImmunizationRecommendation_DateCriterion_pskel::
  code ()
  {
    if (this->ImmunizationRecommendation_DateCriterion_impl_)
      this->ImmunizationRecommendation_DateCriterion_impl_->code ();
  }

  void ImmunizationRecommendation_DateCriterion_pskel::
  value ()
  {
    if (this->ImmunizationRecommendation_DateCriterion_impl_)
      this->ImmunizationRecommendation_DateCriterion_impl_->value ();
  }

  void ImmunizationRecommendation_DateCriterion_pskel::
  post_ImmunizationRecommendation_DateCriterion ()
  {
    if (this->ImmunizationRecommendation_DateCriterion_impl_)
      this->ImmunizationRecommendation_DateCriterion_impl_->post_ImmunizationRecommendation_DateCriterion ();
    else
      post_BackboneElement ();
  }

  void ImmunizationRecommendation_DateCriterion_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ImmunizationRecommendation_pskel.
  //
  bool ImmunizationRecommendation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "patient" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImmunizationRecommendation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImmunizationRecommendation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImmunizationRecommendation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ImmunizationRecommendation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImmunizationRecommendation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "authority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authority_parser_)
            {
              this->authority_parser_->pre ();
              ctx.nested_parser (this->authority_parser_);
            }
          }
          else
          {
            if (this->authority_parser_ != 0)
            {
              this->authority_parser_->post_Reference ();
              this->authority ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "recommendation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recommendation_parser_)
            {
              this->recommendation_parser_->pre ();
              ctx.nested_parser (this->recommendation_parser_);
            }
          }
          else
          {
            if (this->recommendation_parser_ != 0)
            {
              this->recommendation_parser_->post_ImmunizationRecommendation_Recommendation ();
              this->recommendation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImmunizationRecommendation_Recommendation_pskel.
  //
  bool ImmunizationRecommendation_Recommendation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "vaccineCode" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "targetDisease" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "contraindicatedVaccineCode" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "forecastStatus" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImmunizationRecommendation_Recommendation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImmunizationRecommendation_Recommendation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImmunizationRecommendation_Recommendation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "vaccineCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->vaccineCode_parser_)
            {
              this->vaccineCode_parser_->pre ();
              ctx.nested_parser (this->vaccineCode_parser_);
            }
          }
          else
          {
            if (this->vaccineCode_parser_ != 0)
            {
              this->vaccineCode_parser_->post_CodeableConcept ();
              this->vaccineCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "targetDisease" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->targetDisease_parser_)
            {
              this->targetDisease_parser_->pre ();
              ctx.nested_parser (this->targetDisease_parser_);
            }
          }
          else
          {
            if (this->targetDisease_parser_ != 0)
            {
              this->targetDisease_parser_->post_CodeableConcept ();
              this->targetDisease ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "contraindicatedVaccineCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contraindicatedVaccineCode_parser_)
            {
              this->contraindicatedVaccineCode_parser_->pre ();
              ctx.nested_parser (this->contraindicatedVaccineCode_parser_);
            }
          }
          else
          {
            if (this->contraindicatedVaccineCode_parser_ != 0)
            {
              this->contraindicatedVaccineCode_parser_->post_CodeableConcept ();
              this->contraindicatedVaccineCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "forecastStatus" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->forecastStatus_parser_)
            {
              this->forecastStatus_parser_->pre ();
              ctx.nested_parser (this->forecastStatus_parser_);
            }
          }
          else
          {
            if (this->forecastStatus_parser_ != 0)
            {
              this->forecastStatus_parser_->post_CodeableConcept ();
              this->forecastStatus ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "forecastReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->forecastReason_parser_)
            {
              this->forecastReason_parser_->pre ();
              ctx.nested_parser (this->forecastReason_parser_);
            }
          }
          else
          {
            if (this->forecastReason_parser_ != 0)
            {
              this->forecastReason_parser_->post_CodeableConcept ();
              this->forecastReason ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "dateCriterion" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dateCriterion_parser_)
            {
              this->dateCriterion_parser_->pre ();
              ctx.nested_parser (this->dateCriterion_parser_);
            }
          }
          else
          {
            if (this->dateCriterion_parser_ != 0)
            {
              this->dateCriterion_parser_->post_ImmunizationRecommendation_DateCriterion ();
              this->dateCriterion ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "series" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->series_parser_)
            {
              this->series_parser_->pre ();
              ctx.nested_parser (this->series_parser_);
            }
          }
          else
          {
            if (this->series_parser_ != 0)
            {
              this->series_parser_->post_string ();
              this->series ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "doseNumberPositiveInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->doseNumberPositiveInt_parser_)
            {
              this->doseNumberPositiveInt_parser_->pre ();
              ctx.nested_parser (this->doseNumberPositiveInt_parser_);
            }
          }
          else
          {
            if (this->doseNumberPositiveInt_parser_ != 0)
            {
              this->doseNumberPositiveInt_parser_->post_positiveInt ();
              this->doseNumberPositiveInt ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "doseNumberString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->doseNumberString_parser_)
            {
              this->doseNumberString_parser_->pre ();
              ctx.nested_parser (this->doseNumberString_parser_);
            }
          }
          else
          {
            if (this->doseNumberString_parser_ != 0)
            {
              this->doseNumberString_parser_->post_string ();
              this->doseNumberString ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "seriesDosesPositiveInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->seriesDosesPositiveInt_parser_)
            {
              this->seriesDosesPositiveInt_parser_->pre ();
              ctx.nested_parser (this->seriesDosesPositiveInt_parser_);
            }
          }
          else
          {
            if (this->seriesDosesPositiveInt_parser_ != 0)
            {
              this->seriesDosesPositiveInt_parser_->post_positiveInt ();
              this->seriesDosesPositiveInt ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "seriesDosesString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->seriesDosesString_parser_)
            {
              this->seriesDosesString_parser_->pre ();
              ctx.nested_parser (this->seriesDosesString_parser_);
            }
          }
          else
          {
            if (this->seriesDosesString_parser_ != 0)
            {
              this->seriesDosesString_parser_->post_string ();
              this->seriesDosesString ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "supportingImmunization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingImmunization_parser_)
            {
              this->supportingImmunization_parser_->pre ();
              ctx.nested_parser (this->supportingImmunization_parser_);
            }
          }
          else
          {
            if (this->supportingImmunization_parser_ != 0)
            {
              this->supportingImmunization_parser_->post_Reference ();
              this->supportingImmunization ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "supportingPatientInformation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingPatientInformation_parser_)
            {
              this->supportingPatientInformation_parser_->pre ();
              ctx.nested_parser (this->supportingPatientInformation_parser_);
            }
          }
          else
          {
            if (this->supportingPatientInformation_parser_ != 0)
            {
              this->supportingPatientInformation_parser_->post_Reference ();
              this->supportingPatientInformation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ImmunizationRecommendation_DateCriterion_pskel.
  //
  bool ImmunizationRecommendation_DateCriterion_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "code" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ImmunizationRecommendation_DateCriterion_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ImmunizationRecommendation_DateCriterion_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ImmunizationRecommendation_DateCriterion_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ImmunizationRecommendation_DateCriterion_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ImmunizationRecommendation_DateCriterion_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_dateTime ();
              this->value ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

