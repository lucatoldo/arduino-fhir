// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef INSURANCEPLAN_PSKEL_HXX
#define INSURANCEPLAN_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class InsurancePlan_pskel;
  class InsurancePlan_Contact_pskel;
  class InsurancePlan_Coverage_pskel;
  class InsurancePlan_Benefit_pskel;
  class InsurancePlan_Limit_pskel;
  class InsurancePlan_Plan_pskel;
  class InsurancePlan_GeneralCost_pskel;
  class InsurancePlan_SpecificCost_pskel;
  class InsurancePlan_Benefit1_pskel;
  class InsurancePlan_Cost_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class InsurancePlan_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    status ();

    virtual void
    type ();

    virtual void
    name ();

    virtual void
    alias ();

    virtual void
    period ();

    virtual void
    ownedBy ();

    virtual void
    administeredBy ();

    virtual void
    coverageArea ();

    virtual void
    contact ();

    virtual void
    endpoint ();

    virtual void
    network ();

    virtual void
    coverage ();

    virtual void
    plan ();

    virtual void
    post_InsurancePlan ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* alias */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Reference_pskel& /* ownedBy */,
             ::fhir::Reference_pskel& /* administeredBy */,
             ::fhir::Reference_pskel& /* coverageArea */,
             ::fhir::InsurancePlan_Contact_pskel& /* contact */,
             ::fhir::Reference_pskel& /* endpoint */,
             ::fhir::Reference_pskel& /* network */,
             ::fhir::InsurancePlan_Coverage_pskel& /* coverage */,
             ::fhir::InsurancePlan_Plan_pskel& /* plan */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    alias_parser (::fhir::string_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    ownedBy_parser (::fhir::Reference_pskel&);

    void
    administeredBy_parser (::fhir::Reference_pskel&);

    void
    coverageArea_parser (::fhir::Reference_pskel&);

    void
    contact_parser (::fhir::InsurancePlan_Contact_pskel&);

    void
    endpoint_parser (::fhir::Reference_pskel&);

    void
    network_parser (::fhir::Reference_pskel&);

    void
    coverage_parser (::fhir::InsurancePlan_Coverage_pskel&);

    void
    plan_parser (::fhir::InsurancePlan_Plan_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_pskel* InsurancePlan_impl_;
    InsurancePlan_pskel (InsurancePlan_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* alias_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Reference_pskel* ownedBy_parser_;
    ::fhir::Reference_pskel* administeredBy_parser_;
    ::fhir::Reference_pskel* coverageArea_parser_;
    ::fhir::InsurancePlan_Contact_pskel* contact_parser_;
    ::fhir::Reference_pskel* endpoint_parser_;
    ::fhir::Reference_pskel* network_parser_;
    ::fhir::InsurancePlan_Coverage_pskel* coverage_parser_;
    ::fhir::InsurancePlan_Plan_pskel* plan_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Contact_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    purpose ();

    virtual void
    name ();

    virtual void
    telecom ();

    virtual void
    address ();

    virtual void
    post_InsurancePlan_Contact ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* purpose */,
             ::fhir::HumanName_pskel& /* name */,
             ::fhir::ContactPoint_pskel& /* telecom */,
             ::fhir::Address_pskel& /* address */);

    // Individual element parsers.
    //
    void
    purpose_parser (::fhir::CodeableConcept_pskel&);

    void
    name_parser (::fhir::HumanName_pskel&);

    void
    telecom_parser (::fhir::ContactPoint_pskel&);

    void
    address_parser (::fhir::Address_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Contact_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Contact_pskel* InsurancePlan_Contact_impl_;
    InsurancePlan_Contact_pskel (InsurancePlan_Contact_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* purpose_parser_;
    ::fhir::HumanName_pskel* name_parser_;
    ::fhir::ContactPoint_pskel* telecom_parser_;
    ::fhir::Address_pskel* address_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Contact_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Coverage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    network ();

    virtual void
    benefit ();

    virtual void
    post_InsurancePlan_Coverage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* network */,
             ::fhir::InsurancePlan_Benefit_pskel& /* benefit */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    network_parser (::fhir::Reference_pskel&);

    void
    benefit_parser (::fhir::InsurancePlan_Benefit_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Coverage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Coverage_pskel* InsurancePlan_Coverage_impl_;
    InsurancePlan_Coverage_pskel (InsurancePlan_Coverage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* network_parser_;
    ::fhir::InsurancePlan_Benefit_pskel* benefit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Coverage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Benefit_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    requirement ();

    virtual void
    limit ();

    virtual void
    post_InsurancePlan_Benefit ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::string_pskel& /* requirement */,
             ::fhir::InsurancePlan_Limit_pskel& /* limit */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    requirement_parser (::fhir::string_pskel&);

    void
    limit_parser (::fhir::InsurancePlan_Limit_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Benefit_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Benefit_pskel* InsurancePlan_Benefit_impl_;
    InsurancePlan_Benefit_pskel (InsurancePlan_Benefit_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::string_pskel* requirement_parser_;
    ::fhir::InsurancePlan_Limit_pskel* limit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Benefit_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Limit_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    value ();

    virtual void
    code ();

    virtual void
    post_InsurancePlan_Limit ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Quantity_pskel& /* value */,
             ::fhir::CodeableConcept_pskel& /* code */);

    // Individual element parsers.
    //
    void
    value_parser (::fhir::Quantity_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Limit_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Limit_pskel* InsurancePlan_Limit_impl_;
    InsurancePlan_Limit_pskel (InsurancePlan_Limit_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Quantity_pskel* value_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Limit_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Plan_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    type ();

    virtual void
    coverageArea ();

    virtual void
    network ();

    virtual void
    generalCost ();

    virtual void
    specificCost ();

    virtual void
    post_InsurancePlan_Plan ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* coverageArea */,
             ::fhir::Reference_pskel& /* network */,
             ::fhir::InsurancePlan_GeneralCost_pskel& /* generalCost */,
             ::fhir::InsurancePlan_SpecificCost_pskel& /* specificCost */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    coverageArea_parser (::fhir::Reference_pskel&);

    void
    network_parser (::fhir::Reference_pskel&);

    void
    generalCost_parser (::fhir::InsurancePlan_GeneralCost_pskel&);

    void
    specificCost_parser (::fhir::InsurancePlan_SpecificCost_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Plan_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Plan_pskel* InsurancePlan_Plan_impl_;
    InsurancePlan_Plan_pskel (InsurancePlan_Plan_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* coverageArea_parser_;
    ::fhir::Reference_pskel* network_parser_;
    ::fhir::InsurancePlan_GeneralCost_pskel* generalCost_parser_;
    ::fhir::InsurancePlan_SpecificCost_pskel* specificCost_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Plan_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_GeneralCost_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    groupSize ();

    virtual void
    cost ();

    virtual void
    comment ();

    virtual void
    post_InsurancePlan_GeneralCost ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::positiveInt_pskel& /* groupSize */,
             ::fhir::Money_pskel& /* cost */,
             ::fhir::string_pskel& /* comment */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    groupSize_parser (::fhir::positiveInt_pskel&);

    void
    cost_parser (::fhir::Money_pskel&);

    void
    comment_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_GeneralCost_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_GeneralCost_pskel* InsurancePlan_GeneralCost_impl_;
    InsurancePlan_GeneralCost_pskel (InsurancePlan_GeneralCost_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::positiveInt_pskel* groupSize_parser_;
    ::fhir::Money_pskel* cost_parser_;
    ::fhir::string_pskel* comment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_GeneralCost_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_SpecificCost_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    category ();

    virtual void
    benefit ();

    virtual void
    post_InsurancePlan_SpecificCost ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* category */,
             ::fhir::InsurancePlan_Benefit1_pskel& /* benefit */);

    // Individual element parsers.
    //
    void
    category_parser (::fhir::CodeableConcept_pskel&);

    void
    benefit_parser (::fhir::InsurancePlan_Benefit1_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_SpecificCost_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_SpecificCost_pskel* InsurancePlan_SpecificCost_impl_;
    InsurancePlan_SpecificCost_pskel (InsurancePlan_SpecificCost_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* category_parser_;
    ::fhir::InsurancePlan_Benefit1_pskel* benefit_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_SpecificCost_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Benefit1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    cost ();

    virtual void
    post_InsurancePlan_Benefit1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::InsurancePlan_Cost_pskel& /* cost */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    cost_parser (::fhir::InsurancePlan_Cost_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Benefit1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Benefit1_pskel* InsurancePlan_Benefit1_impl_;
    InsurancePlan_Benefit1_pskel (InsurancePlan_Benefit1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::InsurancePlan_Cost_pskel* cost_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Benefit1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class InsurancePlan_Cost_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    applicability ();

    virtual void
    qualifiers ();

    virtual void
    value ();

    virtual void
    post_InsurancePlan_Cost ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* applicability */,
             ::fhir::CodeableConcept_pskel& /* qualifiers */,
             ::fhir::Quantity_pskel& /* value */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    applicability_parser (::fhir::CodeableConcept_pskel&);

    void
    qualifiers_parser (::fhir::CodeableConcept_pskel&);

    void
    value_parser (::fhir::Quantity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    InsurancePlan_Cost_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    InsurancePlan_Cost_pskel* InsurancePlan_Cost_impl_;
    InsurancePlan_Cost_pskel (InsurancePlan_Cost_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* applicability_parser_;
    ::fhir::CodeableConcept_pskel* qualifiers_parser_;
    ::fhir::Quantity_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::InsurancePlan_Cost_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // INSURANCEPLAN_PSKEL_HXX
