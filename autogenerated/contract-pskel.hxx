// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef CONTRACT_PSKEL_HXX
#define CONTRACT_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class Contract_pskel;
  class Contract_ContentDefinition_pskel;
  class Contract_Term_pskel;
  class Contract_SecurityLabel_pskel;
  class Contract_Offer_pskel;
  class Contract_Party_pskel;
  class Contract_Answer_pskel;
  class Contract_Asset_pskel;
  class Contract_Context_pskel;
  class Contract_ValuedItem_pskel;
  class Contract_Action_pskel;
  class Contract_Subject_pskel;
  class Contract_Signer_pskel;
  class Contract_Friendly_pskel;
  class Contract_Legal_pskel;
  class Contract_Rule_pskel;
  class ContractResourceStatusCodes_list_pskel;
  class ContractResourceStatusCodes_pskel;
  class ContractResourcePublicationStatusCodes_list_pskel;
  class ContractResourcePublicationStatusCodes_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class Contract_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    url ();

    virtual void
    version ();

    virtual void
    status ();

    virtual void
    legalState ();

    virtual void
    instantiatesCanonical ();

    virtual void
    instantiatesUri ();

    virtual void
    contentDerivative ();

    virtual void
    issued ();

    virtual void
    applies ();

    virtual void
    expirationType ();

    virtual void
    subject ();

    virtual void
    authority ();

    virtual void
    domain ();

    virtual void
    site ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    subtitle ();

    virtual void
    alias ();

    virtual void
    author ();

    virtual void
    scope ();

    virtual void
    topicCodeableConcept ();

    virtual void
    topicReference ();

    virtual void
    type ();

    virtual void
    subType ();

    virtual void
    contentDefinition ();

    virtual void
    term ();

    virtual void
    supportingInfo ();

    virtual void
    relevantHistory ();

    virtual void
    signer ();

    virtual void
    friendly ();

    virtual void
    legal ();

    virtual void
    rule ();

    virtual void
    legallyBindingAttachment ();

    virtual void
    legallyBindingReference ();

    virtual void
    post_Contract ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::ContractResourceStatusCodes_pskel& /* status */,
             ::fhir::CodeableConcept_pskel& /* legalState */,
             ::fhir::Reference_pskel& /* instantiatesCanonical */,
             ::fhir::uri_pskel& /* instantiatesUri */,
             ::fhir::CodeableConcept_pskel& /* contentDerivative */,
             ::fhir::dateTime_pskel& /* issued */,
             ::fhir::Period_pskel& /* applies */,
             ::fhir::CodeableConcept_pskel& /* expirationType */,
             ::fhir::Reference_pskel& /* subject */,
             ::fhir::Reference_pskel& /* authority */,
             ::fhir::Reference_pskel& /* domain */,
             ::fhir::Reference_pskel& /* site */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::string_pskel& /* subtitle */,
             ::fhir::string_pskel& /* alias */,
             ::fhir::Reference_pskel& /* author */,
             ::fhir::CodeableConcept_pskel& /* scope */,
             ::fhir::CodeableConcept_pskel& /* topicCodeableConcept */,
             ::fhir::Reference_pskel& /* topicReference */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subType */,
             ::fhir::Contract_ContentDefinition_pskel& /* contentDefinition */,
             ::fhir::Contract_Term_pskel& /* term */,
             ::fhir::Reference_pskel& /* supportingInfo */,
             ::fhir::Reference_pskel& /* relevantHistory */,
             ::fhir::Contract_Signer_pskel& /* signer */,
             ::fhir::Contract_Friendly_pskel& /* friendly */,
             ::fhir::Contract_Legal_pskel& /* legal */,
             ::fhir::Contract_Rule_pskel& /* rule */,
             ::fhir::Attachment_pskel& /* legallyBindingAttachment */,
             ::fhir::Reference_pskel& /* legallyBindingReference */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::ContractResourceStatusCodes_pskel&);

    void
    legalState_parser (::fhir::CodeableConcept_pskel&);

    void
    instantiatesCanonical_parser (::fhir::Reference_pskel&);

    void
    instantiatesUri_parser (::fhir::uri_pskel&);

    void
    contentDerivative_parser (::fhir::CodeableConcept_pskel&);

    void
    issued_parser (::fhir::dateTime_pskel&);

    void
    applies_parser (::fhir::Period_pskel&);

    void
    expirationType_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Reference_pskel&);

    void
    authority_parser (::fhir::Reference_pskel&);

    void
    domain_parser (::fhir::Reference_pskel&);

    void
    site_parser (::fhir::Reference_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    subtitle_parser (::fhir::string_pskel&);

    void
    alias_parser (::fhir::string_pskel&);

    void
    author_parser (::fhir::Reference_pskel&);

    void
    scope_parser (::fhir::CodeableConcept_pskel&);

    void
    topicCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    topicReference_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subType_parser (::fhir::CodeableConcept_pskel&);

    void
    contentDefinition_parser (::fhir::Contract_ContentDefinition_pskel&);

    void
    term_parser (::fhir::Contract_Term_pskel&);

    void
    supportingInfo_parser (::fhir::Reference_pskel&);

    void
    relevantHistory_parser (::fhir::Reference_pskel&);

    void
    signer_parser (::fhir::Contract_Signer_pskel&);

    void
    friendly_parser (::fhir::Contract_Friendly_pskel&);

    void
    legal_parser (::fhir::Contract_Legal_pskel&);

    void
    rule_parser (::fhir::Contract_Rule_pskel&);

    void
    legallyBindingAttachment_parser (::fhir::Attachment_pskel&);

    void
    legallyBindingReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_pskel* Contract_impl_;
    Contract_pskel (Contract_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::ContractResourceStatusCodes_pskel* status_parser_;
    ::fhir::CodeableConcept_pskel* legalState_parser_;
    ::fhir::Reference_pskel* instantiatesCanonical_parser_;
    ::fhir::uri_pskel* instantiatesUri_parser_;
    ::fhir::CodeableConcept_pskel* contentDerivative_parser_;
    ::fhir::dateTime_pskel* issued_parser_;
    ::fhir::Period_pskel* applies_parser_;
    ::fhir::CodeableConcept_pskel* expirationType_parser_;
    ::fhir::Reference_pskel* subject_parser_;
    ::fhir::Reference_pskel* authority_parser_;
    ::fhir::Reference_pskel* domain_parser_;
    ::fhir::Reference_pskel* site_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::string_pskel* subtitle_parser_;
    ::fhir::string_pskel* alias_parser_;
    ::fhir::Reference_pskel* author_parser_;
    ::fhir::CodeableConcept_pskel* scope_parser_;
    ::fhir::CodeableConcept_pskel* topicCodeableConcept_parser_;
    ::fhir::Reference_pskel* topicReference_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subType_parser_;
    ::fhir::Contract_ContentDefinition_pskel* contentDefinition_parser_;
    ::fhir::Contract_Term_pskel* term_parser_;
    ::fhir::Reference_pskel* supportingInfo_parser_;
    ::fhir::Reference_pskel* relevantHistory_parser_;
    ::fhir::Contract_Signer_pskel* signer_parser_;
    ::fhir::Contract_Friendly_pskel* friendly_parser_;
    ::fhir::Contract_Legal_pskel* legal_parser_;
    ::fhir::Contract_Rule_pskel* rule_parser_;
    ::fhir::Attachment_pskel* legallyBindingAttachment_parser_;
    ::fhir::Reference_pskel* legallyBindingReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_ContentDefinition_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    subType ();

    virtual void
    publisher ();

    virtual void
    publicationDate ();

    virtual void
    publicationStatus ();

    virtual void
    copyright ();

    virtual void
    post_Contract_ContentDefinition ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subType */,
             ::fhir::Reference_pskel& /* publisher */,
             ::fhir::dateTime_pskel& /* publicationDate */,
             ::fhir::ContractResourcePublicationStatusCodes_pskel& /* publicationStatus */,
             ::fhir::markdown_pskel& /* copyright */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subType_parser (::fhir::CodeableConcept_pskel&);

    void
    publisher_parser (::fhir::Reference_pskel&);

    void
    publicationDate_parser (::fhir::dateTime_pskel&);

    void
    publicationStatus_parser (::fhir::ContractResourcePublicationStatusCodes_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_ContentDefinition_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_ContentDefinition_pskel* Contract_ContentDefinition_impl_;
    Contract_ContentDefinition_pskel (Contract_ContentDefinition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subType_parser_;
    ::fhir::Reference_pskel* publisher_parser_;
    ::fhir::dateTime_pskel* publicationDate_parser_;
    ::fhir::ContractResourcePublicationStatusCodes_pskel* publicationStatus_parser_;
    ::fhir::markdown_pskel* copyright_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_ContentDefinition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Term_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    issued ();

    virtual void
    applies ();

    virtual void
    topicCodeableConcept ();

    virtual void
    topicReference ();

    virtual void
    type ();

    virtual void
    subType ();

    virtual void
    text ();

    virtual void
    securityLabel ();

    virtual void
    offer ();

    virtual void
    asset ();

    virtual void
    action ();

    virtual void
    group ();

    virtual void
    post_Contract_Term ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::dateTime_pskel& /* issued */,
             ::fhir::Period_pskel& /* applies */,
             ::fhir::CodeableConcept_pskel& /* topicCodeableConcept */,
             ::fhir::Reference_pskel& /* topicReference */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* subType */,
             ::fhir::string_pskel& /* text */,
             ::fhir::Contract_SecurityLabel_pskel& /* securityLabel */,
             ::fhir::Contract_Offer_pskel& /* offer */,
             ::fhir::Contract_Asset_pskel& /* asset */,
             ::fhir::Contract_Action_pskel& /* action */,
             ::fhir::Contract_Term_pskel& /* group */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    issued_parser (::fhir::dateTime_pskel&);

    void
    applies_parser (::fhir::Period_pskel&);

    void
    topicCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    topicReference_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subType_parser (::fhir::CodeableConcept_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    securityLabel_parser (::fhir::Contract_SecurityLabel_pskel&);

    void
    offer_parser (::fhir::Contract_Offer_pskel&);

    void
    asset_parser (::fhir::Contract_Asset_pskel&);

    void
    action_parser (::fhir::Contract_Action_pskel&);

    void
    group_parser (::fhir::Contract_Term_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Term_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Term_pskel* Contract_Term_impl_;
    Contract_Term_pskel (Contract_Term_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::dateTime_pskel* issued_parser_;
    ::fhir::Period_pskel* applies_parser_;
    ::fhir::CodeableConcept_pskel* topicCodeableConcept_parser_;
    ::fhir::Reference_pskel* topicReference_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* subType_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::Contract_SecurityLabel_pskel* securityLabel_parser_;
    ::fhir::Contract_Offer_pskel* offer_parser_;
    ::fhir::Contract_Asset_pskel* asset_parser_;
    ::fhir::Contract_Action_pskel* action_parser_;
    ::fhir::Contract_Term_pskel* group_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Term_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_SecurityLabel_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    number ();

    virtual void
    classification ();

    virtual void
    category ();

    virtual void
    control ();

    virtual void
    post_Contract_SecurityLabel ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::unsignedInt_pskel& /* number */,
             ::fhir::Coding_pskel& /* classification */,
             ::fhir::Coding_pskel& /* category */,
             ::fhir::Coding_pskel& /* control */);

    // Individual element parsers.
    //
    void
    number_parser (::fhir::unsignedInt_pskel&);

    void
    classification_parser (::fhir::Coding_pskel&);

    void
    category_parser (::fhir::Coding_pskel&);

    void
    control_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_SecurityLabel_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_SecurityLabel_pskel* Contract_SecurityLabel_impl_;
    Contract_SecurityLabel_pskel (Contract_SecurityLabel_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::unsignedInt_pskel* number_parser_;
    ::fhir::Coding_pskel* classification_parser_;
    ::fhir::Coding_pskel* category_parser_;
    ::fhir::Coding_pskel* control_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_SecurityLabel_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Offer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    identifier ();

    virtual void
    party ();

    virtual void
    topic ();

    virtual void
    type ();

    virtual void
    decision ();

    virtual void
    decisionMode ();

    virtual void
    answer ();

    virtual void
    text ();

    virtual void
    linkId ();

    virtual void
    securityLabelNumber ();

    virtual void
    post_Contract_Offer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::Contract_Party_pskel& /* party */,
             ::fhir::Reference_pskel& /* topic */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* decision */,
             ::fhir::CodeableConcept_pskel& /* decisionMode */,
             ::fhir::Contract_Answer_pskel& /* answer */,
             ::fhir::string_pskel& /* text */,
             ::fhir::string_pskel& /* linkId */,
             ::fhir::unsignedInt_pskel& /* securityLabelNumber */);

    // Individual element parsers.
    //
    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    party_parser (::fhir::Contract_Party_pskel&);

    void
    topic_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    decision_parser (::fhir::CodeableConcept_pskel&);

    void
    decisionMode_parser (::fhir::CodeableConcept_pskel&);

    void
    answer_parser (::fhir::Contract_Answer_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    linkId_parser (::fhir::string_pskel&);

    void
    securityLabelNumber_parser (::fhir::unsignedInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Offer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Offer_pskel* Contract_Offer_impl_;
    Contract_Offer_pskel (Contract_Offer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::Contract_Party_pskel* party_parser_;
    ::fhir::Reference_pskel* topic_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* decision_parser_;
    ::fhir::CodeableConcept_pskel* decisionMode_parser_;
    ::fhir::Contract_Answer_pskel* answer_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::string_pskel* linkId_parser_;
    ::fhir::unsignedInt_pskel* securityLabelNumber_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Offer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Party_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    role ();

    virtual void
    post_Contract_Party ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::CodeableConcept_pskel& /* role */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::Reference_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Party_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Party_pskel* Contract_Party_impl_;
    Contract_Party_pskel (Contract_Party_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Party_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Answer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    valueBoolean ();

    virtual void
    valueDecimal ();

    virtual void
    valueInteger ();

    virtual void
    valueDate ();

    virtual void
    valueDateTime ();

    virtual void
    valueTime ();

    virtual void
    valueString ();

    virtual void
    valueUri ();

    virtual void
    valueAttachment ();

    virtual void
    valueCoding ();

    virtual void
    valueQuantity ();

    virtual void
    valueReference ();

    virtual void
    post_Contract_Answer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* valueBoolean */,
             ::fhir::decimal_pskel& /* valueDecimal */,
             ::fhir::integer_pskel& /* valueInteger */,
             ::fhir::date_pskel& /* valueDate */,
             ::fhir::dateTime_pskel& /* valueDateTime */,
             ::fhir::time_pskel& /* valueTime */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::uri_pskel& /* valueUri */,
             ::fhir::Attachment_pskel& /* valueAttachment */,
             ::fhir::Coding_pskel& /* valueCoding */,
             ::fhir::Quantity_pskel& /* valueQuantity */,
             ::fhir::Reference_pskel& /* valueReference */);

    // Individual element parsers.
    //
    void
    valueBoolean_parser (::fhir::boolean_pskel&);

    void
    valueDecimal_parser (::fhir::decimal_pskel&);

    void
    valueInteger_parser (::fhir::integer_pskel&);

    void
    valueDate_parser (::fhir::date_pskel&);

    void
    valueDateTime_parser (::fhir::dateTime_pskel&);

    void
    valueTime_parser (::fhir::time_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueUri_parser (::fhir::uri_pskel&);

    void
    valueAttachment_parser (::fhir::Attachment_pskel&);

    void
    valueCoding_parser (::fhir::Coding_pskel&);

    void
    valueQuantity_parser (::fhir::Quantity_pskel&);

    void
    valueReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Answer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Answer_pskel* Contract_Answer_impl_;
    Contract_Answer_pskel (Contract_Answer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* valueBoolean_parser_;
    ::fhir::decimal_pskel* valueDecimal_parser_;
    ::fhir::integer_pskel* valueInteger_parser_;
    ::fhir::date_pskel* valueDate_parser_;
    ::fhir::dateTime_pskel* valueDateTime_parser_;
    ::fhir::time_pskel* valueTime_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::uri_pskel* valueUri_parser_;
    ::fhir::Attachment_pskel* valueAttachment_parser_;
    ::fhir::Coding_pskel* valueCoding_parser_;
    ::fhir::Quantity_pskel* valueQuantity_parser_;
    ::fhir::Reference_pskel* valueReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Answer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Asset_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    scope ();

    virtual void
    type ();

    virtual void
    typeReference ();

    virtual void
    subtype ();

    virtual void
    relationship ();

    virtual void
    context ();

    virtual void
    condition ();

    virtual void
    periodType ();

    virtual void
    period ();

    virtual void
    usePeriod ();

    virtual void
    text ();

    virtual void
    linkId ();

    virtual void
    answer ();

    virtual void
    securityLabelNumber ();

    virtual void
    valuedItem ();

    virtual void
    post_Contract_Asset ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* scope */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Reference_pskel& /* typeReference */,
             ::fhir::CodeableConcept_pskel& /* subtype */,
             ::fhir::Coding_pskel& /* relationship */,
             ::fhir::Contract_Context_pskel& /* context */,
             ::fhir::string_pskel& /* condition */,
             ::fhir::CodeableConcept_pskel& /* periodType */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::Period_pskel& /* usePeriod */,
             ::fhir::string_pskel& /* text */,
             ::fhir::string_pskel& /* linkId */,
             ::fhir::Contract_Answer_pskel& /* answer */,
             ::fhir::unsignedInt_pskel& /* securityLabelNumber */,
             ::fhir::Contract_ValuedItem_pskel& /* valuedItem */);

    // Individual element parsers.
    //
    void
    scope_parser (::fhir::CodeableConcept_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    typeReference_parser (::fhir::Reference_pskel&);

    void
    subtype_parser (::fhir::CodeableConcept_pskel&);

    void
    relationship_parser (::fhir::Coding_pskel&);

    void
    context_parser (::fhir::Contract_Context_pskel&);

    void
    condition_parser (::fhir::string_pskel&);

    void
    periodType_parser (::fhir::CodeableConcept_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    usePeriod_parser (::fhir::Period_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    void
    linkId_parser (::fhir::string_pskel&);

    void
    answer_parser (::fhir::Contract_Answer_pskel&);

    void
    securityLabelNumber_parser (::fhir::unsignedInt_pskel&);

    void
    valuedItem_parser (::fhir::Contract_ValuedItem_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Asset_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Asset_pskel* Contract_Asset_impl_;
    Contract_Asset_pskel (Contract_Asset_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* scope_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Reference_pskel* typeReference_parser_;
    ::fhir::CodeableConcept_pskel* subtype_parser_;
    ::fhir::Coding_pskel* relationship_parser_;
    ::fhir::Contract_Context_pskel* context_parser_;
    ::fhir::string_pskel* condition_parser_;
    ::fhir::CodeableConcept_pskel* periodType_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::Period_pskel* usePeriod_parser_;
    ::fhir::string_pskel* text_parser_;
    ::fhir::string_pskel* linkId_parser_;
    ::fhir::Contract_Answer_pskel* answer_parser_;
    ::fhir::unsignedInt_pskel* securityLabelNumber_parser_;
    ::fhir::Contract_ValuedItem_pskel* valuedItem_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Asset_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Context_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    code ();

    virtual void
    text ();

    virtual void
    post_Contract_Context ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::CodeableConcept_pskel& /* code */,
             ::fhir::string_pskel& /* text */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::Reference_pskel&);

    void
    code_parser (::fhir::CodeableConcept_pskel&);

    void
    text_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Context_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Context_pskel* Contract_Context_impl_;
    Contract_Context_pskel (Contract_Context_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::CodeableConcept_pskel* code_parser_;
    ::fhir::string_pskel* text_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Context_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_ValuedItem_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    entityCodeableConcept ();

    virtual void
    entityReference ();

    virtual void
    identifier ();

    virtual void
    effectiveTime ();

    virtual void
    quantity ();

    virtual void
    unitPrice ();

    virtual void
    factor ();

    virtual void
    points ();

    virtual void
    net ();

    virtual void
    payment ();

    virtual void
    paymentDate ();

    virtual void
    responsible ();

    virtual void
    recipient ();

    virtual void
    linkId ();

    virtual void
    securityLabelNumber ();

    virtual void
    post_Contract_ValuedItem ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* entityCodeableConcept */,
             ::fhir::Reference_pskel& /* entityReference */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::dateTime_pskel& /* effectiveTime */,
             ::fhir::Quantity_pskel& /* quantity */,
             ::fhir::Money_pskel& /* unitPrice */,
             ::fhir::decimal_pskel& /* factor */,
             ::fhir::decimal_pskel& /* points */,
             ::fhir::Money_pskel& /* net */,
             ::fhir::string_pskel& /* payment */,
             ::fhir::dateTime_pskel& /* paymentDate */,
             ::fhir::Reference_pskel& /* responsible */,
             ::fhir::Reference_pskel& /* recipient */,
             ::fhir::string_pskel& /* linkId */,
             ::fhir::unsignedInt_pskel& /* securityLabelNumber */);

    // Individual element parsers.
    //
    void
    entityCodeableConcept_parser (::fhir::CodeableConcept_pskel&);

    void
    entityReference_parser (::fhir::Reference_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    effectiveTime_parser (::fhir::dateTime_pskel&);

    void
    quantity_parser (::fhir::Quantity_pskel&);

    void
    unitPrice_parser (::fhir::Money_pskel&);

    void
    factor_parser (::fhir::decimal_pskel&);

    void
    points_parser (::fhir::decimal_pskel&);

    void
    net_parser (::fhir::Money_pskel&);

    void
    payment_parser (::fhir::string_pskel&);

    void
    paymentDate_parser (::fhir::dateTime_pskel&);

    void
    responsible_parser (::fhir::Reference_pskel&);

    void
    recipient_parser (::fhir::Reference_pskel&);

    void
    linkId_parser (::fhir::string_pskel&);

    void
    securityLabelNumber_parser (::fhir::unsignedInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_ValuedItem_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_ValuedItem_pskel* Contract_ValuedItem_impl_;
    Contract_ValuedItem_pskel (Contract_ValuedItem_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* entityCodeableConcept_parser_;
    ::fhir::Reference_pskel* entityReference_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::dateTime_pskel* effectiveTime_parser_;
    ::fhir::Quantity_pskel* quantity_parser_;
    ::fhir::Money_pskel* unitPrice_parser_;
    ::fhir::decimal_pskel* factor_parser_;
    ::fhir::decimal_pskel* points_parser_;
    ::fhir::Money_pskel* net_parser_;
    ::fhir::string_pskel* payment_parser_;
    ::fhir::dateTime_pskel* paymentDate_parser_;
    ::fhir::Reference_pskel* responsible_parser_;
    ::fhir::Reference_pskel* recipient_parser_;
    ::fhir::string_pskel* linkId_parser_;
    ::fhir::unsignedInt_pskel* securityLabelNumber_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_ValuedItem_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Action_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    doNotPerform ();

    virtual void
    type ();

    virtual void
    subject ();

    virtual void
    intent ();

    virtual void
    linkId ();

    virtual void
    status ();

    virtual void
    context ();

    virtual void
    contextLinkId ();

    virtual void
    occurrenceDateTime ();

    virtual void
    occurrencePeriod ();

    virtual void
    occurrenceTiming ();

    virtual void
    requester ();

    virtual void
    requesterLinkId ();

    virtual void
    performerType ();

    virtual void
    performerRole ();

    virtual void
    performer ();

    virtual void
    performerLinkId ();

    virtual void
    reasonCode ();

    virtual void
    reasonReference ();

    virtual void
    reason ();

    virtual void
    reasonLinkId ();

    virtual void
    note ();

    virtual void
    securityLabelNumber ();

    virtual void
    post_Contract_Action ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* doNotPerform */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::Contract_Subject_pskel& /* subject */,
             ::fhir::CodeableConcept_pskel& /* intent */,
             ::fhir::string_pskel& /* linkId */,
             ::fhir::CodeableConcept_pskel& /* status */,
             ::fhir::Reference_pskel& /* context */,
             ::fhir::string_pskel& /* contextLinkId */,
             ::fhir::dateTime_pskel& /* occurrenceDateTime */,
             ::fhir::Period_pskel& /* occurrencePeriod */,
             ::fhir::Timing_pskel& /* occurrenceTiming */,
             ::fhir::Reference_pskel& /* requester */,
             ::fhir::string_pskel& /* requesterLinkId */,
             ::fhir::CodeableConcept_pskel& /* performerType */,
             ::fhir::CodeableConcept_pskel& /* performerRole */,
             ::fhir::Reference_pskel& /* performer */,
             ::fhir::string_pskel& /* performerLinkId */,
             ::fhir::CodeableConcept_pskel& /* reasonCode */,
             ::fhir::Reference_pskel& /* reasonReference */,
             ::fhir::string_pskel& /* reason */,
             ::fhir::string_pskel& /* reasonLinkId */,
             ::fhir::Annotation_pskel& /* note */,
             ::fhir::unsignedInt_pskel& /* securityLabelNumber */);

    // Individual element parsers.
    //
    void
    doNotPerform_parser (::fhir::boolean_pskel&);

    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    subject_parser (::fhir::Contract_Subject_pskel&);

    void
    intent_parser (::fhir::CodeableConcept_pskel&);

    void
    linkId_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::CodeableConcept_pskel&);

    void
    context_parser (::fhir::Reference_pskel&);

    void
    contextLinkId_parser (::fhir::string_pskel&);

    void
    occurrenceDateTime_parser (::fhir::dateTime_pskel&);

    void
    occurrencePeriod_parser (::fhir::Period_pskel&);

    void
    occurrenceTiming_parser (::fhir::Timing_pskel&);

    void
    requester_parser (::fhir::Reference_pskel&);

    void
    requesterLinkId_parser (::fhir::string_pskel&);

    void
    performerType_parser (::fhir::CodeableConcept_pskel&);

    void
    performerRole_parser (::fhir::CodeableConcept_pskel&);

    void
    performer_parser (::fhir::Reference_pskel&);

    void
    performerLinkId_parser (::fhir::string_pskel&);

    void
    reasonCode_parser (::fhir::CodeableConcept_pskel&);

    void
    reasonReference_parser (::fhir::Reference_pskel&);

    void
    reason_parser (::fhir::string_pskel&);

    void
    reasonLinkId_parser (::fhir::string_pskel&);

    void
    note_parser (::fhir::Annotation_pskel&);

    void
    securityLabelNumber_parser (::fhir::unsignedInt_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Action_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Action_pskel* Contract_Action_impl_;
    Contract_Action_pskel (Contract_Action_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* doNotPerform_parser_;
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::Contract_Subject_pskel* subject_parser_;
    ::fhir::CodeableConcept_pskel* intent_parser_;
    ::fhir::string_pskel* linkId_parser_;
    ::fhir::CodeableConcept_pskel* status_parser_;
    ::fhir::Reference_pskel* context_parser_;
    ::fhir::string_pskel* contextLinkId_parser_;
    ::fhir::dateTime_pskel* occurrenceDateTime_parser_;
    ::fhir::Period_pskel* occurrencePeriod_parser_;
    ::fhir::Timing_pskel* occurrenceTiming_parser_;
    ::fhir::Reference_pskel* requester_parser_;
    ::fhir::string_pskel* requesterLinkId_parser_;
    ::fhir::CodeableConcept_pskel* performerType_parser_;
    ::fhir::CodeableConcept_pskel* performerRole_parser_;
    ::fhir::Reference_pskel* performer_parser_;
    ::fhir::string_pskel* performerLinkId_parser_;
    ::fhir::CodeableConcept_pskel* reasonCode_parser_;
    ::fhir::Reference_pskel* reasonReference_parser_;
    ::fhir::string_pskel* reason_parser_;
    ::fhir::string_pskel* reasonLinkId_parser_;
    ::fhir::Annotation_pskel* note_parser_;
    ::fhir::unsignedInt_pskel* securityLabelNumber_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Action_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Subject_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    reference ();

    virtual void
    role ();

    virtual void
    post_Contract_Subject ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* reference */,
             ::fhir::CodeableConcept_pskel& /* role */);

    // Individual element parsers.
    //
    void
    reference_parser (::fhir::Reference_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Subject_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Subject_pskel* Contract_Subject_impl_;
    Contract_Subject_pskel (Contract_Subject_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* reference_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Subject_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Signer_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    party ();

    virtual void
    signature ();

    virtual void
    post_Contract_Signer ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* type */,
             ::fhir::Reference_pskel& /* party */,
             ::fhir::Signature_pskel& /* signature */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::Coding_pskel&);

    void
    party_parser (::fhir::Reference_pskel&);

    void
    signature_parser (::fhir::Signature_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Signer_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Signer_pskel* Contract_Signer_impl_;
    Contract_Signer_pskel (Contract_Signer_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* type_parser_;
    ::fhir::Reference_pskel* party_parser_;
    ::fhir::Signature_pskel* signature_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Signer_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Friendly_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentAttachment ();

    virtual void
    contentReference ();

    virtual void
    post_Contract_Friendly ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Attachment_pskel& /* contentAttachment */,
             ::fhir::Reference_pskel& /* contentReference */);

    // Individual element parsers.
    //
    void
    contentAttachment_parser (::fhir::Attachment_pskel&);

    void
    contentReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Friendly_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Friendly_pskel* Contract_Friendly_impl_;
    Contract_Friendly_pskel (Contract_Friendly_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Attachment_pskel* contentAttachment_parser_;
    ::fhir::Reference_pskel* contentReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Friendly_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Legal_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentAttachment ();

    virtual void
    contentReference ();

    virtual void
    post_Contract_Legal ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Attachment_pskel& /* contentAttachment */,
             ::fhir::Reference_pskel& /* contentReference */);

    // Individual element parsers.
    //
    void
    contentAttachment_parser (::fhir::Attachment_pskel&);

    void
    contentReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Legal_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Legal_pskel* Contract_Legal_impl_;
    Contract_Legal_pskel (Contract_Legal_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Attachment_pskel* contentAttachment_parser_;
    ::fhir::Reference_pskel* contentReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Legal_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class Contract_Rule_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    contentAttachment ();

    virtual void
    contentReference ();

    virtual void
    post_Contract_Rule ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Attachment_pskel& /* contentAttachment */,
             ::fhir::Reference_pskel& /* contentReference */);

    // Individual element parsers.
    //
    void
    contentAttachment_parser (::fhir::Attachment_pskel&);

    void
    contentReference_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Contract_Rule_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    Contract_Rule_pskel* Contract_Rule_impl_;
    Contract_Rule_pskel (Contract_Rule_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Attachment_pskel* contentAttachment_parser_;
    ::fhir::Reference_pskel* contentReference_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::Contract_Rule_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class ContractResourceStatusCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContractResourceStatusCodes_list ();

    // Constructor.
    //
    ContractResourceStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContractResourceStatusCodes_list_pskel* ContractResourceStatusCodes_list_impl_;
    ContractResourceStatusCodes_list_pskel (ContractResourceStatusCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_ContractResourceStatusCodes_list_pskel_enums_[15UL];
  };

  class ContractResourceStatusCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ContractResourceStatusCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContractResourceStatusCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ContractResourceStatusCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContractResourceStatusCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContractResourceStatusCodes_pskel* ContractResourceStatusCodes_impl_;
    ContractResourceStatusCodes_pskel (ContractResourceStatusCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ContractResourceStatusCodes_list_pskel* value_parser_;
  };

  class ContractResourcePublicationStatusCodes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ContractResourcePublicationStatusCodes_list ();

    // Constructor.
    //
    ContractResourcePublicationStatusCodes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContractResourcePublicationStatusCodes_list_pskel* ContractResourcePublicationStatusCodes_list_impl_;
    ContractResourcePublicationStatusCodes_list_pskel (ContractResourcePublicationStatusCodes_list_pskel*, void*);

    protected:
    static const char* const _xsde_ContractResourcePublicationStatusCodes_list_pskel_enums_[15UL];
  };

  class ContractResourcePublicationStatusCodes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ContractResourcePublicationStatusCodes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ContractResourcePublicationStatusCodes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ContractResourcePublicationStatusCodes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ContractResourcePublicationStatusCodes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ContractResourcePublicationStatusCodes_pskel* ContractResourcePublicationStatusCodes_impl_;
    ContractResourcePublicationStatusCodes_pskel (ContractResourcePublicationStatusCodes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ContractResourcePublicationStatusCodes_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CONTRACT_PSKEL_HXX
