// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef AUDITEVENT_PSKEL_HXX
#define AUDITEVENT_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class AuditEvent_pskel;
  class AuditEvent_Agent_pskel;
  class AuditEvent_Network_pskel;
  class AuditEvent_Source_pskel;
  class AuditEvent_Entity_pskel;
  class AuditEvent_Detail_pskel;
  class AuditEventOutcome_list_pskel;
  class AuditEventOutcome_pskel;
  class AuditEventAction_list_pskel;
  class AuditEventAction_pskel;
  class AuditEventAgentNetworkType_list_pskel;
  class AuditEventAgentNetworkType_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class AuditEvent_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    subtype ();

    virtual void
    action ();

    virtual void
    period ();

    virtual void
    recorded ();

    virtual void
    outcome ();

    virtual void
    outcomeDesc ();

    virtual void
    purposeOfEvent ();

    virtual void
    agent ();

    virtual void
    source ();

    virtual void
    entity ();

    virtual void
    post_AuditEvent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* type */,
             ::fhir::Coding_pskel& /* subtype */,
             ::fhir::AuditEventAction_pskel& /* action */,
             ::fhir::Period_pskel& /* period */,
             ::fhir::instant_pskel& /* recorded */,
             ::fhir::AuditEventOutcome_pskel& /* outcome */,
             ::fhir::string_pskel& /* outcomeDesc */,
             ::fhir::CodeableConcept_pskel& /* purposeOfEvent */,
             ::fhir::AuditEvent_Agent_pskel& /* agent */,
             ::fhir::AuditEvent_Source_pskel& /* source */,
             ::fhir::AuditEvent_Entity_pskel& /* entity */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::Coding_pskel&);

    void
    subtype_parser (::fhir::Coding_pskel&);

    void
    action_parser (::fhir::AuditEventAction_pskel&);

    void
    period_parser (::fhir::Period_pskel&);

    void
    recorded_parser (::fhir::instant_pskel&);

    void
    outcome_parser (::fhir::AuditEventOutcome_pskel&);

    void
    outcomeDesc_parser (::fhir::string_pskel&);

    void
    purposeOfEvent_parser (::fhir::CodeableConcept_pskel&);

    void
    agent_parser (::fhir::AuditEvent_Agent_pskel&);

    void
    source_parser (::fhir::AuditEvent_Source_pskel&);

    void
    entity_parser (::fhir::AuditEvent_Entity_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_pskel* AuditEvent_impl_;
    AuditEvent_pskel (AuditEvent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* type_parser_;
    ::fhir::Coding_pskel* subtype_parser_;
    ::fhir::AuditEventAction_pskel* action_parser_;
    ::fhir::Period_pskel* period_parser_;
    ::fhir::instant_pskel* recorded_parser_;
    ::fhir::AuditEventOutcome_pskel* outcome_parser_;
    ::fhir::string_pskel* outcomeDesc_parser_;
    ::fhir::CodeableConcept_pskel* purposeOfEvent_parser_;
    ::fhir::AuditEvent_Agent_pskel* agent_parser_;
    ::fhir::AuditEvent_Source_pskel* source_parser_;
    ::fhir::AuditEvent_Entity_pskel* entity_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_Agent_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    role ();

    virtual void
    who ();

    virtual void
    altId ();

    virtual void
    name ();

    virtual void
    requestor ();

    virtual void
    location ();

    virtual void
    policy ();

    virtual void
    media ();

    virtual void
    network ();

    virtual void
    purposeOfUse ();

    virtual void
    post_AuditEvent_Agent ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* type */,
             ::fhir::CodeableConcept_pskel& /* role */,
             ::fhir::Reference_pskel& /* who */,
             ::fhir::string_pskel& /* altId */,
             ::fhir::string_pskel& /* name */,
             ::fhir::boolean_pskel& /* requestor */,
             ::fhir::Reference_pskel& /* location */,
             ::fhir::uri_pskel& /* policy */,
             ::fhir::Coding_pskel& /* media */,
             ::fhir::AuditEvent_Network_pskel& /* network */,
             ::fhir::CodeableConcept_pskel& /* purposeOfUse */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::CodeableConcept_pskel&);

    void
    role_parser (::fhir::CodeableConcept_pskel&);

    void
    who_parser (::fhir::Reference_pskel&);

    void
    altId_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    requestor_parser (::fhir::boolean_pskel&);

    void
    location_parser (::fhir::Reference_pskel&);

    void
    policy_parser (::fhir::uri_pskel&);

    void
    media_parser (::fhir::Coding_pskel&);

    void
    network_parser (::fhir::AuditEvent_Network_pskel&);

    void
    purposeOfUse_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_Agent_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_Agent_pskel* AuditEvent_Agent_impl_;
    AuditEvent_Agent_pskel (AuditEvent_Agent_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* type_parser_;
    ::fhir::CodeableConcept_pskel* role_parser_;
    ::fhir::Reference_pskel* who_parser_;
    ::fhir::string_pskel* altId_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::boolean_pskel* requestor_parser_;
    ::fhir::Reference_pskel* location_parser_;
    ::fhir::uri_pskel* policy_parser_;
    ::fhir::Coding_pskel* media_parser_;
    ::fhir::AuditEvent_Network_pskel* network_parser_;
    ::fhir::CodeableConcept_pskel* purposeOfUse_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_Agent_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_Network_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    address ();

    virtual void
    type ();

    virtual void
    post_AuditEvent_Network ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* address */,
             ::fhir::AuditEventAgentNetworkType_pskel& /* type */);

    // Individual element parsers.
    //
    void
    address_parser (::fhir::string_pskel&);

    void
    type_parser (::fhir::AuditEventAgentNetworkType_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_Network_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_Network_pskel* AuditEvent_Network_impl_;
    AuditEvent_Network_pskel (AuditEvent_Network_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* address_parser_;
    ::fhir::AuditEventAgentNetworkType_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_Network_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_Source_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    site ();

    virtual void
    observer ();

    virtual void
    type ();

    virtual void
    post_AuditEvent_Source ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* site */,
             ::fhir::Reference_pskel& /* observer */,
             ::fhir::Coding_pskel& /* type */);

    // Individual element parsers.
    //
    void
    site_parser (::fhir::string_pskel&);

    void
    observer_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_Source_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_Source_pskel* AuditEvent_Source_impl_;
    AuditEvent_Source_pskel (AuditEvent_Source_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* site_parser_;
    ::fhir::Reference_pskel* observer_parser_;
    ::fhir::Coding_pskel* type_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_Source_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_Entity_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    what ();

    virtual void
    type ();

    virtual void
    role ();

    virtual void
    lifecycle ();

    virtual void
    securityLabel ();

    virtual void
    name ();

    virtual void
    description ();

    virtual void
    query ();

    virtual void
    detail ();

    virtual void
    post_AuditEvent_Entity ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Reference_pskel& /* what */,
             ::fhir::Coding_pskel& /* type */,
             ::fhir::Coding_pskel& /* role */,
             ::fhir::Coding_pskel& /* lifecycle */,
             ::fhir::Coding_pskel& /* securityLabel */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */,
             ::fhir::base64Binary_pskel& /* query */,
             ::fhir::AuditEvent_Detail_pskel& /* detail */);

    // Individual element parsers.
    //
    void
    what_parser (::fhir::Reference_pskel&);

    void
    type_parser (::fhir::Coding_pskel&);

    void
    role_parser (::fhir::Coding_pskel&);

    void
    lifecycle_parser (::fhir::Coding_pskel&);

    void
    securityLabel_parser (::fhir::Coding_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    query_parser (::fhir::base64Binary_pskel&);

    void
    detail_parser (::fhir::AuditEvent_Detail_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_Entity_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_Entity_pskel* AuditEvent_Entity_impl_;
    AuditEvent_Entity_pskel (AuditEvent_Entity_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Reference_pskel* what_parser_;
    ::fhir::Coding_pskel* type_parser_;
    ::fhir::Coding_pskel* role_parser_;
    ::fhir::Coding_pskel* lifecycle_parser_;
    ::fhir::Coding_pskel* securityLabel_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::base64Binary_pskel* query_parser_;
    ::fhir::AuditEvent_Detail_pskel* detail_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_Entity_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEvent_Detail_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    valueString ();

    virtual void
    valueBase64Binary ();

    virtual void
    post_AuditEvent_Detail ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* type */,
             ::fhir::string_pskel& /* valueString */,
             ::fhir::base64Binary_pskel& /* valueBase64Binary */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::string_pskel&);

    void
    valueString_parser (::fhir::string_pskel&);

    void
    valueBase64Binary_parser (::fhir::base64Binary_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEvent_Detail_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEvent_Detail_pskel* AuditEvent_Detail_impl_;
    AuditEvent_Detail_pskel (AuditEvent_Detail_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* type_parser_;
    ::fhir::string_pskel* valueString_parser_;
    ::fhir::base64Binary_pskel* valueBase64Binary_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::AuditEvent_Detail_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AuditEventOutcome_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AuditEventOutcome_list ();

    // Constructor.
    //
    AuditEventOutcome_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventOutcome_list_pskel* AuditEventOutcome_list_impl_;
    AuditEventOutcome_list_pskel (AuditEventOutcome_list_pskel*, void*);

    protected:
    static const char* const _xsde_AuditEventOutcome_list_pskel_enums_[4UL];
  };

  class AuditEventOutcome_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AuditEventOutcome ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AuditEventOutcome_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AuditEventOutcome_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEventOutcome_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventOutcome_pskel* AuditEventOutcome_impl_;
    AuditEventOutcome_pskel (AuditEventOutcome_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AuditEventOutcome_list_pskel* value_parser_;
  };

  class AuditEventAction_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AuditEventAction_list ();

    // Constructor.
    //
    AuditEventAction_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventAction_list_pskel* AuditEventAction_list_impl_;
    AuditEventAction_list_pskel (AuditEventAction_list_pskel*, void*);

    protected:
    static const char* const _xsde_AuditEventAction_list_pskel_enums_[5UL];
  };

  class AuditEventAction_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AuditEventAction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AuditEventAction_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AuditEventAction_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEventAction_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventAction_pskel* AuditEventAction_impl_;
    AuditEventAction_pskel (AuditEventAction_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AuditEventAction_list_pskel* value_parser_;
  };

  class AuditEventAgentNetworkType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AuditEventAgentNetworkType_list ();

    // Constructor.
    //
    AuditEventAgentNetworkType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventAgentNetworkType_list_pskel* AuditEventAgentNetworkType_list_impl_;
    AuditEventAgentNetworkType_list_pskel (AuditEventAgentNetworkType_list_pskel*, void*);

    protected:
    static const char* const _xsde_AuditEventAgentNetworkType_list_pskel_enums_[5UL];
  };

  class AuditEventAgentNetworkType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AuditEventAgentNetworkType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AuditEventAgentNetworkType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AuditEventAgentNetworkType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AuditEventAgentNetworkType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AuditEventAgentNetworkType_pskel* AuditEventAgentNetworkType_impl_;
    AuditEventAgentNetworkType_pskel (AuditEventAgentNetworkType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AuditEventAgentNetworkType_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // AUDITEVENT_PSKEL_HXX
