// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "communication-pskel.hxx"

namespace fhir
{
  // Communication_pskel
  //

  void Communication_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Communication_pskel::
  instantiatesCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void Communication_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void Communication_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void Communication_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void Communication_pskel::
  inResponseTo_parser (::fhir::Reference_pskel& p)
  {
    this->inResponseTo_parser_ = &p;
  }

  void Communication_pskel::
  status_parser (::fhir::EventStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Communication_pskel::
  statusReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->statusReason_parser_ = &p;
  }

  void Communication_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void Communication_pskel::
  priority_parser (::fhir::RequestPriority_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void Communication_pskel::
  medium_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->medium_parser_ = &p;
  }

  void Communication_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Communication_pskel::
  topic_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->topic_parser_ = &p;
  }

  void Communication_pskel::
  about_parser (::fhir::Reference_pskel& p)
  {
    this->about_parser_ = &p;
  }

  void Communication_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void Communication_pskel::
  sent_parser (::fhir::dateTime_pskel& p)
  {
    this->sent_parser_ = &p;
  }

  void Communication_pskel::
  received_parser (::fhir::dateTime_pskel& p)
  {
    this->received_parser_ = &p;
  }

  void Communication_pskel::
  recipient_parser (::fhir::Reference_pskel& p)
  {
    this->recipient_parser_ = &p;
  }

  void Communication_pskel::
  sender_parser (::fhir::Reference_pskel& p)
  {
    this->sender_parser_ = &p;
  }

  void Communication_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void Communication_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void Communication_pskel::
  payload_parser (::fhir::Communication_Payload_pskel& p)
  {
    this->payload_parser_ = &p;
  }

  void Communication_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Communication_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::canonical_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& partOf,
           ::fhir::Reference_pskel& inResponseTo,
           ::fhir::EventStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& statusReason,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::RequestPriority_pskel& priority,
           ::fhir::CodeableConcept_pskel& medium,
           ::fhir::Reference_pskel& subject,
           ::fhir::CodeableConcept_pskel& topic,
           ::fhir::Reference_pskel& about,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& sent,
           ::fhir::dateTime_pskel& received,
           ::fhir::Reference_pskel& recipient,
           ::fhir::Reference_pskel& sender,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Communication_Payload_pskel& payload,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->basedOn_parser_ = &basedOn;
    this->partOf_parser_ = &partOf;
    this->inResponseTo_parser_ = &inResponseTo;
    this->status_parser_ = &status;
    this->statusReason_parser_ = &statusReason;
    this->category_parser_ = &category;
    this->priority_parser_ = &priority;
    this->medium_parser_ = &medium;
    this->subject_parser_ = &subject;
    this->topic_parser_ = &topic;
    this->about_parser_ = &about;
    this->encounter_parser_ = &encounter;
    this->sent_parser_ = &sent;
    this->received_parser_ = &received;
    this->recipient_parser_ = &recipient;
    this->sender_parser_ = &sender;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->payload_parser_ = &payload;
    this->note_parser_ = &note;
  }

  Communication_pskel::
  Communication_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Communication_impl_ (0),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    inResponseTo_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    category_parser_ (0),
    priority_parser_ (0),
    medium_parser_ (0),
    subject_parser_ (0),
    topic_parser_ (0),
    about_parser_ (0),
    encounter_parser_ (0),
    sent_parser_ (0),
    received_parser_ (0),
    recipient_parser_ (0),
    sender_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    payload_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Communication_pskel::
  Communication_pskel (Communication_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Communication_impl_ (impl),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    inResponseTo_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    category_parser_ (0),
    priority_parser_ (0),
    medium_parser_ (0),
    subject_parser_ (0),
    topic_parser_ (0),
    about_parser_ (0),
    encounter_parser_ (0),
    sent_parser_ (0),
    received_parser_ (0),
    recipient_parser_ (0),
    sender_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    payload_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Communication_Payload_pskel
  //

  void Communication_Payload_pskel::
  contentString_parser (::fhir::string_pskel& p)
  {
    this->contentString_parser_ = &p;
  }

  void Communication_Payload_pskel::
  contentAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->contentAttachment_parser_ = &p;
  }

  void Communication_Payload_pskel::
  contentReference_parser (::fhir::Reference_pskel& p)
  {
    this->contentReference_parser_ = &p;
  }

  void Communication_Payload_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& contentString,
           ::fhir::Attachment_pskel& contentAttachment,
           ::fhir::Reference_pskel& contentReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->contentString_parser_ = &contentString;
    this->contentAttachment_parser_ = &contentAttachment;
    this->contentReference_parser_ = &contentReference;
  }

  Communication_Payload_pskel::
  Communication_Payload_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Communication_Payload_impl_ (0),
    contentString_parser_ (0),
    contentAttachment_parser_ (0),
    contentReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Communication_Payload_pskel::
  Communication_Payload_pskel (Communication_Payload_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Communication_Payload_impl_ (impl),
    contentString_parser_ (0),
    contentAttachment_parser_ (0),
    contentReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // EventStatus_list_pskel
  //

  EventStatus_list_pskel::
  EventStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    EventStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_EventStatus_list_pskel_enums_, 8UL);
  }

  EventStatus_list_pskel::
  EventStatus_list_pskel (EventStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    EventStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_EventStatus_list_pskel_enums_, 8UL);
  }

  // EventStatus_pskel
  //

  void EventStatus_pskel::
  value_parser (::fhir::EventStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void EventStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::EventStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  EventStatus_pskel::
  EventStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    EventStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  EventStatus_pskel::
  EventStatus_pskel (EventStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    EventStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Communication_pskel
  //

  void Communication_pskel::
  identifier ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->identifier ();
  }

  void Communication_pskel::
  instantiatesCanonical ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->instantiatesCanonical ();
  }

  void Communication_pskel::
  instantiatesUri ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->instantiatesUri ();
  }

  void Communication_pskel::
  basedOn ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->basedOn ();
  }

  void Communication_pskel::
  partOf ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->partOf ();
  }

  void Communication_pskel::
  inResponseTo ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->inResponseTo ();
  }

  void Communication_pskel::
  status ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->status ();
  }

  void Communication_pskel::
  statusReason ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->statusReason ();
  }

  void Communication_pskel::
  category ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->category ();
  }

  void Communication_pskel::
  priority ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->priority ();
  }

  void Communication_pskel::
  medium ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->medium ();
  }

  void Communication_pskel::
  subject ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->subject ();
  }

  void Communication_pskel::
  topic ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->topic ();
  }

  void Communication_pskel::
  about ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->about ();
  }

  void Communication_pskel::
  encounter ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->encounter ();
  }

  void Communication_pskel::
  sent ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->sent ();
  }

  void Communication_pskel::
  received ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->received ();
  }

  void Communication_pskel::
  recipient ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->recipient ();
  }

  void Communication_pskel::
  sender ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->sender ();
  }

  void Communication_pskel::
  reasonCode ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->reasonCode ();
  }

  void Communication_pskel::
  reasonReference ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->reasonReference ();
  }

  void Communication_pskel::
  payload ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->payload ();
  }

  void Communication_pskel::
  note ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->note ();
  }

  void Communication_pskel::
  post_Communication ()
  {
    if (this->Communication_impl_)
      this->Communication_impl_->post_Communication ();
    else
      post_DomainResource ();
  }

  void Communication_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->inResponseTo_parser_)
      this->inResponseTo_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusReason_parser_)
      this->statusReason_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->medium_parser_)
      this->medium_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->topic_parser_)
      this->topic_parser_->_reset ();

    if (this->about_parser_)
      this->about_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->sent_parser_)
      this->sent_parser_->_reset ();

    if (this->received_parser_)
      this->received_parser_->_reset ();

    if (this->recipient_parser_)
      this->recipient_parser_->_reset ();

    if (this->sender_parser_)
      this->sender_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->payload_parser_)
      this->payload_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // Communication_Payload_pskel
  //

  void Communication_Payload_pskel::
  contentString ()
  {
    if (this->Communication_Payload_impl_)
      this->Communication_Payload_impl_->contentString ();
  }

  void Communication_Payload_pskel::
  contentAttachment ()
  {
    if (this->Communication_Payload_impl_)
      this->Communication_Payload_impl_->contentAttachment ();
  }

  void Communication_Payload_pskel::
  contentReference ()
  {
    if (this->Communication_Payload_impl_)
      this->Communication_Payload_impl_->contentReference ();
  }

  void Communication_Payload_pskel::
  post_Communication_Payload ()
  {
    if (this->Communication_Payload_impl_)
      this->Communication_Payload_impl_->post_Communication_Payload ();
    else
      post_BackboneElement ();
  }

  void Communication_Payload_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->contentString_parser_)
      this->contentString_parser_->_reset ();

    if (this->contentAttachment_parser_)
      this->contentAttachment_parser_->_reset ();

    if (this->contentReference_parser_)
      this->contentReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // EventStatus_list_pskel
  //

  void EventStatus_list_pskel::
  post_EventStatus_list ()
  {
    if (this->EventStatus_list_impl_)
      this->EventStatus_list_impl_->post_EventStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const EventStatus_list_pskel::_xsde_EventStatus_list_pskel_enums_[8UL] = 
  {
    "completed",
    "entered-in-error",
    "in-progress",
    "not-done",
    "on-hold",
    "preparation",
    "stopped",
    "unknown"
  };

  // EventStatus_pskel
  //

  void EventStatus_pskel::
  value ()
  {
    if (this->EventStatus_impl_)
      this->EventStatus_impl_->value ();
  }

  void EventStatus_pskel::
  post_EventStatus ()
  {
    if (this->EventStatus_impl_)
      this->EventStatus_impl_->post_EventStatus ();
    else
      post_Element ();
  }

  void EventStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Communication_pskel.
  //
  bool Communication_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "instantiatesCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "instantiatesUri" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "inResponseTo" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Communication_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Communication_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Communication_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Communication_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Communication_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_canonical ();
              this->instantiatesCanonical ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "inResponseTo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->inResponseTo_parser_)
            {
              this->inResponseTo_parser_->pre ();
              ctx.nested_parser (this->inResponseTo_parser_);
            }
          }
          else
          {
            if (this->inResponseTo_parser_ != 0)
            {
              this->inResponseTo_parser_->post_Reference ();
              this->inResponseTo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_EventStatus ();
              this->status ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "statusReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusReason_parser_)
            {
              this->statusReason_parser_->pre ();
              ctx.nested_parser (this->statusReason_parser_);
            }
          }
          else
          {
            if (this->statusReason_parser_ != 0)
            {
              this->statusReason_parser_->post_CodeableConcept ();
              this->statusReason ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_RequestPriority ();
              this->priority ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "medium" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->medium_parser_)
            {
              this->medium_parser_->pre ();
              ctx.nested_parser (this->medium_parser_);
            }
          }
          else
          {
            if (this->medium_parser_ != 0)
            {
              this->medium_parser_->post_CodeableConcept ();
              this->medium ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "topic" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->topic_parser_)
            {
              this->topic_parser_->pre ();
              ctx.nested_parser (this->topic_parser_);
            }
          }
          else
          {
            if (this->topic_parser_ != 0)
            {
              this->topic_parser_->post_CodeableConcept ();
              this->topic ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "about" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->about_parser_)
            {
              this->about_parser_->pre ();
              ctx.nested_parser (this->about_parser_);
            }
          }
          else
          {
            if (this->about_parser_ != 0)
            {
              this->about_parser_->post_Reference ();
              this->about ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "sent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sent_parser_)
            {
              this->sent_parser_->pre ();
              ctx.nested_parser (this->sent_parser_);
            }
          }
          else
          {
            if (this->sent_parser_ != 0)
            {
              this->sent_parser_->post_dateTime ();
              this->sent ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "received" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->received_parser_)
            {
              this->received_parser_->pre ();
              ctx.nested_parser (this->received_parser_);
            }
          }
          else
          {
            if (this->received_parser_ != 0)
            {
              this->received_parser_->post_dateTime ();
              this->received ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "recipient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->recipient_parser_)
            {
              this->recipient_parser_->pre ();
              ctx.nested_parser (this->recipient_parser_);
            }
          }
          else
          {
            if (this->recipient_parser_ != 0)
            {
              this->recipient_parser_->post_Reference ();
              this->recipient ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "sender" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sender_parser_)
            {
              this->sender_parser_->pre ();
              ctx.nested_parser (this->sender_parser_);
            }
          }
          else
          {
            if (this->sender_parser_ != 0)
            {
              this->sender_parser_->post_Reference ();
              this->sender ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "payload" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->payload_parser_)
            {
              this->payload_parser_->pre ();
              ctx.nested_parser (this->payload_parser_);
            }
          }
          else
          {
            if (this->payload_parser_ != 0)
            {
              this->payload_parser_->post_Communication_Payload ();
              this->payload ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Communication_Payload_pskel.
  //
  bool Communication_Payload_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "contentString" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "contentAttachment" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "contentReference" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Communication_Payload_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Communication_Payload_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Communication_Payload_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Communication_Payload_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Communication_Payload_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "contentString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentString_parser_)
            {
              this->contentString_parser_->pre ();
              ctx.nested_parser (this->contentString_parser_);
            }
          }
          else
          {
            if (this->contentString_parser_ != 0)
            {
              this->contentString_parser_->post_string ();
              this->contentString ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "contentAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentAttachment_parser_)
            {
              this->contentAttachment_parser_->pre ();
              ctx.nested_parser (this->contentAttachment_parser_);
            }
          }
          else
          {
            if (this->contentAttachment_parser_ != 0)
            {
              this->contentAttachment_parser_->post_Attachment ();
              this->contentAttachment ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "contentReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contentReference_parser_)
            {
              this->contentReference_parser_->pre ();
              ctx.nested_parser (this->contentReference_parser_);
            }
          }
          else
          {
            if (this->contentReference_parser_ != 0)
            {
              this->contentReference_parser_->post_Reference ();
              this->contentReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for EventStatus_pskel.
  //
  bool EventStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_EventStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

