// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef CAPABILITYSTATEMENT_PSKEL_HXX
#define CAPABILITYSTATEMENT_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class CapabilityStatement_pskel;
  class CapabilityStatement_Software_pskel;
  class CapabilityStatement_Implementation_pskel;
  class CapabilityStatement_Rest_pskel;
  class CapabilityStatement_Security_pskel;
  class CapabilityStatement_Resource_pskel;
  class CapabilityStatement_Interaction_pskel;
  class CapabilityStatement_SearchParam_pskel;
  class CapabilityStatement_Operation_pskel;
  class CapabilityStatement_Interaction1_pskel;
  class CapabilityStatement_Messaging_pskel;
  class CapabilityStatement_Endpoint_pskel;
  class CapabilityStatement_SupportedMessage_pskel;
  class CapabilityStatement_Document_pskel;
  class CapabilityStatementKind_list_pskel;
  class CapabilityStatementKind_pskel;
  class EventCapabilityMode_list_pskel;
  class EventCapabilityMode_pskel;
  class ResourceVersionPolicy_list_pskel;
  class ResourceVersionPolicy_pskel;
  class DocumentMode_list_pskel;
  class DocumentMode_pskel;
  class RestfulCapabilityMode_list_pskel;
  class RestfulCapabilityMode_pskel;
  class TypeRestfulInteraction_list_pskel;
  class TypeRestfulInteraction_pskel;
  class SystemRestfulInteraction_list_pskel;
  class SystemRestfulInteraction_pskel;
  class ConditionalReadStatus_list_pskel;
  class ConditionalReadStatus_pskel;
  class ReferenceHandlingPolicy_list_pskel;
  class ReferenceHandlingPolicy_pskel;
  class ConditionalDeleteStatus_list_pskel;
  class ConditionalDeleteStatus_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class CapabilityStatement_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    kind ();

    virtual void
    instantiates ();

    virtual void
    imports ();

    virtual void
    software ();

    virtual void
    implementation ();

    virtual void
    fhirVersion ();

    virtual void
    format ();

    virtual void
    patchFormat ();

    virtual void
    implementationGuide ();

    virtual void
    rest ();

    virtual void
    messaging ();

    virtual void
    document ();

    virtual void
    post_CapabilityStatement ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::CapabilityStatementKind_pskel& /* kind */,
             ::fhir::canonical_pskel& /* instantiates */,
             ::fhir::canonical_pskel& /* imports */,
             ::fhir::CapabilityStatement_Software_pskel& /* software */,
             ::fhir::CapabilityStatement_Implementation_pskel& /* implementation */,
             ::fhir::FHIRVersion_pskel& /* fhirVersion */,
             ::fhir::code_pskel& /* format */,
             ::fhir::code_pskel& /* patchFormat */,
             ::fhir::canonical_pskel& /* implementationGuide */,
             ::fhir::CapabilityStatement_Rest_pskel& /* rest */,
             ::fhir::CapabilityStatement_Messaging_pskel& /* messaging */,
             ::fhir::CapabilityStatement_Document_pskel& /* document */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    kind_parser (::fhir::CapabilityStatementKind_pskel&);

    void
    instantiates_parser (::fhir::canonical_pskel&);

    void
    imports_parser (::fhir::canonical_pskel&);

    void
    software_parser (::fhir::CapabilityStatement_Software_pskel&);

    void
    implementation_parser (::fhir::CapabilityStatement_Implementation_pskel&);

    void
    fhirVersion_parser (::fhir::FHIRVersion_pskel&);

    void
    format_parser (::fhir::code_pskel&);

    void
    patchFormat_parser (::fhir::code_pskel&);

    void
    implementationGuide_parser (::fhir::canonical_pskel&);

    void
    rest_parser (::fhir::CapabilityStatement_Rest_pskel&);

    void
    messaging_parser (::fhir::CapabilityStatement_Messaging_pskel&);

    void
    document_parser (::fhir::CapabilityStatement_Document_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_pskel* CapabilityStatement_impl_;
    CapabilityStatement_pskel (CapabilityStatement_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::CapabilityStatementKind_pskel* kind_parser_;
    ::fhir::canonical_pskel* instantiates_parser_;
    ::fhir::canonical_pskel* imports_parser_;
    ::fhir::CapabilityStatement_Software_pskel* software_parser_;
    ::fhir::CapabilityStatement_Implementation_pskel* implementation_parser_;
    ::fhir::FHIRVersion_pskel* fhirVersion_parser_;
    ::fhir::code_pskel* format_parser_;
    ::fhir::code_pskel* patchFormat_parser_;
    ::fhir::canonical_pskel* implementationGuide_parser_;
    ::fhir::CapabilityStatement_Rest_pskel* rest_parser_;
    ::fhir::CapabilityStatement_Messaging_pskel* messaging_parser_;
    ::fhir::CapabilityStatement_Document_pskel* document_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Software_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    version ();

    virtual void
    releaseDate ();

    virtual void
    post_CapabilityStatement_Software ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* version */,
             ::fhir::dateTime_pskel& /* releaseDate */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    releaseDate_parser (::fhir::dateTime_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Software_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Software_pskel* CapabilityStatement_Software_impl_;
    CapabilityStatement_Software_pskel (CapabilityStatement_Software_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::dateTime_pskel* releaseDate_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Software_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Implementation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    description ();

    virtual void
    url ();

    virtual void
    custodian ();

    virtual void
    post_CapabilityStatement_Implementation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* description */,
             ::fhir::url_pskel& /* url */,
             ::fhir::Reference_pskel& /* custodian */);

    // Individual element parsers.
    //
    void
    description_parser (::fhir::string_pskel&);

    void
    url_parser (::fhir::url_pskel&);

    void
    custodian_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Implementation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Implementation_pskel* CapabilityStatement_Implementation_impl_;
    CapabilityStatement_Implementation_pskel (CapabilityStatement_Implementation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* description_parser_;
    ::fhir::url_pskel* url_parser_;
    ::fhir::Reference_pskel* custodian_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Implementation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Rest_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    mode ();

    virtual void
    documentation ();

    virtual void
    security ();

    virtual void
    resource ();

    virtual void
    interaction ();

    virtual void
    searchParam ();

    virtual void
    operation ();

    virtual void
    compartment ();

    virtual void
    post_CapabilityStatement_Rest ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::RestfulCapabilityMode_pskel& /* mode */,
             ::fhir::markdown_pskel& /* documentation */,
             ::fhir::CapabilityStatement_Security_pskel& /* security */,
             ::fhir::CapabilityStatement_Resource_pskel& /* resource */,
             ::fhir::CapabilityStatement_Interaction1_pskel& /* interaction */,
             ::fhir::CapabilityStatement_SearchParam_pskel& /* searchParam */,
             ::fhir::CapabilityStatement_Operation_pskel& /* operation */,
             ::fhir::canonical_pskel& /* compartment */);

    // Individual element parsers.
    //
    void
    mode_parser (::fhir::RestfulCapabilityMode_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    void
    security_parser (::fhir::CapabilityStatement_Security_pskel&);

    void
    resource_parser (::fhir::CapabilityStatement_Resource_pskel&);

    void
    interaction_parser (::fhir::CapabilityStatement_Interaction1_pskel&);

    void
    searchParam_parser (::fhir::CapabilityStatement_SearchParam_pskel&);

    void
    operation_parser (::fhir::CapabilityStatement_Operation_pskel&);

    void
    compartment_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Rest_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Rest_pskel* CapabilityStatement_Rest_impl_;
    CapabilityStatement_Rest_pskel (CapabilityStatement_Rest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::RestfulCapabilityMode_pskel* mode_parser_;
    ::fhir::markdown_pskel* documentation_parser_;
    ::fhir::CapabilityStatement_Security_pskel* security_parser_;
    ::fhir::CapabilityStatement_Resource_pskel* resource_parser_;
    ::fhir::CapabilityStatement_Interaction1_pskel* interaction_parser_;
    ::fhir::CapabilityStatement_SearchParam_pskel* searchParam_parser_;
    ::fhir::CapabilityStatement_Operation_pskel* operation_parser_;
    ::fhir::canonical_pskel* compartment_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Rest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Security_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    cors ();

    virtual void
    service ();

    virtual void
    description ();

    virtual void
    post_CapabilityStatement_Security ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* cors */,
             ::fhir::CodeableConcept_pskel& /* service */,
             ::fhir::markdown_pskel& /* description */);

    // Individual element parsers.
    //
    void
    cors_parser (::fhir::boolean_pskel&);

    void
    service_parser (::fhir::CodeableConcept_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Security_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Security_pskel* CapabilityStatement_Security_impl_;
    CapabilityStatement_Security_pskel (CapabilityStatement_Security_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* cors_parser_;
    ::fhir::CodeableConcept_pskel* service_parser_;
    ::fhir::markdown_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Security_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Resource_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    profile ();

    virtual void
    supportedProfile ();

    virtual void
    documentation ();

    virtual void
    interaction ();

    virtual void
    versioning ();

    virtual void
    readHistory ();

    virtual void
    updateCreate ();

    virtual void
    conditionalCreate ();

    virtual void
    conditionalRead ();

    virtual void
    conditionalUpdate ();

    virtual void
    conditionalDelete ();

    virtual void
    referencePolicy ();

    virtual void
    searchInclude ();

    virtual void
    searchRevInclude ();

    virtual void
    searchParam ();

    virtual void
    operation ();

    virtual void
    post_CapabilityStatement_Resource ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::code_pskel& /* type */,
             ::fhir::canonical_pskel& /* profile */,
             ::fhir::canonical_pskel& /* supportedProfile */,
             ::fhir::markdown_pskel& /* documentation */,
             ::fhir::CapabilityStatement_Interaction_pskel& /* interaction */,
             ::fhir::ResourceVersionPolicy_pskel& /* versioning */,
             ::fhir::boolean_pskel& /* readHistory */,
             ::fhir::boolean_pskel& /* updateCreate */,
             ::fhir::boolean_pskel& /* conditionalCreate */,
             ::fhir::ConditionalReadStatus_pskel& /* conditionalRead */,
             ::fhir::boolean_pskel& /* conditionalUpdate */,
             ::fhir::ConditionalDeleteStatus_pskel& /* conditionalDelete */,
             ::fhir::ReferenceHandlingPolicy_pskel& /* referencePolicy */,
             ::fhir::string_pskel& /* searchInclude */,
             ::fhir::string_pskel& /* searchRevInclude */,
             ::fhir::CapabilityStatement_SearchParam_pskel& /* searchParam */,
             ::fhir::CapabilityStatement_Operation_pskel& /* operation */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::code_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    void
    supportedProfile_parser (::fhir::canonical_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    void
    interaction_parser (::fhir::CapabilityStatement_Interaction_pskel&);

    void
    versioning_parser (::fhir::ResourceVersionPolicy_pskel&);

    void
    readHistory_parser (::fhir::boolean_pskel&);

    void
    updateCreate_parser (::fhir::boolean_pskel&);

    void
    conditionalCreate_parser (::fhir::boolean_pskel&);

    void
    conditionalRead_parser (::fhir::ConditionalReadStatus_pskel&);

    void
    conditionalUpdate_parser (::fhir::boolean_pskel&);

    void
    conditionalDelete_parser (::fhir::ConditionalDeleteStatus_pskel&);

    void
    referencePolicy_parser (::fhir::ReferenceHandlingPolicy_pskel&);

    void
    searchInclude_parser (::fhir::string_pskel&);

    void
    searchRevInclude_parser (::fhir::string_pskel&);

    void
    searchParam_parser (::fhir::CapabilityStatement_SearchParam_pskel&);

    void
    operation_parser (::fhir::CapabilityStatement_Operation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Resource_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Resource_pskel* CapabilityStatement_Resource_impl_;
    CapabilityStatement_Resource_pskel (CapabilityStatement_Resource_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::code_pskel* type_parser_;
    ::fhir::canonical_pskel* profile_parser_;
    ::fhir::canonical_pskel* supportedProfile_parser_;
    ::fhir::markdown_pskel* documentation_parser_;
    ::fhir::CapabilityStatement_Interaction_pskel* interaction_parser_;
    ::fhir::ResourceVersionPolicy_pskel* versioning_parser_;
    ::fhir::boolean_pskel* readHistory_parser_;
    ::fhir::boolean_pskel* updateCreate_parser_;
    ::fhir::boolean_pskel* conditionalCreate_parser_;
    ::fhir::ConditionalReadStatus_pskel* conditionalRead_parser_;
    ::fhir::boolean_pskel* conditionalUpdate_parser_;
    ::fhir::ConditionalDeleteStatus_pskel* conditionalDelete_parser_;
    ::fhir::ReferenceHandlingPolicy_pskel* referencePolicy_parser_;
    ::fhir::string_pskel* searchInclude_parser_;
    ::fhir::string_pskel* searchRevInclude_parser_;
    ::fhir::CapabilityStatement_SearchParam_pskel* searchParam_parser_;
    ::fhir::CapabilityStatement_Operation_pskel* operation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Resource_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Interaction_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    documentation ();

    virtual void
    post_CapabilityStatement_Interaction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TypeRestfulInteraction_pskel& /* code */,
             ::fhir::markdown_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::TypeRestfulInteraction_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Interaction_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Interaction_pskel* CapabilityStatement_Interaction_impl_;
    CapabilityStatement_Interaction_pskel (CapabilityStatement_Interaction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TypeRestfulInteraction_pskel* code_parser_;
    ::fhir::markdown_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Interaction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_SearchParam_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    definition ();

    virtual void
    type ();

    virtual void
    documentation ();

    virtual void
    post_CapabilityStatement_SearchParam ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::canonical_pskel& /* definition */,
             ::fhir::SearchParamType_pskel& /* type */,
             ::fhir::markdown_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    definition_parser (::fhir::canonical_pskel&);

    void
    type_parser (::fhir::SearchParamType_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_SearchParam_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_SearchParam_pskel* CapabilityStatement_SearchParam_impl_;
    CapabilityStatement_SearchParam_pskel (CapabilityStatement_SearchParam_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::canonical_pskel* definition_parser_;
    ::fhir::SearchParamType_pskel* type_parser_;
    ::fhir::markdown_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_SearchParam_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Operation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    definition ();

    virtual void
    documentation ();

    virtual void
    post_CapabilityStatement_Operation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::canonical_pskel& /* definition */,
             ::fhir::markdown_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    definition_parser (::fhir::canonical_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Operation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Operation_pskel* CapabilityStatement_Operation_impl_;
    CapabilityStatement_Operation_pskel (CapabilityStatement_Operation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::canonical_pskel* definition_parser_;
    ::fhir::markdown_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Operation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Interaction1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    code ();

    virtual void
    documentation ();

    virtual void
    post_CapabilityStatement_Interaction1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::SystemRestfulInteraction_pskel& /* code */,
             ::fhir::markdown_pskel& /* documentation */);

    // Individual element parsers.
    //
    void
    code_parser (::fhir::SystemRestfulInteraction_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Interaction1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Interaction1_pskel* CapabilityStatement_Interaction1_impl_;
    CapabilityStatement_Interaction1_pskel (CapabilityStatement_Interaction1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::SystemRestfulInteraction_pskel* code_parser_;
    ::fhir::markdown_pskel* documentation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Interaction1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Messaging_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    endpoint ();

    virtual void
    reliableCache ();

    virtual void
    documentation ();

    virtual void
    supportedMessage ();

    virtual void
    post_CapabilityStatement_Messaging ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CapabilityStatement_Endpoint_pskel& /* endpoint */,
             ::fhir::unsignedInt_pskel& /* reliableCache */,
             ::fhir::markdown_pskel& /* documentation */,
             ::fhir::CapabilityStatement_SupportedMessage_pskel& /* supportedMessage */);

    // Individual element parsers.
    //
    void
    endpoint_parser (::fhir::CapabilityStatement_Endpoint_pskel&);

    void
    reliableCache_parser (::fhir::unsignedInt_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    void
    supportedMessage_parser (::fhir::CapabilityStatement_SupportedMessage_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Messaging_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Messaging_pskel* CapabilityStatement_Messaging_impl_;
    CapabilityStatement_Messaging_pskel (CapabilityStatement_Messaging_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CapabilityStatement_Endpoint_pskel* endpoint_parser_;
    ::fhir::unsignedInt_pskel* reliableCache_parser_;
    ::fhir::markdown_pskel* documentation_parser_;
    ::fhir::CapabilityStatement_SupportedMessage_pskel* supportedMessage_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Messaging_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Endpoint_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    protocol ();

    virtual void
    address ();

    virtual void
    post_CapabilityStatement_Endpoint ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* protocol */,
             ::fhir::url_pskel& /* address */);

    // Individual element parsers.
    //
    void
    protocol_parser (::fhir::Coding_pskel&);

    void
    address_parser (::fhir::url_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Endpoint_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Endpoint_pskel* CapabilityStatement_Endpoint_impl_;
    CapabilityStatement_Endpoint_pskel (CapabilityStatement_Endpoint_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* protocol_parser_;
    ::fhir::url_pskel* address_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Endpoint_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_SupportedMessage_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    mode ();

    virtual void
    definition ();

    virtual void
    post_CapabilityStatement_SupportedMessage ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::EventCapabilityMode_pskel& /* mode */,
             ::fhir::canonical_pskel& /* definition */);

    // Individual element parsers.
    //
    void
    mode_parser (::fhir::EventCapabilityMode_pskel&);

    void
    definition_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_SupportedMessage_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_SupportedMessage_pskel* CapabilityStatement_SupportedMessage_impl_;
    CapabilityStatement_SupportedMessage_pskel (CapabilityStatement_SupportedMessage_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::EventCapabilityMode_pskel* mode_parser_;
    ::fhir::canonical_pskel* definition_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_SupportedMessage_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatement_Document_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    mode ();

    virtual void
    documentation ();

    virtual void
    profile ();

    virtual void
    post_CapabilityStatement_Document ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::DocumentMode_pskel& /* mode */,
             ::fhir::markdown_pskel& /* documentation */,
             ::fhir::canonical_pskel& /* profile */);

    // Individual element parsers.
    //
    void
    mode_parser (::fhir::DocumentMode_pskel&);

    void
    documentation_parser (::fhir::markdown_pskel&);

    void
    profile_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatement_Document_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatement_Document_pskel* CapabilityStatement_Document_impl_;
    CapabilityStatement_Document_pskel (CapabilityStatement_Document_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::DocumentMode_pskel* mode_parser_;
    ::fhir::markdown_pskel* documentation_parser_;
    ::fhir::canonical_pskel* profile_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::CapabilityStatement_Document_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class CapabilityStatementKind_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CapabilityStatementKind_list ();

    // Constructor.
    //
    CapabilityStatementKind_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatementKind_list_pskel* CapabilityStatementKind_list_impl_;
    CapabilityStatementKind_list_pskel (CapabilityStatementKind_list_pskel*, void*);

    protected:
    static const char* const _xsde_CapabilityStatementKind_list_pskel_enums_[3UL];
  };

  class CapabilityStatementKind_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_CapabilityStatementKind ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::CapabilityStatementKind_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::CapabilityStatementKind_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    CapabilityStatementKind_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    CapabilityStatementKind_pskel* CapabilityStatementKind_impl_;
    CapabilityStatementKind_pskel (CapabilityStatementKind_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::CapabilityStatementKind_list_pskel* value_parser_;
  };

  class EventCapabilityMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_EventCapabilityMode_list ();

    // Constructor.
    //
    EventCapabilityMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventCapabilityMode_list_pskel* EventCapabilityMode_list_impl_;
    EventCapabilityMode_list_pskel (EventCapabilityMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_EventCapabilityMode_list_pskel_enums_[2UL];
  };

  class EventCapabilityMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_EventCapabilityMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::EventCapabilityMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::EventCapabilityMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    EventCapabilityMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    EventCapabilityMode_pskel* EventCapabilityMode_impl_;
    EventCapabilityMode_pskel (EventCapabilityMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::EventCapabilityMode_list_pskel* value_parser_;
  };

  class ResourceVersionPolicy_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ResourceVersionPolicy_list ();

    // Constructor.
    //
    ResourceVersionPolicy_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResourceVersionPolicy_list_pskel* ResourceVersionPolicy_list_impl_;
    ResourceVersionPolicy_list_pskel (ResourceVersionPolicy_list_pskel*, void*);

    protected:
    static const char* const _xsde_ResourceVersionPolicy_list_pskel_enums_[3UL];
  };

  class ResourceVersionPolicy_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ResourceVersionPolicy ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ResourceVersionPolicy_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ResourceVersionPolicy_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ResourceVersionPolicy_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ResourceVersionPolicy_pskel* ResourceVersionPolicy_impl_;
    ResourceVersionPolicy_pskel (ResourceVersionPolicy_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ResourceVersionPolicy_list_pskel* value_parser_;
  };

  class DocumentMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DocumentMode_list ();

    // Constructor.
    //
    DocumentMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentMode_list_pskel* DocumentMode_list_impl_;
    DocumentMode_list_pskel (DocumentMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_DocumentMode_list_pskel_enums_[2UL];
  };

  class DocumentMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_DocumentMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::DocumentMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::DocumentMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    DocumentMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    DocumentMode_pskel* DocumentMode_impl_;
    DocumentMode_pskel (DocumentMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::DocumentMode_list_pskel* value_parser_;
  };

  class RestfulCapabilityMode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RestfulCapabilityMode_list ();

    // Constructor.
    //
    RestfulCapabilityMode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    RestfulCapabilityMode_list_pskel* RestfulCapabilityMode_list_impl_;
    RestfulCapabilityMode_list_pskel (RestfulCapabilityMode_list_pskel*, void*);

    protected:
    static const char* const _xsde_RestfulCapabilityMode_list_pskel_enums_[2UL];
  };

  class RestfulCapabilityMode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_RestfulCapabilityMode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::RestfulCapabilityMode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::RestfulCapabilityMode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    RestfulCapabilityMode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    RestfulCapabilityMode_pskel* RestfulCapabilityMode_impl_;
    RestfulCapabilityMode_pskel (RestfulCapabilityMode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::RestfulCapabilityMode_list_pskel* value_parser_;
  };

  class TypeRestfulInteraction_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TypeRestfulInteraction_list ();

    // Constructor.
    //
    TypeRestfulInteraction_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TypeRestfulInteraction_list_pskel* TypeRestfulInteraction_list_impl_;
    TypeRestfulInteraction_list_pskel (TypeRestfulInteraction_list_pskel*, void*);

    protected:
    static const char* const _xsde_TypeRestfulInteraction_list_pskel_enums_[9UL];
  };

  class TypeRestfulInteraction_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TypeRestfulInteraction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TypeRestfulInteraction_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TypeRestfulInteraction_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TypeRestfulInteraction_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TypeRestfulInteraction_pskel* TypeRestfulInteraction_impl_;
    TypeRestfulInteraction_pskel (TypeRestfulInteraction_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TypeRestfulInteraction_list_pskel* value_parser_;
  };

  class SystemRestfulInteraction_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SystemRestfulInteraction_list ();

    // Constructor.
    //
    SystemRestfulInteraction_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    SystemRestfulInteraction_list_pskel* SystemRestfulInteraction_list_impl_;
    SystemRestfulInteraction_list_pskel (SystemRestfulInteraction_list_pskel*, void*);

    protected:
    static const char* const _xsde_SystemRestfulInteraction_list_pskel_enums_[4UL];
  };

  class SystemRestfulInteraction_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_SystemRestfulInteraction ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::SystemRestfulInteraction_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::SystemRestfulInteraction_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SystemRestfulInteraction_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    SystemRestfulInteraction_pskel* SystemRestfulInteraction_impl_;
    SystemRestfulInteraction_pskel (SystemRestfulInteraction_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::SystemRestfulInteraction_list_pskel* value_parser_;
  };

  class ConditionalReadStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConditionalReadStatus_list ();

    // Constructor.
    //
    ConditionalReadStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConditionalReadStatus_list_pskel* ConditionalReadStatus_list_impl_;
    ConditionalReadStatus_list_pskel (ConditionalReadStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConditionalReadStatus_list_pskel_enums_[4UL];
  };

  class ConditionalReadStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConditionalReadStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConditionalReadStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConditionalReadStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConditionalReadStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConditionalReadStatus_pskel* ConditionalReadStatus_impl_;
    ConditionalReadStatus_pskel (ConditionalReadStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConditionalReadStatus_list_pskel* value_parser_;
  };

  class ReferenceHandlingPolicy_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ReferenceHandlingPolicy_list ();

    // Constructor.
    //
    ReferenceHandlingPolicy_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ReferenceHandlingPolicy_list_pskel* ReferenceHandlingPolicy_list_impl_;
    ReferenceHandlingPolicy_list_pskel (ReferenceHandlingPolicy_list_pskel*, void*);

    protected:
    static const char* const _xsde_ReferenceHandlingPolicy_list_pskel_enums_[5UL];
  };

  class ReferenceHandlingPolicy_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ReferenceHandlingPolicy ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ReferenceHandlingPolicy_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ReferenceHandlingPolicy_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ReferenceHandlingPolicy_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ReferenceHandlingPolicy_pskel* ReferenceHandlingPolicy_impl_;
    ReferenceHandlingPolicy_pskel (ReferenceHandlingPolicy_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ReferenceHandlingPolicy_list_pskel* value_parser_;
  };

  class ConditionalDeleteStatus_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ConditionalDeleteStatus_list ();

    // Constructor.
    //
    ConditionalDeleteStatus_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConditionalDeleteStatus_list_pskel* ConditionalDeleteStatus_list_impl_;
    ConditionalDeleteStatus_list_pskel (ConditionalDeleteStatus_list_pskel*, void*);

    protected:
    static const char* const _xsde_ConditionalDeleteStatus_list_pskel_enums_[3UL];
  };

  class ConditionalDeleteStatus_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_ConditionalDeleteStatus ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::ConditionalDeleteStatus_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::ConditionalDeleteStatus_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ConditionalDeleteStatus_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    ConditionalDeleteStatus_pskel* ConditionalDeleteStatus_impl_;
    ConditionalDeleteStatus_pskel (ConditionalDeleteStatus_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::ConditionalDeleteStatus_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CAPABILITYSTATEMENT_PSKEL_HXX
