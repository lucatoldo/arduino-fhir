// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef TESTSCRIPT_PSKEL_HXX
#define TESTSCRIPT_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class TestScript_pskel;
  class TestScript_Origin_pskel;
  class TestScript_Destination_pskel;
  class TestScript_Metadata_pskel;
  class TestScript_Link_pskel;
  class TestScript_Capability_pskel;
  class TestScript_Fixture_pskel;
  class TestScript_Variable_pskel;
  class TestScript_Setup_pskel;
  class TestScript_Action_pskel;
  class TestScript_Operation_pskel;
  class TestScript_RequestHeader_pskel;
  class TestScript_Assert_pskel;
  class TestScript_Test_pskel;
  class TestScript_Action1_pskel;
  class TestScript_Teardown_pskel;
  class TestScript_Action2_pskel;
  class AssertionDirectionType_list_pskel;
  class AssertionDirectionType_pskel;
  class AssertionOperatorType_list_pskel;
  class AssertionOperatorType_pskel;
  class AssertionResponseTypes_list_pskel;
  class AssertionResponseTypes_pskel;
  class TestScriptRequestMethodCode_list_pskel;
  class TestScriptRequestMethodCode_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class TestScript_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    identifier ();

    virtual void
    version ();

    virtual void
    name ();

    virtual void
    title ();

    virtual void
    status ();

    virtual void
    experimental ();

    virtual void
    date ();

    virtual void
    publisher ();

    virtual void
    contact ();

    virtual void
    description ();

    virtual void
    useContext ();

    virtual void
    jurisdiction ();

    virtual void
    purpose ();

    virtual void
    copyright ();

    virtual void
    origin ();

    virtual void
    destination ();

    virtual void
    metadata ();

    virtual void
    fixture ();

    virtual void
    profile ();

    virtual void
    variable ();

    virtual void
    setup ();

    virtual void
    test ();

    virtual void
    teardown ();

    virtual void
    post_TestScript ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::Identifier_pskel& /* identifier */,
             ::fhir::string_pskel& /* version */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* title */,
             ::fhir::PublicationStatus_pskel& /* status */,
             ::fhir::boolean_pskel& /* experimental */,
             ::fhir::dateTime_pskel& /* date */,
             ::fhir::string_pskel& /* publisher */,
             ::fhir::ContactDetail_pskel& /* contact */,
             ::fhir::markdown_pskel& /* description */,
             ::fhir::UsageContext_pskel& /* useContext */,
             ::fhir::CodeableConcept_pskel& /* jurisdiction */,
             ::fhir::markdown_pskel& /* purpose */,
             ::fhir::markdown_pskel& /* copyright */,
             ::fhir::TestScript_Origin_pskel& /* origin */,
             ::fhir::TestScript_Destination_pskel& /* destination */,
             ::fhir::TestScript_Metadata_pskel& /* metadata */,
             ::fhir::TestScript_Fixture_pskel& /* fixture */,
             ::fhir::Reference_pskel& /* profile */,
             ::fhir::TestScript_Variable_pskel& /* variable */,
             ::fhir::TestScript_Setup_pskel& /* setup */,
             ::fhir::TestScript_Test_pskel& /* test */,
             ::fhir::TestScript_Teardown_pskel& /* teardown */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    identifier_parser (::fhir::Identifier_pskel&);

    void
    version_parser (::fhir::string_pskel&);

    void
    name_parser (::fhir::string_pskel&);

    void
    title_parser (::fhir::string_pskel&);

    void
    status_parser (::fhir::PublicationStatus_pskel&);

    void
    experimental_parser (::fhir::boolean_pskel&);

    void
    date_parser (::fhir::dateTime_pskel&);

    void
    publisher_parser (::fhir::string_pskel&);

    void
    contact_parser (::fhir::ContactDetail_pskel&);

    void
    description_parser (::fhir::markdown_pskel&);

    void
    useContext_parser (::fhir::UsageContext_pskel&);

    void
    jurisdiction_parser (::fhir::CodeableConcept_pskel&);

    void
    purpose_parser (::fhir::markdown_pskel&);

    void
    copyright_parser (::fhir::markdown_pskel&);

    void
    origin_parser (::fhir::TestScript_Origin_pskel&);

    void
    destination_parser (::fhir::TestScript_Destination_pskel&);

    void
    metadata_parser (::fhir::TestScript_Metadata_pskel&);

    void
    fixture_parser (::fhir::TestScript_Fixture_pskel&);

    void
    profile_parser (::fhir::Reference_pskel&);

    void
    variable_parser (::fhir::TestScript_Variable_pskel&);

    void
    setup_parser (::fhir::TestScript_Setup_pskel&);

    void
    test_parser (::fhir::TestScript_Test_pskel&);

    void
    teardown_parser (::fhir::TestScript_Teardown_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_pskel* TestScript_impl_;
    TestScript_pskel (TestScript_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::Identifier_pskel* identifier_parser_;
    ::fhir::string_pskel* version_parser_;
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* title_parser_;
    ::fhir::PublicationStatus_pskel* status_parser_;
    ::fhir::boolean_pskel* experimental_parser_;
    ::fhir::dateTime_pskel* date_parser_;
    ::fhir::string_pskel* publisher_parser_;
    ::fhir::ContactDetail_pskel* contact_parser_;
    ::fhir::markdown_pskel* description_parser_;
    ::fhir::UsageContext_pskel* useContext_parser_;
    ::fhir::CodeableConcept_pskel* jurisdiction_parser_;
    ::fhir::markdown_pskel* purpose_parser_;
    ::fhir::markdown_pskel* copyright_parser_;
    ::fhir::TestScript_Origin_pskel* origin_parser_;
    ::fhir::TestScript_Destination_pskel* destination_parser_;
    ::fhir::TestScript_Metadata_pskel* metadata_parser_;
    ::fhir::TestScript_Fixture_pskel* fixture_parser_;
    ::fhir::Reference_pskel* profile_parser_;
    ::fhir::TestScript_Variable_pskel* variable_parser_;
    ::fhir::TestScript_Setup_pskel* setup_parser_;
    ::fhir::TestScript_Test_pskel* test_parser_;
    ::fhir::TestScript_Teardown_pskel* teardown_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Origin_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    index ();

    virtual void
    profile ();

    virtual void
    post_TestScript_Origin ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* index */,
             ::fhir::Coding_pskel& /* profile */);

    // Individual element parsers.
    //
    void
    index_parser (::fhir::integer_pskel&);

    void
    profile_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Origin_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Origin_pskel* TestScript_Origin_impl_;
    TestScript_Origin_pskel (TestScript_Origin_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* index_parser_;
    ::fhir::Coding_pskel* profile_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Origin_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Destination_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    index ();

    virtual void
    profile ();

    virtual void
    post_TestScript_Destination ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::integer_pskel& /* index */,
             ::fhir::Coding_pskel& /* profile */);

    // Individual element parsers.
    //
    void
    index_parser (::fhir::integer_pskel&);

    void
    profile_parser (::fhir::Coding_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Destination_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Destination_pskel* TestScript_Destination_impl_;
    TestScript_Destination_pskel (TestScript_Destination_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::integer_pskel* index_parser_;
    ::fhir::Coding_pskel* profile_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Destination_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Metadata_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    link ();

    virtual void
    capability ();

    virtual void
    post_TestScript_Metadata ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Link_pskel& /* link */,
             ::fhir::TestScript_Capability_pskel& /* capability */);

    // Individual element parsers.
    //
    void
    link_parser (::fhir::TestScript_Link_pskel&);

    void
    capability_parser (::fhir::TestScript_Capability_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Metadata_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Metadata_pskel* TestScript_Metadata_impl_;
    TestScript_Metadata_pskel (TestScript_Metadata_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Link_pskel* link_parser_;
    ::fhir::TestScript_Capability_pskel* capability_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Metadata_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Link_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    url ();

    virtual void
    description ();

    virtual void
    post_TestScript_Link ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::uri_pskel& /* url */,
             ::fhir::string_pskel& /* description */);

    // Individual element parsers.
    //
    void
    url_parser (::fhir::uri_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Link_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Link_pskel* TestScript_Link_impl_;
    TestScript_Link_pskel (TestScript_Link_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::uri_pskel* url_parser_;
    ::fhir::string_pskel* description_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Link_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Capability_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    required ();

    virtual void
    validated ();

    virtual void
    description ();

    virtual void
    origin ();

    virtual void
    destination ();

    virtual void
    link ();

    virtual void
    capabilities ();

    virtual void
    post_TestScript_Capability ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* required */,
             ::fhir::boolean_pskel& /* validated */,
             ::fhir::string_pskel& /* description */,
             ::fhir::integer_pskel& /* origin */,
             ::fhir::integer_pskel& /* destination */,
             ::fhir::uri_pskel& /* link */,
             ::fhir::canonical_pskel& /* capabilities */);

    // Individual element parsers.
    //
    void
    required_parser (::fhir::boolean_pskel&);

    void
    validated_parser (::fhir::boolean_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    origin_parser (::fhir::integer_pskel&);

    void
    destination_parser (::fhir::integer_pskel&);

    void
    link_parser (::fhir::uri_pskel&);

    void
    capabilities_parser (::fhir::canonical_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Capability_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Capability_pskel* TestScript_Capability_impl_;
    TestScript_Capability_pskel (TestScript_Capability_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* required_parser_;
    ::fhir::boolean_pskel* validated_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::integer_pskel* origin_parser_;
    ::fhir::integer_pskel* destination_parser_;
    ::fhir::uri_pskel* link_parser_;
    ::fhir::canonical_pskel* capabilities_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Capability_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Fixture_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    autocreate ();

    virtual void
    autodelete ();

    virtual void
    resource ();

    virtual void
    post_TestScript_Fixture ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::boolean_pskel& /* autocreate */,
             ::fhir::boolean_pskel& /* autodelete */,
             ::fhir::Reference_pskel& /* resource */);

    // Individual element parsers.
    //
    void
    autocreate_parser (::fhir::boolean_pskel&);

    void
    autodelete_parser (::fhir::boolean_pskel&);

    void
    resource_parser (::fhir::Reference_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Fixture_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Fixture_pskel* TestScript_Fixture_impl_;
    TestScript_Fixture_pskel (TestScript_Fixture_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::boolean_pskel* autocreate_parser_;
    ::fhir::boolean_pskel* autodelete_parser_;
    ::fhir::Reference_pskel* resource_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Fixture_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Variable_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    defaultValue ();

    virtual void
    description ();

    virtual void
    expression ();

    virtual void
    headerField ();

    virtual void
    hint ();

    virtual void
    path ();

    virtual void
    sourceId ();

    virtual void
    post_TestScript_Variable ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* defaultValue */,
             ::fhir::string_pskel& /* description */,
             ::fhir::string_pskel& /* expression */,
             ::fhir::string_pskel& /* headerField */,
             ::fhir::string_pskel& /* hint */,
             ::fhir::string_pskel& /* path */,
             ::fhir::id_pskel& /* sourceId */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    defaultValue_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    void
    headerField_parser (::fhir::string_pskel&);

    void
    hint_parser (::fhir::string_pskel&);

    void
    path_parser (::fhir::string_pskel&);

    void
    sourceId_parser (::fhir::id_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Variable_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Variable_pskel* TestScript_Variable_impl_;
    TestScript_Variable_pskel (TestScript_Variable_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* defaultValue_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::string_pskel* expression_parser_;
    ::fhir::string_pskel* headerField_parser_;
    ::fhir::string_pskel* hint_parser_;
    ::fhir::string_pskel* path_parser_;
    ::fhir::id_pskel* sourceId_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Variable_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Setup_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    action ();

    virtual void
    post_TestScript_Setup ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Action_pskel& /* action */);

    // Individual element parsers.
    //
    void
    action_parser (::fhir::TestScript_Action_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Setup_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Setup_pskel* TestScript_Setup_impl_;
    TestScript_Setup_pskel (TestScript_Setup_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Action_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Setup_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Action_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operation ();

    virtual void
    assert ();

    virtual void
    post_TestScript_Action ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Operation_pskel& /* operation */,
             ::fhir::TestScript_Assert_pskel& /* assert */);

    // Individual element parsers.
    //
    void
    operation_parser (::fhir::TestScript_Operation_pskel&);

    void
    assert_parser (::fhir::TestScript_Assert_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Action_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Action_pskel* TestScript_Action_impl_;
    TestScript_Action_pskel (TestScript_Action_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Operation_pskel* operation_parser_;
    ::fhir::TestScript_Assert_pskel* assert_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Action_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Operation_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    type ();

    virtual void
    resource ();

    virtual void
    label ();

    virtual void
    description ();

    virtual void
    accept ();

    virtual void
    contentType ();

    virtual void
    destination ();

    virtual void
    encodeRequestUrl ();

    virtual void
    method ();

    virtual void
    origin ();

    virtual void
    params ();

    virtual void
    requestHeader ();

    virtual void
    requestId ();

    virtual void
    responseId ();

    virtual void
    sourceId ();

    virtual void
    targetId ();

    virtual void
    url ();

    virtual void
    post_TestScript_Operation ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::Coding_pskel& /* type */,
             ::fhir::code_pskel& /* resource */,
             ::fhir::string_pskel& /* label */,
             ::fhir::string_pskel& /* description */,
             ::fhir::code_pskel& /* accept */,
             ::fhir::code_pskel& /* contentType */,
             ::fhir::integer_pskel& /* destination */,
             ::fhir::boolean_pskel& /* encodeRequestUrl */,
             ::fhir::TestScriptRequestMethodCode_pskel& /* method */,
             ::fhir::integer_pskel& /* origin */,
             ::fhir::string_pskel& /* params */,
             ::fhir::TestScript_RequestHeader_pskel& /* requestHeader */,
             ::fhir::id_pskel& /* requestId */,
             ::fhir::id_pskel& /* responseId */,
             ::fhir::id_pskel& /* sourceId */,
             ::fhir::id_pskel& /* targetId */,
             ::fhir::string_pskel& /* url */);

    // Individual element parsers.
    //
    void
    type_parser (::fhir::Coding_pskel&);

    void
    resource_parser (::fhir::code_pskel&);

    void
    label_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    accept_parser (::fhir::code_pskel&);

    void
    contentType_parser (::fhir::code_pskel&);

    void
    destination_parser (::fhir::integer_pskel&);

    void
    encodeRequestUrl_parser (::fhir::boolean_pskel&);

    void
    method_parser (::fhir::TestScriptRequestMethodCode_pskel&);

    void
    origin_parser (::fhir::integer_pskel&);

    void
    params_parser (::fhir::string_pskel&);

    void
    requestHeader_parser (::fhir::TestScript_RequestHeader_pskel&);

    void
    requestId_parser (::fhir::id_pskel&);

    void
    responseId_parser (::fhir::id_pskel&);

    void
    sourceId_parser (::fhir::id_pskel&);

    void
    targetId_parser (::fhir::id_pskel&);

    void
    url_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Operation_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Operation_pskel* TestScript_Operation_impl_;
    TestScript_Operation_pskel (TestScript_Operation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::Coding_pskel* type_parser_;
    ::fhir::code_pskel* resource_parser_;
    ::fhir::string_pskel* label_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::code_pskel* accept_parser_;
    ::fhir::code_pskel* contentType_parser_;
    ::fhir::integer_pskel* destination_parser_;
    ::fhir::boolean_pskel* encodeRequestUrl_parser_;
    ::fhir::TestScriptRequestMethodCode_pskel* method_parser_;
    ::fhir::integer_pskel* origin_parser_;
    ::fhir::string_pskel* params_parser_;
    ::fhir::TestScript_RequestHeader_pskel* requestHeader_parser_;
    ::fhir::id_pskel* requestId_parser_;
    ::fhir::id_pskel* responseId_parser_;
    ::fhir::id_pskel* sourceId_parser_;
    ::fhir::id_pskel* targetId_parser_;
    ::fhir::string_pskel* url_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Operation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_RequestHeader_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    field ();

    virtual void
    value ();

    virtual void
    post_TestScript_RequestHeader ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* field */,
             ::fhir::string_pskel& /* value */);

    // Individual element parsers.
    //
    void
    field_parser (::fhir::string_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_RequestHeader_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_RequestHeader_pskel* TestScript_RequestHeader_impl_;
    TestScript_RequestHeader_pskel (TestScript_RequestHeader_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* field_parser_;
    ::fhir::string_pskel* value_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_RequestHeader_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Assert_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    label ();

    virtual void
    description ();

    virtual void
    direction ();

    virtual void
    compareToSourceId ();

    virtual void
    compareToSourceExpression ();

    virtual void
    compareToSourcePath ();

    virtual void
    contentType ();

    virtual void
    expression ();

    virtual void
    headerField ();

    virtual void
    minimumId ();

    virtual void
    navigationLinks ();

    virtual void
    operator_ ();

    virtual void
    path ();

    virtual void
    requestMethod ();

    virtual void
    requestURL ();

    virtual void
    resource ();

    virtual void
    response ();

    virtual void
    responseCode ();

    virtual void
    sourceId ();

    virtual void
    validateProfileId ();

    virtual void
    value ();

    virtual void
    warningOnly ();

    virtual void
    post_TestScript_Assert ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* label */,
             ::fhir::string_pskel& /* description */,
             ::fhir::AssertionDirectionType_pskel& /* direction */,
             ::fhir::string_pskel& /* compareToSourceId */,
             ::fhir::string_pskel& /* compareToSourceExpression */,
             ::fhir::string_pskel& /* compareToSourcePath */,
             ::fhir::code_pskel& /* contentType */,
             ::fhir::string_pskel& /* expression */,
             ::fhir::string_pskel& /* headerField */,
             ::fhir::string_pskel& /* minimumId */,
             ::fhir::boolean_pskel& /* navigationLinks */,
             ::fhir::AssertionOperatorType_pskel& /* operator */,
             ::fhir::string_pskel& /* path */,
             ::fhir::TestScriptRequestMethodCode_pskel& /* requestMethod */,
             ::fhir::string_pskel& /* requestURL */,
             ::fhir::code_pskel& /* resource */,
             ::fhir::AssertionResponseTypes_pskel& /* response */,
             ::fhir::string_pskel& /* responseCode */,
             ::fhir::id_pskel& /* sourceId */,
             ::fhir::id_pskel& /* validateProfileId */,
             ::fhir::string_pskel& /* value */,
             ::fhir::boolean_pskel& /* warningOnly */);

    // Individual element parsers.
    //
    void
    label_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    direction_parser (::fhir::AssertionDirectionType_pskel&);

    void
    compareToSourceId_parser (::fhir::string_pskel&);

    void
    compareToSourceExpression_parser (::fhir::string_pskel&);

    void
    compareToSourcePath_parser (::fhir::string_pskel&);

    void
    contentType_parser (::fhir::code_pskel&);

    void
    expression_parser (::fhir::string_pskel&);

    void
    headerField_parser (::fhir::string_pskel&);

    void
    minimumId_parser (::fhir::string_pskel&);

    void
    navigationLinks_parser (::fhir::boolean_pskel&);

    void
    operator__parser (::fhir::AssertionOperatorType_pskel&);

    void
    path_parser (::fhir::string_pskel&);

    void
    requestMethod_parser (::fhir::TestScriptRequestMethodCode_pskel&);

    void
    requestURL_parser (::fhir::string_pskel&);

    void
    resource_parser (::fhir::code_pskel&);

    void
    response_parser (::fhir::AssertionResponseTypes_pskel&);

    void
    responseCode_parser (::fhir::string_pskel&);

    void
    sourceId_parser (::fhir::id_pskel&);

    void
    validateProfileId_parser (::fhir::id_pskel&);

    void
    value_parser (::fhir::string_pskel&);

    void
    warningOnly_parser (::fhir::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Assert_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Assert_pskel* TestScript_Assert_impl_;
    TestScript_Assert_pskel (TestScript_Assert_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* label_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::AssertionDirectionType_pskel* direction_parser_;
    ::fhir::string_pskel* compareToSourceId_parser_;
    ::fhir::string_pskel* compareToSourceExpression_parser_;
    ::fhir::string_pskel* compareToSourcePath_parser_;
    ::fhir::code_pskel* contentType_parser_;
    ::fhir::string_pskel* expression_parser_;
    ::fhir::string_pskel* headerField_parser_;
    ::fhir::string_pskel* minimumId_parser_;
    ::fhir::boolean_pskel* navigationLinks_parser_;
    ::fhir::AssertionOperatorType_pskel* operator__parser_;
    ::fhir::string_pskel* path_parser_;
    ::fhir::TestScriptRequestMethodCode_pskel* requestMethod_parser_;
    ::fhir::string_pskel* requestURL_parser_;
    ::fhir::code_pskel* resource_parser_;
    ::fhir::AssertionResponseTypes_pskel* response_parser_;
    ::fhir::string_pskel* responseCode_parser_;
    ::fhir::id_pskel* sourceId_parser_;
    ::fhir::id_pskel* validateProfileId_parser_;
    ::fhir::string_pskel* value_parser_;
    ::fhir::boolean_pskel* warningOnly_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Assert_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Test_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name ();

    virtual void
    description ();

    virtual void
    action ();

    virtual void
    post_TestScript_Test ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* name */,
             ::fhir::string_pskel& /* description */,
             ::fhir::TestScript_Action1_pskel& /* action */);

    // Individual element parsers.
    //
    void
    name_parser (::fhir::string_pskel&);

    void
    description_parser (::fhir::string_pskel&);

    void
    action_parser (::fhir::TestScript_Action1_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Test_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Test_pskel* TestScript_Test_impl_;
    TestScript_Test_pskel (TestScript_Test_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* name_parser_;
    ::fhir::string_pskel* description_parser_;
    ::fhir::TestScript_Action1_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Test_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Action1_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operation ();

    virtual void
    assert ();

    virtual void
    post_TestScript_Action1 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Operation_pskel& /* operation */,
             ::fhir::TestScript_Assert_pskel& /* assert */);

    // Individual element parsers.
    //
    void
    operation_parser (::fhir::TestScript_Operation_pskel&);

    void
    assert_parser (::fhir::TestScript_Assert_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Action1_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Action1_pskel* TestScript_Action1_impl_;
    TestScript_Action1_pskel (TestScript_Action1_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Operation_pskel* operation_parser_;
    ::fhir::TestScript_Assert_pskel* assert_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Action1_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Teardown_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    action ();

    virtual void
    post_TestScript_Teardown ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Action2_pskel& /* action */);

    // Individual element parsers.
    //
    void
    action_parser (::fhir::TestScript_Action2_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Teardown_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Teardown_pskel* TestScript_Teardown_impl_;
    TestScript_Teardown_pskel (TestScript_Teardown_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Action2_pskel* action_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Teardown_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class TestScript_Action2_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    operation ();

    virtual void
    post_TestScript_Action2 ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::TestScript_Operation_pskel& /* operation */);

    // Individual element parsers.
    //
    void
    operation_parser (::fhir::TestScript_Operation_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScript_Action2_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScript_Action2_pskel* TestScript_Action2_impl_;
    TestScript_Action2_pskel (TestScript_Action2_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::TestScript_Operation_pskel* operation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::TestScript_Action2_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class AssertionDirectionType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AssertionDirectionType_list ();

    // Constructor.
    //
    AssertionDirectionType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionDirectionType_list_pskel* AssertionDirectionType_list_impl_;
    AssertionDirectionType_list_pskel (AssertionDirectionType_list_pskel*, void*);

    protected:
    static const char* const _xsde_AssertionDirectionType_list_pskel_enums_[2UL];
  };

  class AssertionDirectionType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AssertionDirectionType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AssertionDirectionType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AssertionDirectionType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AssertionDirectionType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionDirectionType_pskel* AssertionDirectionType_impl_;
    AssertionDirectionType_pskel (AssertionDirectionType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AssertionDirectionType_list_pskel* value_parser_;
  };

  class AssertionOperatorType_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AssertionOperatorType_list ();

    // Constructor.
    //
    AssertionOperatorType_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionOperatorType_list_pskel* AssertionOperatorType_list_impl_;
    AssertionOperatorType_list_pskel (AssertionOperatorType_list_pskel*, void*);

    protected:
    static const char* const _xsde_AssertionOperatorType_list_pskel_enums_[11UL];
  };

  class AssertionOperatorType_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AssertionOperatorType ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AssertionOperatorType_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AssertionOperatorType_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AssertionOperatorType_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionOperatorType_pskel* AssertionOperatorType_impl_;
    AssertionOperatorType_pskel (AssertionOperatorType_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AssertionOperatorType_list_pskel* value_parser_;
  };

  class AssertionResponseTypes_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AssertionResponseTypes_list ();

    // Constructor.
    //
    AssertionResponseTypes_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionResponseTypes_list_pskel* AssertionResponseTypes_list_impl_;
    AssertionResponseTypes_list_pskel (AssertionResponseTypes_list_pskel*, void*);

    protected:
    static const char* const _xsde_AssertionResponseTypes_list_pskel_enums_[12UL];
  };

  class AssertionResponseTypes_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_AssertionResponseTypes ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::AssertionResponseTypes_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::AssertionResponseTypes_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    AssertionResponseTypes_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    AssertionResponseTypes_pskel* AssertionResponseTypes_impl_;
    AssertionResponseTypes_pskel (AssertionResponseTypes_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::AssertionResponseTypes_list_pskel* value_parser_;
  };

  class TestScriptRequestMethodCode_list_pskel: public ::fhir::code_primitive_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_TestScriptRequestMethodCode_list ();

    // Constructor.
    //
    TestScriptRequestMethodCode_list_pskel (::fhir::code_primitive_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScriptRequestMethodCode_list_pskel* TestScriptRequestMethodCode_list_impl_;
    TestScriptRequestMethodCode_list_pskel (TestScriptRequestMethodCode_list_pskel*, void*);

    protected:
    static const char* const _xsde_TestScriptRequestMethodCode_list_pskel_enums_[7UL];
  };

  class TestScriptRequestMethodCode_pskel: public ::fhir::Element_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    value ();

    virtual void
    post_TestScriptRequestMethodCode ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::TestScriptRequestMethodCode_list_pskel& /* value */);

    // Individual attribute parsers.
    //
    void
    value_parser (::fhir::TestScriptRequestMethodCode_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    TestScriptRequestMethodCode_pskel (::fhir::Element_pskel* tiein);

    // Implementation details.
    //
    protected:
    TestScriptRequestMethodCode_pskel* TestScriptRequestMethodCode_impl_;
    TestScriptRequestMethodCode_pskel (TestScriptRequestMethodCode_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::fhir::TestScriptRequestMethodCode_list_pskel* value_parser_;
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // TESTSCRIPT_PSKEL_HXX
