// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef SUBSTANCESOURCEMATERIAL_PSKEL_HXX
#define SUBSTANCESOURCEMATERIAL_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3029912L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
namespace fhir
{
  class SubstanceSourceMaterial_pskel;
  class SubstanceSourceMaterial_FractionDescription_pskel;
  class SubstanceSourceMaterial_Organism_pskel;
  class SubstanceSourceMaterial_Author_pskel;
  class SubstanceSourceMaterial_Hybrid_pskel;
  class SubstanceSourceMaterial_OrganismGeneral_pskel;
  class SubstanceSourceMaterial_PartDescription_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "fhir-base-pskel.hxx"

namespace fhir
{
  class SubstanceSourceMaterial_pskel: public ::fhir::DomainResource_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    sourceMaterialClass ();

    virtual void
    sourceMaterialType ();

    virtual void
    sourceMaterialState ();

    virtual void
    organismId ();

    virtual void
    organismName ();

    virtual void
    parentSubstanceId ();

    virtual void
    parentSubstanceName ();

    virtual void
    countryOfOrigin ();

    virtual void
    geographicalLocation ();

    virtual void
    developmentStage ();

    virtual void
    fractionDescription ();

    virtual void
    organism ();

    virtual void
    partDescription ();

    virtual void
    post_SubstanceSourceMaterial ();

    // Parser construction API.
    //
    void
    parsers (::fhir::id_pskel& /* id */,
             ::fhir::Meta_pskel& /* meta */,
             ::fhir::uri_pskel& /* implicitRules */,
             ::fhir::code_pskel& /* language */,
             ::fhir::Narrative_pskel& /* text */,
             ::fhir::ResourceContainer_pskel& /* contained */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* sourceMaterialClass */,
             ::fhir::CodeableConcept_pskel& /* sourceMaterialType */,
             ::fhir::CodeableConcept_pskel& /* sourceMaterialState */,
             ::fhir::Identifier_pskel& /* organismId */,
             ::fhir::string_pskel& /* organismName */,
             ::fhir::Identifier_pskel& /* parentSubstanceId */,
             ::fhir::string_pskel& /* parentSubstanceName */,
             ::fhir::CodeableConcept_pskel& /* countryOfOrigin */,
             ::fhir::string_pskel& /* geographicalLocation */,
             ::fhir::CodeableConcept_pskel& /* developmentStage */,
             ::fhir::SubstanceSourceMaterial_FractionDescription_pskel& /* fractionDescription */,
             ::fhir::SubstanceSourceMaterial_Organism_pskel& /* organism */,
             ::fhir::SubstanceSourceMaterial_PartDescription_pskel& /* partDescription */);

    // Individual element parsers.
    //
    void
    sourceMaterialClass_parser (::fhir::CodeableConcept_pskel&);

    void
    sourceMaterialType_parser (::fhir::CodeableConcept_pskel&);

    void
    sourceMaterialState_parser (::fhir::CodeableConcept_pskel&);

    void
    organismId_parser (::fhir::Identifier_pskel&);

    void
    organismName_parser (::fhir::string_pskel&);

    void
    parentSubstanceId_parser (::fhir::Identifier_pskel&);

    void
    parentSubstanceName_parser (::fhir::string_pskel&);

    void
    countryOfOrigin_parser (::fhir::CodeableConcept_pskel&);

    void
    geographicalLocation_parser (::fhir::string_pskel&);

    void
    developmentStage_parser (::fhir::CodeableConcept_pskel&);

    void
    fractionDescription_parser (::fhir::SubstanceSourceMaterial_FractionDescription_pskel&);

    void
    organism_parser (::fhir::SubstanceSourceMaterial_Organism_pskel&);

    void
    partDescription_parser (::fhir::SubstanceSourceMaterial_PartDescription_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_pskel (::fhir::DomainResource_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_pskel* SubstanceSourceMaterial_impl_;
    SubstanceSourceMaterial_pskel (SubstanceSourceMaterial_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* sourceMaterialClass_parser_;
    ::fhir::CodeableConcept_pskel* sourceMaterialType_parser_;
    ::fhir::CodeableConcept_pskel* sourceMaterialState_parser_;
    ::fhir::Identifier_pskel* organismId_parser_;
    ::fhir::string_pskel* organismName_parser_;
    ::fhir::Identifier_pskel* parentSubstanceId_parser_;
    ::fhir::string_pskel* parentSubstanceName_parser_;
    ::fhir::CodeableConcept_pskel* countryOfOrigin_parser_;
    ::fhir::string_pskel* geographicalLocation_parser_;
    ::fhir::CodeableConcept_pskel* developmentStage_parser_;
    ::fhir::SubstanceSourceMaterial_FractionDescription_pskel* fractionDescription_parser_;
    ::fhir::SubstanceSourceMaterial_Organism_pskel* organism_parser_;
    ::fhir::SubstanceSourceMaterial_PartDescription_pskel* partDescription_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_FractionDescription_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    fraction ();

    virtual void
    materialType ();

    virtual void
    post_SubstanceSourceMaterial_FractionDescription ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* fraction */,
             ::fhir::CodeableConcept_pskel& /* materialType */);

    // Individual element parsers.
    //
    void
    fraction_parser (::fhir::string_pskel&);

    void
    materialType_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_FractionDescription_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_FractionDescription_pskel* SubstanceSourceMaterial_FractionDescription_impl_;
    SubstanceSourceMaterial_FractionDescription_pskel (SubstanceSourceMaterial_FractionDescription_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* fraction_parser_;
    ::fhir::CodeableConcept_pskel* materialType_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_FractionDescription_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_Organism_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    family ();

    virtual void
    genus ();

    virtual void
    species ();

    virtual void
    intraspecificType ();

    virtual void
    intraspecificDescription ();

    virtual void
    author ();

    virtual void
    hybrid ();

    virtual void
    organismGeneral ();

    virtual void
    post_SubstanceSourceMaterial_Organism ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* family */,
             ::fhir::CodeableConcept_pskel& /* genus */,
             ::fhir::CodeableConcept_pskel& /* species */,
             ::fhir::CodeableConcept_pskel& /* intraspecificType */,
             ::fhir::string_pskel& /* intraspecificDescription */,
             ::fhir::SubstanceSourceMaterial_Author_pskel& /* author */,
             ::fhir::SubstanceSourceMaterial_Hybrid_pskel& /* hybrid */,
             ::fhir::SubstanceSourceMaterial_OrganismGeneral_pskel& /* organismGeneral */);

    // Individual element parsers.
    //
    void
    family_parser (::fhir::CodeableConcept_pskel&);

    void
    genus_parser (::fhir::CodeableConcept_pskel&);

    void
    species_parser (::fhir::CodeableConcept_pskel&);

    void
    intraspecificType_parser (::fhir::CodeableConcept_pskel&);

    void
    intraspecificDescription_parser (::fhir::string_pskel&);

    void
    author_parser (::fhir::SubstanceSourceMaterial_Author_pskel&);

    void
    hybrid_parser (::fhir::SubstanceSourceMaterial_Hybrid_pskel&);

    void
    organismGeneral_parser (::fhir::SubstanceSourceMaterial_OrganismGeneral_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_Organism_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_Organism_pskel* SubstanceSourceMaterial_Organism_impl_;
    SubstanceSourceMaterial_Organism_pskel (SubstanceSourceMaterial_Organism_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* family_parser_;
    ::fhir::CodeableConcept_pskel* genus_parser_;
    ::fhir::CodeableConcept_pskel* species_parser_;
    ::fhir::CodeableConcept_pskel* intraspecificType_parser_;
    ::fhir::string_pskel* intraspecificDescription_parser_;
    ::fhir::SubstanceSourceMaterial_Author_pskel* author_parser_;
    ::fhir::SubstanceSourceMaterial_Hybrid_pskel* hybrid_parser_;
    ::fhir::SubstanceSourceMaterial_OrganismGeneral_pskel* organismGeneral_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_Organism_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_Author_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    authorType ();

    virtual void
    authorDescription ();

    virtual void
    post_SubstanceSourceMaterial_Author ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* authorType */,
             ::fhir::string_pskel& /* authorDescription */);

    // Individual element parsers.
    //
    void
    authorType_parser (::fhir::CodeableConcept_pskel&);

    void
    authorDescription_parser (::fhir::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_Author_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_Author_pskel* SubstanceSourceMaterial_Author_impl_;
    SubstanceSourceMaterial_Author_pskel (SubstanceSourceMaterial_Author_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* authorType_parser_;
    ::fhir::string_pskel* authorDescription_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_Author_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_Hybrid_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    maternalOrganismId ();

    virtual void
    maternalOrganismName ();

    virtual void
    paternalOrganismId ();

    virtual void
    paternalOrganismName ();

    virtual void
    hybridType ();

    virtual void
    post_SubstanceSourceMaterial_Hybrid ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::string_pskel& /* maternalOrganismId */,
             ::fhir::string_pskel& /* maternalOrganismName */,
             ::fhir::string_pskel& /* paternalOrganismId */,
             ::fhir::string_pskel& /* paternalOrganismName */,
             ::fhir::CodeableConcept_pskel& /* hybridType */);

    // Individual element parsers.
    //
    void
    maternalOrganismId_parser (::fhir::string_pskel&);

    void
    maternalOrganismName_parser (::fhir::string_pskel&);

    void
    paternalOrganismId_parser (::fhir::string_pskel&);

    void
    paternalOrganismName_parser (::fhir::string_pskel&);

    void
    hybridType_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_Hybrid_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_Hybrid_pskel* SubstanceSourceMaterial_Hybrid_impl_;
    SubstanceSourceMaterial_Hybrid_pskel (SubstanceSourceMaterial_Hybrid_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::string_pskel* maternalOrganismId_parser_;
    ::fhir::string_pskel* maternalOrganismName_parser_;
    ::fhir::string_pskel* paternalOrganismId_parser_;
    ::fhir::string_pskel* paternalOrganismName_parser_;
    ::fhir::CodeableConcept_pskel* hybridType_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_Hybrid_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_OrganismGeneral_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    kingdom ();

    virtual void
    phylum ();

    virtual void
    class_ ();

    virtual void
    order ();

    virtual void
    post_SubstanceSourceMaterial_OrganismGeneral ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* kingdom */,
             ::fhir::CodeableConcept_pskel& /* phylum */,
             ::fhir::CodeableConcept_pskel& /* class */,
             ::fhir::CodeableConcept_pskel& /* order */);

    // Individual element parsers.
    //
    void
    kingdom_parser (::fhir::CodeableConcept_pskel&);

    void
    phylum_parser (::fhir::CodeableConcept_pskel&);

    void
    class__parser (::fhir::CodeableConcept_pskel&);

    void
    order_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_OrganismGeneral_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_OrganismGeneral_pskel* SubstanceSourceMaterial_OrganismGeneral_impl_;
    SubstanceSourceMaterial_OrganismGeneral_pskel (SubstanceSourceMaterial_OrganismGeneral_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* kingdom_parser_;
    ::fhir::CodeableConcept_pskel* phylum_parser_;
    ::fhir::CodeableConcept_pskel* class__parser_;
    ::fhir::CodeableConcept_pskel* order_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_OrganismGeneral_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };

  class SubstanceSourceMaterial_PartDescription_pskel: public ::fhir::BackboneElement_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    part ();

    virtual void
    partLocation ();

    virtual void
    post_SubstanceSourceMaterial_PartDescription ();

    // Parser construction API.
    //
    void
    parsers (::fhir::string_primitive_pskel& /* id */,
             ::fhir::Extension_pskel& /* extension */,
             ::fhir::Extension_pskel& /* modifierExtension */,
             ::fhir::CodeableConcept_pskel& /* part */,
             ::fhir::CodeableConcept_pskel& /* partLocation */);

    // Individual element parsers.
    //
    void
    part_parser (::fhir::CodeableConcept_pskel&);

    void
    partLocation_parser (::fhir::CodeableConcept_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    SubstanceSourceMaterial_PartDescription_pskel (::fhir::BackboneElement_pskel* tiein);

    // Implementation details.
    //
    protected:
    SubstanceSourceMaterial_PartDescription_pskel* SubstanceSourceMaterial_PartDescription_impl_;
    SubstanceSourceMaterial_PartDescription_pskel (SubstanceSourceMaterial_PartDescription_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::fhir::CodeableConcept_pskel* part_parser_;
    ::fhir::CodeableConcept_pskel* partLocation_parser_;

    public:
    struct v_state_descr_
    {
      void (::fhir::SubstanceSourceMaterial_PartDescription_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);
  };
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SUBSTANCESOURCEMATERIAL_PSKEL_HXX
