// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "chargeitem-pskel.hxx"

namespace fhir
{
  // ChargeItem_pskel
  //

  void ChargeItem_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ChargeItem_pskel::
  definitionUri_parser (::fhir::uri_pskel& p)
  {
    this->definitionUri_parser_ = &p;
  }

  void ChargeItem_pskel::
  definitionCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->definitionCanonical_parser_ = &p;
  }

  void ChargeItem_pskel::
  status_parser (::fhir::ChargeItemStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void ChargeItem_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void ChargeItem_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ChargeItem_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void ChargeItem_pskel::
  context_parser (::fhir::Reference_pskel& p)
  {
    this->context_parser_ = &p;
  }

  void ChargeItem_pskel::
  occurrenceDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->occurrenceDateTime_parser_ = &p;
  }

  void ChargeItem_pskel::
  occurrencePeriod_parser (::fhir::Period_pskel& p)
  {
    this->occurrencePeriod_parser_ = &p;
  }

  void ChargeItem_pskel::
  occurrenceTiming_parser (::fhir::Timing_pskel& p)
  {
    this->occurrenceTiming_parser_ = &p;
  }

  void ChargeItem_pskel::
  performer_parser (::fhir::ChargeItem_Performer_pskel& p)
  {
    this->performer_parser_ = &p;
  }

  void ChargeItem_pskel::
  performingOrganization_parser (::fhir::Reference_pskel& p)
  {
    this->performingOrganization_parser_ = &p;
  }

  void ChargeItem_pskel::
  requestingOrganization_parser (::fhir::Reference_pskel& p)
  {
    this->requestingOrganization_parser_ = &p;
  }

  void ChargeItem_pskel::
  costCenter_parser (::fhir::Reference_pskel& p)
  {
    this->costCenter_parser_ = &p;
  }

  void ChargeItem_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ChargeItem_pskel::
  bodysite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->bodysite_parser_ = &p;
  }

  void ChargeItem_pskel::
  factorOverride_parser (::fhir::decimal_pskel& p)
  {
    this->factorOverride_parser_ = &p;
  }

  void ChargeItem_pskel::
  priceOverride_parser (::fhir::Money_pskel& p)
  {
    this->priceOverride_parser_ = &p;
  }

  void ChargeItem_pskel::
  overrideReason_parser (::fhir::string_pskel& p)
  {
    this->overrideReason_parser_ = &p;
  }

  void ChargeItem_pskel::
  enterer_parser (::fhir::Reference_pskel& p)
  {
    this->enterer_parser_ = &p;
  }

  void ChargeItem_pskel::
  enteredDate_parser (::fhir::dateTime_pskel& p)
  {
    this->enteredDate_parser_ = &p;
  }

  void ChargeItem_pskel::
  reason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reason_parser_ = &p;
  }

  void ChargeItem_pskel::
  service_parser (::fhir::Reference_pskel& p)
  {
    this->service_parser_ = &p;
  }

  void ChargeItem_pskel::
  productReference_parser (::fhir::Reference_pskel& p)
  {
    this->productReference_parser_ = &p;
  }

  void ChargeItem_pskel::
  productCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productCodeableConcept_parser_ = &p;
  }

  void ChargeItem_pskel::
  account_parser (::fhir::Reference_pskel& p)
  {
    this->account_parser_ = &p;
  }

  void ChargeItem_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void ChargeItem_pskel::
  supportingInformation_parser (::fhir::Reference_pskel& p)
  {
    this->supportingInformation_parser_ = &p;
  }

  void ChargeItem_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::uri_pskel& definitionUri,
           ::fhir::canonical_pskel& definitionCanonical,
           ::fhir::ChargeItemStatus_pskel& status,
           ::fhir::Reference_pskel& partOf,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& context,
           ::fhir::dateTime_pskel& occurrenceDateTime,
           ::fhir::Period_pskel& occurrencePeriod,
           ::fhir::Timing_pskel& occurrenceTiming,
           ::fhir::ChargeItem_Performer_pskel& performer,
           ::fhir::Reference_pskel& performingOrganization,
           ::fhir::Reference_pskel& requestingOrganization,
           ::fhir::Reference_pskel& costCenter,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::CodeableConcept_pskel& bodysite,
           ::fhir::decimal_pskel& factorOverride,
           ::fhir::Money_pskel& priceOverride,
           ::fhir::string_pskel& overrideReason,
           ::fhir::Reference_pskel& enterer,
           ::fhir::dateTime_pskel& enteredDate,
           ::fhir::CodeableConcept_pskel& reason,
           ::fhir::Reference_pskel& service,
           ::fhir::Reference_pskel& productReference,
           ::fhir::CodeableConcept_pskel& productCodeableConcept,
           ::fhir::Reference_pskel& account,
           ::fhir::Annotation_pskel& note,
           ::fhir::Reference_pskel& supportingInformation)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->definitionUri_parser_ = &definitionUri;
    this->definitionCanonical_parser_ = &definitionCanonical;
    this->status_parser_ = &status;
    this->partOf_parser_ = &partOf;
    this->code_parser_ = &code;
    this->subject_parser_ = &subject;
    this->context_parser_ = &context;
    this->occurrenceDateTime_parser_ = &occurrenceDateTime;
    this->occurrencePeriod_parser_ = &occurrencePeriod;
    this->occurrenceTiming_parser_ = &occurrenceTiming;
    this->performer_parser_ = &performer;
    this->performingOrganization_parser_ = &performingOrganization;
    this->requestingOrganization_parser_ = &requestingOrganization;
    this->costCenter_parser_ = &costCenter;
    this->quantity_parser_ = &quantity;
    this->bodysite_parser_ = &bodysite;
    this->factorOverride_parser_ = &factorOverride;
    this->priceOverride_parser_ = &priceOverride;
    this->overrideReason_parser_ = &overrideReason;
    this->enterer_parser_ = &enterer;
    this->enteredDate_parser_ = &enteredDate;
    this->reason_parser_ = &reason;
    this->service_parser_ = &service;
    this->productReference_parser_ = &productReference;
    this->productCodeableConcept_parser_ = &productCodeableConcept;
    this->account_parser_ = &account;
    this->note_parser_ = &note;
    this->supportingInformation_parser_ = &supportingInformation;
  }

  ChargeItem_pskel::
  ChargeItem_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ChargeItem_impl_ (0),
    identifier_parser_ (0),
    definitionUri_parser_ (0),
    definitionCanonical_parser_ (0),
    status_parser_ (0),
    partOf_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    context_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrencePeriod_parser_ (0),
    occurrenceTiming_parser_ (0),
    performer_parser_ (0),
    performingOrganization_parser_ (0),
    requestingOrganization_parser_ (0),
    costCenter_parser_ (0),
    quantity_parser_ (0),
    bodysite_parser_ (0),
    factorOverride_parser_ (0),
    priceOverride_parser_ (0),
    overrideReason_parser_ (0),
    enterer_parser_ (0),
    enteredDate_parser_ (0),
    reason_parser_ (0),
    service_parser_ (0),
    productReference_parser_ (0),
    productCodeableConcept_parser_ (0),
    account_parser_ (0),
    note_parser_ (0),
    supportingInformation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ChargeItem_pskel::
  ChargeItem_pskel (ChargeItem_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ChargeItem_impl_ (impl),
    identifier_parser_ (0),
    definitionUri_parser_ (0),
    definitionCanonical_parser_ (0),
    status_parser_ (0),
    partOf_parser_ (0),
    code_parser_ (0),
    subject_parser_ (0),
    context_parser_ (0),
    occurrenceDateTime_parser_ (0),
    occurrencePeriod_parser_ (0),
    occurrenceTiming_parser_ (0),
    performer_parser_ (0),
    performingOrganization_parser_ (0),
    requestingOrganization_parser_ (0),
    costCenter_parser_ (0),
    quantity_parser_ (0),
    bodysite_parser_ (0),
    factorOverride_parser_ (0),
    priceOverride_parser_ (0),
    overrideReason_parser_ (0),
    enterer_parser_ (0),
    enteredDate_parser_ (0),
    reason_parser_ (0),
    service_parser_ (0),
    productReference_parser_ (0),
    productCodeableConcept_parser_ (0),
    account_parser_ (0),
    note_parser_ (0),
    supportingInformation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ChargeItem_Performer_pskel
  //

  void ChargeItem_Performer_pskel::
  function_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->function_parser_ = &p;
  }

  void ChargeItem_Performer_pskel::
  actor_parser (::fhir::Reference_pskel& p)
  {
    this->actor_parser_ = &p;
  }

  void ChargeItem_Performer_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& function,
           ::fhir::Reference_pskel& actor)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->function_parser_ = &function;
    this->actor_parser_ = &actor;
  }

  ChargeItem_Performer_pskel::
  ChargeItem_Performer_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ChargeItem_Performer_impl_ (0),
    function_parser_ (0),
    actor_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ChargeItem_Performer_pskel::
  ChargeItem_Performer_pskel (ChargeItem_Performer_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ChargeItem_Performer_impl_ (impl),
    function_parser_ (0),
    actor_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ChargeItemStatus_list_pskel
  //

  ChargeItemStatus_list_pskel::
  ChargeItemStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ChargeItemStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ChargeItemStatus_list_pskel_enums_, 7UL);
  }

  ChargeItemStatus_list_pskel::
  ChargeItemStatus_list_pskel (ChargeItemStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ChargeItemStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ChargeItemStatus_list_pskel_enums_, 7UL);
  }

  // ChargeItemStatus_pskel
  //

  void ChargeItemStatus_pskel::
  value_parser (::fhir::ChargeItemStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ChargeItemStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ChargeItemStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ChargeItemStatus_pskel::
  ChargeItemStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ChargeItemStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  ChargeItemStatus_pskel::
  ChargeItemStatus_pskel (ChargeItemStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ChargeItemStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ChargeItem_pskel
  //

  void ChargeItem_pskel::
  identifier ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->identifier ();
  }

  void ChargeItem_pskel::
  definitionUri ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->definitionUri ();
  }

  void ChargeItem_pskel::
  definitionCanonical ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->definitionCanonical ();
  }

  void ChargeItem_pskel::
  status ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->status ();
  }

  void ChargeItem_pskel::
  partOf ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->partOf ();
  }

  void ChargeItem_pskel::
  code ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->code ();
  }

  void ChargeItem_pskel::
  subject ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->subject ();
  }

  void ChargeItem_pskel::
  context ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->context ();
  }

  void ChargeItem_pskel::
  occurrenceDateTime ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->occurrenceDateTime ();
  }

  void ChargeItem_pskel::
  occurrencePeriod ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->occurrencePeriod ();
  }

  void ChargeItem_pskel::
  occurrenceTiming ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->occurrenceTiming ();
  }

  void ChargeItem_pskel::
  performer ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->performer ();
  }

  void ChargeItem_pskel::
  performingOrganization ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->performingOrganization ();
  }

  void ChargeItem_pskel::
  requestingOrganization ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->requestingOrganization ();
  }

  void ChargeItem_pskel::
  costCenter ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->costCenter ();
  }

  void ChargeItem_pskel::
  quantity ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->quantity ();
  }

  void ChargeItem_pskel::
  bodysite ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->bodysite ();
  }

  void ChargeItem_pskel::
  factorOverride ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->factorOverride ();
  }

  void ChargeItem_pskel::
  priceOverride ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->priceOverride ();
  }

  void ChargeItem_pskel::
  overrideReason ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->overrideReason ();
  }

  void ChargeItem_pskel::
  enterer ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->enterer ();
  }

  void ChargeItem_pskel::
  enteredDate ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->enteredDate ();
  }

  void ChargeItem_pskel::
  reason ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->reason ();
  }

  void ChargeItem_pskel::
  service ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->service ();
  }

  void ChargeItem_pskel::
  productReference ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->productReference ();
  }

  void ChargeItem_pskel::
  productCodeableConcept ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->productCodeableConcept ();
  }

  void ChargeItem_pskel::
  account ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->account ();
  }

  void ChargeItem_pskel::
  note ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->note ();
  }

  void ChargeItem_pskel::
  supportingInformation ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->supportingInformation ();
  }

  void ChargeItem_pskel::
  post_ChargeItem ()
  {
    if (this->ChargeItem_impl_)
      this->ChargeItem_impl_->post_ChargeItem ();
    else
      post_DomainResource ();
  }

  void ChargeItem_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->definitionUri_parser_)
      this->definitionUri_parser_->_reset ();

    if (this->definitionCanonical_parser_)
      this->definitionCanonical_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->context_parser_)
      this->context_parser_->_reset ();

    if (this->occurrenceDateTime_parser_)
      this->occurrenceDateTime_parser_->_reset ();

    if (this->occurrencePeriod_parser_)
      this->occurrencePeriod_parser_->_reset ();

    if (this->occurrenceTiming_parser_)
      this->occurrenceTiming_parser_->_reset ();

    if (this->performer_parser_)
      this->performer_parser_->_reset ();

    if (this->performingOrganization_parser_)
      this->performingOrganization_parser_->_reset ();

    if (this->requestingOrganization_parser_)
      this->requestingOrganization_parser_->_reset ();

    if (this->costCenter_parser_)
      this->costCenter_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->bodysite_parser_)
      this->bodysite_parser_->_reset ();

    if (this->factorOverride_parser_)
      this->factorOverride_parser_->_reset ();

    if (this->priceOverride_parser_)
      this->priceOverride_parser_->_reset ();

    if (this->overrideReason_parser_)
      this->overrideReason_parser_->_reset ();

    if (this->enterer_parser_)
      this->enterer_parser_->_reset ();

    if (this->enteredDate_parser_)
      this->enteredDate_parser_->_reset ();

    if (this->reason_parser_)
      this->reason_parser_->_reset ();

    if (this->service_parser_)
      this->service_parser_->_reset ();

    if (this->productReference_parser_)
      this->productReference_parser_->_reset ();

    if (this->productCodeableConcept_parser_)
      this->productCodeableConcept_parser_->_reset ();

    if (this->account_parser_)
      this->account_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->supportingInformation_parser_)
      this->supportingInformation_parser_->_reset ();

    this->resetting_ = false;
  }

  // ChargeItem_Performer_pskel
  //

  void ChargeItem_Performer_pskel::
  function ()
  {
    if (this->ChargeItem_Performer_impl_)
      this->ChargeItem_Performer_impl_->function ();
  }

  void ChargeItem_Performer_pskel::
  actor ()
  {
    if (this->ChargeItem_Performer_impl_)
      this->ChargeItem_Performer_impl_->actor ();
  }

  void ChargeItem_Performer_pskel::
  post_ChargeItem_Performer ()
  {
    if (this->ChargeItem_Performer_impl_)
      this->ChargeItem_Performer_impl_->post_ChargeItem_Performer ();
    else
      post_BackboneElement ();
  }

  void ChargeItem_Performer_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->function_parser_)
      this->function_parser_->_reset ();

    if (this->actor_parser_)
      this->actor_parser_->_reset ();

    this->resetting_ = false;
  }

  // ChargeItemStatus_list_pskel
  //

  void ChargeItemStatus_list_pskel::
  post_ChargeItemStatus_list ()
  {
    if (this->ChargeItemStatus_list_impl_)
      this->ChargeItemStatus_list_impl_->post_ChargeItemStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const ChargeItemStatus_list_pskel::_xsde_ChargeItemStatus_list_pskel_enums_[7UL] = 
  {
    "aborted",
    "billable",
    "billed",
    "entered-in-error",
    "not-billable",
    "planned",
    "unknown"
  };

  // ChargeItemStatus_pskel
  //

  void ChargeItemStatus_pskel::
  value ()
  {
    if (this->ChargeItemStatus_impl_)
      this->ChargeItemStatus_impl_->value ();
  }

  void ChargeItemStatus_pskel::
  post_ChargeItemStatus ()
  {
    if (this->ChargeItemStatus_impl_)
      this->ChargeItemStatus_impl_->post_ChargeItemStatus ();
    else
      post_Element ();
  }

  void ChargeItemStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ChargeItem_pskel.
  //
  bool ChargeItem_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "definitionUri" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "definitionCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ChargeItem_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ChargeItem_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ChargeItem_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ChargeItem_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ChargeItem_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "definitionUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definitionUri_parser_)
            {
              this->definitionUri_parser_->pre ();
              ctx.nested_parser (this->definitionUri_parser_);
            }
          }
          else
          {
            if (this->definitionUri_parser_ != 0)
            {
              this->definitionUri_parser_->post_uri ();
              this->definitionUri ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "definitionCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definitionCanonical_parser_)
            {
              this->definitionCanonical_parser_->pre ();
              ctx.nested_parser (this->definitionCanonical_parser_);
            }
          }
          else
          {
            if (this->definitionCanonical_parser_ != 0)
            {
              this->definitionCanonical_parser_->post_canonical ();
              this->definitionCanonical ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ChargeItemStatus ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "context" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->context_parser_)
            {
              this->context_parser_->pre ();
              ctx.nested_parser (this->context_parser_);
            }
          }
          else
          {
            if (this->context_parser_ != 0)
            {
              this->context_parser_->post_Reference ();
              this->context ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "occurrenceDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceDateTime_parser_)
            {
              this->occurrenceDateTime_parser_->pre ();
              ctx.nested_parser (this->occurrenceDateTime_parser_);
            }
          }
          else
          {
            if (this->occurrenceDateTime_parser_ != 0)
            {
              this->occurrenceDateTime_parser_->post_dateTime ();
              this->occurrenceDateTime ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "occurrencePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrencePeriod_parser_)
            {
              this->occurrencePeriod_parser_->pre ();
              ctx.nested_parser (this->occurrencePeriod_parser_);
            }
          }
          else
          {
            if (this->occurrencePeriod_parser_ != 0)
            {
              this->occurrencePeriod_parser_->post_Period ();
              this->occurrencePeriod ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "occurrenceTiming" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->occurrenceTiming_parser_)
            {
              this->occurrenceTiming_parser_->pre ();
              ctx.nested_parser (this->occurrenceTiming_parser_);
            }
          }
          else
          {
            if (this->occurrenceTiming_parser_ != 0)
            {
              this->occurrenceTiming_parser_->post_Timing ();
              this->occurrenceTiming ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "performer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performer_parser_)
            {
              this->performer_parser_->pre ();
              ctx.nested_parser (this->performer_parser_);
            }
          }
          else
          {
            if (this->performer_parser_ != 0)
            {
              this->performer_parser_->post_ChargeItem_Performer ();
              this->performer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "performingOrganization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->performingOrganization_parser_)
            {
              this->performingOrganization_parser_->pre ();
              ctx.nested_parser (this->performingOrganization_parser_);
            }
          }
          else
          {
            if (this->performingOrganization_parser_ != 0)
            {
              this->performingOrganization_parser_->post_Reference ();
              this->performingOrganization ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "requestingOrganization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->requestingOrganization_parser_)
            {
              this->requestingOrganization_parser_->pre ();
              ctx.nested_parser (this->requestingOrganization_parser_);
            }
          }
          else
          {
            if (this->requestingOrganization_parser_ != 0)
            {
              this->requestingOrganization_parser_->post_Reference ();
              this->requestingOrganization ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "costCenter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->costCenter_parser_)
            {
              this->costCenter_parser_->pre ();
              ctx.nested_parser (this->costCenter_parser_);
            }
          }
          else
          {
            if (this->costCenter_parser_ != 0)
            {
              this->costCenter_parser_->post_Reference ();
              this->costCenter ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "bodysite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bodysite_parser_)
            {
              this->bodysite_parser_->pre ();
              ctx.nested_parser (this->bodysite_parser_);
            }
          }
          else
          {
            if (this->bodysite_parser_ != 0)
            {
              this->bodysite_parser_->post_CodeableConcept ();
              this->bodysite ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "factorOverride" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factorOverride_parser_)
            {
              this->factorOverride_parser_->pre ();
              ctx.nested_parser (this->factorOverride_parser_);
            }
          }
          else
          {
            if (this->factorOverride_parser_ != 0)
            {
              this->factorOverride_parser_->post_decimal ();
              this->factorOverride ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "priceOverride" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priceOverride_parser_)
            {
              this->priceOverride_parser_->pre ();
              ctx.nested_parser (this->priceOverride_parser_);
            }
          }
          else
          {
            if (this->priceOverride_parser_ != 0)
            {
              this->priceOverride_parser_->post_Money ();
              this->priceOverride ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "overrideReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->overrideReason_parser_)
            {
              this->overrideReason_parser_->pre ();
              ctx.nested_parser (this->overrideReason_parser_);
            }
          }
          else
          {
            if (this->overrideReason_parser_ != 0)
            {
              this->overrideReason_parser_->post_string ();
              this->overrideReason ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "enterer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->enterer_parser_)
            {
              this->enterer_parser_->pre ();
              ctx.nested_parser (this->enterer_parser_);
            }
          }
          else
          {
            if (this->enterer_parser_ != 0)
            {
              this->enterer_parser_->post_Reference ();
              this->enterer ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "enteredDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->enteredDate_parser_)
            {
              this->enteredDate_parser_->pre ();
              ctx.nested_parser (this->enteredDate_parser_);
            }
          }
          else
          {
            if (this->enteredDate_parser_ != 0)
            {
              this->enteredDate_parser_->post_dateTime ();
              this->enteredDate ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "reason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reason_parser_)
            {
              this->reason_parser_->pre ();
              ctx.nested_parser (this->reason_parser_);
            }
          }
          else
          {
            if (this->reason_parser_ != 0)
            {
              this->reason_parser_->post_CodeableConcept ();
              this->reason ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "service" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->service_parser_)
            {
              this->service_parser_->pre ();
              ctx.nested_parser (this->service_parser_);
            }
          }
          else
          {
            if (this->service_parser_ != 0)
            {
              this->service_parser_->post_Reference ();
              this->service ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "productReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productReference_parser_)
            {
              this->productReference_parser_->pre ();
              ctx.nested_parser (this->productReference_parser_);
            }
          }
          else
          {
            if (this->productReference_parser_ != 0)
            {
              this->productReference_parser_->post_Reference ();
              this->productReference ();
            }

            count = 0;
            state = 25UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "productCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productCodeableConcept_parser_)
            {
              this->productCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->productCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->productCodeableConcept_parser_ != 0)
            {
              this->productCodeableConcept_parser_->post_CodeableConcept ();
              this->productCodeableConcept ();
            }

            count = 0;
            state = 26UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "account" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->account_parser_)
            {
              this->account_parser_->pre ();
              ctx.nested_parser (this->account_parser_);
            }
          }
          else
          {
            if (this->account_parser_ != 0)
            {
              this->account_parser_->post_Reference ();
              this->account ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "supportingInformation" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInformation_parser_)
            {
              this->supportingInformation_parser_->pre ();
              ctx.nested_parser (this->supportingInformation_parser_);
            }
          }
          else
          {
            if (this->supportingInformation_parser_ != 0)
            {
              this->supportingInformation_parser_->post_Reference ();
              this->supportingInformation ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ChargeItem_Performer_pskel.
  //
  bool ChargeItem_Performer_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "function" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "actor" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ChargeItem_Performer_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ChargeItem_Performer_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ChargeItem_Performer_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ChargeItem_Performer_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ChargeItem_Performer_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "function" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->function_parser_)
            {
              this->function_parser_->pre ();
              ctx.nested_parser (this->function_parser_);
            }
          }
          else
          {
            if (this->function_parser_ != 0)
            {
              this->function_parser_->post_CodeableConcept ();
              this->function ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "actor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->actor_parser_)
            {
              this->actor_parser_->pre ();
              ctx.nested_parser (this->actor_parser_);
            }
          }
          else
          {
            if (this->actor_parser_ != 0)
            {
              this->actor_parser_->post_Reference ();
              this->actor ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ChargeItemStatus_pskel.
  //
  bool ChargeItemStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ChargeItemStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

