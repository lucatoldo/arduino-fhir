// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "device-pskel.hxx"

namespace fhir
{
  // Device_pskel
  //

  void Device_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Device_pskel::
  definition_parser (::fhir::Reference_pskel& p)
  {
    this->definition_parser_ = &p;
  }

  void Device_pskel::
  udiCarrier_parser (::fhir::Device_UdiCarrier_pskel& p)
  {
    this->udiCarrier_parser_ = &p;
  }

  void Device_pskel::
  status_parser (::fhir::FHIRDeviceStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Device_pskel::
  statusReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->statusReason_parser_ = &p;
  }

  void Device_pskel::
  distinctIdentifier_parser (::fhir::string_pskel& p)
  {
    this->distinctIdentifier_parser_ = &p;
  }

  void Device_pskel::
  manufacturer_parser (::fhir::string_pskel& p)
  {
    this->manufacturer_parser_ = &p;
  }

  void Device_pskel::
  manufactureDate_parser (::fhir::dateTime_pskel& p)
  {
    this->manufactureDate_parser_ = &p;
  }

  void Device_pskel::
  expirationDate_parser (::fhir::dateTime_pskel& p)
  {
    this->expirationDate_parser_ = &p;
  }

  void Device_pskel::
  lotNumber_parser (::fhir::string_pskel& p)
  {
    this->lotNumber_parser_ = &p;
  }

  void Device_pskel::
  serialNumber_parser (::fhir::string_pskel& p)
  {
    this->serialNumber_parser_ = &p;
  }

  void Device_pskel::
  deviceName_parser (::fhir::Device_DeviceName_pskel& p)
  {
    this->deviceName_parser_ = &p;
  }

  void Device_pskel::
  modelNumber_parser (::fhir::string_pskel& p)
  {
    this->modelNumber_parser_ = &p;
  }

  void Device_pskel::
  partNumber_parser (::fhir::string_pskel& p)
  {
    this->partNumber_parser_ = &p;
  }

  void Device_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Device_pskel::
  specialization_parser (::fhir::Device_Specialization_pskel& p)
  {
    this->specialization_parser_ = &p;
  }

  void Device_pskel::
  version_parser (::fhir::Device_Version_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void Device_pskel::
  property_parser (::fhir::Device_Property_pskel& p)
  {
    this->property_parser_ = &p;
  }

  void Device_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void Device_pskel::
  owner_parser (::fhir::Reference_pskel& p)
  {
    this->owner_parser_ = &p;
  }

  void Device_pskel::
  contact_parser (::fhir::ContactPoint_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void Device_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void Device_pskel::
  url_parser (::fhir::uri_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void Device_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void Device_pskel::
  safety_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->safety_parser_ = &p;
  }

  void Device_pskel::
  parent_parser (::fhir::Reference_pskel& p)
  {
    this->parent_parser_ = &p;
  }

  void Device_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& definition,
           ::fhir::Device_UdiCarrier_pskel& udiCarrier,
           ::fhir::FHIRDeviceStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& statusReason,
           ::fhir::string_pskel& distinctIdentifier,
           ::fhir::string_pskel& manufacturer,
           ::fhir::dateTime_pskel& manufactureDate,
           ::fhir::dateTime_pskel& expirationDate,
           ::fhir::string_pskel& lotNumber,
           ::fhir::string_pskel& serialNumber,
           ::fhir::Device_DeviceName_pskel& deviceName,
           ::fhir::string_pskel& modelNumber,
           ::fhir::string_pskel& partNumber,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Device_Specialization_pskel& specialization,
           ::fhir::Device_Version_pskel& version,
           ::fhir::Device_Property_pskel& property,
           ::fhir::Reference_pskel& patient,
           ::fhir::Reference_pskel& owner,
           ::fhir::ContactPoint_pskel& contact,
           ::fhir::Reference_pskel& location,
           ::fhir::uri_pskel& url,
           ::fhir::Annotation_pskel& note,
           ::fhir::CodeableConcept_pskel& safety,
           ::fhir::Reference_pskel& parent)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->definition_parser_ = &definition;
    this->udiCarrier_parser_ = &udiCarrier;
    this->status_parser_ = &status;
    this->statusReason_parser_ = &statusReason;
    this->distinctIdentifier_parser_ = &distinctIdentifier;
    this->manufacturer_parser_ = &manufacturer;
    this->manufactureDate_parser_ = &manufactureDate;
    this->expirationDate_parser_ = &expirationDate;
    this->lotNumber_parser_ = &lotNumber;
    this->serialNumber_parser_ = &serialNumber;
    this->deviceName_parser_ = &deviceName;
    this->modelNumber_parser_ = &modelNumber;
    this->partNumber_parser_ = &partNumber;
    this->type_parser_ = &type;
    this->specialization_parser_ = &specialization;
    this->version_parser_ = &version;
    this->property_parser_ = &property;
    this->patient_parser_ = &patient;
    this->owner_parser_ = &owner;
    this->contact_parser_ = &contact;
    this->location_parser_ = &location;
    this->url_parser_ = &url;
    this->note_parser_ = &note;
    this->safety_parser_ = &safety;
    this->parent_parser_ = &parent;
  }

  Device_pskel::
  Device_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Device_impl_ (0),
    identifier_parser_ (0),
    definition_parser_ (0),
    udiCarrier_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    distinctIdentifier_parser_ (0),
    manufacturer_parser_ (0),
    manufactureDate_parser_ (0),
    expirationDate_parser_ (0),
    lotNumber_parser_ (0),
    serialNumber_parser_ (0),
    deviceName_parser_ (0),
    modelNumber_parser_ (0),
    partNumber_parser_ (0),
    type_parser_ (0),
    specialization_parser_ (0),
    version_parser_ (0),
    property_parser_ (0),
    patient_parser_ (0),
    owner_parser_ (0),
    contact_parser_ (0),
    location_parser_ (0),
    url_parser_ (0),
    note_parser_ (0),
    safety_parser_ (0),
    parent_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Device_pskel::
  Device_pskel (Device_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Device_impl_ (impl),
    identifier_parser_ (0),
    definition_parser_ (0),
    udiCarrier_parser_ (0),
    status_parser_ (0),
    statusReason_parser_ (0),
    distinctIdentifier_parser_ (0),
    manufacturer_parser_ (0),
    manufactureDate_parser_ (0),
    expirationDate_parser_ (0),
    lotNumber_parser_ (0),
    serialNumber_parser_ (0),
    deviceName_parser_ (0),
    modelNumber_parser_ (0),
    partNumber_parser_ (0),
    type_parser_ (0),
    specialization_parser_ (0),
    version_parser_ (0),
    property_parser_ (0),
    patient_parser_ (0),
    owner_parser_ (0),
    contact_parser_ (0),
    location_parser_ (0),
    url_parser_ (0),
    note_parser_ (0),
    safety_parser_ (0),
    parent_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Device_UdiCarrier_pskel
  //

  void Device_UdiCarrier_pskel::
  deviceIdentifier_parser (::fhir::string_pskel& p)
  {
    this->deviceIdentifier_parser_ = &p;
  }

  void Device_UdiCarrier_pskel::
  issuer_parser (::fhir::uri_pskel& p)
  {
    this->issuer_parser_ = &p;
  }

  void Device_UdiCarrier_pskel::
  jurisdiction_parser (::fhir::uri_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void Device_UdiCarrier_pskel::
  carrierAIDC_parser (::fhir::base64Binary_pskel& p)
  {
    this->carrierAIDC_parser_ = &p;
  }

  void Device_UdiCarrier_pskel::
  carrierHRF_parser (::fhir::string_pskel& p)
  {
    this->carrierHRF_parser_ = &p;
  }

  void Device_UdiCarrier_pskel::
  entryType_parser (::fhir::UDIEntryType_pskel& p)
  {
    this->entryType_parser_ = &p;
  }

  void Device_UdiCarrier_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& deviceIdentifier,
           ::fhir::uri_pskel& issuer,
           ::fhir::uri_pskel& jurisdiction,
           ::fhir::base64Binary_pskel& carrierAIDC,
           ::fhir::string_pskel& carrierHRF,
           ::fhir::UDIEntryType_pskel& entryType)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->deviceIdentifier_parser_ = &deviceIdentifier;
    this->issuer_parser_ = &issuer;
    this->jurisdiction_parser_ = &jurisdiction;
    this->carrierAIDC_parser_ = &carrierAIDC;
    this->carrierHRF_parser_ = &carrierHRF;
    this->entryType_parser_ = &entryType;
  }

  Device_UdiCarrier_pskel::
  Device_UdiCarrier_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Device_UdiCarrier_impl_ (0),
    deviceIdentifier_parser_ (0),
    issuer_parser_ (0),
    jurisdiction_parser_ (0),
    carrierAIDC_parser_ (0),
    carrierHRF_parser_ (0),
    entryType_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Device_UdiCarrier_pskel::
  Device_UdiCarrier_pskel (Device_UdiCarrier_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Device_UdiCarrier_impl_ (impl),
    deviceIdentifier_parser_ (0),
    issuer_parser_ (0),
    jurisdiction_parser_ (0),
    carrierAIDC_parser_ (0),
    carrierHRF_parser_ (0),
    entryType_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Device_DeviceName_pskel
  //

  void Device_DeviceName_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void Device_DeviceName_pskel::
  type_parser (::fhir::DeviceNameType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Device_DeviceName_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::DeviceNameType_pskel& type)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->type_parser_ = &type;
  }

  Device_DeviceName_pskel::
  Device_DeviceName_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Device_DeviceName_impl_ (0),
    name_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Device_DeviceName_pskel::
  Device_DeviceName_pskel (Device_DeviceName_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Device_DeviceName_impl_ (impl),
    name_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Device_Specialization_pskel
  //

  void Device_Specialization_pskel::
  systemType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->systemType_parser_ = &p;
  }

  void Device_Specialization_pskel::
  version_parser (::fhir::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void Device_Specialization_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& systemType,
           ::fhir::string_pskel& version)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->systemType_parser_ = &systemType;
    this->version_parser_ = &version;
  }

  Device_Specialization_pskel::
  Device_Specialization_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Device_Specialization_impl_ (0),
    systemType_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Device_Specialization_pskel::
  Device_Specialization_pskel (Device_Specialization_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Device_Specialization_impl_ (impl),
    systemType_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Device_Version_pskel
  //

  void Device_Version_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Device_Version_pskel::
  component_parser (::fhir::Identifier_pskel& p)
  {
    this->component_parser_ = &p;
  }

  void Device_Version_pskel::
  value_parser (::fhir::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void Device_Version_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Identifier_pskel& component,
           ::fhir::string_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->component_parser_ = &component;
    this->value_parser_ = &value;
  }

  Device_Version_pskel::
  Device_Version_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Device_Version_impl_ (0),
    type_parser_ (0),
    component_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Device_Version_pskel::
  Device_Version_pskel (Device_Version_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Device_Version_impl_ (impl),
    type_parser_ (0),
    component_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Device_Property_pskel
  //

  void Device_Property_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Device_Property_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void Device_Property_pskel::
  valueCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->valueCode_parser_ = &p;
  }

  void Device_Property_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::CodeableConcept_pskel& valueCode)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueCode_parser_ = &valueCode;
  }

  Device_Property_pskel::
  Device_Property_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Device_Property_impl_ (0),
    type_parser_ (0),
    valueQuantity_parser_ (0),
    valueCode_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Device_Property_pskel::
  Device_Property_pskel (Device_Property_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Device_Property_impl_ (impl),
    type_parser_ (0),
    valueQuantity_parser_ (0),
    valueCode_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // FHIRDeviceStatus_list_pskel
  //

  FHIRDeviceStatus_list_pskel::
  FHIRDeviceStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    FHIRDeviceStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_FHIRDeviceStatus_list_pskel_enums_, 4UL);
  }

  FHIRDeviceStatus_list_pskel::
  FHIRDeviceStatus_list_pskel (FHIRDeviceStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    FHIRDeviceStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_FHIRDeviceStatus_list_pskel_enums_, 4UL);
  }

  // FHIRDeviceStatus_pskel
  //

  void FHIRDeviceStatus_pskel::
  value_parser (::fhir::FHIRDeviceStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void FHIRDeviceStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::FHIRDeviceStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  FHIRDeviceStatus_pskel::
  FHIRDeviceStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    FHIRDeviceStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  FHIRDeviceStatus_pskel::
  FHIRDeviceStatus_pskel (FHIRDeviceStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    FHIRDeviceStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // DeviceNameType_list_pskel
  //

  DeviceNameType_list_pskel::
  DeviceNameType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    DeviceNameType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_DeviceNameType_list_pskel_enums_, 6UL);
  }

  DeviceNameType_list_pskel::
  DeviceNameType_list_pskel (DeviceNameType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    DeviceNameType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_DeviceNameType_list_pskel_enums_, 6UL);
  }

  // DeviceNameType_pskel
  //

  void DeviceNameType_pskel::
  value_parser (::fhir::DeviceNameType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void DeviceNameType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::DeviceNameType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  DeviceNameType_pskel::
  DeviceNameType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    DeviceNameType_impl_ (0),
    value_parser_ (0)
  {
  }

  DeviceNameType_pskel::
  DeviceNameType_pskel (DeviceNameType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    DeviceNameType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // UDIEntryType_list_pskel
  //

  UDIEntryType_list_pskel::
  UDIEntryType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    UDIEntryType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_UDIEntryType_list_pskel_enums_, 6UL);
  }

  UDIEntryType_list_pskel::
  UDIEntryType_list_pskel (UDIEntryType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    UDIEntryType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_UDIEntryType_list_pskel_enums_, 6UL);
  }

  // UDIEntryType_pskel
  //

  void UDIEntryType_pskel::
  value_parser (::fhir::UDIEntryType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void UDIEntryType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::UDIEntryType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  UDIEntryType_pskel::
  UDIEntryType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    UDIEntryType_impl_ (0),
    value_parser_ (0)
  {
  }

  UDIEntryType_pskel::
  UDIEntryType_pskel (UDIEntryType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    UDIEntryType_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Device_pskel
  //

  void Device_pskel::
  identifier ()
  {
    if (this->Device_impl_)
      this->Device_impl_->identifier ();
  }

  void Device_pskel::
  definition ()
  {
    if (this->Device_impl_)
      this->Device_impl_->definition ();
  }

  void Device_pskel::
  udiCarrier ()
  {
    if (this->Device_impl_)
      this->Device_impl_->udiCarrier ();
  }

  void Device_pskel::
  status ()
  {
    if (this->Device_impl_)
      this->Device_impl_->status ();
  }

  void Device_pskel::
  statusReason ()
  {
    if (this->Device_impl_)
      this->Device_impl_->statusReason ();
  }

  void Device_pskel::
  distinctIdentifier ()
  {
    if (this->Device_impl_)
      this->Device_impl_->distinctIdentifier ();
  }

  void Device_pskel::
  manufacturer ()
  {
    if (this->Device_impl_)
      this->Device_impl_->manufacturer ();
  }

  void Device_pskel::
  manufactureDate ()
  {
    if (this->Device_impl_)
      this->Device_impl_->manufactureDate ();
  }

  void Device_pskel::
  expirationDate ()
  {
    if (this->Device_impl_)
      this->Device_impl_->expirationDate ();
  }

  void Device_pskel::
  lotNumber ()
  {
    if (this->Device_impl_)
      this->Device_impl_->lotNumber ();
  }

  void Device_pskel::
  serialNumber ()
  {
    if (this->Device_impl_)
      this->Device_impl_->serialNumber ();
  }

  void Device_pskel::
  deviceName ()
  {
    if (this->Device_impl_)
      this->Device_impl_->deviceName ();
  }

  void Device_pskel::
  modelNumber ()
  {
    if (this->Device_impl_)
      this->Device_impl_->modelNumber ();
  }

  void Device_pskel::
  partNumber ()
  {
    if (this->Device_impl_)
      this->Device_impl_->partNumber ();
  }

  void Device_pskel::
  type ()
  {
    if (this->Device_impl_)
      this->Device_impl_->type ();
  }

  void Device_pskel::
  specialization ()
  {
    if (this->Device_impl_)
      this->Device_impl_->specialization ();
  }

  void Device_pskel::
  version ()
  {
    if (this->Device_impl_)
      this->Device_impl_->version ();
  }

  void Device_pskel::
  property ()
  {
    if (this->Device_impl_)
      this->Device_impl_->property ();
  }

  void Device_pskel::
  patient ()
  {
    if (this->Device_impl_)
      this->Device_impl_->patient ();
  }

  void Device_pskel::
  owner ()
  {
    if (this->Device_impl_)
      this->Device_impl_->owner ();
  }

  void Device_pskel::
  contact ()
  {
    if (this->Device_impl_)
      this->Device_impl_->contact ();
  }

  void Device_pskel::
  location ()
  {
    if (this->Device_impl_)
      this->Device_impl_->location ();
  }

  void Device_pskel::
  url ()
  {
    if (this->Device_impl_)
      this->Device_impl_->url ();
  }

  void Device_pskel::
  note ()
  {
    if (this->Device_impl_)
      this->Device_impl_->note ();
  }

  void Device_pskel::
  safety ()
  {
    if (this->Device_impl_)
      this->Device_impl_->safety ();
  }

  void Device_pskel::
  parent ()
  {
    if (this->Device_impl_)
      this->Device_impl_->parent ();
  }

  void Device_pskel::
  post_Device ()
  {
    if (this->Device_impl_)
      this->Device_impl_->post_Device ();
    else
      post_DomainResource ();
  }

  void Device_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->definition_parser_)
      this->definition_parser_->_reset ();

    if (this->udiCarrier_parser_)
      this->udiCarrier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusReason_parser_)
      this->statusReason_parser_->_reset ();

    if (this->distinctIdentifier_parser_)
      this->distinctIdentifier_parser_->_reset ();

    if (this->manufacturer_parser_)
      this->manufacturer_parser_->_reset ();

    if (this->manufactureDate_parser_)
      this->manufactureDate_parser_->_reset ();

    if (this->expirationDate_parser_)
      this->expirationDate_parser_->_reset ();

    if (this->lotNumber_parser_)
      this->lotNumber_parser_->_reset ();

    if (this->serialNumber_parser_)
      this->serialNumber_parser_->_reset ();

    if (this->deviceName_parser_)
      this->deviceName_parser_->_reset ();

    if (this->modelNumber_parser_)
      this->modelNumber_parser_->_reset ();

    if (this->partNumber_parser_)
      this->partNumber_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->specialization_parser_)
      this->specialization_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->property_parser_)
      this->property_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->owner_parser_)
      this->owner_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->safety_parser_)
      this->safety_parser_->_reset ();

    if (this->parent_parser_)
      this->parent_parser_->_reset ();

    this->resetting_ = false;
  }

  // Device_UdiCarrier_pskel
  //

  void Device_UdiCarrier_pskel::
  deviceIdentifier ()
  {
    if (this->Device_UdiCarrier_impl_)
      this->Device_UdiCarrier_impl_->deviceIdentifier ();
  }

  void Device_UdiCarrier_pskel::
  issuer ()
  {
    if (this->Device_UdiCarrier_impl_)
      this->Device_UdiCarrier_impl_->issuer ();
  }

  void Device_UdiCarrier_pskel::
  jurisdiction ()
  {
    if (this->Device_UdiCarrier_impl_)
      this->Device_UdiCarrier_impl_->jurisdiction ();
  }

  void Device_UdiCarrier_pskel::
  carrierAIDC ()
  {
    if (this->Device_UdiCarrier_impl_)
      this->Device_UdiCarrier_impl_->carrierAIDC ();
  }

  void Device_UdiCarrier_pskel::
  carrierHRF ()
  {
    if (this->Device_UdiCarrier_impl_)
      this->Device_UdiCarrier_impl_->carrierHRF ();
  }

  void Device_UdiCarrier_pskel::
  entryType ()
  {
    if (this->Device_UdiCarrier_impl_)
      this->Device_UdiCarrier_impl_->entryType ();
  }

  void Device_UdiCarrier_pskel::
  post_Device_UdiCarrier ()
  {
    if (this->Device_UdiCarrier_impl_)
      this->Device_UdiCarrier_impl_->post_Device_UdiCarrier ();
    else
      post_BackboneElement ();
  }

  void Device_UdiCarrier_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->deviceIdentifier_parser_)
      this->deviceIdentifier_parser_->_reset ();

    if (this->issuer_parser_)
      this->issuer_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->carrierAIDC_parser_)
      this->carrierAIDC_parser_->_reset ();

    if (this->carrierHRF_parser_)
      this->carrierHRF_parser_->_reset ();

    if (this->entryType_parser_)
      this->entryType_parser_->_reset ();

    this->resetting_ = false;
  }

  // Device_DeviceName_pskel
  //

  void Device_DeviceName_pskel::
  name ()
  {
    if (this->Device_DeviceName_impl_)
      this->Device_DeviceName_impl_->name ();
  }

  void Device_DeviceName_pskel::
  type ()
  {
    if (this->Device_DeviceName_impl_)
      this->Device_DeviceName_impl_->type ();
  }

  void Device_DeviceName_pskel::
  post_Device_DeviceName ()
  {
    if (this->Device_DeviceName_impl_)
      this->Device_DeviceName_impl_->post_Device_DeviceName ();
    else
      post_BackboneElement ();
  }

  void Device_DeviceName_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = false;
  }

  // Device_Specialization_pskel
  //

  void Device_Specialization_pskel::
  systemType ()
  {
    if (this->Device_Specialization_impl_)
      this->Device_Specialization_impl_->systemType ();
  }

  void Device_Specialization_pskel::
  version ()
  {
    if (this->Device_Specialization_impl_)
      this->Device_Specialization_impl_->version ();
  }

  void Device_Specialization_pskel::
  post_Device_Specialization ()
  {
    if (this->Device_Specialization_impl_)
      this->Device_Specialization_impl_->post_Device_Specialization ();
    else
      post_BackboneElement ();
  }

  void Device_Specialization_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->systemType_parser_)
      this->systemType_parser_->_reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    this->resetting_ = false;
  }

  // Device_Version_pskel
  //

  void Device_Version_pskel::
  type ()
  {
    if (this->Device_Version_impl_)
      this->Device_Version_impl_->type ();
  }

  void Device_Version_pskel::
  component ()
  {
    if (this->Device_Version_impl_)
      this->Device_Version_impl_->component ();
  }

  void Device_Version_pskel::
  value ()
  {
    if (this->Device_Version_impl_)
      this->Device_Version_impl_->value ();
  }

  void Device_Version_pskel::
  post_Device_Version ()
  {
    if (this->Device_Version_impl_)
      this->Device_Version_impl_->post_Device_Version ();
    else
      post_BackboneElement ();
  }

  void Device_Version_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->component_parser_)
      this->component_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    this->resetting_ = false;
  }

  // Device_Property_pskel
  //

  void Device_Property_pskel::
  type ()
  {
    if (this->Device_Property_impl_)
      this->Device_Property_impl_->type ();
  }

  void Device_Property_pskel::
  valueQuantity ()
  {
    if (this->Device_Property_impl_)
      this->Device_Property_impl_->valueQuantity ();
  }

  void Device_Property_pskel::
  valueCode ()
  {
    if (this->Device_Property_impl_)
      this->Device_Property_impl_->valueCode ();
  }

  void Device_Property_pskel::
  post_Device_Property ()
  {
    if (this->Device_Property_impl_)
      this->Device_Property_impl_->post_Device_Property ();
    else
      post_BackboneElement ();
  }

  void Device_Property_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueCode_parser_)
      this->valueCode_parser_->_reset ();

    this->resetting_ = false;
  }

  // FHIRDeviceStatus_list_pskel
  //

  void FHIRDeviceStatus_list_pskel::
  post_FHIRDeviceStatus_list ()
  {
    if (this->FHIRDeviceStatus_list_impl_)
      this->FHIRDeviceStatus_list_impl_->post_FHIRDeviceStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const FHIRDeviceStatus_list_pskel::_xsde_FHIRDeviceStatus_list_pskel_enums_[4UL] = 
  {
    "active",
    "entered-in-error",
    "inactive",
    "unknown"
  };

  // FHIRDeviceStatus_pskel
  //

  void FHIRDeviceStatus_pskel::
  value ()
  {
    if (this->FHIRDeviceStatus_impl_)
      this->FHIRDeviceStatus_impl_->value ();
  }

  void FHIRDeviceStatus_pskel::
  post_FHIRDeviceStatus ()
  {
    if (this->FHIRDeviceStatus_impl_)
      this->FHIRDeviceStatus_impl_->post_FHIRDeviceStatus ();
    else
      post_Element ();
  }

  void FHIRDeviceStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // DeviceNameType_list_pskel
  //

  void DeviceNameType_list_pskel::
  post_DeviceNameType_list ()
  {
    if (this->DeviceNameType_list_impl_)
      this->DeviceNameType_list_impl_->post_DeviceNameType_list ();
    else
      post_code_primitive ();
  }

  const char* const DeviceNameType_list_pskel::_xsde_DeviceNameType_list_pskel_enums_[6UL] = 
  {
    "manufacturer-name",
    "model-name",
    "other",
    "patient-reported-name",
    "udi-label-name",
    "user-friendly-name"
  };

  // DeviceNameType_pskel
  //

  void DeviceNameType_pskel::
  value ()
  {
    if (this->DeviceNameType_impl_)
      this->DeviceNameType_impl_->value ();
  }

  void DeviceNameType_pskel::
  post_DeviceNameType ()
  {
    if (this->DeviceNameType_impl_)
      this->DeviceNameType_impl_->post_DeviceNameType ();
    else
      post_Element ();
  }

  void DeviceNameType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // UDIEntryType_list_pskel
  //

  void UDIEntryType_list_pskel::
  post_UDIEntryType_list ()
  {
    if (this->UDIEntryType_list_impl_)
      this->UDIEntryType_list_impl_->post_UDIEntryType_list ();
    else
      post_code_primitive ();
  }

  const char* const UDIEntryType_list_pskel::_xsde_UDIEntryType_list_pskel_enums_[6UL] = 
  {
    "barcode",
    "card",
    "manual",
    "rfid",
    "self-reported",
    "unknown"
  };

  // UDIEntryType_pskel
  //

  void UDIEntryType_pskel::
  value ()
  {
    if (this->UDIEntryType_impl_)
      this->UDIEntryType_impl_->value ();
  }

  void UDIEntryType_pskel::
  post_UDIEntryType ()
  {
    if (this->UDIEntryType_impl_)
      this->UDIEntryType_impl_->post_UDIEntryType ();
    else
      post_Element ();
  }

  void UDIEntryType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Device_pskel.
  //
  bool Device_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "definition" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "udiCarrier" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "statusReason" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "distinctIdentifier" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "manufacturer" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "manufactureDate" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "expirationDate" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "lotNumber" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "serialNumber" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "deviceName" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "modelNumber" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;
        else if (n == "partNumber" &&
                 ns == "http://hl7.org/fhir")
          s = 13UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 14UL;
        else if (n == "specialization" &&
                 ns == "http://hl7.org/fhir")
          s = 15UL;
        else if (n == "version" &&
                 ns == "http://hl7.org/fhir")
          s = 16UL;
        else if (n == "property" &&
                 ns == "http://hl7.org/fhir")
          s = 17UL;
        else if (n == "patient" &&
                 ns == "http://hl7.org/fhir")
          s = 18UL;
        else if (n == "owner" &&
                 ns == "http://hl7.org/fhir")
          s = 19UL;
        else if (n == "contact" &&
                 ns == "http://hl7.org/fhir")
          s = 20UL;
        else if (n == "location" &&
                 ns == "http://hl7.org/fhir")
          s = 21UL;
        else if (n == "url" &&
                 ns == "http://hl7.org/fhir")
          s = 22UL;
        else if (n == "note" &&
                 ns == "http://hl7.org/fhir")
          s = 23UL;
        else if (n == "safety" &&
                 ns == "http://hl7.org/fhir")
          s = 24UL;
        else if (n == "parent" &&
                 ns == "http://hl7.org/fhir")
          s = 25UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Device_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Device_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Device_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Device_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Device_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "definition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definition_parser_)
            {
              this->definition_parser_->pre ();
              ctx.nested_parser (this->definition_parser_);
            }
          }
          else
          {
            if (this->definition_parser_ != 0)
            {
              this->definition_parser_->post_Reference ();
              this->definition ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "udiCarrier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->udiCarrier_parser_)
            {
              this->udiCarrier_parser_->pre ();
              ctx.nested_parser (this->udiCarrier_parser_);
            }
          }
          else
          {
            if (this->udiCarrier_parser_ != 0)
            {
              this->udiCarrier_parser_->post_Device_UdiCarrier ();
              this->udiCarrier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_FHIRDeviceStatus ();
              this->status ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "statusReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusReason_parser_)
            {
              this->statusReason_parser_->pre ();
              ctx.nested_parser (this->statusReason_parser_);
            }
          }
          else
          {
            if (this->statusReason_parser_ != 0)
            {
              this->statusReason_parser_->post_CodeableConcept ();
              this->statusReason ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "distinctIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->distinctIdentifier_parser_)
            {
              this->distinctIdentifier_parser_->pre ();
              ctx.nested_parser (this->distinctIdentifier_parser_);
            }
          }
          else
          {
            if (this->distinctIdentifier_parser_ != 0)
            {
              this->distinctIdentifier_parser_->post_string ();
              this->distinctIdentifier ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "manufacturer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manufacturer_parser_)
            {
              this->manufacturer_parser_->pre ();
              ctx.nested_parser (this->manufacturer_parser_);
            }
          }
          else
          {
            if (this->manufacturer_parser_ != 0)
            {
              this->manufacturer_parser_->post_string ();
              this->manufacturer ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "manufactureDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->manufactureDate_parser_)
            {
              this->manufactureDate_parser_->pre ();
              ctx.nested_parser (this->manufactureDate_parser_);
            }
          }
          else
          {
            if (this->manufactureDate_parser_ != 0)
            {
              this->manufactureDate_parser_->post_dateTime ();
              this->manufactureDate ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "expirationDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->expirationDate_parser_)
            {
              this->expirationDate_parser_->pre ();
              ctx.nested_parser (this->expirationDate_parser_);
            }
          }
          else
          {
            if (this->expirationDate_parser_ != 0)
            {
              this->expirationDate_parser_->post_dateTime ();
              this->expirationDate ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "lotNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->lotNumber_parser_)
            {
              this->lotNumber_parser_->pre ();
              ctx.nested_parser (this->lotNumber_parser_);
            }
          }
          else
          {
            if (this->lotNumber_parser_ != 0)
            {
              this->lotNumber_parser_->post_string ();
              this->lotNumber ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "serialNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->serialNumber_parser_)
            {
              this->serialNumber_parser_->pre ();
              ctx.nested_parser (this->serialNumber_parser_);
            }
          }
          else
          {
            if (this->serialNumber_parser_ != 0)
            {
              this->serialNumber_parser_->post_string ();
              this->serialNumber ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "deviceName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deviceName_parser_)
            {
              this->deviceName_parser_->pre ();
              ctx.nested_parser (this->deviceName_parser_);
            }
          }
          else
          {
            if (this->deviceName_parser_ != 0)
            {
              this->deviceName_parser_->post_Device_DeviceName ();
              this->deviceName ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "modelNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modelNumber_parser_)
            {
              this->modelNumber_parser_->pre ();
              ctx.nested_parser (this->modelNumber_parser_);
            }
          }
          else
          {
            if (this->modelNumber_parser_ != 0)
            {
              this->modelNumber_parser_->post_string ();
              this->modelNumber ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "partNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partNumber_parser_)
            {
              this->partNumber_parser_->pre ();
              ctx.nested_parser (this->partNumber_parser_);
            }
          }
          else
          {
            if (this->partNumber_parser_ != 0)
            {
              this->partNumber_parser_->post_string ();
              this->partNumber ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "specialization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specialization_parser_)
            {
              this->specialization_parser_->pre ();
              ctx.nested_parser (this->specialization_parser_);
            }
          }
          else
          {
            if (this->specialization_parser_ != 0)
            {
              this->specialization_parser_->post_Device_Specialization ();
              this->specialization ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_Device_Version ();
              this->version ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "property" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->property_parser_)
            {
              this->property_parser_->pre ();
              ctx.nested_parser (this->property_parser_);
            }
          }
          else
          {
            if (this->property_parser_ != 0)
            {
              this->property_parser_->post_Device_Property ();
              this->property ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "owner" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->owner_parser_)
            {
              this->owner_parser_->pre ();
              ctx.nested_parser (this->owner_parser_);
            }
          }
          else
          {
            if (this->owner_parser_ != 0)
            {
              this->owner_parser_->post_Reference ();
              this->owner ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactPoint ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "url" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->url_parser_)
            {
              this->url_parser_->pre ();
              ctx.nested_parser (this->url_parser_);
            }
          }
          else
          {
            if (this->url_parser_ != 0)
            {
              this->url_parser_->post_uri ();
              this->url ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "safety" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->safety_parser_)
            {
              this->safety_parser_->pre ();
              ctx.nested_parser (this->safety_parser_);
            }
          }
          else
          {
            if (this->safety_parser_ != 0)
            {
              this->safety_parser_->post_CodeableConcept ();
              this->safety ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "parent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->parent_parser_)
            {
              this->parent_parser_->pre ();
              ctx.nested_parser (this->parent_parser_);
            }
          }
          else
          {
            if (this->parent_parser_ != 0)
            {
              this->parent_parser_->post_Reference ();
              this->parent ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Device_UdiCarrier_pskel.
  //
  bool Device_UdiCarrier_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "deviceIdentifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "issuer" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "jurisdiction" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "carrierAIDC" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "carrierHRF" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "entryType" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Device_UdiCarrier_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Device_UdiCarrier_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Device_UdiCarrier_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Device_UdiCarrier_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Device_UdiCarrier_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "deviceIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->deviceIdentifier_parser_)
            {
              this->deviceIdentifier_parser_->pre ();
              ctx.nested_parser (this->deviceIdentifier_parser_);
            }
          }
          else
          {
            if (this->deviceIdentifier_parser_ != 0)
            {
              this->deviceIdentifier_parser_->post_string ();
              this->deviceIdentifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "issuer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->issuer_parser_)
            {
              this->issuer_parser_->pre ();
              ctx.nested_parser (this->issuer_parser_);
            }
          }
          else
          {
            if (this->issuer_parser_ != 0)
            {
              this->issuer_parser_->post_uri ();
              this->issuer ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_uri ();
              this->jurisdiction ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "carrierAIDC" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->carrierAIDC_parser_)
            {
              this->carrierAIDC_parser_->pre ();
              ctx.nested_parser (this->carrierAIDC_parser_);
            }
          }
          else
          {
            if (this->carrierAIDC_parser_ != 0)
            {
              this->carrierAIDC_parser_->post_base64Binary ();
              this->carrierAIDC ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "carrierHRF" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->carrierHRF_parser_)
            {
              this->carrierHRF_parser_->pre ();
              ctx.nested_parser (this->carrierHRF_parser_);
            }
          }
          else
          {
            if (this->carrierHRF_parser_ != 0)
            {
              this->carrierHRF_parser_->post_string ();
              this->carrierHRF ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "entryType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->entryType_parser_)
            {
              this->entryType_parser_->pre ();
              ctx.nested_parser (this->entryType_parser_);
            }
          }
          else
          {
            if (this->entryType_parser_ != 0)
            {
              this->entryType_parser_->post_UDIEntryType ();
              this->entryType ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Device_DeviceName_pskel.
  //
  bool Device_DeviceName_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Device_DeviceName_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Device_DeviceName_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Device_DeviceName_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Device_DeviceName_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Device_DeviceName_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_DeviceNameType ();
              this->type ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Device_Specialization_pskel.
  //
  bool Device_Specialization_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "systemType" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Device_Specialization_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Device_Specialization_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Device_Specialization_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Device_Specialization_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Device_Specialization_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "systemType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->systemType_parser_)
            {
              this->systemType_parser_->pre ();
              ctx.nested_parser (this->systemType_parser_);
            }
          }
          else
          {
            if (this->systemType_parser_ != 0)
            {
              this->systemType_parser_->post_CodeableConcept ();
              this->systemType ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "version" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->version_parser_)
            {
              this->version_parser_->pre ();
              ctx.nested_parser (this->version_parser_);
            }
          }
          else
          {
            if (this->version_parser_ != 0)
            {
              this->version_parser_->post_string ();
              this->version ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Device_Version_pskel.
  //
  bool Device_Version_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "component" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "value" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Device_Version_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Device_Version_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Device_Version_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Device_Version_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Device_Version_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "component" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->component_parser_)
            {
              this->component_parser_->pre ();
              ctx.nested_parser (this->component_parser_);
            }
          }
          else
          {
            if (this->component_parser_ != 0)
            {
              this->component_parser_->post_Identifier ();
              this->component ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_string ();
              this->value ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Device_Property_pskel.
  //
  bool Device_Property_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Device_Property_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Device_Property_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Device_Property_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Device_Property_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Device_Property_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCode_parser_)
            {
              this->valueCode_parser_->pre ();
              ctx.nested_parser (this->valueCode_parser_);
            }
          }
          else
          {
            if (this->valueCode_parser_ != 0)
            {
              this->valueCode_parser_->post_CodeableConcept ();
              this->valueCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for FHIRDeviceStatus_pskel.
  //
  bool FHIRDeviceStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_FHIRDeviceStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for DeviceNameType_pskel.
  //
  bool DeviceNameType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_DeviceNameType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for UDIEntryType_pskel.
  //
  bool UDIEntryType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_UDIEntryType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

