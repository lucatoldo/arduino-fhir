// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "explanationofbenefit-pskel.hxx"

namespace fhir
{
  // ExplanationOfBenefit_pskel
  //

  void ExplanationOfBenefit_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  status_parser (::fhir::ExplanationOfBenefitStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  subType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subType_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  use_parser (::fhir::Use_pskel& p)
  {
    this->use_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  billablePeriod_parser (::fhir::Period_pskel& p)
  {
    this->billablePeriod_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  created_parser (::fhir::dateTime_pskel& p)
  {
    this->created_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  enterer_parser (::fhir::Reference_pskel& p)
  {
    this->enterer_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  insurer_parser (::fhir::Reference_pskel& p)
  {
    this->insurer_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  provider_parser (::fhir::Reference_pskel& p)
  {
    this->provider_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  priority_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  fundsReserveRequested_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->fundsReserveRequested_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  fundsReserve_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->fundsReserve_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  related_parser (::fhir::ExplanationOfBenefit_Related_pskel& p)
  {
    this->related_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  prescription_parser (::fhir::Reference_pskel& p)
  {
    this->prescription_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  originalPrescription_parser (::fhir::Reference_pskel& p)
  {
    this->originalPrescription_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  payee_parser (::fhir::ExplanationOfBenefit_Payee_pskel& p)
  {
    this->payee_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  referral_parser (::fhir::Reference_pskel& p)
  {
    this->referral_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  facility_parser (::fhir::Reference_pskel& p)
  {
    this->facility_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  claim_parser (::fhir::Reference_pskel& p)
  {
    this->claim_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  claimResponse_parser (::fhir::Reference_pskel& p)
  {
    this->claimResponse_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  outcome_parser (::fhir::ClaimProcessingCodes_pskel& p)
  {
    this->outcome_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  disposition_parser (::fhir::string_pskel& p)
  {
    this->disposition_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  preAuthRef_parser (::fhir::string_pskel& p)
  {
    this->preAuthRef_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  preAuthRefPeriod_parser (::fhir::Period_pskel& p)
  {
    this->preAuthRefPeriod_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  careTeam_parser (::fhir::ExplanationOfBenefit_CareTeam_pskel& p)
  {
    this->careTeam_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  supportingInfo_parser (::fhir::ExplanationOfBenefit_SupportingInfo_pskel& p)
  {
    this->supportingInfo_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  diagnosis_parser (::fhir::ExplanationOfBenefit_Diagnosis_pskel& p)
  {
    this->diagnosis_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  procedure_parser (::fhir::ExplanationOfBenefit_Procedure_pskel& p)
  {
    this->procedure_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  precedence_parser (::fhir::positiveInt_pskel& p)
  {
    this->precedence_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  insurance_parser (::fhir::ExplanationOfBenefit_Insurance_pskel& p)
  {
    this->insurance_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  accident_parser (::fhir::ExplanationOfBenefit_Accident_pskel& p)
  {
    this->accident_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  item_parser (::fhir::ExplanationOfBenefit_Item_pskel& p)
  {
    this->item_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  addItem_parser (::fhir::ExplanationOfBenefit_AddItem_pskel& p)
  {
    this->addItem_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  total_parser (::fhir::ExplanationOfBenefit_Total_pskel& p)
  {
    this->total_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  payment_parser (::fhir::ExplanationOfBenefit_Payment_pskel& p)
  {
    this->payment_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  formCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->formCode_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  form_parser (::fhir::Attachment_pskel& p)
  {
    this->form_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  processNote_parser (::fhir::ExplanationOfBenefit_ProcessNote_pskel& p)
  {
    this->processNote_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  benefitPeriod_parser (::fhir::Period_pskel& p)
  {
    this->benefitPeriod_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  benefitBalance_parser (::fhir::ExplanationOfBenefit_BenefitBalance_pskel& p)
  {
    this->benefitBalance_parser_ = &p;
  }

  void ExplanationOfBenefit_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::ExplanationOfBenefitStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& subType,
           ::fhir::Use_pskel& use,
           ::fhir::Reference_pskel& patient,
           ::fhir::Period_pskel& billablePeriod,
           ::fhir::dateTime_pskel& created,
           ::fhir::Reference_pskel& enterer,
           ::fhir::Reference_pskel& insurer,
           ::fhir::Reference_pskel& provider,
           ::fhir::CodeableConcept_pskel& priority,
           ::fhir::CodeableConcept_pskel& fundsReserveRequested,
           ::fhir::CodeableConcept_pskel& fundsReserve,
           ::fhir::ExplanationOfBenefit_Related_pskel& related,
           ::fhir::Reference_pskel& prescription,
           ::fhir::Reference_pskel& originalPrescription,
           ::fhir::ExplanationOfBenefit_Payee_pskel& payee,
           ::fhir::Reference_pskel& referral,
           ::fhir::Reference_pskel& facility,
           ::fhir::Reference_pskel& claim,
           ::fhir::Reference_pskel& claimResponse,
           ::fhir::ClaimProcessingCodes_pskel& outcome,
           ::fhir::string_pskel& disposition,
           ::fhir::string_pskel& preAuthRef,
           ::fhir::Period_pskel& preAuthRefPeriod,
           ::fhir::ExplanationOfBenefit_CareTeam_pskel& careTeam,
           ::fhir::ExplanationOfBenefit_SupportingInfo_pskel& supportingInfo,
           ::fhir::ExplanationOfBenefit_Diagnosis_pskel& diagnosis,
           ::fhir::ExplanationOfBenefit_Procedure_pskel& procedure,
           ::fhir::positiveInt_pskel& precedence,
           ::fhir::ExplanationOfBenefit_Insurance_pskel& insurance,
           ::fhir::ExplanationOfBenefit_Accident_pskel& accident,
           ::fhir::ExplanationOfBenefit_Item_pskel& item,
           ::fhir::ExplanationOfBenefit_AddItem_pskel& addItem,
           ::fhir::ExplanationOfBenefit_Adjudication_pskel& adjudication,
           ::fhir::ExplanationOfBenefit_Total_pskel& total,
           ::fhir::ExplanationOfBenefit_Payment_pskel& payment,
           ::fhir::CodeableConcept_pskel& formCode,
           ::fhir::Attachment_pskel& form,
           ::fhir::ExplanationOfBenefit_ProcessNote_pskel& processNote,
           ::fhir::Period_pskel& benefitPeriod,
           ::fhir::ExplanationOfBenefit_BenefitBalance_pskel& benefitBalance)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->type_parser_ = &type;
    this->subType_parser_ = &subType;
    this->use_parser_ = &use;
    this->patient_parser_ = &patient;
    this->billablePeriod_parser_ = &billablePeriod;
    this->created_parser_ = &created;
    this->enterer_parser_ = &enterer;
    this->insurer_parser_ = &insurer;
    this->provider_parser_ = &provider;
    this->priority_parser_ = &priority;
    this->fundsReserveRequested_parser_ = &fundsReserveRequested;
    this->fundsReserve_parser_ = &fundsReserve;
    this->related_parser_ = &related;
    this->prescription_parser_ = &prescription;
    this->originalPrescription_parser_ = &originalPrescription;
    this->payee_parser_ = &payee;
    this->referral_parser_ = &referral;
    this->facility_parser_ = &facility;
    this->claim_parser_ = &claim;
    this->claimResponse_parser_ = &claimResponse;
    this->outcome_parser_ = &outcome;
    this->disposition_parser_ = &disposition;
    this->preAuthRef_parser_ = &preAuthRef;
    this->preAuthRefPeriod_parser_ = &preAuthRefPeriod;
    this->careTeam_parser_ = &careTeam;
    this->supportingInfo_parser_ = &supportingInfo;
    this->diagnosis_parser_ = &diagnosis;
    this->procedure_parser_ = &procedure;
    this->precedence_parser_ = &precedence;
    this->insurance_parser_ = &insurance;
    this->accident_parser_ = &accident;
    this->item_parser_ = &item;
    this->addItem_parser_ = &addItem;
    this->adjudication_parser_ = &adjudication;
    this->total_parser_ = &total;
    this->payment_parser_ = &payment;
    this->formCode_parser_ = &formCode;
    this->form_parser_ = &form;
    this->processNote_parser_ = &processNote;
    this->benefitPeriod_parser_ = &benefitPeriod;
    this->benefitBalance_parser_ = &benefitBalance;
  }

  ExplanationOfBenefit_pskel::
  ExplanationOfBenefit_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    ExplanationOfBenefit_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    subType_parser_ (0),
    use_parser_ (0),
    patient_parser_ (0),
    billablePeriod_parser_ (0),
    created_parser_ (0),
    enterer_parser_ (0),
    insurer_parser_ (0),
    provider_parser_ (0),
    priority_parser_ (0),
    fundsReserveRequested_parser_ (0),
    fundsReserve_parser_ (0),
    related_parser_ (0),
    prescription_parser_ (0),
    originalPrescription_parser_ (0),
    payee_parser_ (0),
    referral_parser_ (0),
    facility_parser_ (0),
    claim_parser_ (0),
    claimResponse_parser_ (0),
    outcome_parser_ (0),
    disposition_parser_ (0),
    preAuthRef_parser_ (0),
    preAuthRefPeriod_parser_ (0),
    careTeam_parser_ (0),
    supportingInfo_parser_ (0),
    diagnosis_parser_ (0),
    procedure_parser_ (0),
    precedence_parser_ (0),
    insurance_parser_ (0),
    accident_parser_ (0),
    item_parser_ (0),
    addItem_parser_ (0),
    adjudication_parser_ (0),
    total_parser_ (0),
    payment_parser_ (0),
    formCode_parser_ (0),
    form_parser_ (0),
    processNote_parser_ (0),
    benefitPeriod_parser_ (0),
    benefitBalance_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_pskel::
  ExplanationOfBenefit_pskel (ExplanationOfBenefit_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    ExplanationOfBenefit_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    type_parser_ (0),
    subType_parser_ (0),
    use_parser_ (0),
    patient_parser_ (0),
    billablePeriod_parser_ (0),
    created_parser_ (0),
    enterer_parser_ (0),
    insurer_parser_ (0),
    provider_parser_ (0),
    priority_parser_ (0),
    fundsReserveRequested_parser_ (0),
    fundsReserve_parser_ (0),
    related_parser_ (0),
    prescription_parser_ (0),
    originalPrescription_parser_ (0),
    payee_parser_ (0),
    referral_parser_ (0),
    facility_parser_ (0),
    claim_parser_ (0),
    claimResponse_parser_ (0),
    outcome_parser_ (0),
    disposition_parser_ (0),
    preAuthRef_parser_ (0),
    preAuthRefPeriod_parser_ (0),
    careTeam_parser_ (0),
    supportingInfo_parser_ (0),
    diagnosis_parser_ (0),
    procedure_parser_ (0),
    precedence_parser_ (0),
    insurance_parser_ (0),
    accident_parser_ (0),
    item_parser_ (0),
    addItem_parser_ (0),
    adjudication_parser_ (0),
    total_parser_ (0),
    payment_parser_ (0),
    formCode_parser_ (0),
    form_parser_ (0),
    processNote_parser_ (0),
    benefitPeriod_parser_ (0),
    benefitBalance_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Related_pskel
  //

  void ExplanationOfBenefit_Related_pskel::
  claim_parser (::fhir::Reference_pskel& p)
  {
    this->claim_parser_ = &p;
  }

  void ExplanationOfBenefit_Related_pskel::
  relationship_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->relationship_parser_ = &p;
  }

  void ExplanationOfBenefit_Related_pskel::
  reference_parser (::fhir::Identifier_pskel& p)
  {
    this->reference_parser_ = &p;
  }

  void ExplanationOfBenefit_Related_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& claim,
           ::fhir::CodeableConcept_pskel& relationship,
           ::fhir::Identifier_pskel& reference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->claim_parser_ = &claim;
    this->relationship_parser_ = &relationship;
    this->reference_parser_ = &reference;
  }

  ExplanationOfBenefit_Related_pskel::
  ExplanationOfBenefit_Related_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Related_impl_ (0),
    claim_parser_ (0),
    relationship_parser_ (0),
    reference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Related_pskel::
  ExplanationOfBenefit_Related_pskel (ExplanationOfBenefit_Related_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Related_impl_ (impl),
    claim_parser_ (0),
    relationship_parser_ (0),
    reference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Payee_pskel
  //

  void ExplanationOfBenefit_Payee_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ExplanationOfBenefit_Payee_pskel::
  party_parser (::fhir::Reference_pskel& p)
  {
    this->party_parser_ = &p;
  }

  void ExplanationOfBenefit_Payee_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Reference_pskel& party)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->party_parser_ = &party;
  }

  ExplanationOfBenefit_Payee_pskel::
  ExplanationOfBenefit_Payee_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Payee_impl_ (0),
    type_parser_ (0),
    party_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Payee_pskel::
  ExplanationOfBenefit_Payee_pskel (ExplanationOfBenefit_Payee_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Payee_impl_ (impl),
    type_parser_ (0),
    party_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_CareTeam_pskel
  //

  void ExplanationOfBenefit_CareTeam_pskel::
  sequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->sequence_parser_ = &p;
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  provider_parser (::fhir::Reference_pskel& p)
  {
    this->provider_parser_ = &p;
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  responsible_parser (::fhir::boolean_pskel& p)
  {
    this->responsible_parser_ = &p;
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  role_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->role_parser_ = &p;
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  qualification_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->qualification_parser_ = &p;
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& sequence,
           ::fhir::Reference_pskel& provider,
           ::fhir::boolean_pskel& responsible,
           ::fhir::CodeableConcept_pskel& role,
           ::fhir::CodeableConcept_pskel& qualification)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sequence_parser_ = &sequence;
    this->provider_parser_ = &provider;
    this->responsible_parser_ = &responsible;
    this->role_parser_ = &role;
    this->qualification_parser_ = &qualification;
  }

  ExplanationOfBenefit_CareTeam_pskel::
  ExplanationOfBenefit_CareTeam_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_CareTeam_impl_ (0),
    sequence_parser_ (0),
    provider_parser_ (0),
    responsible_parser_ (0),
    role_parser_ (0),
    qualification_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_CareTeam_pskel::
  ExplanationOfBenefit_CareTeam_pskel (ExplanationOfBenefit_CareTeam_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_CareTeam_impl_ (impl),
    sequence_parser_ (0),
    provider_parser_ (0),
    responsible_parser_ (0),
    role_parser_ (0),
    qualification_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_SupportingInfo_pskel
  //

  void ExplanationOfBenefit_SupportingInfo_pskel::
  sequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->sequence_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  code_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  timingDate_parser (::fhir::date_pskel& p)
  {
    this->timingDate_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  timingPeriod_parser (::fhir::Period_pskel& p)
  {
    this->timingPeriod_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  valueAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->valueAttachment_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  valueReference_parser (::fhir::Reference_pskel& p)
  {
    this->valueReference_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  reason_parser (::fhir::Coding_pskel& p)
  {
    this->reason_parser_ = &p;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& sequence,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& code,
           ::fhir::date_pskel& timingDate,
           ::fhir::Period_pskel& timingPeriod,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::string_pskel& valueString,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::Attachment_pskel& valueAttachment,
           ::fhir::Reference_pskel& valueReference,
           ::fhir::Coding_pskel& reason)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sequence_parser_ = &sequence;
    this->category_parser_ = &category;
    this->code_parser_ = &code;
    this->timingDate_parser_ = &timingDate;
    this->timingPeriod_parser_ = &timingPeriod;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueString_parser_ = &valueString;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueAttachment_parser_ = &valueAttachment;
    this->valueReference_parser_ = &valueReference;
    this->reason_parser_ = &reason;
  }

  ExplanationOfBenefit_SupportingInfo_pskel::
  ExplanationOfBenefit_SupportingInfo_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_SupportingInfo_impl_ (0),
    sequence_parser_ (0),
    category_parser_ (0),
    code_parser_ (0),
    timingDate_parser_ (0),
    timingPeriod_parser_ (0),
    valueBoolean_parser_ (0),
    valueString_parser_ (0),
    valueQuantity_parser_ (0),
    valueAttachment_parser_ (0),
    valueReference_parser_ (0),
    reason_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_SupportingInfo_pskel::
  ExplanationOfBenefit_SupportingInfo_pskel (ExplanationOfBenefit_SupportingInfo_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_SupportingInfo_impl_ (impl),
    sequence_parser_ (0),
    category_parser_ (0),
    code_parser_ (0),
    timingDate_parser_ (0),
    timingPeriod_parser_ (0),
    valueBoolean_parser_ (0),
    valueString_parser_ (0),
    valueQuantity_parser_ (0),
    valueAttachment_parser_ (0),
    valueReference_parser_ (0),
    reason_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Diagnosis_pskel
  //

  void ExplanationOfBenefit_Diagnosis_pskel::
  sequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->sequence_parser_ = &p;
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  diagnosisCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->diagnosisCodeableConcept_parser_ = &p;
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  diagnosisReference_parser (::fhir::Reference_pskel& p)
  {
    this->diagnosisReference_parser_ = &p;
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  onAdmission_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->onAdmission_parser_ = &p;
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  packageCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->packageCode_parser_ = &p;
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& sequence,
           ::fhir::CodeableConcept_pskel& diagnosisCodeableConcept,
           ::fhir::Reference_pskel& diagnosisReference,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& onAdmission,
           ::fhir::CodeableConcept_pskel& packageCode)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sequence_parser_ = &sequence;
    this->diagnosisCodeableConcept_parser_ = &diagnosisCodeableConcept;
    this->diagnosisReference_parser_ = &diagnosisReference;
    this->type_parser_ = &type;
    this->onAdmission_parser_ = &onAdmission;
    this->packageCode_parser_ = &packageCode;
  }

  ExplanationOfBenefit_Diagnosis_pskel::
  ExplanationOfBenefit_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Diagnosis_impl_ (0),
    sequence_parser_ (0),
    diagnosisCodeableConcept_parser_ (0),
    diagnosisReference_parser_ (0),
    type_parser_ (0),
    onAdmission_parser_ (0),
    packageCode_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Diagnosis_pskel::
  ExplanationOfBenefit_Diagnosis_pskel (ExplanationOfBenefit_Diagnosis_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Diagnosis_impl_ (impl),
    sequence_parser_ (0),
    diagnosisCodeableConcept_parser_ (0),
    diagnosisReference_parser_ (0),
    type_parser_ (0),
    onAdmission_parser_ (0),
    packageCode_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Procedure_pskel
  //

  void ExplanationOfBenefit_Procedure_pskel::
  sequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->sequence_parser_ = &p;
  }

  void ExplanationOfBenefit_Procedure_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ExplanationOfBenefit_Procedure_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void ExplanationOfBenefit_Procedure_pskel::
  procedureCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->procedureCodeableConcept_parser_ = &p;
  }

  void ExplanationOfBenefit_Procedure_pskel::
  procedureReference_parser (::fhir::Reference_pskel& p)
  {
    this->procedureReference_parser_ = &p;
  }

  void ExplanationOfBenefit_Procedure_pskel::
  udi_parser (::fhir::Reference_pskel& p)
  {
    this->udi_parser_ = &p;
  }

  void ExplanationOfBenefit_Procedure_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& sequence,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::dateTime_pskel& date,
           ::fhir::CodeableConcept_pskel& procedureCodeableConcept,
           ::fhir::Reference_pskel& procedureReference,
           ::fhir::Reference_pskel& udi)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sequence_parser_ = &sequence;
    this->type_parser_ = &type;
    this->date_parser_ = &date;
    this->procedureCodeableConcept_parser_ = &procedureCodeableConcept;
    this->procedureReference_parser_ = &procedureReference;
    this->udi_parser_ = &udi;
  }

  ExplanationOfBenefit_Procedure_pskel::
  ExplanationOfBenefit_Procedure_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Procedure_impl_ (0),
    sequence_parser_ (0),
    type_parser_ (0),
    date_parser_ (0),
    procedureCodeableConcept_parser_ (0),
    procedureReference_parser_ (0),
    udi_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Procedure_pskel::
  ExplanationOfBenefit_Procedure_pskel (ExplanationOfBenefit_Procedure_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Procedure_impl_ (impl),
    sequence_parser_ (0),
    type_parser_ (0),
    date_parser_ (0),
    procedureCodeableConcept_parser_ (0),
    procedureReference_parser_ (0),
    udi_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Insurance_pskel
  //

  void ExplanationOfBenefit_Insurance_pskel::
  focal_parser (::fhir::boolean_pskel& p)
  {
    this->focal_parser_ = &p;
  }

  void ExplanationOfBenefit_Insurance_pskel::
  coverage_parser (::fhir::Reference_pskel& p)
  {
    this->coverage_parser_ = &p;
  }

  void ExplanationOfBenefit_Insurance_pskel::
  preAuthRef_parser (::fhir::string_pskel& p)
  {
    this->preAuthRef_parser_ = &p;
  }

  void ExplanationOfBenefit_Insurance_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& focal,
           ::fhir::Reference_pskel& coverage,
           ::fhir::string_pskel& preAuthRef)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->focal_parser_ = &focal;
    this->coverage_parser_ = &coverage;
    this->preAuthRef_parser_ = &preAuthRef;
  }

  ExplanationOfBenefit_Insurance_pskel::
  ExplanationOfBenefit_Insurance_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Insurance_impl_ (0),
    focal_parser_ (0),
    coverage_parser_ (0),
    preAuthRef_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Insurance_pskel::
  ExplanationOfBenefit_Insurance_pskel (ExplanationOfBenefit_Insurance_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Insurance_impl_ (impl),
    focal_parser_ (0),
    coverage_parser_ (0),
    preAuthRef_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Accident_pskel
  //

  void ExplanationOfBenefit_Accident_pskel::
  date_parser (::fhir::date_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void ExplanationOfBenefit_Accident_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ExplanationOfBenefit_Accident_pskel::
  locationAddress_parser (::fhir::Address_pskel& p)
  {
    this->locationAddress_parser_ = &p;
  }

  void ExplanationOfBenefit_Accident_pskel::
  locationReference_parser (::fhir::Reference_pskel& p)
  {
    this->locationReference_parser_ = &p;
  }

  void ExplanationOfBenefit_Accident_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::date_pskel& date,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Address_pskel& locationAddress,
           ::fhir::Reference_pskel& locationReference)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->date_parser_ = &date;
    this->type_parser_ = &type;
    this->locationAddress_parser_ = &locationAddress;
    this->locationReference_parser_ = &locationReference;
  }

  ExplanationOfBenefit_Accident_pskel::
  ExplanationOfBenefit_Accident_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Accident_impl_ (0),
    date_parser_ (0),
    type_parser_ (0),
    locationAddress_parser_ (0),
    locationReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Accident_pskel::
  ExplanationOfBenefit_Accident_pskel (ExplanationOfBenefit_Accident_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Accident_impl_ (impl),
    date_parser_ (0),
    type_parser_ (0),
    locationAddress_parser_ (0),
    locationReference_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Item_pskel
  //

  void ExplanationOfBenefit_Item_pskel::
  sequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->sequence_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  careTeamSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->careTeamSequence_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  diagnosisSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->diagnosisSequence_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  procedureSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->procedureSequence_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  informationSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->informationSequence_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  revenue_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->revenue_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  programCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->programCode_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  servicedDate_parser (::fhir::date_pskel& p)
  {
    this->servicedDate_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  servicedPeriod_parser (::fhir::Period_pskel& p)
  {
    this->servicedPeriod_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  locationCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->locationCodeableConcept_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  locationAddress_parser (::fhir::Address_pskel& p)
  {
    this->locationAddress_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  locationReference_parser (::fhir::Reference_pskel& p)
  {
    this->locationReference_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  net_parser (::fhir::Money_pskel& p)
  {
    this->net_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  udi_parser (::fhir::Reference_pskel& p)
  {
    this->udi_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  bodySite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->bodySite_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  subSite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subSite_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  detail_parser (::fhir::ExplanationOfBenefit_Detail_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void ExplanationOfBenefit_Item_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& sequence,
           ::fhir::positiveInt_pskel& careTeamSequence,
           ::fhir::positiveInt_pskel& diagnosisSequence,
           ::fhir::positiveInt_pskel& procedureSequence,
           ::fhir::positiveInt_pskel& informationSequence,
           ::fhir::CodeableConcept_pskel& revenue,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::CodeableConcept_pskel& programCode,
           ::fhir::date_pskel& servicedDate,
           ::fhir::Period_pskel& servicedPeriod,
           ::fhir::CodeableConcept_pskel& locationCodeableConcept,
           ::fhir::Address_pskel& locationAddress,
           ::fhir::Reference_pskel& locationReference,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::decimal_pskel& factor,
           ::fhir::Money_pskel& net,
           ::fhir::Reference_pskel& udi,
           ::fhir::CodeableConcept_pskel& bodySite,
           ::fhir::CodeableConcept_pskel& subSite,
           ::fhir::Reference_pskel& encounter,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ExplanationOfBenefit_Adjudication_pskel& adjudication,
           ::fhir::ExplanationOfBenefit_Detail_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sequence_parser_ = &sequence;
    this->careTeamSequence_parser_ = &careTeamSequence;
    this->diagnosisSequence_parser_ = &diagnosisSequence;
    this->procedureSequence_parser_ = &procedureSequence;
    this->informationSequence_parser_ = &informationSequence;
    this->revenue_parser_ = &revenue;
    this->category_parser_ = &category;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->programCode_parser_ = &programCode;
    this->servicedDate_parser_ = &servicedDate;
    this->servicedPeriod_parser_ = &servicedPeriod;
    this->locationCodeableConcept_parser_ = &locationCodeableConcept;
    this->locationAddress_parser_ = &locationAddress;
    this->locationReference_parser_ = &locationReference;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->factor_parser_ = &factor;
    this->net_parser_ = &net;
    this->udi_parser_ = &udi;
    this->bodySite_parser_ = &bodySite;
    this->subSite_parser_ = &subSite;
    this->encounter_parser_ = &encounter;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
    this->detail_parser_ = &detail;
  }

  ExplanationOfBenefit_Item_pskel::
  ExplanationOfBenefit_Item_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Item_impl_ (0),
    sequence_parser_ (0),
    careTeamSequence_parser_ (0),
    diagnosisSequence_parser_ (0),
    procedureSequence_parser_ (0),
    informationSequence_parser_ (0),
    revenue_parser_ (0),
    category_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    programCode_parser_ (0),
    servicedDate_parser_ (0),
    servicedPeriod_parser_ (0),
    locationCodeableConcept_parser_ (0),
    locationAddress_parser_ (0),
    locationReference_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    udi_parser_ (0),
    bodySite_parser_ (0),
    subSite_parser_ (0),
    encounter_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Item_pskel::
  ExplanationOfBenefit_Item_pskel (ExplanationOfBenefit_Item_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Item_impl_ (impl),
    sequence_parser_ (0),
    careTeamSequence_parser_ (0),
    diagnosisSequence_parser_ (0),
    procedureSequence_parser_ (0),
    informationSequence_parser_ (0),
    revenue_parser_ (0),
    category_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    programCode_parser_ (0),
    servicedDate_parser_ (0),
    servicedPeriod_parser_ (0),
    locationCodeableConcept_parser_ (0),
    locationAddress_parser_ (0),
    locationReference_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    udi_parser_ (0),
    bodySite_parser_ (0),
    subSite_parser_ (0),
    encounter_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Adjudication_pskel
  //

  void ExplanationOfBenefit_Adjudication_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  reason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reason_parser_ = &p;
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  amount_parser (::fhir::Money_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  value_parser (::fhir::decimal_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& reason,
           ::fhir::Money_pskel& amount,
           ::fhir::decimal_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->reason_parser_ = &reason;
    this->amount_parser_ = &amount;
    this->value_parser_ = &value;
  }

  ExplanationOfBenefit_Adjudication_pskel::
  ExplanationOfBenefit_Adjudication_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Adjudication_impl_ (0),
    category_parser_ (0),
    reason_parser_ (0),
    amount_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Adjudication_pskel::
  ExplanationOfBenefit_Adjudication_pskel (ExplanationOfBenefit_Adjudication_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Adjudication_impl_ (impl),
    category_parser_ (0),
    reason_parser_ (0),
    amount_parser_ (0),
    value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Detail_pskel
  //

  void ExplanationOfBenefit_Detail_pskel::
  sequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->sequence_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  revenue_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->revenue_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  programCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->programCode_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  net_parser (::fhir::Money_pskel& p)
  {
    this->net_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  udi_parser (::fhir::Reference_pskel& p)
  {
    this->udi_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  subDetail_parser (::fhir::ExplanationOfBenefit_SubDetail_pskel& p)
  {
    this->subDetail_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& sequence,
           ::fhir::CodeableConcept_pskel& revenue,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::CodeableConcept_pskel& programCode,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::decimal_pskel& factor,
           ::fhir::Money_pskel& net,
           ::fhir::Reference_pskel& udi,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ExplanationOfBenefit_Adjudication_pskel& adjudication,
           ::fhir::ExplanationOfBenefit_SubDetail_pskel& subDetail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sequence_parser_ = &sequence;
    this->revenue_parser_ = &revenue;
    this->category_parser_ = &category;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->programCode_parser_ = &programCode;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->factor_parser_ = &factor;
    this->net_parser_ = &net;
    this->udi_parser_ = &udi;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
    this->subDetail_parser_ = &subDetail;
  }

  ExplanationOfBenefit_Detail_pskel::
  ExplanationOfBenefit_Detail_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Detail_impl_ (0),
    sequence_parser_ (0),
    revenue_parser_ (0),
    category_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    programCode_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    udi_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    subDetail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Detail_pskel::
  ExplanationOfBenefit_Detail_pskel (ExplanationOfBenefit_Detail_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Detail_impl_ (impl),
    sequence_parser_ (0),
    revenue_parser_ (0),
    category_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    programCode_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    udi_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    subDetail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_SubDetail_pskel
  //

  void ExplanationOfBenefit_SubDetail_pskel::
  sequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->sequence_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  revenue_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->revenue_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  programCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->programCode_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  net_parser (::fhir::Money_pskel& p)
  {
    this->net_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  udi_parser (::fhir::Reference_pskel& p)
  {
    this->udi_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& sequence,
           ::fhir::CodeableConcept_pskel& revenue,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::CodeableConcept_pskel& programCode,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::decimal_pskel& factor,
           ::fhir::Money_pskel& net,
           ::fhir::Reference_pskel& udi,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ExplanationOfBenefit_Adjudication_pskel& adjudication)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->sequence_parser_ = &sequence;
    this->revenue_parser_ = &revenue;
    this->category_parser_ = &category;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->programCode_parser_ = &programCode;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->factor_parser_ = &factor;
    this->net_parser_ = &net;
    this->udi_parser_ = &udi;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
  }

  ExplanationOfBenefit_SubDetail_pskel::
  ExplanationOfBenefit_SubDetail_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_SubDetail_impl_ (0),
    sequence_parser_ (0),
    revenue_parser_ (0),
    category_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    programCode_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    udi_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_SubDetail_pskel::
  ExplanationOfBenefit_SubDetail_pskel (ExplanationOfBenefit_SubDetail_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_SubDetail_impl_ (impl),
    sequence_parser_ (0),
    revenue_parser_ (0),
    category_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    programCode_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    udi_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_AddItem_pskel
  //

  void ExplanationOfBenefit_AddItem_pskel::
  itemSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->itemSequence_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  detailSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->detailSequence_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  subDetailSequence_parser (::fhir::positiveInt_pskel& p)
  {
    this->subDetailSequence_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  provider_parser (::fhir::Reference_pskel& p)
  {
    this->provider_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  programCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->programCode_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  servicedDate_parser (::fhir::date_pskel& p)
  {
    this->servicedDate_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  servicedPeriod_parser (::fhir::Period_pskel& p)
  {
    this->servicedPeriod_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  locationCodeableConcept_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->locationCodeableConcept_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  locationAddress_parser (::fhir::Address_pskel& p)
  {
    this->locationAddress_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  locationReference_parser (::fhir::Reference_pskel& p)
  {
    this->locationReference_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  net_parser (::fhir::Money_pskel& p)
  {
    this->net_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  bodySite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->bodySite_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  subSite_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->subSite_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  detail_parser (::fhir::ExplanationOfBenefit_Detail1_pskel& p)
  {
    this->detail_parser_ = &p;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& itemSequence,
           ::fhir::positiveInt_pskel& detailSequence,
           ::fhir::positiveInt_pskel& subDetailSequence,
           ::fhir::Reference_pskel& provider,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::CodeableConcept_pskel& programCode,
           ::fhir::date_pskel& servicedDate,
           ::fhir::Period_pskel& servicedPeriod,
           ::fhir::CodeableConcept_pskel& locationCodeableConcept,
           ::fhir::Address_pskel& locationAddress,
           ::fhir::Reference_pskel& locationReference,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::decimal_pskel& factor,
           ::fhir::Money_pskel& net,
           ::fhir::CodeableConcept_pskel& bodySite,
           ::fhir::CodeableConcept_pskel& subSite,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ExplanationOfBenefit_Adjudication_pskel& adjudication,
           ::fhir::ExplanationOfBenefit_Detail1_pskel& detail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->itemSequence_parser_ = &itemSequence;
    this->detailSequence_parser_ = &detailSequence;
    this->subDetailSequence_parser_ = &subDetailSequence;
    this->provider_parser_ = &provider;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->programCode_parser_ = &programCode;
    this->servicedDate_parser_ = &servicedDate;
    this->servicedPeriod_parser_ = &servicedPeriod;
    this->locationCodeableConcept_parser_ = &locationCodeableConcept;
    this->locationAddress_parser_ = &locationAddress;
    this->locationReference_parser_ = &locationReference;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->factor_parser_ = &factor;
    this->net_parser_ = &net;
    this->bodySite_parser_ = &bodySite;
    this->subSite_parser_ = &subSite;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
    this->detail_parser_ = &detail;
  }

  ExplanationOfBenefit_AddItem_pskel::
  ExplanationOfBenefit_AddItem_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_AddItem_impl_ (0),
    itemSequence_parser_ (0),
    detailSequence_parser_ (0),
    subDetailSequence_parser_ (0),
    provider_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    programCode_parser_ (0),
    servicedDate_parser_ (0),
    servicedPeriod_parser_ (0),
    locationCodeableConcept_parser_ (0),
    locationAddress_parser_ (0),
    locationReference_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    bodySite_parser_ (0),
    subSite_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_AddItem_pskel::
  ExplanationOfBenefit_AddItem_pskel (ExplanationOfBenefit_AddItem_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_AddItem_impl_ (impl),
    itemSequence_parser_ (0),
    detailSequence_parser_ (0),
    subDetailSequence_parser_ (0),
    provider_parser_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    programCode_parser_ (0),
    servicedDate_parser_ (0),
    servicedPeriod_parser_ (0),
    locationCodeableConcept_parser_ (0),
    locationAddress_parser_ (0),
    locationReference_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    bodySite_parser_ (0),
    subSite_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    detail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Detail1_pskel
  //

  void ExplanationOfBenefit_Detail1_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail1_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail1_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail1_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail1_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail1_pskel::
  net_parser (::fhir::Money_pskel& p)
  {
    this->net_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail1_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail1_pskel::
  adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail1_pskel::
  subDetail_parser (::fhir::ExplanationOfBenefit_SubDetail1_pskel& p)
  {
    this->subDetail_parser_ = &p;
  }

  void ExplanationOfBenefit_Detail1_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::decimal_pskel& factor,
           ::fhir::Money_pskel& net,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ExplanationOfBenefit_Adjudication_pskel& adjudication,
           ::fhir::ExplanationOfBenefit_SubDetail1_pskel& subDetail)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->factor_parser_ = &factor;
    this->net_parser_ = &net;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
    this->subDetail_parser_ = &subDetail;
  }

  ExplanationOfBenefit_Detail1_pskel::
  ExplanationOfBenefit_Detail1_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Detail1_impl_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    subDetail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Detail1_pskel::
  ExplanationOfBenefit_Detail1_pskel (ExplanationOfBenefit_Detail1_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Detail1_impl_ (impl),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    subDetail_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_SubDetail1_pskel
  //

  void ExplanationOfBenefit_SubDetail1_pskel::
  productOrService_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->productOrService_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  unitPrice_parser (::fhir::Money_pskel& p)
  {
    this->unitPrice_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  factor_parser (::fhir::decimal_pskel& p)
  {
    this->factor_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  net_parser (::fhir::Money_pskel& p)
  {
    this->net_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  noteNumber_parser (::fhir::positiveInt_pskel& p)
  {
    this->noteNumber_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  adjudication_parser (::fhir::ExplanationOfBenefit_Adjudication_pskel& p)
  {
    this->adjudication_parser_ = &p;
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& productOrService,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Money_pskel& unitPrice,
           ::fhir::decimal_pskel& factor,
           ::fhir::Money_pskel& net,
           ::fhir::positiveInt_pskel& noteNumber,
           ::fhir::ExplanationOfBenefit_Adjudication_pskel& adjudication)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->productOrService_parser_ = &productOrService;
    this->modifier_parser_ = &modifier;
    this->quantity_parser_ = &quantity;
    this->unitPrice_parser_ = &unitPrice;
    this->factor_parser_ = &factor;
    this->net_parser_ = &net;
    this->noteNumber_parser_ = &noteNumber;
    this->adjudication_parser_ = &adjudication;
  }

  ExplanationOfBenefit_SubDetail1_pskel::
  ExplanationOfBenefit_SubDetail1_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_SubDetail1_impl_ (0),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_SubDetail1_pskel::
  ExplanationOfBenefit_SubDetail1_pskel (ExplanationOfBenefit_SubDetail1_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_SubDetail1_impl_ (impl),
    productOrService_parser_ (0),
    modifier_parser_ (0),
    quantity_parser_ (0),
    unitPrice_parser_ (0),
    factor_parser_ (0),
    net_parser_ (0),
    noteNumber_parser_ (0),
    adjudication_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Total_pskel
  //

  void ExplanationOfBenefit_Total_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ExplanationOfBenefit_Total_pskel::
  amount_parser (::fhir::Money_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void ExplanationOfBenefit_Total_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::Money_pskel& amount)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->amount_parser_ = &amount;
  }

  ExplanationOfBenefit_Total_pskel::
  ExplanationOfBenefit_Total_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Total_impl_ (0),
    category_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Total_pskel::
  ExplanationOfBenefit_Total_pskel (ExplanationOfBenefit_Total_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Total_impl_ (impl),
    category_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Payment_pskel
  //

  void ExplanationOfBenefit_Payment_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ExplanationOfBenefit_Payment_pskel::
  adjustment_parser (::fhir::Money_pskel& p)
  {
    this->adjustment_parser_ = &p;
  }

  void ExplanationOfBenefit_Payment_pskel::
  adjustmentReason_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->adjustmentReason_parser_ = &p;
  }

  void ExplanationOfBenefit_Payment_pskel::
  date_parser (::fhir::date_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void ExplanationOfBenefit_Payment_pskel::
  amount_parser (::fhir::Money_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void ExplanationOfBenefit_Payment_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void ExplanationOfBenefit_Payment_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Money_pskel& adjustment,
           ::fhir::CodeableConcept_pskel& adjustmentReason,
           ::fhir::date_pskel& date,
           ::fhir::Money_pskel& amount,
           ::fhir::Identifier_pskel& identifier)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->adjustment_parser_ = &adjustment;
    this->adjustmentReason_parser_ = &adjustmentReason;
    this->date_parser_ = &date;
    this->amount_parser_ = &amount;
    this->identifier_parser_ = &identifier;
  }

  ExplanationOfBenefit_Payment_pskel::
  ExplanationOfBenefit_Payment_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Payment_impl_ (0),
    type_parser_ (0),
    adjustment_parser_ (0),
    adjustmentReason_parser_ (0),
    date_parser_ (0),
    amount_parser_ (0),
    identifier_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Payment_pskel::
  ExplanationOfBenefit_Payment_pskel (ExplanationOfBenefit_Payment_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Payment_impl_ (impl),
    type_parser_ (0),
    adjustment_parser_ (0),
    adjustmentReason_parser_ (0),
    date_parser_ (0),
    amount_parser_ (0),
    identifier_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_ProcessNote_pskel
  //

  void ExplanationOfBenefit_ProcessNote_pskel::
  number_parser (::fhir::positiveInt_pskel& p)
  {
    this->number_parser_ = &p;
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  type_parser (::fhir::NoteType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  text_parser (::fhir::string_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  language_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->language_parser_ = &p;
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::positiveInt_pskel& number,
           ::fhir::NoteType_pskel& type,
           ::fhir::string_pskel& text,
           ::fhir::CodeableConcept_pskel& language)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->number_parser_ = &number;
    this->type_parser_ = &type;
    this->text_parser_ = &text;
    this->language_parser_ = &language;
  }

  ExplanationOfBenefit_ProcessNote_pskel::
  ExplanationOfBenefit_ProcessNote_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_ProcessNote_impl_ (0),
    number_parser_ (0),
    type_parser_ (0),
    text_parser_ (0),
    language_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_ProcessNote_pskel::
  ExplanationOfBenefit_ProcessNote_pskel (ExplanationOfBenefit_ProcessNote_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_ProcessNote_impl_ (impl),
    number_parser_ (0),
    type_parser_ (0),
    text_parser_ (0),
    language_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_BenefitBalance_pskel
  //

  void ExplanationOfBenefit_BenefitBalance_pskel::
  category_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->category_parser_ = &p;
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  excluded_parser (::fhir::boolean_pskel& p)
  {
    this->excluded_parser_ = &p;
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  description_parser (::fhir::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  network_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->network_parser_ = &p;
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  unit_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->unit_parser_ = &p;
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  term_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->term_parser_ = &p;
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  financial_parser (::fhir::ExplanationOfBenefit_Financial_pskel& p)
  {
    this->financial_parser_ = &p;
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& category,
           ::fhir::boolean_pskel& excluded,
           ::fhir::string_pskel& name,
           ::fhir::string_pskel& description,
           ::fhir::CodeableConcept_pskel& network,
           ::fhir::CodeableConcept_pskel& unit,
           ::fhir::CodeableConcept_pskel& term,
           ::fhir::ExplanationOfBenefit_Financial_pskel& financial)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->category_parser_ = &category;
    this->excluded_parser_ = &excluded;
    this->name_parser_ = &name;
    this->description_parser_ = &description;
    this->network_parser_ = &network;
    this->unit_parser_ = &unit;
    this->term_parser_ = &term;
    this->financial_parser_ = &financial;
  }

  ExplanationOfBenefit_BenefitBalance_pskel::
  ExplanationOfBenefit_BenefitBalance_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_BenefitBalance_impl_ (0),
    category_parser_ (0),
    excluded_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    network_parser_ (0),
    unit_parser_ (0),
    term_parser_ (0),
    financial_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_BenefitBalance_pskel::
  ExplanationOfBenefit_BenefitBalance_pskel (ExplanationOfBenefit_BenefitBalance_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_BenefitBalance_impl_ (impl),
    category_parser_ (0),
    excluded_parser_ (0),
    name_parser_ (0),
    description_parser_ (0),
    network_parser_ (0),
    unit_parser_ (0),
    term_parser_ (0),
    financial_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefit_Financial_pskel
  //

  void ExplanationOfBenefit_Financial_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void ExplanationOfBenefit_Financial_pskel::
  allowedUnsignedInt_parser (::fhir::unsignedInt_pskel& p)
  {
    this->allowedUnsignedInt_parser_ = &p;
  }

  void ExplanationOfBenefit_Financial_pskel::
  allowedString_parser (::fhir::string_pskel& p)
  {
    this->allowedString_parser_ = &p;
  }

  void ExplanationOfBenefit_Financial_pskel::
  allowedMoney_parser (::fhir::Money_pskel& p)
  {
    this->allowedMoney_parser_ = &p;
  }

  void ExplanationOfBenefit_Financial_pskel::
  usedUnsignedInt_parser (::fhir::unsignedInt_pskel& p)
  {
    this->usedUnsignedInt_parser_ = &p;
  }

  void ExplanationOfBenefit_Financial_pskel::
  usedMoney_parser (::fhir::Money_pskel& p)
  {
    this->usedMoney_parser_ = &p;
  }

  void ExplanationOfBenefit_Financial_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::unsignedInt_pskel& allowedUnsignedInt,
           ::fhir::string_pskel& allowedString,
           ::fhir::Money_pskel& allowedMoney,
           ::fhir::unsignedInt_pskel& usedUnsignedInt,
           ::fhir::Money_pskel& usedMoney)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->allowedUnsignedInt_parser_ = &allowedUnsignedInt;
    this->allowedString_parser_ = &allowedString;
    this->allowedMoney_parser_ = &allowedMoney;
    this->usedUnsignedInt_parser_ = &usedUnsignedInt;
    this->usedMoney_parser_ = &usedMoney;
  }

  ExplanationOfBenefit_Financial_pskel::
  ExplanationOfBenefit_Financial_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    ExplanationOfBenefit_Financial_impl_ (0),
    type_parser_ (0),
    allowedUnsignedInt_parser_ (0),
    allowedString_parser_ (0),
    allowedMoney_parser_ (0),
    usedUnsignedInt_parser_ (0),
    usedMoney_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  ExplanationOfBenefit_Financial_pskel::
  ExplanationOfBenefit_Financial_pskel (ExplanationOfBenefit_Financial_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    ExplanationOfBenefit_Financial_impl_ (impl),
    type_parser_ (0),
    allowedUnsignedInt_parser_ (0),
    allowedString_parser_ (0),
    allowedMoney_parser_ (0),
    usedUnsignedInt_parser_ (0),
    usedMoney_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // ExplanationOfBenefitStatus_list_pskel
  //

  ExplanationOfBenefitStatus_list_pskel::
  ExplanationOfBenefitStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    ExplanationOfBenefitStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_ExplanationOfBenefitStatus_list_pskel_enums_, 4UL);
  }

  ExplanationOfBenefitStatus_list_pskel::
  ExplanationOfBenefitStatus_list_pskel (ExplanationOfBenefitStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    ExplanationOfBenefitStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_ExplanationOfBenefitStatus_list_pskel_enums_, 4UL);
  }

  // ExplanationOfBenefitStatus_pskel
  //

  void ExplanationOfBenefitStatus_pskel::
  value_parser (::fhir::ExplanationOfBenefitStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void ExplanationOfBenefitStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::ExplanationOfBenefitStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  ExplanationOfBenefitStatus_pskel::
  ExplanationOfBenefitStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    ExplanationOfBenefitStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  ExplanationOfBenefitStatus_pskel::
  ExplanationOfBenefitStatus_pskel (ExplanationOfBenefitStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    ExplanationOfBenefitStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // ExplanationOfBenefit_pskel
  //

  void ExplanationOfBenefit_pskel::
  identifier ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->identifier ();
  }

  void ExplanationOfBenefit_pskel::
  status ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->status ();
  }

  void ExplanationOfBenefit_pskel::
  type ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->type ();
  }

  void ExplanationOfBenefit_pskel::
  subType ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->subType ();
  }

  void ExplanationOfBenefit_pskel::
  use ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->use ();
  }

  void ExplanationOfBenefit_pskel::
  patient ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->patient ();
  }

  void ExplanationOfBenefit_pskel::
  billablePeriod ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->billablePeriod ();
  }

  void ExplanationOfBenefit_pskel::
  created ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->created ();
  }

  void ExplanationOfBenefit_pskel::
  enterer ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->enterer ();
  }

  void ExplanationOfBenefit_pskel::
  insurer ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->insurer ();
  }

  void ExplanationOfBenefit_pskel::
  provider ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->provider ();
  }

  void ExplanationOfBenefit_pskel::
  priority ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->priority ();
  }

  void ExplanationOfBenefit_pskel::
  fundsReserveRequested ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->fundsReserveRequested ();
  }

  void ExplanationOfBenefit_pskel::
  fundsReserve ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->fundsReserve ();
  }

  void ExplanationOfBenefit_pskel::
  related ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->related ();
  }

  void ExplanationOfBenefit_pskel::
  prescription ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->prescription ();
  }

  void ExplanationOfBenefit_pskel::
  originalPrescription ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->originalPrescription ();
  }

  void ExplanationOfBenefit_pskel::
  payee ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->payee ();
  }

  void ExplanationOfBenefit_pskel::
  referral ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->referral ();
  }

  void ExplanationOfBenefit_pskel::
  facility ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->facility ();
  }

  void ExplanationOfBenefit_pskel::
  claim ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->claim ();
  }

  void ExplanationOfBenefit_pskel::
  claimResponse ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->claimResponse ();
  }

  void ExplanationOfBenefit_pskel::
  outcome ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->outcome ();
  }

  void ExplanationOfBenefit_pskel::
  disposition ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->disposition ();
  }

  void ExplanationOfBenefit_pskel::
  preAuthRef ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->preAuthRef ();
  }

  void ExplanationOfBenefit_pskel::
  preAuthRefPeriod ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->preAuthRefPeriod ();
  }

  void ExplanationOfBenefit_pskel::
  careTeam ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->careTeam ();
  }

  void ExplanationOfBenefit_pskel::
  supportingInfo ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->supportingInfo ();
  }

  void ExplanationOfBenefit_pskel::
  diagnosis ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->diagnosis ();
  }

  void ExplanationOfBenefit_pskel::
  procedure ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->procedure ();
  }

  void ExplanationOfBenefit_pskel::
  precedence ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->precedence ();
  }

  void ExplanationOfBenefit_pskel::
  insurance ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->insurance ();
  }

  void ExplanationOfBenefit_pskel::
  accident ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->accident ();
  }

  void ExplanationOfBenefit_pskel::
  item ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->item ();
  }

  void ExplanationOfBenefit_pskel::
  addItem ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->addItem ();
  }

  void ExplanationOfBenefit_pskel::
  adjudication ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->adjudication ();
  }

  void ExplanationOfBenefit_pskel::
  total ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->total ();
  }

  void ExplanationOfBenefit_pskel::
  payment ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->payment ();
  }

  void ExplanationOfBenefit_pskel::
  formCode ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->formCode ();
  }

  void ExplanationOfBenefit_pskel::
  form ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->form ();
  }

  void ExplanationOfBenefit_pskel::
  processNote ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->processNote ();
  }

  void ExplanationOfBenefit_pskel::
  benefitPeriod ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->benefitPeriod ();
  }

  void ExplanationOfBenefit_pskel::
  benefitBalance ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->benefitBalance ();
  }

  void ExplanationOfBenefit_pskel::
  post_ExplanationOfBenefit ()
  {
    if (this->ExplanationOfBenefit_impl_)
      this->ExplanationOfBenefit_impl_->post_ExplanationOfBenefit ();
    else
      post_DomainResource ();
  }

  void ExplanationOfBenefit_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->subType_parser_)
      this->subType_parser_->_reset ();

    if (this->use_parser_)
      this->use_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->billablePeriod_parser_)
      this->billablePeriod_parser_->_reset ();

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->enterer_parser_)
      this->enterer_parser_->_reset ();

    if (this->insurer_parser_)
      this->insurer_parser_->_reset ();

    if (this->provider_parser_)
      this->provider_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->fundsReserveRequested_parser_)
      this->fundsReserveRequested_parser_->_reset ();

    if (this->fundsReserve_parser_)
      this->fundsReserve_parser_->_reset ();

    if (this->related_parser_)
      this->related_parser_->_reset ();

    if (this->prescription_parser_)
      this->prescription_parser_->_reset ();

    if (this->originalPrescription_parser_)
      this->originalPrescription_parser_->_reset ();

    if (this->payee_parser_)
      this->payee_parser_->_reset ();

    if (this->referral_parser_)
      this->referral_parser_->_reset ();

    if (this->facility_parser_)
      this->facility_parser_->_reset ();

    if (this->claim_parser_)
      this->claim_parser_->_reset ();

    if (this->claimResponse_parser_)
      this->claimResponse_parser_->_reset ();

    if (this->outcome_parser_)
      this->outcome_parser_->_reset ();

    if (this->disposition_parser_)
      this->disposition_parser_->_reset ();

    if (this->preAuthRef_parser_)
      this->preAuthRef_parser_->_reset ();

    if (this->preAuthRefPeriod_parser_)
      this->preAuthRefPeriod_parser_->_reset ();

    if (this->careTeam_parser_)
      this->careTeam_parser_->_reset ();

    if (this->supportingInfo_parser_)
      this->supportingInfo_parser_->_reset ();

    if (this->diagnosis_parser_)
      this->diagnosis_parser_->_reset ();

    if (this->procedure_parser_)
      this->procedure_parser_->_reset ();

    if (this->precedence_parser_)
      this->precedence_parser_->_reset ();

    if (this->insurance_parser_)
      this->insurance_parser_->_reset ();

    if (this->accident_parser_)
      this->accident_parser_->_reset ();

    if (this->item_parser_)
      this->item_parser_->_reset ();

    if (this->addItem_parser_)
      this->addItem_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    if (this->total_parser_)
      this->total_parser_->_reset ();

    if (this->payment_parser_)
      this->payment_parser_->_reset ();

    if (this->formCode_parser_)
      this->formCode_parser_->_reset ();

    if (this->form_parser_)
      this->form_parser_->_reset ();

    if (this->processNote_parser_)
      this->processNote_parser_->_reset ();

    if (this->benefitPeriod_parser_)
      this->benefitPeriod_parser_->_reset ();

    if (this->benefitBalance_parser_)
      this->benefitBalance_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Related_pskel
  //

  void ExplanationOfBenefit_Related_pskel::
  claim ()
  {
    if (this->ExplanationOfBenefit_Related_impl_)
      this->ExplanationOfBenefit_Related_impl_->claim ();
  }

  void ExplanationOfBenefit_Related_pskel::
  relationship ()
  {
    if (this->ExplanationOfBenefit_Related_impl_)
      this->ExplanationOfBenefit_Related_impl_->relationship ();
  }

  void ExplanationOfBenefit_Related_pskel::
  reference ()
  {
    if (this->ExplanationOfBenefit_Related_impl_)
      this->ExplanationOfBenefit_Related_impl_->reference ();
  }

  void ExplanationOfBenefit_Related_pskel::
  post_ExplanationOfBenefit_Related ()
  {
    if (this->ExplanationOfBenefit_Related_impl_)
      this->ExplanationOfBenefit_Related_impl_->post_ExplanationOfBenefit_Related ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Related_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->claim_parser_)
      this->claim_parser_->_reset ();

    if (this->relationship_parser_)
      this->relationship_parser_->_reset ();

    if (this->reference_parser_)
      this->reference_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Payee_pskel
  //

  void ExplanationOfBenefit_Payee_pskel::
  type ()
  {
    if (this->ExplanationOfBenefit_Payee_impl_)
      this->ExplanationOfBenefit_Payee_impl_->type ();
  }

  void ExplanationOfBenefit_Payee_pskel::
  party ()
  {
    if (this->ExplanationOfBenefit_Payee_impl_)
      this->ExplanationOfBenefit_Payee_impl_->party ();
  }

  void ExplanationOfBenefit_Payee_pskel::
  post_ExplanationOfBenefit_Payee ()
  {
    if (this->ExplanationOfBenefit_Payee_impl_)
      this->ExplanationOfBenefit_Payee_impl_->post_ExplanationOfBenefit_Payee ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Payee_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->party_parser_)
      this->party_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_CareTeam_pskel
  //

  void ExplanationOfBenefit_CareTeam_pskel::
  sequence ()
  {
    if (this->ExplanationOfBenefit_CareTeam_impl_)
      this->ExplanationOfBenefit_CareTeam_impl_->sequence ();
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  provider ()
  {
    if (this->ExplanationOfBenefit_CareTeam_impl_)
      this->ExplanationOfBenefit_CareTeam_impl_->provider ();
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  responsible ()
  {
    if (this->ExplanationOfBenefit_CareTeam_impl_)
      this->ExplanationOfBenefit_CareTeam_impl_->responsible ();
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  role ()
  {
    if (this->ExplanationOfBenefit_CareTeam_impl_)
      this->ExplanationOfBenefit_CareTeam_impl_->role ();
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  qualification ()
  {
    if (this->ExplanationOfBenefit_CareTeam_impl_)
      this->ExplanationOfBenefit_CareTeam_impl_->qualification ();
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  post_ExplanationOfBenefit_CareTeam ()
  {
    if (this->ExplanationOfBenefit_CareTeam_impl_)
      this->ExplanationOfBenefit_CareTeam_impl_->post_ExplanationOfBenefit_CareTeam ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sequence_parser_)
      this->sequence_parser_->_reset ();

    if (this->provider_parser_)
      this->provider_parser_->_reset ();

    if (this->responsible_parser_)
      this->responsible_parser_->_reset ();

    if (this->role_parser_)
      this->role_parser_->_reset ();

    if (this->qualification_parser_)
      this->qualification_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_SupportingInfo_pskel
  //

  void ExplanationOfBenefit_SupportingInfo_pskel::
  sequence ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->sequence ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  category ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->category ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  code ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->code ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  timingDate ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->timingDate ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  timingPeriod ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->timingPeriod ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  valueBoolean ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->valueBoolean ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  valueString ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->valueString ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  valueQuantity ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->valueQuantity ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  valueAttachment ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->valueAttachment ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  valueReference ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->valueReference ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  reason ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->reason ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  post_ExplanationOfBenefit_SupportingInfo ()
  {
    if (this->ExplanationOfBenefit_SupportingInfo_impl_)
      this->ExplanationOfBenefit_SupportingInfo_impl_->post_ExplanationOfBenefit_SupportingInfo ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sequence_parser_)
      this->sequence_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->code_parser_)
      this->code_parser_->_reset ();

    if (this->timingDate_parser_)
      this->timingDate_parser_->_reset ();

    if (this->timingPeriod_parser_)
      this->timingPeriod_parser_->_reset ();

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueAttachment_parser_)
      this->valueAttachment_parser_->_reset ();

    if (this->valueReference_parser_)
      this->valueReference_parser_->_reset ();

    if (this->reason_parser_)
      this->reason_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Diagnosis_pskel
  //

  void ExplanationOfBenefit_Diagnosis_pskel::
  sequence ()
  {
    if (this->ExplanationOfBenefit_Diagnosis_impl_)
      this->ExplanationOfBenefit_Diagnosis_impl_->sequence ();
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  diagnosisCodeableConcept ()
  {
    if (this->ExplanationOfBenefit_Diagnosis_impl_)
      this->ExplanationOfBenefit_Diagnosis_impl_->diagnosisCodeableConcept ();
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  diagnosisReference ()
  {
    if (this->ExplanationOfBenefit_Diagnosis_impl_)
      this->ExplanationOfBenefit_Diagnosis_impl_->diagnosisReference ();
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  type ()
  {
    if (this->ExplanationOfBenefit_Diagnosis_impl_)
      this->ExplanationOfBenefit_Diagnosis_impl_->type ();
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  onAdmission ()
  {
    if (this->ExplanationOfBenefit_Diagnosis_impl_)
      this->ExplanationOfBenefit_Diagnosis_impl_->onAdmission ();
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  packageCode ()
  {
    if (this->ExplanationOfBenefit_Diagnosis_impl_)
      this->ExplanationOfBenefit_Diagnosis_impl_->packageCode ();
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  post_ExplanationOfBenefit_Diagnosis ()
  {
    if (this->ExplanationOfBenefit_Diagnosis_impl_)
      this->ExplanationOfBenefit_Diagnosis_impl_->post_ExplanationOfBenefit_Diagnosis ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sequence_parser_)
      this->sequence_parser_->_reset ();

    if (this->diagnosisCodeableConcept_parser_)
      this->diagnosisCodeableConcept_parser_->_reset ();

    if (this->diagnosisReference_parser_)
      this->diagnosisReference_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->onAdmission_parser_)
      this->onAdmission_parser_->_reset ();

    if (this->packageCode_parser_)
      this->packageCode_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Procedure_pskel
  //

  void ExplanationOfBenefit_Procedure_pskel::
  sequence ()
  {
    if (this->ExplanationOfBenefit_Procedure_impl_)
      this->ExplanationOfBenefit_Procedure_impl_->sequence ();
  }

  void ExplanationOfBenefit_Procedure_pskel::
  type ()
  {
    if (this->ExplanationOfBenefit_Procedure_impl_)
      this->ExplanationOfBenefit_Procedure_impl_->type ();
  }

  void ExplanationOfBenefit_Procedure_pskel::
  date ()
  {
    if (this->ExplanationOfBenefit_Procedure_impl_)
      this->ExplanationOfBenefit_Procedure_impl_->date ();
  }

  void ExplanationOfBenefit_Procedure_pskel::
  procedureCodeableConcept ()
  {
    if (this->ExplanationOfBenefit_Procedure_impl_)
      this->ExplanationOfBenefit_Procedure_impl_->procedureCodeableConcept ();
  }

  void ExplanationOfBenefit_Procedure_pskel::
  procedureReference ()
  {
    if (this->ExplanationOfBenefit_Procedure_impl_)
      this->ExplanationOfBenefit_Procedure_impl_->procedureReference ();
  }

  void ExplanationOfBenefit_Procedure_pskel::
  udi ()
  {
    if (this->ExplanationOfBenefit_Procedure_impl_)
      this->ExplanationOfBenefit_Procedure_impl_->udi ();
  }

  void ExplanationOfBenefit_Procedure_pskel::
  post_ExplanationOfBenefit_Procedure ()
  {
    if (this->ExplanationOfBenefit_Procedure_impl_)
      this->ExplanationOfBenefit_Procedure_impl_->post_ExplanationOfBenefit_Procedure ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Procedure_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sequence_parser_)
      this->sequence_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->procedureCodeableConcept_parser_)
      this->procedureCodeableConcept_parser_->_reset ();

    if (this->procedureReference_parser_)
      this->procedureReference_parser_->_reset ();

    if (this->udi_parser_)
      this->udi_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Insurance_pskel
  //

  void ExplanationOfBenefit_Insurance_pskel::
  focal ()
  {
    if (this->ExplanationOfBenefit_Insurance_impl_)
      this->ExplanationOfBenefit_Insurance_impl_->focal ();
  }

  void ExplanationOfBenefit_Insurance_pskel::
  coverage ()
  {
    if (this->ExplanationOfBenefit_Insurance_impl_)
      this->ExplanationOfBenefit_Insurance_impl_->coverage ();
  }

  void ExplanationOfBenefit_Insurance_pskel::
  preAuthRef ()
  {
    if (this->ExplanationOfBenefit_Insurance_impl_)
      this->ExplanationOfBenefit_Insurance_impl_->preAuthRef ();
  }

  void ExplanationOfBenefit_Insurance_pskel::
  post_ExplanationOfBenefit_Insurance ()
  {
    if (this->ExplanationOfBenefit_Insurance_impl_)
      this->ExplanationOfBenefit_Insurance_impl_->post_ExplanationOfBenefit_Insurance ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Insurance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->focal_parser_)
      this->focal_parser_->_reset ();

    if (this->coverage_parser_)
      this->coverage_parser_->_reset ();

    if (this->preAuthRef_parser_)
      this->preAuthRef_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Accident_pskel
  //

  void ExplanationOfBenefit_Accident_pskel::
  date ()
  {
    if (this->ExplanationOfBenefit_Accident_impl_)
      this->ExplanationOfBenefit_Accident_impl_->date ();
  }

  void ExplanationOfBenefit_Accident_pskel::
  type ()
  {
    if (this->ExplanationOfBenefit_Accident_impl_)
      this->ExplanationOfBenefit_Accident_impl_->type ();
  }

  void ExplanationOfBenefit_Accident_pskel::
  locationAddress ()
  {
    if (this->ExplanationOfBenefit_Accident_impl_)
      this->ExplanationOfBenefit_Accident_impl_->locationAddress ();
  }

  void ExplanationOfBenefit_Accident_pskel::
  locationReference ()
  {
    if (this->ExplanationOfBenefit_Accident_impl_)
      this->ExplanationOfBenefit_Accident_impl_->locationReference ();
  }

  void ExplanationOfBenefit_Accident_pskel::
  post_ExplanationOfBenefit_Accident ()
  {
    if (this->ExplanationOfBenefit_Accident_impl_)
      this->ExplanationOfBenefit_Accident_impl_->post_ExplanationOfBenefit_Accident ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Accident_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->locationAddress_parser_)
      this->locationAddress_parser_->_reset ();

    if (this->locationReference_parser_)
      this->locationReference_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Item_pskel
  //

  void ExplanationOfBenefit_Item_pskel::
  sequence ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->sequence ();
  }

  void ExplanationOfBenefit_Item_pskel::
  careTeamSequence ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->careTeamSequence ();
  }

  void ExplanationOfBenefit_Item_pskel::
  diagnosisSequence ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->diagnosisSequence ();
  }

  void ExplanationOfBenefit_Item_pskel::
  procedureSequence ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->procedureSequence ();
  }

  void ExplanationOfBenefit_Item_pskel::
  informationSequence ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->informationSequence ();
  }

  void ExplanationOfBenefit_Item_pskel::
  revenue ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->revenue ();
  }

  void ExplanationOfBenefit_Item_pskel::
  category ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->category ();
  }

  void ExplanationOfBenefit_Item_pskel::
  productOrService ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->productOrService ();
  }

  void ExplanationOfBenefit_Item_pskel::
  modifier ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->modifier ();
  }

  void ExplanationOfBenefit_Item_pskel::
  programCode ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->programCode ();
  }

  void ExplanationOfBenefit_Item_pskel::
  servicedDate ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->servicedDate ();
  }

  void ExplanationOfBenefit_Item_pskel::
  servicedPeriod ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->servicedPeriod ();
  }

  void ExplanationOfBenefit_Item_pskel::
  locationCodeableConcept ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->locationCodeableConcept ();
  }

  void ExplanationOfBenefit_Item_pskel::
  locationAddress ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->locationAddress ();
  }

  void ExplanationOfBenefit_Item_pskel::
  locationReference ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->locationReference ();
  }

  void ExplanationOfBenefit_Item_pskel::
  quantity ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->quantity ();
  }

  void ExplanationOfBenefit_Item_pskel::
  unitPrice ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->unitPrice ();
  }

  void ExplanationOfBenefit_Item_pskel::
  factor ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->factor ();
  }

  void ExplanationOfBenefit_Item_pskel::
  net ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->net ();
  }

  void ExplanationOfBenefit_Item_pskel::
  udi ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->udi ();
  }

  void ExplanationOfBenefit_Item_pskel::
  bodySite ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->bodySite ();
  }

  void ExplanationOfBenefit_Item_pskel::
  subSite ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->subSite ();
  }

  void ExplanationOfBenefit_Item_pskel::
  encounter ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->encounter ();
  }

  void ExplanationOfBenefit_Item_pskel::
  noteNumber ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->noteNumber ();
  }

  void ExplanationOfBenefit_Item_pskel::
  adjudication ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->adjudication ();
  }

  void ExplanationOfBenefit_Item_pskel::
  detail ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->detail ();
  }

  void ExplanationOfBenefit_Item_pskel::
  post_ExplanationOfBenefit_Item ()
  {
    if (this->ExplanationOfBenefit_Item_impl_)
      this->ExplanationOfBenefit_Item_impl_->post_ExplanationOfBenefit_Item ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Item_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sequence_parser_)
      this->sequence_parser_->_reset ();

    if (this->careTeamSequence_parser_)
      this->careTeamSequence_parser_->_reset ();

    if (this->diagnosisSequence_parser_)
      this->diagnosisSequence_parser_->_reset ();

    if (this->procedureSequence_parser_)
      this->procedureSequence_parser_->_reset ();

    if (this->informationSequence_parser_)
      this->informationSequence_parser_->_reset ();

    if (this->revenue_parser_)
      this->revenue_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->programCode_parser_)
      this->programCode_parser_->_reset ();

    if (this->servicedDate_parser_)
      this->servicedDate_parser_->_reset ();

    if (this->servicedPeriod_parser_)
      this->servicedPeriod_parser_->_reset ();

    if (this->locationCodeableConcept_parser_)
      this->locationCodeableConcept_parser_->_reset ();

    if (this->locationAddress_parser_)
      this->locationAddress_parser_->_reset ();

    if (this->locationReference_parser_)
      this->locationReference_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->net_parser_)
      this->net_parser_->_reset ();

    if (this->udi_parser_)
      this->udi_parser_->_reset ();

    if (this->bodySite_parser_)
      this->bodySite_parser_->_reset ();

    if (this->subSite_parser_)
      this->subSite_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Adjudication_pskel
  //

  void ExplanationOfBenefit_Adjudication_pskel::
  category ()
  {
    if (this->ExplanationOfBenefit_Adjudication_impl_)
      this->ExplanationOfBenefit_Adjudication_impl_->category ();
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  reason ()
  {
    if (this->ExplanationOfBenefit_Adjudication_impl_)
      this->ExplanationOfBenefit_Adjudication_impl_->reason ();
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  amount ()
  {
    if (this->ExplanationOfBenefit_Adjudication_impl_)
      this->ExplanationOfBenefit_Adjudication_impl_->amount ();
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  value ()
  {
    if (this->ExplanationOfBenefit_Adjudication_impl_)
      this->ExplanationOfBenefit_Adjudication_impl_->value ();
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  post_ExplanationOfBenefit_Adjudication ()
  {
    if (this->ExplanationOfBenefit_Adjudication_impl_)
      this->ExplanationOfBenefit_Adjudication_impl_->post_ExplanationOfBenefit_Adjudication ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->reason_parser_)
      this->reason_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Detail_pskel
  //

  void ExplanationOfBenefit_Detail_pskel::
  sequence ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->sequence ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  revenue ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->revenue ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  category ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->category ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  productOrService ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->productOrService ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  modifier ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->modifier ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  programCode ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->programCode ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  quantity ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->quantity ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  unitPrice ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->unitPrice ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  factor ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->factor ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  net ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->net ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  udi ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->udi ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  noteNumber ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->noteNumber ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  adjudication ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->adjudication ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  subDetail ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->subDetail ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  post_ExplanationOfBenefit_Detail ()
  {
    if (this->ExplanationOfBenefit_Detail_impl_)
      this->ExplanationOfBenefit_Detail_impl_->post_ExplanationOfBenefit_Detail ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sequence_parser_)
      this->sequence_parser_->_reset ();

    if (this->revenue_parser_)
      this->revenue_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->programCode_parser_)
      this->programCode_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->net_parser_)
      this->net_parser_->_reset ();

    if (this->udi_parser_)
      this->udi_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    if (this->subDetail_parser_)
      this->subDetail_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_SubDetail_pskel
  //

  void ExplanationOfBenefit_SubDetail_pskel::
  sequence ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->sequence ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  revenue ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->revenue ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  category ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->category ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  productOrService ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->productOrService ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  modifier ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->modifier ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  programCode ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->programCode ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  quantity ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->quantity ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  unitPrice ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->unitPrice ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  factor ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->factor ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  net ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->net ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  udi ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->udi ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  noteNumber ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->noteNumber ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  adjudication ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->adjudication ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  post_ExplanationOfBenefit_SubDetail ()
  {
    if (this->ExplanationOfBenefit_SubDetail_impl_)
      this->ExplanationOfBenefit_SubDetail_impl_->post_ExplanationOfBenefit_SubDetail ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->sequence_parser_)
      this->sequence_parser_->_reset ();

    if (this->revenue_parser_)
      this->revenue_parser_->_reset ();

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->programCode_parser_)
      this->programCode_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->net_parser_)
      this->net_parser_->_reset ();

    if (this->udi_parser_)
      this->udi_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_AddItem_pskel
  //

  void ExplanationOfBenefit_AddItem_pskel::
  itemSequence ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->itemSequence ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  detailSequence ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->detailSequence ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  subDetailSequence ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->subDetailSequence ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  provider ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->provider ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  productOrService ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->productOrService ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  modifier ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->modifier ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  programCode ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->programCode ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  servicedDate ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->servicedDate ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  servicedPeriod ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->servicedPeriod ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  locationCodeableConcept ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->locationCodeableConcept ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  locationAddress ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->locationAddress ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  locationReference ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->locationReference ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  quantity ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->quantity ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  unitPrice ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->unitPrice ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  factor ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->factor ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  net ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->net ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  bodySite ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->bodySite ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  subSite ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->subSite ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  noteNumber ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->noteNumber ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  adjudication ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->adjudication ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  detail ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->detail ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  post_ExplanationOfBenefit_AddItem ()
  {
    if (this->ExplanationOfBenefit_AddItem_impl_)
      this->ExplanationOfBenefit_AddItem_impl_->post_ExplanationOfBenefit_AddItem ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->itemSequence_parser_)
      this->itemSequence_parser_->_reset ();

    if (this->detailSequence_parser_)
      this->detailSequence_parser_->_reset ();

    if (this->subDetailSequence_parser_)
      this->subDetailSequence_parser_->_reset ();

    if (this->provider_parser_)
      this->provider_parser_->_reset ();

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->programCode_parser_)
      this->programCode_parser_->_reset ();

    if (this->servicedDate_parser_)
      this->servicedDate_parser_->_reset ();

    if (this->servicedPeriod_parser_)
      this->servicedPeriod_parser_->_reset ();

    if (this->locationCodeableConcept_parser_)
      this->locationCodeableConcept_parser_->_reset ();

    if (this->locationAddress_parser_)
      this->locationAddress_parser_->_reset ();

    if (this->locationReference_parser_)
      this->locationReference_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->net_parser_)
      this->net_parser_->_reset ();

    if (this->bodySite_parser_)
      this->bodySite_parser_->_reset ();

    if (this->subSite_parser_)
      this->subSite_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    if (this->detail_parser_)
      this->detail_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Detail1_pskel
  //

  void ExplanationOfBenefit_Detail1_pskel::
  productOrService ()
  {
    if (this->ExplanationOfBenefit_Detail1_impl_)
      this->ExplanationOfBenefit_Detail1_impl_->productOrService ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  modifier ()
  {
    if (this->ExplanationOfBenefit_Detail1_impl_)
      this->ExplanationOfBenefit_Detail1_impl_->modifier ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  quantity ()
  {
    if (this->ExplanationOfBenefit_Detail1_impl_)
      this->ExplanationOfBenefit_Detail1_impl_->quantity ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  unitPrice ()
  {
    if (this->ExplanationOfBenefit_Detail1_impl_)
      this->ExplanationOfBenefit_Detail1_impl_->unitPrice ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  factor ()
  {
    if (this->ExplanationOfBenefit_Detail1_impl_)
      this->ExplanationOfBenefit_Detail1_impl_->factor ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  net ()
  {
    if (this->ExplanationOfBenefit_Detail1_impl_)
      this->ExplanationOfBenefit_Detail1_impl_->net ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  noteNumber ()
  {
    if (this->ExplanationOfBenefit_Detail1_impl_)
      this->ExplanationOfBenefit_Detail1_impl_->noteNumber ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  adjudication ()
  {
    if (this->ExplanationOfBenefit_Detail1_impl_)
      this->ExplanationOfBenefit_Detail1_impl_->adjudication ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  subDetail ()
  {
    if (this->ExplanationOfBenefit_Detail1_impl_)
      this->ExplanationOfBenefit_Detail1_impl_->subDetail ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  post_ExplanationOfBenefit_Detail1 ()
  {
    if (this->ExplanationOfBenefit_Detail1_impl_)
      this->ExplanationOfBenefit_Detail1_impl_->post_ExplanationOfBenefit_Detail1 ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->net_parser_)
      this->net_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    if (this->subDetail_parser_)
      this->subDetail_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_SubDetail1_pskel
  //

  void ExplanationOfBenefit_SubDetail1_pskel::
  productOrService ()
  {
    if (this->ExplanationOfBenefit_SubDetail1_impl_)
      this->ExplanationOfBenefit_SubDetail1_impl_->productOrService ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  modifier ()
  {
    if (this->ExplanationOfBenefit_SubDetail1_impl_)
      this->ExplanationOfBenefit_SubDetail1_impl_->modifier ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  quantity ()
  {
    if (this->ExplanationOfBenefit_SubDetail1_impl_)
      this->ExplanationOfBenefit_SubDetail1_impl_->quantity ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  unitPrice ()
  {
    if (this->ExplanationOfBenefit_SubDetail1_impl_)
      this->ExplanationOfBenefit_SubDetail1_impl_->unitPrice ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  factor ()
  {
    if (this->ExplanationOfBenefit_SubDetail1_impl_)
      this->ExplanationOfBenefit_SubDetail1_impl_->factor ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  net ()
  {
    if (this->ExplanationOfBenefit_SubDetail1_impl_)
      this->ExplanationOfBenefit_SubDetail1_impl_->net ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  noteNumber ()
  {
    if (this->ExplanationOfBenefit_SubDetail1_impl_)
      this->ExplanationOfBenefit_SubDetail1_impl_->noteNumber ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  adjudication ()
  {
    if (this->ExplanationOfBenefit_SubDetail1_impl_)
      this->ExplanationOfBenefit_SubDetail1_impl_->adjudication ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  post_ExplanationOfBenefit_SubDetail1 ()
  {
    if (this->ExplanationOfBenefit_SubDetail1_impl_)
      this->ExplanationOfBenefit_SubDetail1_impl_->post_ExplanationOfBenefit_SubDetail1 ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->productOrService_parser_)
      this->productOrService_parser_->_reset ();

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->unitPrice_parser_)
      this->unitPrice_parser_->_reset ();

    if (this->factor_parser_)
      this->factor_parser_->_reset ();

    if (this->net_parser_)
      this->net_parser_->_reset ();

    if (this->noteNumber_parser_)
      this->noteNumber_parser_->_reset ();

    if (this->adjudication_parser_)
      this->adjudication_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Total_pskel
  //

  void ExplanationOfBenefit_Total_pskel::
  category ()
  {
    if (this->ExplanationOfBenefit_Total_impl_)
      this->ExplanationOfBenefit_Total_impl_->category ();
  }

  void ExplanationOfBenefit_Total_pskel::
  amount ()
  {
    if (this->ExplanationOfBenefit_Total_impl_)
      this->ExplanationOfBenefit_Total_impl_->amount ();
  }

  void ExplanationOfBenefit_Total_pskel::
  post_ExplanationOfBenefit_Total ()
  {
    if (this->ExplanationOfBenefit_Total_impl_)
      this->ExplanationOfBenefit_Total_impl_->post_ExplanationOfBenefit_Total ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Total_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Payment_pskel
  //

  void ExplanationOfBenefit_Payment_pskel::
  type ()
  {
    if (this->ExplanationOfBenefit_Payment_impl_)
      this->ExplanationOfBenefit_Payment_impl_->type ();
  }

  void ExplanationOfBenefit_Payment_pskel::
  adjustment ()
  {
    if (this->ExplanationOfBenefit_Payment_impl_)
      this->ExplanationOfBenefit_Payment_impl_->adjustment ();
  }

  void ExplanationOfBenefit_Payment_pskel::
  adjustmentReason ()
  {
    if (this->ExplanationOfBenefit_Payment_impl_)
      this->ExplanationOfBenefit_Payment_impl_->adjustmentReason ();
  }

  void ExplanationOfBenefit_Payment_pskel::
  date ()
  {
    if (this->ExplanationOfBenefit_Payment_impl_)
      this->ExplanationOfBenefit_Payment_impl_->date ();
  }

  void ExplanationOfBenefit_Payment_pskel::
  amount ()
  {
    if (this->ExplanationOfBenefit_Payment_impl_)
      this->ExplanationOfBenefit_Payment_impl_->amount ();
  }

  void ExplanationOfBenefit_Payment_pskel::
  identifier ()
  {
    if (this->ExplanationOfBenefit_Payment_impl_)
      this->ExplanationOfBenefit_Payment_impl_->identifier ();
  }

  void ExplanationOfBenefit_Payment_pskel::
  post_ExplanationOfBenefit_Payment ()
  {
    if (this->ExplanationOfBenefit_Payment_impl_)
      this->ExplanationOfBenefit_Payment_impl_->post_ExplanationOfBenefit_Payment ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Payment_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->adjustment_parser_)
      this->adjustment_parser_->_reset ();

    if (this->adjustmentReason_parser_)
      this->adjustmentReason_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_ProcessNote_pskel
  //

  void ExplanationOfBenefit_ProcessNote_pskel::
  number ()
  {
    if (this->ExplanationOfBenefit_ProcessNote_impl_)
      this->ExplanationOfBenefit_ProcessNote_impl_->number ();
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  type ()
  {
    if (this->ExplanationOfBenefit_ProcessNote_impl_)
      this->ExplanationOfBenefit_ProcessNote_impl_->type ();
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  text ()
  {
    if (this->ExplanationOfBenefit_ProcessNote_impl_)
      this->ExplanationOfBenefit_ProcessNote_impl_->text ();
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  language ()
  {
    if (this->ExplanationOfBenefit_ProcessNote_impl_)
      this->ExplanationOfBenefit_ProcessNote_impl_->language ();
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  post_ExplanationOfBenefit_ProcessNote ()
  {
    if (this->ExplanationOfBenefit_ProcessNote_impl_)
      this->ExplanationOfBenefit_ProcessNote_impl_->post_ExplanationOfBenefit_ProcessNote ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->number_parser_)
      this->number_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    if (this->language_parser_)
      this->language_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_BenefitBalance_pskel
  //

  void ExplanationOfBenefit_BenefitBalance_pskel::
  category ()
  {
    if (this->ExplanationOfBenefit_BenefitBalance_impl_)
      this->ExplanationOfBenefit_BenefitBalance_impl_->category ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  excluded ()
  {
    if (this->ExplanationOfBenefit_BenefitBalance_impl_)
      this->ExplanationOfBenefit_BenefitBalance_impl_->excluded ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  name ()
  {
    if (this->ExplanationOfBenefit_BenefitBalance_impl_)
      this->ExplanationOfBenefit_BenefitBalance_impl_->name ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  description ()
  {
    if (this->ExplanationOfBenefit_BenefitBalance_impl_)
      this->ExplanationOfBenefit_BenefitBalance_impl_->description ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  network ()
  {
    if (this->ExplanationOfBenefit_BenefitBalance_impl_)
      this->ExplanationOfBenefit_BenefitBalance_impl_->network ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  unit ()
  {
    if (this->ExplanationOfBenefit_BenefitBalance_impl_)
      this->ExplanationOfBenefit_BenefitBalance_impl_->unit ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  term ()
  {
    if (this->ExplanationOfBenefit_BenefitBalance_impl_)
      this->ExplanationOfBenefit_BenefitBalance_impl_->term ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  financial ()
  {
    if (this->ExplanationOfBenefit_BenefitBalance_impl_)
      this->ExplanationOfBenefit_BenefitBalance_impl_->financial ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  post_ExplanationOfBenefit_BenefitBalance ()
  {
    if (this->ExplanationOfBenefit_BenefitBalance_impl_)
      this->ExplanationOfBenefit_BenefitBalance_impl_->post_ExplanationOfBenefit_BenefitBalance ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->category_parser_)
      this->category_parser_->_reset ();

    if (this->excluded_parser_)
      this->excluded_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->network_parser_)
      this->network_parser_->_reset ();

    if (this->unit_parser_)
      this->unit_parser_->_reset ();

    if (this->term_parser_)
      this->term_parser_->_reset ();

    if (this->financial_parser_)
      this->financial_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefit_Financial_pskel
  //

  void ExplanationOfBenefit_Financial_pskel::
  type ()
  {
    if (this->ExplanationOfBenefit_Financial_impl_)
      this->ExplanationOfBenefit_Financial_impl_->type ();
  }

  void ExplanationOfBenefit_Financial_pskel::
  allowedUnsignedInt ()
  {
    if (this->ExplanationOfBenefit_Financial_impl_)
      this->ExplanationOfBenefit_Financial_impl_->allowedUnsignedInt ();
  }

  void ExplanationOfBenefit_Financial_pskel::
  allowedString ()
  {
    if (this->ExplanationOfBenefit_Financial_impl_)
      this->ExplanationOfBenefit_Financial_impl_->allowedString ();
  }

  void ExplanationOfBenefit_Financial_pskel::
  allowedMoney ()
  {
    if (this->ExplanationOfBenefit_Financial_impl_)
      this->ExplanationOfBenefit_Financial_impl_->allowedMoney ();
  }

  void ExplanationOfBenefit_Financial_pskel::
  usedUnsignedInt ()
  {
    if (this->ExplanationOfBenefit_Financial_impl_)
      this->ExplanationOfBenefit_Financial_impl_->usedUnsignedInt ();
  }

  void ExplanationOfBenefit_Financial_pskel::
  usedMoney ()
  {
    if (this->ExplanationOfBenefit_Financial_impl_)
      this->ExplanationOfBenefit_Financial_impl_->usedMoney ();
  }

  void ExplanationOfBenefit_Financial_pskel::
  post_ExplanationOfBenefit_Financial ()
  {
    if (this->ExplanationOfBenefit_Financial_impl_)
      this->ExplanationOfBenefit_Financial_impl_->post_ExplanationOfBenefit_Financial ();
    else
      post_BackboneElement ();
  }

  void ExplanationOfBenefit_Financial_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->allowedUnsignedInt_parser_)
      this->allowedUnsignedInt_parser_->_reset ();

    if (this->allowedString_parser_)
      this->allowedString_parser_->_reset ();

    if (this->allowedMoney_parser_)
      this->allowedMoney_parser_->_reset ();

    if (this->usedUnsignedInt_parser_)
      this->usedUnsignedInt_parser_->_reset ();

    if (this->usedMoney_parser_)
      this->usedMoney_parser_->_reset ();

    this->resetting_ = false;
  }

  // ExplanationOfBenefitStatus_list_pskel
  //

  void ExplanationOfBenefitStatus_list_pskel::
  post_ExplanationOfBenefitStatus_list ()
  {
    if (this->ExplanationOfBenefitStatus_list_impl_)
      this->ExplanationOfBenefitStatus_list_impl_->post_ExplanationOfBenefitStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const ExplanationOfBenefitStatus_list_pskel::_xsde_ExplanationOfBenefitStatus_list_pskel_enums_[4UL] = 
  {
    "active",
    "cancelled",
    "draft",
    "entered-in-error"
  };

  // ExplanationOfBenefitStatus_pskel
  //

  void ExplanationOfBenefitStatus_pskel::
  value ()
  {
    if (this->ExplanationOfBenefitStatus_impl_)
      this->ExplanationOfBenefitStatus_impl_->value ();
  }

  void ExplanationOfBenefitStatus_pskel::
  post_ExplanationOfBenefitStatus ()
  {
    if (this->ExplanationOfBenefitStatus_impl_)
      this->ExplanationOfBenefitStatus_impl_->post_ExplanationOfBenefitStatus ();
    else
      post_Element ();
  }

  void ExplanationOfBenefitStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for ExplanationOfBenefit_pskel.
  //
  bool ExplanationOfBenefit_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_ExplanationOfBenefitStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "subType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subType_parser_)
            {
              this->subType_parser_->pre ();
              ctx.nested_parser (this->subType_parser_);
            }
          }
          else
          {
            if (this->subType_parser_ != 0)
            {
              this->subType_parser_->post_CodeableConcept ();
              this->subType ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "use" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->use_parser_)
            {
              this->use_parser_->pre ();
              ctx.nested_parser (this->use_parser_);
            }
          }
          else
          {
            if (this->use_parser_ != 0)
            {
              this->use_parser_->post_Use ();
              this->use ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "billablePeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->billablePeriod_parser_)
            {
              this->billablePeriod_parser_->pre ();
              ctx.nested_parser (this->billablePeriod_parser_);
            }
          }
          else
          {
            if (this->billablePeriod_parser_ != 0)
            {
              this->billablePeriod_parser_->post_Period ();
              this->billablePeriod ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "created" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->created_parser_)
            {
              this->created_parser_->pre ();
              ctx.nested_parser (this->created_parser_);
            }
          }
          else
          {
            if (this->created_parser_ != 0)
            {
              this->created_parser_->post_dateTime ();
              this->created ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "enterer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->enterer_parser_)
            {
              this->enterer_parser_->pre ();
              ctx.nested_parser (this->enterer_parser_);
            }
          }
          else
          {
            if (this->enterer_parser_ != 0)
            {
              this->enterer_parser_->post_Reference ();
              this->enterer ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "insurer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurer_parser_)
            {
              this->insurer_parser_->pre ();
              ctx.nested_parser (this->insurer_parser_);
            }
          }
          else
          {
            if (this->insurer_parser_ != 0)
            {
              this->insurer_parser_->post_Reference ();
              this->insurer ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "provider" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->provider_parser_)
            {
              this->provider_parser_->pre ();
              ctx.nested_parser (this->provider_parser_);
            }
          }
          else
          {
            if (this->provider_parser_ != 0)
            {
              this->provider_parser_->post_Reference ();
              this->provider ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_CodeableConcept ();
              this->priority ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "fundsReserveRequested" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fundsReserveRequested_parser_)
            {
              this->fundsReserveRequested_parser_->pre ();
              ctx.nested_parser (this->fundsReserveRequested_parser_);
            }
          }
          else
          {
            if (this->fundsReserveRequested_parser_ != 0)
            {
              this->fundsReserveRequested_parser_->post_CodeableConcept ();
              this->fundsReserveRequested ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "fundsReserve" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fundsReserve_parser_)
            {
              this->fundsReserve_parser_->pre ();
              ctx.nested_parser (this->fundsReserve_parser_);
            }
          }
          else
          {
            if (this->fundsReserve_parser_ != 0)
            {
              this->fundsReserve_parser_->post_CodeableConcept ();
              this->fundsReserve ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "related" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->related_parser_)
            {
              this->related_parser_->pre ();
              ctx.nested_parser (this->related_parser_);
            }
          }
          else
          {
            if (this->related_parser_ != 0)
            {
              this->related_parser_->post_ExplanationOfBenefit_Related ();
              this->related ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "prescription" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->prescription_parser_)
            {
              this->prescription_parser_->pre ();
              ctx.nested_parser (this->prescription_parser_);
            }
          }
          else
          {
            if (this->prescription_parser_ != 0)
            {
              this->prescription_parser_->post_Reference ();
              this->prescription ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "originalPrescription" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->originalPrescription_parser_)
            {
              this->originalPrescription_parser_->pre ();
              ctx.nested_parser (this->originalPrescription_parser_);
            }
          }
          else
          {
            if (this->originalPrescription_parser_ != 0)
            {
              this->originalPrescription_parser_->post_Reference ();
              this->originalPrescription ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "payee" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->payee_parser_)
            {
              this->payee_parser_->pre ();
              ctx.nested_parser (this->payee_parser_);
            }
          }
          else
          {
            if (this->payee_parser_ != 0)
            {
              this->payee_parser_->post_ExplanationOfBenefit_Payee ();
              this->payee ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "referral" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->referral_parser_)
            {
              this->referral_parser_->pre ();
              ctx.nested_parser (this->referral_parser_);
            }
          }
          else
          {
            if (this->referral_parser_ != 0)
            {
              this->referral_parser_->post_Reference ();
              this->referral ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "facility" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->facility_parser_)
            {
              this->facility_parser_->pre ();
              ctx.nested_parser (this->facility_parser_);
            }
          }
          else
          {
            if (this->facility_parser_ != 0)
            {
              this->facility_parser_->post_Reference ();
              this->facility ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "claim" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->claim_parser_)
            {
              this->claim_parser_->pre ();
              ctx.nested_parser (this->claim_parser_);
            }
          }
          else
          {
            if (this->claim_parser_ != 0)
            {
              this->claim_parser_->post_Reference ();
              this->claim ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "claimResponse" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->claimResponse_parser_)
            {
              this->claimResponse_parser_->pre ();
              ctx.nested_parser (this->claimResponse_parser_);
            }
          }
          else
          {
            if (this->claimResponse_parser_ != 0)
            {
              this->claimResponse_parser_->post_Reference ();
              this->claimResponse ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "outcome" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->outcome_parser_)
            {
              this->outcome_parser_->pre ();
              ctx.nested_parser (this->outcome_parser_);
            }
          }
          else
          {
            if (this->outcome_parser_ != 0)
            {
              this->outcome_parser_->post_ClaimProcessingCodes ();
              this->outcome ();
            }

            count = 0;
            state = 23UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "disposition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->disposition_parser_)
            {
              this->disposition_parser_->pre ();
              ctx.nested_parser (this->disposition_parser_);
            }
          }
          else
          {
            if (this->disposition_parser_ != 0)
            {
              this->disposition_parser_->post_string ();
              this->disposition ();
            }

            count = 0;
            state = 24UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "preAuthRef" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preAuthRef_parser_)
            {
              this->preAuthRef_parser_->pre ();
              ctx.nested_parser (this->preAuthRef_parser_);
            }
          }
          else
          {
            if (this->preAuthRef_parser_ != 0)
            {
              this->preAuthRef_parser_->post_string ();
              this->preAuthRef ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "preAuthRefPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preAuthRefPeriod_parser_)
            {
              this->preAuthRefPeriod_parser_->pre ();
              ctx.nested_parser (this->preAuthRefPeriod_parser_);
            }
          }
          else
          {
            if (this->preAuthRefPeriod_parser_ != 0)
            {
              this->preAuthRefPeriod_parser_->post_Period ();
              this->preAuthRefPeriod ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 26UL;
          // Fall through.
        }
      }
      case 26UL:
      {
        if (n == "careTeam" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->careTeam_parser_)
            {
              this->careTeam_parser_->pre ();
              ctx.nested_parser (this->careTeam_parser_);
            }
          }
          else
          {
            if (this->careTeam_parser_ != 0)
            {
              this->careTeam_parser_->post_ExplanationOfBenefit_CareTeam ();
              this->careTeam ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 27UL;
          // Fall through.
        }
      }
      case 27UL:
      {
        if (n == "supportingInfo" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supportingInfo_parser_)
            {
              this->supportingInfo_parser_->pre ();
              ctx.nested_parser (this->supportingInfo_parser_);
            }
          }
          else
          {
            if (this->supportingInfo_parser_ != 0)
            {
              this->supportingInfo_parser_->post_ExplanationOfBenefit_SupportingInfo ();
              this->supportingInfo ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 28UL;
          // Fall through.
        }
      }
      case 28UL:
      {
        if (n == "diagnosis" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diagnosis_parser_)
            {
              this->diagnosis_parser_->pre ();
              ctx.nested_parser (this->diagnosis_parser_);
            }
          }
          else
          {
            if (this->diagnosis_parser_ != 0)
            {
              this->diagnosis_parser_->post_ExplanationOfBenefit_Diagnosis ();
              this->diagnosis ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 29UL;
          // Fall through.
        }
      }
      case 29UL:
      {
        if (n == "procedure" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->procedure_parser_)
            {
              this->procedure_parser_->pre ();
              ctx.nested_parser (this->procedure_parser_);
            }
          }
          else
          {
            if (this->procedure_parser_ != 0)
            {
              this->procedure_parser_->post_ExplanationOfBenefit_Procedure ();
              this->procedure ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 30UL;
          // Fall through.
        }
      }
      case 30UL:
      {
        if (n == "precedence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->precedence_parser_)
            {
              this->precedence_parser_->pre ();
              ctx.nested_parser (this->precedence_parser_);
            }
          }
          else
          {
            if (this->precedence_parser_ != 0)
            {
              this->precedence_parser_->post_positiveInt ();
              this->precedence ();
            }

            count = 0;
            state = 31UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 31UL;
          // Fall through.
        }
      }
      case 31UL:
      {
        if (n == "insurance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->insurance_parser_)
            {
              this->insurance_parser_->pre ();
              ctx.nested_parser (this->insurance_parser_);
            }
          }
          else
          {
            if (this->insurance_parser_ != 0)
            {
              this->insurance_parser_->post_ExplanationOfBenefit_Insurance ();
              this->insurance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 32UL;
          // Fall through.
        }
      }
      case 32UL:
      {
        if (n == "accident" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->accident_parser_)
            {
              this->accident_parser_->pre ();
              ctx.nested_parser (this->accident_parser_);
            }
          }
          else
          {
            if (this->accident_parser_ != 0)
            {
              this->accident_parser_->post_ExplanationOfBenefit_Accident ();
              this->accident ();
            }

            count = 0;
            state = 33UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 33UL;
          // Fall through.
        }
      }
      case 33UL:
      {
        if (n == "item" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->item_parser_)
            {
              this->item_parser_->pre ();
              ctx.nested_parser (this->item_parser_);
            }
          }
          else
          {
            if (this->item_parser_ != 0)
            {
              this->item_parser_->post_ExplanationOfBenefit_Item ();
              this->item ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 34UL;
          // Fall through.
        }
      }
      case 34UL:
      {
        if (n == "addItem" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->addItem_parser_)
            {
              this->addItem_parser_->pre ();
              ctx.nested_parser (this->addItem_parser_);
            }
          }
          else
          {
            if (this->addItem_parser_ != 0)
            {
              this->addItem_parser_->post_ExplanationOfBenefit_AddItem ();
              this->addItem ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 35UL;
          // Fall through.
        }
      }
      case 35UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ExplanationOfBenefit_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 36UL;
          // Fall through.
        }
      }
      case 36UL:
      {
        if (n == "total" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->total_parser_)
            {
              this->total_parser_->pre ();
              ctx.nested_parser (this->total_parser_);
            }
          }
          else
          {
            if (this->total_parser_ != 0)
            {
              this->total_parser_->post_ExplanationOfBenefit_Total ();
              this->total ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 37UL;
          // Fall through.
        }
      }
      case 37UL:
      {
        if (n == "payment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->payment_parser_)
            {
              this->payment_parser_->pre ();
              ctx.nested_parser (this->payment_parser_);
            }
          }
          else
          {
            if (this->payment_parser_ != 0)
            {
              this->payment_parser_->post_ExplanationOfBenefit_Payment ();
              this->payment ();
            }

            count = 0;
            state = 38UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 38UL;
          // Fall through.
        }
      }
      case 38UL:
      {
        if (n == "formCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->formCode_parser_)
            {
              this->formCode_parser_->pre ();
              ctx.nested_parser (this->formCode_parser_);
            }
          }
          else
          {
            if (this->formCode_parser_ != 0)
            {
              this->formCode_parser_->post_CodeableConcept ();
              this->formCode ();
            }

            count = 0;
            state = 39UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 39UL;
          // Fall through.
        }
      }
      case 39UL:
      {
        if (n == "form" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->form_parser_)
            {
              this->form_parser_->pre ();
              ctx.nested_parser (this->form_parser_);
            }
          }
          else
          {
            if (this->form_parser_ != 0)
            {
              this->form_parser_->post_Attachment ();
              this->form ();
            }

            count = 0;
            state = 40UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 40UL;
          // Fall through.
        }
      }
      case 40UL:
      {
        if (n == "processNote" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->processNote_parser_)
            {
              this->processNote_parser_->pre ();
              ctx.nested_parser (this->processNote_parser_);
            }
          }
          else
          {
            if (this->processNote_parser_ != 0)
            {
              this->processNote_parser_->post_ExplanationOfBenefit_ProcessNote ();
              this->processNote ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 41UL;
          // Fall through.
        }
      }
      case 41UL:
      {
        if (n == "benefitPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->benefitPeriod_parser_)
            {
              this->benefitPeriod_parser_->pre ();
              ctx.nested_parser (this->benefitPeriod_parser_);
            }
          }
          else
          {
            if (this->benefitPeriod_parser_ != 0)
            {
              this->benefitPeriod_parser_->post_Period ();
              this->benefitPeriod ();
            }

            count = 0;
            state = 42UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 42UL;
          // Fall through.
        }
      }
      case 42UL:
      {
        if (n == "benefitBalance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->benefitBalance_parser_)
            {
              this->benefitBalance_parser_->pre ();
              ctx.nested_parser (this->benefitBalance_parser_);
            }
          }
          else
          {
            if (this->benefitBalance_parser_ != 0)
            {
              this->benefitBalance_parser_->post_ExplanationOfBenefit_BenefitBalance ();
              this->benefitBalance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Related_pskel.
  //
  bool ExplanationOfBenefit_Related_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "claim" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "relationship" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "reference" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Related_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Related_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Related_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Related_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Related_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "claim" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->claim_parser_)
            {
              this->claim_parser_->pre ();
              ctx.nested_parser (this->claim_parser_);
            }
          }
          else
          {
            if (this->claim_parser_ != 0)
            {
              this->claim_parser_->post_Reference ();
              this->claim ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "relationship" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->relationship_parser_)
            {
              this->relationship_parser_->pre ();
              ctx.nested_parser (this->relationship_parser_);
            }
          }
          else
          {
            if (this->relationship_parser_ != 0)
            {
              this->relationship_parser_->post_CodeableConcept ();
              this->relationship ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "reference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reference_parser_)
            {
              this->reference_parser_->pre ();
              ctx.nested_parser (this->reference_parser_);
            }
          }
          else
          {
            if (this->reference_parser_ != 0)
            {
              this->reference_parser_->post_Identifier ();
              this->reference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Payee_pskel.
  //
  bool ExplanationOfBenefit_Payee_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "party" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Payee_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Payee_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Payee_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Payee_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Payee_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "party" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->party_parser_)
            {
              this->party_parser_->pre ();
              ctx.nested_parser (this->party_parser_);
            }
          }
          else
          {
            if (this->party_parser_ != 0)
            {
              this->party_parser_->post_Reference ();
              this->party ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_CareTeam_pskel.
  //
  bool ExplanationOfBenefit_CareTeam_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_CareTeam_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_CareTeam_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_CareTeam_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sequence_parser_)
            {
              this->sequence_parser_->pre ();
              ctx.nested_parser (this->sequence_parser_);
            }
          }
          else
          {
            if (this->sequence_parser_ != 0)
            {
              this->sequence_parser_->post_positiveInt ();
              this->sequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "provider" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->provider_parser_)
            {
              this->provider_parser_->pre ();
              ctx.nested_parser (this->provider_parser_);
            }
          }
          else
          {
            if (this->provider_parser_ != 0)
            {
              this->provider_parser_->post_Reference ();
              this->provider ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "responsible" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->responsible_parser_)
            {
              this->responsible_parser_->pre ();
              ctx.nested_parser (this->responsible_parser_);
            }
          }
          else
          {
            if (this->responsible_parser_ != 0)
            {
              this->responsible_parser_->post_boolean ();
              this->responsible ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "role" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->role_parser_)
            {
              this->role_parser_->pre ();
              ctx.nested_parser (this->role_parser_);
            }
          }
          else
          {
            if (this->role_parser_ != 0)
            {
              this->role_parser_->post_CodeableConcept ();
              this->role ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "qualification" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->qualification_parser_)
            {
              this->qualification_parser_->pre ();
              ctx.nested_parser (this->qualification_parser_);
            }
          }
          else
          {
            if (this->qualification_parser_ != 0)
            {
              this->qualification_parser_->post_CodeableConcept ();
              this->qualification ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_SupportingInfo_pskel.
  //
  bool ExplanationOfBenefit_SupportingInfo_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_SupportingInfo_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_SupportingInfo_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_SupportingInfo_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sequence_parser_)
            {
              this->sequence_parser_->pre ();
              ctx.nested_parser (this->sequence_parser_);
            }
          }
          else
          {
            if (this->sequence_parser_ != 0)
            {
              this->sequence_parser_->post_positiveInt ();
              this->sequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "code" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->code_parser_)
            {
              this->code_parser_->pre ();
              ctx.nested_parser (this->code_parser_);
            }
          }
          else
          {
            if (this->code_parser_ != 0)
            {
              this->code_parser_->post_CodeableConcept ();
              this->code ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "timingDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingDate_parser_)
            {
              this->timingDate_parser_->pre ();
              ctx.nested_parser (this->timingDate_parser_);
            }
          }
          else
          {
            if (this->timingDate_parser_ != 0)
            {
              this->timingDate_parser_->post_date ();
              this->timingDate ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "timingPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->timingPeriod_parser_)
            {
              this->timingPeriod_parser_->pre ();
              ctx.nested_parser (this->timingPeriod_parser_);
            }
          }
          else
          {
            if (this->timingPeriod_parser_ != 0)
            {
              this->timingPeriod_parser_->post_Period ();
              this->timingPeriod ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "valueAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAttachment_parser_)
            {
              this->valueAttachment_parser_->pre ();
              ctx.nested_parser (this->valueAttachment_parser_);
            }
          }
          else
          {
            if (this->valueAttachment_parser_ != 0)
            {
              this->valueAttachment_parser_->post_Attachment ();
              this->valueAttachment ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "valueReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueReference_parser_)
            {
              this->valueReference_parser_->pre ();
              ctx.nested_parser (this->valueReference_parser_);
            }
          }
          else
          {
            if (this->valueReference_parser_ != 0)
            {
              this->valueReference_parser_->post_Reference ();
              this->valueReference ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "reason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reason_parser_)
            {
              this->reason_parser_->pre ();
              ctx.nested_parser (this->reason_parser_);
            }
          }
          else
          {
            if (this->reason_parser_ != 0)
            {
              this->reason_parser_->post_Coding ();
              this->reason ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Diagnosis_pskel.
  //
  bool ExplanationOfBenefit_Diagnosis_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Diagnosis_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Diagnosis_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Diagnosis_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sequence_parser_)
            {
              this->sequence_parser_->pre ();
              ctx.nested_parser (this->sequence_parser_);
            }
          }
          else
          {
            if (this->sequence_parser_ != 0)
            {
              this->sequence_parser_->post_positiveInt ();
              this->sequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "diagnosisCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diagnosisCodeableConcept_parser_)
            {
              this->diagnosisCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->diagnosisCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->diagnosisCodeableConcept_parser_ != 0)
            {
              this->diagnosisCodeableConcept_parser_->post_CodeableConcept ();
              this->diagnosisCodeableConcept ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "diagnosisReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diagnosisReference_parser_)
            {
              this->diagnosisReference_parser_->pre ();
              ctx.nested_parser (this->diagnosisReference_parser_);
            }
          }
          else
          {
            if (this->diagnosisReference_parser_ != 0)
            {
              this->diagnosisReference_parser_->post_Reference ();
              this->diagnosisReference ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "onAdmission" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->onAdmission_parser_)
            {
              this->onAdmission_parser_->pre ();
              ctx.nested_parser (this->onAdmission_parser_);
            }
          }
          else
          {
            if (this->onAdmission_parser_ != 0)
            {
              this->onAdmission_parser_->post_CodeableConcept ();
              this->onAdmission ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "packageCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->packageCode_parser_)
            {
              this->packageCode_parser_->pre ();
              ctx.nested_parser (this->packageCode_parser_);
            }
          }
          else
          {
            if (this->packageCode_parser_ != 0)
            {
              this->packageCode_parser_->post_CodeableConcept ();
              this->packageCode ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Procedure_pskel.
  //
  bool ExplanationOfBenefit_Procedure_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Procedure_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Procedure_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Procedure_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Procedure_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Procedure_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sequence_parser_)
            {
              this->sequence_parser_->pre ();
              ctx.nested_parser (this->sequence_parser_);
            }
          }
          else
          {
            if (this->sequence_parser_ != 0)
            {
              this->sequence_parser_->post_positiveInt ();
              this->sequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "procedureCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->procedureCodeableConcept_parser_)
            {
              this->procedureCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->procedureCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->procedureCodeableConcept_parser_ != 0)
            {
              this->procedureCodeableConcept_parser_->post_CodeableConcept ();
              this->procedureCodeableConcept ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "procedureReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->procedureReference_parser_)
            {
              this->procedureReference_parser_->pre ();
              ctx.nested_parser (this->procedureReference_parser_);
            }
          }
          else
          {
            if (this->procedureReference_parser_ != 0)
            {
              this->procedureReference_parser_->post_Reference ();
              this->procedureReference ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "udi" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->udi_parser_)
            {
              this->udi_parser_->pre ();
              ctx.nested_parser (this->udi_parser_);
            }
          }
          else
          {
            if (this->udi_parser_ != 0)
            {
              this->udi_parser_->post_Reference ();
              this->udi ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Insurance_pskel.
  //
  bool ExplanationOfBenefit_Insurance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "focal" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Insurance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Insurance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Insurance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Insurance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Insurance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "focal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->focal_parser_)
            {
              this->focal_parser_->pre ();
              ctx.nested_parser (this->focal_parser_);
            }
          }
          else
          {
            if (this->focal_parser_ != 0)
            {
              this->focal_parser_->post_boolean ();
              this->focal ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "coverage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->coverage_parser_)
            {
              this->coverage_parser_->pre ();
              ctx.nested_parser (this->coverage_parser_);
            }
          }
          else
          {
            if (this->coverage_parser_ != 0)
            {
              this->coverage_parser_->post_Reference ();
              this->coverage ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "preAuthRef" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preAuthRef_parser_)
            {
              this->preAuthRef_parser_->pre ();
              ctx.nested_parser (this->preAuthRef_parser_);
            }
          }
          else
          {
            if (this->preAuthRef_parser_ != 0)
            {
              this->preAuthRef_parser_->post_string ();
              this->preAuthRef ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Accident_pskel.
  //
  bool ExplanationOfBenefit_Accident_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "date" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "locationAddress" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "locationReference" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Accident_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Accident_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Accident_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Accident_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Accident_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_date ();
              this->date ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "locationAddress" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationAddress_parser_)
            {
              this->locationAddress_parser_->pre ();
              ctx.nested_parser (this->locationAddress_parser_);
            }
          }
          else
          {
            if (this->locationAddress_parser_ != 0)
            {
              this->locationAddress_parser_->post_Address ();
              this->locationAddress ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "locationReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationReference_parser_)
            {
              this->locationReference_parser_->pre ();
              ctx.nested_parser (this->locationReference_parser_);
            }
          }
          else
          {
            if (this->locationReference_parser_ != 0)
            {
              this->locationReference_parser_->post_Reference ();
              this->locationReference ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Item_pskel.
  //
  bool ExplanationOfBenefit_Item_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Item_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Item_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Item_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Item_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Item_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sequence_parser_)
            {
              this->sequence_parser_->pre ();
              ctx.nested_parser (this->sequence_parser_);
            }
          }
          else
          {
            if (this->sequence_parser_ != 0)
            {
              this->sequence_parser_->post_positiveInt ();
              this->sequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "careTeamSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->careTeamSequence_parser_)
            {
              this->careTeamSequence_parser_->pre ();
              ctx.nested_parser (this->careTeamSequence_parser_);
            }
          }
          else
          {
            if (this->careTeamSequence_parser_ != 0)
            {
              this->careTeamSequence_parser_->post_positiveInt ();
              this->careTeamSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "diagnosisSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diagnosisSequence_parser_)
            {
              this->diagnosisSequence_parser_->pre ();
              ctx.nested_parser (this->diagnosisSequence_parser_);
            }
          }
          else
          {
            if (this->diagnosisSequence_parser_ != 0)
            {
              this->diagnosisSequence_parser_->post_positiveInt ();
              this->diagnosisSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "procedureSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->procedureSequence_parser_)
            {
              this->procedureSequence_parser_->pre ();
              ctx.nested_parser (this->procedureSequence_parser_);
            }
          }
          else
          {
            if (this->procedureSequence_parser_ != 0)
            {
              this->procedureSequence_parser_->post_positiveInt ();
              this->procedureSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "informationSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->informationSequence_parser_)
            {
              this->informationSequence_parser_->pre ();
              ctx.nested_parser (this->informationSequence_parser_);
            }
          }
          else
          {
            if (this->informationSequence_parser_ != 0)
            {
              this->informationSequence_parser_->post_positiveInt ();
              this->informationSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "revenue" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->revenue_parser_)
            {
              this->revenue_parser_->pre ();
              ctx.nested_parser (this->revenue_parser_);
            }
          }
          else
          {
            if (this->revenue_parser_ != 0)
            {
              this->revenue_parser_->post_CodeableConcept ();
              this->revenue ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "programCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->programCode_parser_)
            {
              this->programCode_parser_->pre ();
              ctx.nested_parser (this->programCode_parser_);
            }
          }
          else
          {
            if (this->programCode_parser_ != 0)
            {
              this->programCode_parser_->post_CodeableConcept ();
              this->programCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "servicedDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->servicedDate_parser_)
            {
              this->servicedDate_parser_->pre ();
              ctx.nested_parser (this->servicedDate_parser_);
            }
          }
          else
          {
            if (this->servicedDate_parser_ != 0)
            {
              this->servicedDate_parser_->post_date ();
              this->servicedDate ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "servicedPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->servicedPeriod_parser_)
            {
              this->servicedPeriod_parser_->pre ();
              ctx.nested_parser (this->servicedPeriod_parser_);
            }
          }
          else
          {
            if (this->servicedPeriod_parser_ != 0)
            {
              this->servicedPeriod_parser_->post_Period ();
              this->servicedPeriod ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "locationCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationCodeableConcept_parser_)
            {
              this->locationCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->locationCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->locationCodeableConcept_parser_ != 0)
            {
              this->locationCodeableConcept_parser_->post_CodeableConcept ();
              this->locationCodeableConcept ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "locationAddress" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationAddress_parser_)
            {
              this->locationAddress_parser_->pre ();
              ctx.nested_parser (this->locationAddress_parser_);
            }
          }
          else
          {
            if (this->locationAddress_parser_ != 0)
            {
              this->locationAddress_parser_->post_Address ();
              this->locationAddress ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "locationReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationReference_parser_)
            {
              this->locationReference_parser_->pre ();
              ctx.nested_parser (this->locationReference_parser_);
            }
          }
          else
          {
            if (this->locationReference_parser_ != 0)
            {
              this->locationReference_parser_->post_Reference ();
              this->locationReference ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 18UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "net" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->net_parser_)
            {
              this->net_parser_->pre ();
              ctx.nested_parser (this->net_parser_);
            }
          }
          else
          {
            if (this->net_parser_ != 0)
            {
              this->net_parser_->post_Money ();
              this->net ();
            }

            count = 0;
            state = 19UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "udi" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->udi_parser_)
            {
              this->udi_parser_->pre ();
              ctx.nested_parser (this->udi_parser_);
            }
          }
          else
          {
            if (this->udi_parser_ != 0)
            {
              this->udi_parser_->post_Reference ();
              this->udi ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "bodySite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bodySite_parser_)
            {
              this->bodySite_parser_->pre ();
              ctx.nested_parser (this->bodySite_parser_);
            }
          }
          else
          {
            if (this->bodySite_parser_ != 0)
            {
              this->bodySite_parser_->post_CodeableConcept ();
              this->bodySite ();
            }

            count = 0;
            state = 21UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "subSite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subSite_parser_)
            {
              this->subSite_parser_->pre ();
              ctx.nested_parser (this->subSite_parser_);
            }
          }
          else
          {
            if (this->subSite_parser_ != 0)
            {
              this->subSite_parser_->post_CodeableConcept ();
              this->subSite ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 23UL;
          // Fall through.
        }
      }
      case 23UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 24UL;
          // Fall through.
        }
      }
      case 24UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ExplanationOfBenefit_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 25UL;
          // Fall through.
        }
      }
      case 25UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_ExplanationOfBenefit_Detail ();
              this->detail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Adjudication_pskel.
  //
  bool ExplanationOfBenefit_Adjudication_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Adjudication_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Adjudication_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Adjudication_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "reason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reason_parser_)
            {
              this->reason_parser_->pre ();
              ctx.nested_parser (this->reason_parser_);
            }
          }
          else
          {
            if (this->reason_parser_ != 0)
            {
              this->reason_parser_->post_CodeableConcept ();
              this->reason ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Money ();
              this->amount ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_decimal ();
              this->value ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Detail_pskel.
  //
  bool ExplanationOfBenefit_Detail_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Detail_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Detail_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Detail_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Detail_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sequence_parser_)
            {
              this->sequence_parser_->pre ();
              ctx.nested_parser (this->sequence_parser_);
            }
          }
          else
          {
            if (this->sequence_parser_ != 0)
            {
              this->sequence_parser_->post_positiveInt ();
              this->sequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "revenue" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->revenue_parser_)
            {
              this->revenue_parser_->pre ();
              ctx.nested_parser (this->revenue_parser_);
            }
          }
          else
          {
            if (this->revenue_parser_ != 0)
            {
              this->revenue_parser_->post_CodeableConcept ();
              this->revenue ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "programCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->programCode_parser_)
            {
              this->programCode_parser_->pre ();
              ctx.nested_parser (this->programCode_parser_);
            }
          }
          else
          {
            if (this->programCode_parser_ != 0)
            {
              this->programCode_parser_->post_CodeableConcept ();
              this->programCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "net" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->net_parser_)
            {
              this->net_parser_->pre ();
              ctx.nested_parser (this->net_parser_);
            }
          }
          else
          {
            if (this->net_parser_ != 0)
            {
              this->net_parser_->post_Money ();
              this->net ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "udi" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->udi_parser_)
            {
              this->udi_parser_->pre ();
              ctx.nested_parser (this->udi_parser_);
            }
          }
          else
          {
            if (this->udi_parser_ != 0)
            {
              this->udi_parser_->post_Reference ();
              this->udi ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ExplanationOfBenefit_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "subDetail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subDetail_parser_)
            {
              this->subDetail_parser_->pre ();
              ctx.nested_parser (this->subDetail_parser_);
            }
          }
          else
          {
            if (this->subDetail_parser_ != 0)
            {
              this->subDetail_parser_->post_ExplanationOfBenefit_SubDetail ();
              this->subDetail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_SubDetail_pskel.
  //
  bool ExplanationOfBenefit_SubDetail_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_SubDetail_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_SubDetail_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_SubDetail_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "sequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->sequence_parser_)
            {
              this->sequence_parser_->pre ();
              ctx.nested_parser (this->sequence_parser_);
            }
          }
          else
          {
            if (this->sequence_parser_ != 0)
            {
              this->sequence_parser_->post_positiveInt ();
              this->sequence ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "revenue" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->revenue_parser_)
            {
              this->revenue_parser_->pre ();
              ctx.nested_parser (this->revenue_parser_);
            }
          }
          else
          {
            if (this->revenue_parser_ != 0)
            {
              this->revenue_parser_->post_CodeableConcept ();
              this->revenue ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "programCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->programCode_parser_)
            {
              this->programCode_parser_->pre ();
              ctx.nested_parser (this->programCode_parser_);
            }
          }
          else
          {
            if (this->programCode_parser_ != 0)
            {
              this->programCode_parser_->post_CodeableConcept ();
              this->programCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "net" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->net_parser_)
            {
              this->net_parser_->pre ();
              ctx.nested_parser (this->net_parser_);
            }
          }
          else
          {
            if (this->net_parser_ != 0)
            {
              this->net_parser_->post_Money ();
              this->net ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "udi" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->udi_parser_)
            {
              this->udi_parser_->pre ();
              ctx.nested_parser (this->udi_parser_);
            }
          }
          else
          {
            if (this->udi_parser_ != 0)
            {
              this->udi_parser_->post_Reference ();
              this->udi ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ExplanationOfBenefit_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_AddItem_pskel.
  //
  bool ExplanationOfBenefit_AddItem_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "itemSequence" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "detailSequence" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "subDetailSequence" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "provider" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "productOrService" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_AddItem_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_AddItem_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_AddItem_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_AddItem_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "itemSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->itemSequence_parser_)
            {
              this->itemSequence_parser_->pre ();
              ctx.nested_parser (this->itemSequence_parser_);
            }
          }
          else
          {
            if (this->itemSequence_parser_ != 0)
            {
              this->itemSequence_parser_->post_positiveInt ();
              this->itemSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "detailSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detailSequence_parser_)
            {
              this->detailSequence_parser_->pre ();
              ctx.nested_parser (this->detailSequence_parser_);
            }
          }
          else
          {
            if (this->detailSequence_parser_ != 0)
            {
              this->detailSequence_parser_->post_positiveInt ();
              this->detailSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "subDetailSequence" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subDetailSequence_parser_)
            {
              this->subDetailSequence_parser_->pre ();
              ctx.nested_parser (this->subDetailSequence_parser_);
            }
          }
          else
          {
            if (this->subDetailSequence_parser_ != 0)
            {
              this->subDetailSequence_parser_->post_positiveInt ();
              this->subDetailSequence ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "provider" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->provider_parser_)
            {
              this->provider_parser_->pre ();
              ctx.nested_parser (this->provider_parser_);
            }
          }
          else
          {
            if (this->provider_parser_ != 0)
            {
              this->provider_parser_->post_Reference ();
              this->provider ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "programCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->programCode_parser_)
            {
              this->programCode_parser_->pre ();
              ctx.nested_parser (this->programCode_parser_);
            }
          }
          else
          {
            if (this->programCode_parser_ != 0)
            {
              this->programCode_parser_->post_CodeableConcept ();
              this->programCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "servicedDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->servicedDate_parser_)
            {
              this->servicedDate_parser_->pre ();
              ctx.nested_parser (this->servicedDate_parser_);
            }
          }
          else
          {
            if (this->servicedDate_parser_ != 0)
            {
              this->servicedDate_parser_->post_date ();
              this->servicedDate ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "servicedPeriod" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->servicedPeriod_parser_)
            {
              this->servicedPeriod_parser_->pre ();
              ctx.nested_parser (this->servicedPeriod_parser_);
            }
          }
          else
          {
            if (this->servicedPeriod_parser_ != 0)
            {
              this->servicedPeriod_parser_->post_Period ();
              this->servicedPeriod ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "locationCodeableConcept" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationCodeableConcept_parser_)
            {
              this->locationCodeableConcept_parser_->pre ();
              ctx.nested_parser (this->locationCodeableConcept_parser_);
            }
          }
          else
          {
            if (this->locationCodeableConcept_parser_ != 0)
            {
              this->locationCodeableConcept_parser_->post_CodeableConcept ();
              this->locationCodeableConcept ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "locationAddress" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationAddress_parser_)
            {
              this->locationAddress_parser_->pre ();
              ctx.nested_parser (this->locationAddress_parser_);
            }
          }
          else
          {
            if (this->locationAddress_parser_ != 0)
            {
              this->locationAddress_parser_->post_Address ();
              this->locationAddress ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "locationReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->locationReference_parser_)
            {
              this->locationReference_parser_->pre ();
              ctx.nested_parser (this->locationReference_parser_);
            }
          }
          else
          {
            if (this->locationReference_parser_ != 0)
            {
              this->locationReference_parser_->post_Reference ();
              this->locationReference ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "net" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->net_parser_)
            {
              this->net_parser_->pre ();
              ctx.nested_parser (this->net_parser_);
            }
          }
          else
          {
            if (this->net_parser_ != 0)
            {
              this->net_parser_->post_Money ();
              this->net ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "bodySite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->bodySite_parser_)
            {
              this->bodySite_parser_->pre ();
              ctx.nested_parser (this->bodySite_parser_);
            }
          }
          else
          {
            if (this->bodySite_parser_ != 0)
            {
              this->bodySite_parser_->post_CodeableConcept ();
              this->bodySite ();
            }

            count = 0;
            state = 17UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "subSite" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subSite_parser_)
            {
              this->subSite_parser_->pre ();
              ctx.nested_parser (this->subSite_parser_);
            }
          }
          else
          {
            if (this->subSite_parser_ != 0)
            {
              this->subSite_parser_->post_CodeableConcept ();
              this->subSite ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ExplanationOfBenefit_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "detail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->detail_parser_)
            {
              this->detail_parser_->pre ();
              ctx.nested_parser (this->detail_parser_);
            }
          }
          else
          {
            if (this->detail_parser_ != 0)
            {
              this->detail_parser_->post_ExplanationOfBenefit_Detail1 ();
              this->detail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Detail1_pskel.
  //
  bool ExplanationOfBenefit_Detail1_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Detail1_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Detail1_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Detail1_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Detail1_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "net" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->net_parser_)
            {
              this->net_parser_->pre ();
              ctx.nested_parser (this->net_parser_);
            }
          }
          else
          {
            if (this->net_parser_ != 0)
            {
              this->net_parser_->post_Money ();
              this->net ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ExplanationOfBenefit_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "subDetail" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subDetail_parser_)
            {
              this->subDetail_parser_->pre ();
              ctx.nested_parser (this->subDetail_parser_);
            }
          }
          else
          {
            if (this->subDetail_parser_ != 0)
            {
              this->subDetail_parser_->post_ExplanationOfBenefit_SubDetail1 ();
              this->subDetail ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_SubDetail1_pskel.
  //
  bool ExplanationOfBenefit_SubDetail1_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_SubDetail1_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_SubDetail1_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_SubDetail1_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "productOrService" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productOrService_parser_)
            {
              this->productOrService_parser_->pre ();
              ctx.nested_parser (this->productOrService_parser_);
            }
          }
          else
          {
            if (this->productOrService_parser_ != 0)
            {
              this->productOrService_parser_->post_CodeableConcept ();
              this->productOrService ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "unitPrice" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unitPrice_parser_)
            {
              this->unitPrice_parser_->pre ();
              ctx.nested_parser (this->unitPrice_parser_);
            }
          }
          else
          {
            if (this->unitPrice_parser_ != 0)
            {
              this->unitPrice_parser_->post_Money ();
              this->unitPrice ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "factor" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->factor_parser_)
            {
              this->factor_parser_->pre ();
              ctx.nested_parser (this->factor_parser_);
            }
          }
          else
          {
            if (this->factor_parser_ != 0)
            {
              this->factor_parser_->post_decimal ();
              this->factor ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "net" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->net_parser_)
            {
              this->net_parser_->pre ();
              ctx.nested_parser (this->net_parser_);
            }
          }
          else
          {
            if (this->net_parser_ != 0)
            {
              this->net_parser_->post_Money ();
              this->net ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "noteNumber" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->noteNumber_parser_)
            {
              this->noteNumber_parser_->pre ();
              ctx.nested_parser (this->noteNumber_parser_);
            }
          }
          else
          {
            if (this->noteNumber_parser_ != 0)
            {
              this->noteNumber_parser_->post_positiveInt ();
              this->noteNumber ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "adjudication" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjudication_parser_)
            {
              this->adjudication_parser_->pre ();
              ctx.nested_parser (this->adjudication_parser_);
            }
          }
          else
          {
            if (this->adjudication_parser_ != 0)
            {
              this->adjudication_parser_->post_ExplanationOfBenefit_Adjudication ();
              this->adjudication ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Total_pskel.
  //
  bool ExplanationOfBenefit_Total_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Total_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Total_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Total_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Total_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Total_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Money ();
              this->amount ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Payment_pskel.
  //
  bool ExplanationOfBenefit_Payment_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "adjustment" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "adjustmentReason" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "date" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "amount" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "identifier" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Payment_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Payment_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Payment_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Payment_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Payment_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "adjustment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjustment_parser_)
            {
              this->adjustment_parser_->pre ();
              ctx.nested_parser (this->adjustment_parser_);
            }
          }
          else
          {
            if (this->adjustment_parser_ != 0)
            {
              this->adjustment_parser_->post_Money ();
              this->adjustment ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "adjustmentReason" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->adjustmentReason_parser_)
            {
              this->adjustmentReason_parser_->pre ();
              ctx.nested_parser (this->adjustmentReason_parser_);
            }
          }
          else
          {
            if (this->adjustmentReason_parser_ != 0)
            {
              this->adjustmentReason_parser_->post_CodeableConcept ();
              this->adjustmentReason ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_date ();
              this->date ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Money ();
              this->amount ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_ProcessNote_pskel.
  //
  bool ExplanationOfBenefit_ProcessNote_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "number" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "type" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "text" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "language" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_ProcessNote_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_ProcessNote_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_ProcessNote_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "number" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->number_parser_)
            {
              this->number_parser_->pre ();
              ctx.nested_parser (this->number_parser_);
            }
          }
          else
          {
            if (this->number_parser_ != 0)
            {
              this->number_parser_->post_positiveInt ();
              this->number ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_NoteType ();
              this->type ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_string ();
              this->text ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "language" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->language_parser_)
            {
              this->language_parser_->pre ();
              ctx.nested_parser (this->language_parser_);
            }
          }
          else
          {
            if (this->language_parser_ != 0)
            {
              this->language_parser_->post_CodeableConcept ();
              this->language ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_BenefitBalance_pskel.
  //
  bool ExplanationOfBenefit_BenefitBalance_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "category" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_BenefitBalance_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_BenefitBalance_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_BenefitBalance_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "category" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->category_parser_)
            {
              this->category_parser_->pre ();
              ctx.nested_parser (this->category_parser_);
            }
          }
          else
          {
            if (this->category_parser_ != 0)
            {
              this->category_parser_->post_CodeableConcept ();
              this->category ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "excluded" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->excluded_parser_)
            {
              this->excluded_parser_->pre ();
              ctx.nested_parser (this->excluded_parser_);
            }
          }
          else
          {
            if (this->excluded_parser_ != 0)
            {
              this->excluded_parser_->post_boolean ();
              this->excluded ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_string ();
              this->description ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "network" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->network_parser_)
            {
              this->network_parser_->pre ();
              ctx.nested_parser (this->network_parser_);
            }
          }
          else
          {
            if (this->network_parser_ != 0)
            {
              this->network_parser_->post_CodeableConcept ();
              this->network ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "unit" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->unit_parser_)
            {
              this->unit_parser_->pre ();
              ctx.nested_parser (this->unit_parser_);
            }
          }
          else
          {
            if (this->unit_parser_ != 0)
            {
              this->unit_parser_->post_CodeableConcept ();
              this->unit ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "term" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->term_parser_)
            {
              this->term_parser_->pre ();
              ctx.nested_parser (this->term_parser_);
            }
          }
          else
          {
            if (this->term_parser_ != 0)
            {
              this->term_parser_->post_CodeableConcept ();
              this->term ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "financial" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->financial_parser_)
            {
              this->financial_parser_->pre ();
              ctx.nested_parser (this->financial_parser_);
            }
          }
          else
          {
            if (this->financial_parser_ != 0)
            {
              this->financial_parser_->post_ExplanationOfBenefit_Financial ();
              this->financial ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ExplanationOfBenefit_Financial_pskel.
  //
  bool ExplanationOfBenefit_Financial_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &ExplanationOfBenefit_Financial_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ExplanationOfBenefit_Financial_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ExplanationOfBenefit_Financial_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void ExplanationOfBenefit_Financial_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void ExplanationOfBenefit_Financial_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "allowedUnsignedInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allowedUnsignedInt_parser_)
            {
              this->allowedUnsignedInt_parser_->pre ();
              ctx.nested_parser (this->allowedUnsignedInt_parser_);
            }
          }
          else
          {
            if (this->allowedUnsignedInt_parser_ != 0)
            {
              this->allowedUnsignedInt_parser_->post_unsignedInt ();
              this->allowedUnsignedInt ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "allowedString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allowedString_parser_)
            {
              this->allowedString_parser_->pre ();
              ctx.nested_parser (this->allowedString_parser_);
            }
          }
          else
          {
            if (this->allowedString_parser_ != 0)
            {
              this->allowedString_parser_->post_string ();
              this->allowedString ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "allowedMoney" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allowedMoney_parser_)
            {
              this->allowedMoney_parser_->pre ();
              ctx.nested_parser (this->allowedMoney_parser_);
            }
          }
          else
          {
            if (this->allowedMoney_parser_ != 0)
            {
              this->allowedMoney_parser_->post_Money ();
              this->allowedMoney ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "usedUnsignedInt" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usedUnsignedInt_parser_)
            {
              this->usedUnsignedInt_parser_->pre ();
              ctx.nested_parser (this->usedUnsignedInt_parser_);
            }
          }
          else
          {
            if (this->usedUnsignedInt_parser_ != 0)
            {
              this->usedUnsignedInt_parser_->post_unsignedInt ();
              this->usedUnsignedInt ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "usedMoney" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usedMoney_parser_)
            {
              this->usedMoney_parser_->pre ();
              ctx.nested_parser (this->usedMoney_parser_);
            }
          }
          else
          {
            if (this->usedMoney_parser_ != 0)
            {
              this->usedMoney_parser_->post_Money ();
              this->usedMoney ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for ExplanationOfBenefitStatus_pskel.
  //
  bool ExplanationOfBenefitStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_ExplanationOfBenefitStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

