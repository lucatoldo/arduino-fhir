// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "namingsystem-pskel.hxx"

namespace fhir
{
  // NamingSystem_pskel
  //

  void NamingSystem_pskel::
  name_parser (::fhir::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void NamingSystem_pskel::
  status_parser (::fhir::PublicationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void NamingSystem_pskel::
  kind_parser (::fhir::NamingSystemType_pskel& p)
  {
    this->kind_parser_ = &p;
  }

  void NamingSystem_pskel::
  date_parser (::fhir::dateTime_pskel& p)
  {
    this->date_parser_ = &p;
  }

  void NamingSystem_pskel::
  publisher_parser (::fhir::string_pskel& p)
  {
    this->publisher_parser_ = &p;
  }

  void NamingSystem_pskel::
  contact_parser (::fhir::ContactDetail_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void NamingSystem_pskel::
  responsible_parser (::fhir::string_pskel& p)
  {
    this->responsible_parser_ = &p;
  }

  void NamingSystem_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void NamingSystem_pskel::
  description_parser (::fhir::markdown_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void NamingSystem_pskel::
  useContext_parser (::fhir::UsageContext_pskel& p)
  {
    this->useContext_parser_ = &p;
  }

  void NamingSystem_pskel::
  jurisdiction_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->jurisdiction_parser_ = &p;
  }

  void NamingSystem_pskel::
  usage_parser (::fhir::string_pskel& p)
  {
    this->usage_parser_ = &p;
  }

  void NamingSystem_pskel::
  uniqueId_parser (::fhir::NamingSystem_UniqueId_pskel& p)
  {
    this->uniqueId_parser_ = &p;
  }

  void NamingSystem_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& name,
           ::fhir::PublicationStatus_pskel& status,
           ::fhir::NamingSystemType_pskel& kind,
           ::fhir::dateTime_pskel& date,
           ::fhir::string_pskel& publisher,
           ::fhir::ContactDetail_pskel& contact,
           ::fhir::string_pskel& responsible,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::markdown_pskel& description,
           ::fhir::UsageContext_pskel& useContext,
           ::fhir::CodeableConcept_pskel& jurisdiction,
           ::fhir::string_pskel& usage,
           ::fhir::NamingSystem_UniqueId_pskel& uniqueId)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->name_parser_ = &name;
    this->status_parser_ = &status;
    this->kind_parser_ = &kind;
    this->date_parser_ = &date;
    this->publisher_parser_ = &publisher;
    this->contact_parser_ = &contact;
    this->responsible_parser_ = &responsible;
    this->type_parser_ = &type;
    this->description_parser_ = &description;
    this->useContext_parser_ = &useContext;
    this->jurisdiction_parser_ = &jurisdiction;
    this->usage_parser_ = &usage;
    this->uniqueId_parser_ = &uniqueId;
  }

  NamingSystem_pskel::
  NamingSystem_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    NamingSystem_impl_ (0),
    name_parser_ (0),
    status_parser_ (0),
    kind_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    responsible_parser_ (0),
    type_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    usage_parser_ (0),
    uniqueId_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  NamingSystem_pskel::
  NamingSystem_pskel (NamingSystem_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    NamingSystem_impl_ (impl),
    name_parser_ (0),
    status_parser_ (0),
    kind_parser_ (0),
    date_parser_ (0),
    publisher_parser_ (0),
    contact_parser_ (0),
    responsible_parser_ (0),
    type_parser_ (0),
    description_parser_ (0),
    useContext_parser_ (0),
    jurisdiction_parser_ (0),
    usage_parser_ (0),
    uniqueId_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // NamingSystem_UniqueId_pskel
  //

  void NamingSystem_UniqueId_pskel::
  type_parser (::fhir::NamingSystemIdentifierType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void NamingSystem_UniqueId_pskel::
  value_parser (::fhir::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void NamingSystem_UniqueId_pskel::
  preferred_parser (::fhir::boolean_pskel& p)
  {
    this->preferred_parser_ = &p;
  }

  void NamingSystem_UniqueId_pskel::
  comment_parser (::fhir::string_pskel& p)
  {
    this->comment_parser_ = &p;
  }

  void NamingSystem_UniqueId_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void NamingSystem_UniqueId_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::NamingSystemIdentifierType_pskel& type,
           ::fhir::string_pskel& value,
           ::fhir::boolean_pskel& preferred,
           ::fhir::string_pskel& comment,
           ::fhir::Period_pskel& period)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->value_parser_ = &value;
    this->preferred_parser_ = &preferred;
    this->comment_parser_ = &comment;
    this->period_parser_ = &period;
  }

  NamingSystem_UniqueId_pskel::
  NamingSystem_UniqueId_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    NamingSystem_UniqueId_impl_ (0),
    type_parser_ (0),
    value_parser_ (0),
    preferred_parser_ (0),
    comment_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  NamingSystem_UniqueId_pskel::
  NamingSystem_UniqueId_pskel (NamingSystem_UniqueId_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    NamingSystem_UniqueId_impl_ (impl),
    type_parser_ (0),
    value_parser_ (0),
    preferred_parser_ (0),
    comment_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // NamingSystemIdentifierType_list_pskel
  //

  NamingSystemIdentifierType_list_pskel::
  NamingSystemIdentifierType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    NamingSystemIdentifierType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_NamingSystemIdentifierType_list_pskel_enums_, 4UL);
  }

  NamingSystemIdentifierType_list_pskel::
  NamingSystemIdentifierType_list_pskel (NamingSystemIdentifierType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    NamingSystemIdentifierType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_NamingSystemIdentifierType_list_pskel_enums_, 4UL);
  }

  // NamingSystemIdentifierType_pskel
  //

  void NamingSystemIdentifierType_pskel::
  value_parser (::fhir::NamingSystemIdentifierType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void NamingSystemIdentifierType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::NamingSystemIdentifierType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  NamingSystemIdentifierType_pskel::
  NamingSystemIdentifierType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    NamingSystemIdentifierType_impl_ (0),
    value_parser_ (0)
  {
  }

  NamingSystemIdentifierType_pskel::
  NamingSystemIdentifierType_pskel (NamingSystemIdentifierType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    NamingSystemIdentifierType_impl_ (impl),
    value_parser_ (0)
  {
  }

  // NamingSystemType_list_pskel
  //

  NamingSystemType_list_pskel::
  NamingSystemType_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    NamingSystemType_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_NamingSystemType_list_pskel_enums_, 3UL);
  }

  NamingSystemType_list_pskel::
  NamingSystemType_list_pskel (NamingSystemType_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    NamingSystemType_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_NamingSystemType_list_pskel_enums_, 3UL);
  }

  // NamingSystemType_pskel
  //

  void NamingSystemType_pskel::
  value_parser (::fhir::NamingSystemType_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void NamingSystemType_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::NamingSystemType_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  NamingSystemType_pskel::
  NamingSystemType_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    NamingSystemType_impl_ (0),
    value_parser_ (0)
  {
  }

  NamingSystemType_pskel::
  NamingSystemType_pskel (NamingSystemType_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    NamingSystemType_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // NamingSystem_pskel
  //

  void NamingSystem_pskel::
  name ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->name ();
  }

  void NamingSystem_pskel::
  status ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->status ();
  }

  void NamingSystem_pskel::
  kind ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->kind ();
  }

  void NamingSystem_pskel::
  date ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->date ();
  }

  void NamingSystem_pskel::
  publisher ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->publisher ();
  }

  void NamingSystem_pskel::
  contact ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->contact ();
  }

  void NamingSystem_pskel::
  responsible ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->responsible ();
  }

  void NamingSystem_pskel::
  type ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->type ();
  }

  void NamingSystem_pskel::
  description ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->description ();
  }

  void NamingSystem_pskel::
  useContext ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->useContext ();
  }

  void NamingSystem_pskel::
  jurisdiction ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->jurisdiction ();
  }

  void NamingSystem_pskel::
  usage ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->usage ();
  }

  void NamingSystem_pskel::
  uniqueId ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->uniqueId ();
  }

  void NamingSystem_pskel::
  post_NamingSystem ()
  {
    if (this->NamingSystem_impl_)
      this->NamingSystem_impl_->post_NamingSystem ();
    else
      post_DomainResource ();
  }

  void NamingSystem_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->kind_parser_)
      this->kind_parser_->_reset ();

    if (this->date_parser_)
      this->date_parser_->_reset ();

    if (this->publisher_parser_)
      this->publisher_parser_->_reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->responsible_parser_)
      this->responsible_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->useContext_parser_)
      this->useContext_parser_->_reset ();

    if (this->jurisdiction_parser_)
      this->jurisdiction_parser_->_reset ();

    if (this->usage_parser_)
      this->usage_parser_->_reset ();

    if (this->uniqueId_parser_)
      this->uniqueId_parser_->_reset ();

    this->resetting_ = false;
  }

  // NamingSystem_UniqueId_pskel
  //

  void NamingSystem_UniqueId_pskel::
  type ()
  {
    if (this->NamingSystem_UniqueId_impl_)
      this->NamingSystem_UniqueId_impl_->type ();
  }

  void NamingSystem_UniqueId_pskel::
  value ()
  {
    if (this->NamingSystem_UniqueId_impl_)
      this->NamingSystem_UniqueId_impl_->value ();
  }

  void NamingSystem_UniqueId_pskel::
  preferred ()
  {
    if (this->NamingSystem_UniqueId_impl_)
      this->NamingSystem_UniqueId_impl_->preferred ();
  }

  void NamingSystem_UniqueId_pskel::
  comment ()
  {
    if (this->NamingSystem_UniqueId_impl_)
      this->NamingSystem_UniqueId_impl_->comment ();
  }

  void NamingSystem_UniqueId_pskel::
  period ()
  {
    if (this->NamingSystem_UniqueId_impl_)
      this->NamingSystem_UniqueId_impl_->period ();
  }

  void NamingSystem_UniqueId_pskel::
  post_NamingSystem_UniqueId ()
  {
    if (this->NamingSystem_UniqueId_impl_)
      this->NamingSystem_UniqueId_impl_->post_NamingSystem_UniqueId ();
    else
      post_BackboneElement ();
  }

  void NamingSystem_UniqueId_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    if (this->preferred_parser_)
      this->preferred_parser_->_reset ();

    if (this->comment_parser_)
      this->comment_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    this->resetting_ = false;
  }

  // NamingSystemIdentifierType_list_pskel
  //

  void NamingSystemIdentifierType_list_pskel::
  post_NamingSystemIdentifierType_list ()
  {
    if (this->NamingSystemIdentifierType_list_impl_)
      this->NamingSystemIdentifierType_list_impl_->post_NamingSystemIdentifierType_list ();
    else
      post_code_primitive ();
  }

  const char* const NamingSystemIdentifierType_list_pskel::_xsde_NamingSystemIdentifierType_list_pskel_enums_[4UL] = 
  {
    "oid",
    "other",
    "uri",
    "uuid"
  };

  // NamingSystemIdentifierType_pskel
  //

  void NamingSystemIdentifierType_pskel::
  value ()
  {
    if (this->NamingSystemIdentifierType_impl_)
      this->NamingSystemIdentifierType_impl_->value ();
  }

  void NamingSystemIdentifierType_pskel::
  post_NamingSystemIdentifierType ()
  {
    if (this->NamingSystemIdentifierType_impl_)
      this->NamingSystemIdentifierType_impl_->post_NamingSystemIdentifierType ();
    else
      post_Element ();
  }

  void NamingSystemIdentifierType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // NamingSystemType_list_pskel
  //

  void NamingSystemType_list_pskel::
  post_NamingSystemType_list ()
  {
    if (this->NamingSystemType_list_impl_)
      this->NamingSystemType_list_impl_->post_NamingSystemType_list ();
    else
      post_code_primitive ();
  }

  const char* const NamingSystemType_list_pskel::_xsde_NamingSystemType_list_pskel_enums_[3UL] = 
  {
    "codesystem",
    "identifier",
    "root"
  };

  // NamingSystemType_pskel
  //

  void NamingSystemType_pskel::
  value ()
  {
    if (this->NamingSystemType_impl_)
      this->NamingSystemType_impl_->value ();
  }

  void NamingSystemType_pskel::
  post_NamingSystemType ()
  {
    if (this->NamingSystemType_impl_)
      this->NamingSystemType_impl_->post_NamingSystemType ();
    else
      post_Element ();
  }

  void NamingSystemType_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for NamingSystem_pskel.
  //
  bool NamingSystem_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &NamingSystem_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool NamingSystem_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void NamingSystem_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void NamingSystem_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void NamingSystem_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->name_parser_)
            {
              this->name_parser_->pre ();
              ctx.nested_parser (this->name_parser_);
            }
          }
          else
          {
            if (this->name_parser_ != 0)
            {
              this->name_parser_->post_string ();
              this->name ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_PublicationStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "kind" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->kind_parser_)
            {
              this->kind_parser_->pre ();
              ctx.nested_parser (this->kind_parser_);
            }
          }
          else
          {
            if (this->kind_parser_ != 0)
            {
              this->kind_parser_->post_NamingSystemType ();
              this->kind ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "date" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->date_parser_)
            {
              this->date_parser_->pre ();
              ctx.nested_parser (this->date_parser_);
            }
          }
          else
          {
            if (this->date_parser_ != 0)
            {
              this->date_parser_->post_dateTime ();
              this->date ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "publisher" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->publisher_parser_)
            {
              this->publisher_parser_->pre ();
              ctx.nested_parser (this->publisher_parser_);
            }
          }
          else
          {
            if (this->publisher_parser_ != 0)
            {
              this->publisher_parser_->post_string ();
              this->publisher ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "contact" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->contact_parser_)
            {
              this->contact_parser_->pre ();
              ctx.nested_parser (this->contact_parser_);
            }
          }
          else
          {
            if (this->contact_parser_ != 0)
            {
              this->contact_parser_->post_ContactDetail ();
              this->contact ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "responsible" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->responsible_parser_)
            {
              this->responsible_parser_->pre ();
              ctx.nested_parser (this->responsible_parser_);
            }
          }
          else
          {
            if (this->responsible_parser_ != 0)
            {
              this->responsible_parser_->post_string ();
              this->responsible ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "description" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->description_parser_)
            {
              this->description_parser_->pre ();
              ctx.nested_parser (this->description_parser_);
            }
          }
          else
          {
            if (this->description_parser_ != 0)
            {
              this->description_parser_->post_markdown ();
              this->description ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "useContext" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->useContext_parser_)
            {
              this->useContext_parser_->pre ();
              ctx.nested_parser (this->useContext_parser_);
            }
          }
          else
          {
            if (this->useContext_parser_ != 0)
            {
              this->useContext_parser_->post_UsageContext ();
              this->useContext ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "jurisdiction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->jurisdiction_parser_)
            {
              this->jurisdiction_parser_->pre ();
              ctx.nested_parser (this->jurisdiction_parser_);
            }
          }
          else
          {
            if (this->jurisdiction_parser_ != 0)
            {
              this->jurisdiction_parser_->post_CodeableConcept ();
              this->jurisdiction ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "usage" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->usage_parser_)
            {
              this->usage_parser_->pre ();
              ctx.nested_parser (this->usage_parser_);
            }
          }
          else
          {
            if (this->usage_parser_ != 0)
            {
              this->usage_parser_->post_string ();
              this->usage ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "uniqueId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->uniqueId_parser_)
            {
              this->uniqueId_parser_->pre ();
              ctx.nested_parser (this->uniqueId_parser_);
            }
          }
          else
          {
            if (this->uniqueId_parser_ != 0)
            {
              this->uniqueId_parser_->post_NamingSystem_UniqueId ();
              this->uniqueId ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for NamingSystem_UniqueId_pskel.
  //
  bool NamingSystem_UniqueId_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &NamingSystem_UniqueId_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool NamingSystem_UniqueId_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void NamingSystem_UniqueId_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void NamingSystem_UniqueId_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void NamingSystem_UniqueId_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_NamingSystemIdentifierType ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "value" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->value_parser_)
            {
              this->value_parser_->pre ();
              ctx.nested_parser (this->value_parser_);
            }
          }
          else
          {
            if (this->value_parser_ != 0)
            {
              this->value_parser_->post_string ();
              this->value ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "preferred" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preferred_parser_)
            {
              this->preferred_parser_->pre ();
              ctx.nested_parser (this->preferred_parser_);
            }
          }
          else
          {
            if (this->preferred_parser_ != 0)
            {
              this->preferred_parser_->post_boolean ();
              this->preferred ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "comment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->comment_parser_)
            {
              this->comment_parser_->pre ();
              ctx.nested_parser (this->comment_parser_);
            }
          }
          else
          {
            if (this->comment_parser_ != 0)
            {
              this->comment_parser_->post_string ();
              this->comment ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for NamingSystemIdentifierType_pskel.
  //
  bool NamingSystemIdentifierType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_NamingSystemIdentifierType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for NamingSystemType_pskel.
  //
  bool NamingSystemType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_NamingSystemType_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

