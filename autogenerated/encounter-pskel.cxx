// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "encounter-pskel.hxx"

namespace fhir
{
  // Encounter_pskel
  //

  void Encounter_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void Encounter_pskel::
  status_parser (::fhir::EncounterStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Encounter_pskel::
  statusHistory_parser (::fhir::Encounter_StatusHistory_pskel& p)
  {
    this->statusHistory_parser_ = &p;
  }

  void Encounter_pskel::
  class__parser (::fhir::Coding_pskel& p)
  {
    this->class__parser_ = &p;
  }

  void Encounter_pskel::
  classHistory_parser (::fhir::Encounter_ClassHistory_pskel& p)
  {
    this->classHistory_parser_ = &p;
  }

  void Encounter_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Encounter_pskel::
  serviceType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->serviceType_parser_ = &p;
  }

  void Encounter_pskel::
  priority_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void Encounter_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void Encounter_pskel::
  episodeOfCare_parser (::fhir::Reference_pskel& p)
  {
    this->episodeOfCare_parser_ = &p;
  }

  void Encounter_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void Encounter_pskel::
  participant_parser (::fhir::Encounter_Participant_pskel& p)
  {
    this->participant_parser_ = &p;
  }

  void Encounter_pskel::
  appointment_parser (::fhir::Reference_pskel& p)
  {
    this->appointment_parser_ = &p;
  }

  void Encounter_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Encounter_pskel::
  length_parser (::fhir::Duration_pskel& p)
  {
    this->length_parser_ = &p;
  }

  void Encounter_pskel::
  reasonCode_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reasonCode_parser_ = &p;
  }

  void Encounter_pskel::
  reasonReference_parser (::fhir::Reference_pskel& p)
  {
    this->reasonReference_parser_ = &p;
  }

  void Encounter_pskel::
  diagnosis_parser (::fhir::Encounter_Diagnosis_pskel& p)
  {
    this->diagnosis_parser_ = &p;
  }

  void Encounter_pskel::
  account_parser (::fhir::Reference_pskel& p)
  {
    this->account_parser_ = &p;
  }

  void Encounter_pskel::
  hospitalization_parser (::fhir::Encounter_Hospitalization_pskel& p)
  {
    this->hospitalization_parser_ = &p;
  }

  void Encounter_pskel::
  location_parser (::fhir::Encounter_Location_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void Encounter_pskel::
  serviceProvider_parser (::fhir::Reference_pskel& p)
  {
    this->serviceProvider_parser_ = &p;
  }

  void Encounter_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void Encounter_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::EncounterStatus_pskel& status,
           ::fhir::Encounter_StatusHistory_pskel& statusHistory,
           ::fhir::Coding_pskel& class_,
           ::fhir::Encounter_ClassHistory_pskel& classHistory,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::CodeableConcept_pskel& serviceType,
           ::fhir::CodeableConcept_pskel& priority,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& episodeOfCare,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Encounter_Participant_pskel& participant,
           ::fhir::Reference_pskel& appointment,
           ::fhir::Period_pskel& period,
           ::fhir::Duration_pskel& length,
           ::fhir::CodeableConcept_pskel& reasonCode,
           ::fhir::Reference_pskel& reasonReference,
           ::fhir::Encounter_Diagnosis_pskel& diagnosis,
           ::fhir::Reference_pskel& account,
           ::fhir::Encounter_Hospitalization_pskel& hospitalization,
           ::fhir::Encounter_Location_pskel& location,
           ::fhir::Reference_pskel& serviceProvider,
           ::fhir::Reference_pskel& partOf)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->status_parser_ = &status;
    this->statusHistory_parser_ = &statusHistory;
    this->class__parser_ = &class_;
    this->classHistory_parser_ = &classHistory;
    this->type_parser_ = &type;
    this->serviceType_parser_ = &serviceType;
    this->priority_parser_ = &priority;
    this->subject_parser_ = &subject;
    this->episodeOfCare_parser_ = &episodeOfCare;
    this->basedOn_parser_ = &basedOn;
    this->participant_parser_ = &participant;
    this->appointment_parser_ = &appointment;
    this->period_parser_ = &period;
    this->length_parser_ = &length;
    this->reasonCode_parser_ = &reasonCode;
    this->reasonReference_parser_ = &reasonReference;
    this->diagnosis_parser_ = &diagnosis;
    this->account_parser_ = &account;
    this->hospitalization_parser_ = &hospitalization;
    this->location_parser_ = &location;
    this->serviceProvider_parser_ = &serviceProvider;
    this->partOf_parser_ = &partOf;
  }

  Encounter_pskel::
  Encounter_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    Encounter_impl_ (0),
    identifier_parser_ (0),
    status_parser_ (0),
    statusHistory_parser_ (0),
    class__parser_ (0),
    classHistory_parser_ (0),
    type_parser_ (0),
    serviceType_parser_ (0),
    priority_parser_ (0),
    subject_parser_ (0),
    episodeOfCare_parser_ (0),
    basedOn_parser_ (0),
    participant_parser_ (0),
    appointment_parser_ (0),
    period_parser_ (0),
    length_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    diagnosis_parser_ (0),
    account_parser_ (0),
    hospitalization_parser_ (0),
    location_parser_ (0),
    serviceProvider_parser_ (0),
    partOf_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Encounter_pskel::
  Encounter_pskel (Encounter_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    Encounter_impl_ (impl),
    identifier_parser_ (0),
    status_parser_ (0),
    statusHistory_parser_ (0),
    class__parser_ (0),
    classHistory_parser_ (0),
    type_parser_ (0),
    serviceType_parser_ (0),
    priority_parser_ (0),
    subject_parser_ (0),
    episodeOfCare_parser_ (0),
    basedOn_parser_ (0),
    participant_parser_ (0),
    appointment_parser_ (0),
    period_parser_ (0),
    length_parser_ (0),
    reasonCode_parser_ (0),
    reasonReference_parser_ (0),
    diagnosis_parser_ (0),
    account_parser_ (0),
    hospitalization_parser_ (0),
    location_parser_ (0),
    serviceProvider_parser_ (0),
    partOf_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Encounter_StatusHistory_pskel
  //

  void Encounter_StatusHistory_pskel::
  status_parser (::fhir::EncounterStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Encounter_StatusHistory_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Encounter_StatusHistory_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::EncounterStatus_pskel& status,
           ::fhir::Period_pskel& period)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->status_parser_ = &status;
    this->period_parser_ = &period;
  }

  Encounter_StatusHistory_pskel::
  Encounter_StatusHistory_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Encounter_StatusHistory_impl_ (0),
    status_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Encounter_StatusHistory_pskel::
  Encounter_StatusHistory_pskel (Encounter_StatusHistory_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Encounter_StatusHistory_impl_ (impl),
    status_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Encounter_ClassHistory_pskel
  //

  void Encounter_ClassHistory_pskel::
  class__parser (::fhir::Coding_pskel& p)
  {
    this->class__parser_ = &p;
  }

  void Encounter_ClassHistory_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Encounter_ClassHistory_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Coding_pskel& class_,
           ::fhir::Period_pskel& period)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->class__parser_ = &class_;
    this->period_parser_ = &period;
  }

  Encounter_ClassHistory_pskel::
  Encounter_ClassHistory_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Encounter_ClassHistory_impl_ (0),
    class__parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Encounter_ClassHistory_pskel::
  Encounter_ClassHistory_pskel (Encounter_ClassHistory_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Encounter_ClassHistory_impl_ (impl),
    class__parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Encounter_Participant_pskel
  //

  void Encounter_Participant_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void Encounter_Participant_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Encounter_Participant_pskel::
  individual_parser (::fhir::Reference_pskel& p)
  {
    this->individual_parser_ = &p;
  }

  void Encounter_Participant_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Period_pskel& period,
           ::fhir::Reference_pskel& individual)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->period_parser_ = &period;
    this->individual_parser_ = &individual;
  }

  Encounter_Participant_pskel::
  Encounter_Participant_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Encounter_Participant_impl_ (0),
    type_parser_ (0),
    period_parser_ (0),
    individual_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Encounter_Participant_pskel::
  Encounter_Participant_pskel (Encounter_Participant_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Encounter_Participant_impl_ (impl),
    type_parser_ (0),
    period_parser_ (0),
    individual_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Encounter_Diagnosis_pskel
  //

  void Encounter_Diagnosis_pskel::
  condition_parser (::fhir::Reference_pskel& p)
  {
    this->condition_parser_ = &p;
  }

  void Encounter_Diagnosis_pskel::
  use_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->use_parser_ = &p;
  }

  void Encounter_Diagnosis_pskel::
  rank_parser (::fhir::positiveInt_pskel& p)
  {
    this->rank_parser_ = &p;
  }

  void Encounter_Diagnosis_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& condition,
           ::fhir::CodeableConcept_pskel& use,
           ::fhir::positiveInt_pskel& rank)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->condition_parser_ = &condition;
    this->use_parser_ = &use;
    this->rank_parser_ = &rank;
  }

  Encounter_Diagnosis_pskel::
  Encounter_Diagnosis_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Encounter_Diagnosis_impl_ (0),
    condition_parser_ (0),
    use_parser_ (0),
    rank_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Encounter_Diagnosis_pskel::
  Encounter_Diagnosis_pskel (Encounter_Diagnosis_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Encounter_Diagnosis_impl_ (impl),
    condition_parser_ (0),
    use_parser_ (0),
    rank_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Encounter_Hospitalization_pskel
  //

  void Encounter_Hospitalization_pskel::
  preAdmissionIdentifier_parser (::fhir::Identifier_pskel& p)
  {
    this->preAdmissionIdentifier_parser_ = &p;
  }

  void Encounter_Hospitalization_pskel::
  origin_parser (::fhir::Reference_pskel& p)
  {
    this->origin_parser_ = &p;
  }

  void Encounter_Hospitalization_pskel::
  admitSource_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->admitSource_parser_ = &p;
  }

  void Encounter_Hospitalization_pskel::
  reAdmission_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->reAdmission_parser_ = &p;
  }

  void Encounter_Hospitalization_pskel::
  dietPreference_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->dietPreference_parser_ = &p;
  }

  void Encounter_Hospitalization_pskel::
  specialCourtesy_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->specialCourtesy_parser_ = &p;
  }

  void Encounter_Hospitalization_pskel::
  specialArrangement_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->specialArrangement_parser_ = &p;
  }

  void Encounter_Hospitalization_pskel::
  destination_parser (::fhir::Reference_pskel& p)
  {
    this->destination_parser_ = &p;
  }

  void Encounter_Hospitalization_pskel::
  dischargeDisposition_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->dischargeDisposition_parser_ = &p;
  }

  void Encounter_Hospitalization_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& preAdmissionIdentifier,
           ::fhir::Reference_pskel& origin,
           ::fhir::CodeableConcept_pskel& admitSource,
           ::fhir::CodeableConcept_pskel& reAdmission,
           ::fhir::CodeableConcept_pskel& dietPreference,
           ::fhir::CodeableConcept_pskel& specialCourtesy,
           ::fhir::CodeableConcept_pskel& specialArrangement,
           ::fhir::Reference_pskel& destination,
           ::fhir::CodeableConcept_pskel& dischargeDisposition)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->preAdmissionIdentifier_parser_ = &preAdmissionIdentifier;
    this->origin_parser_ = &origin;
    this->admitSource_parser_ = &admitSource;
    this->reAdmission_parser_ = &reAdmission;
    this->dietPreference_parser_ = &dietPreference;
    this->specialCourtesy_parser_ = &specialCourtesy;
    this->specialArrangement_parser_ = &specialArrangement;
    this->destination_parser_ = &destination;
    this->dischargeDisposition_parser_ = &dischargeDisposition;
  }

  Encounter_Hospitalization_pskel::
  Encounter_Hospitalization_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Encounter_Hospitalization_impl_ (0),
    preAdmissionIdentifier_parser_ (0),
    origin_parser_ (0),
    admitSource_parser_ (0),
    reAdmission_parser_ (0),
    dietPreference_parser_ (0),
    specialCourtesy_parser_ (0),
    specialArrangement_parser_ (0),
    destination_parser_ (0),
    dischargeDisposition_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Encounter_Hospitalization_pskel::
  Encounter_Hospitalization_pskel (Encounter_Hospitalization_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Encounter_Hospitalization_impl_ (impl),
    preAdmissionIdentifier_parser_ (0),
    origin_parser_ (0),
    admitSource_parser_ (0),
    reAdmission_parser_ (0),
    dietPreference_parser_ (0),
    specialCourtesy_parser_ (0),
    specialArrangement_parser_ (0),
    destination_parser_ (0),
    dischargeDisposition_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // Encounter_Location_pskel
  //

  void Encounter_Location_pskel::
  location_parser (::fhir::Reference_pskel& p)
  {
    this->location_parser_ = &p;
  }

  void Encounter_Location_pskel::
  status_parser (::fhir::EncounterLocationStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void Encounter_Location_pskel::
  physicalType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->physicalType_parser_ = &p;
  }

  void Encounter_Location_pskel::
  period_parser (::fhir::Period_pskel& p)
  {
    this->period_parser_ = &p;
  }

  void Encounter_Location_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Reference_pskel& location,
           ::fhir::EncounterLocationStatus_pskel& status,
           ::fhir::CodeableConcept_pskel& physicalType,
           ::fhir::Period_pskel& period)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->location_parser_ = &location;
    this->status_parser_ = &status;
    this->physicalType_parser_ = &physicalType;
    this->period_parser_ = &period;
  }

  Encounter_Location_pskel::
  Encounter_Location_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    Encounter_Location_impl_ (0),
    location_parser_ (0),
    status_parser_ (0),
    physicalType_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Encounter_Location_pskel::
  Encounter_Location_pskel (Encounter_Location_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    Encounter_Location_impl_ (impl),
    location_parser_ (0),
    status_parser_ (0),
    physicalType_parser_ (0),
    period_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // EncounterLocationStatus_list_pskel
  //

  EncounterLocationStatus_list_pskel::
  EncounterLocationStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    EncounterLocationStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_EncounterLocationStatus_list_pskel_enums_, 4UL);
  }

  EncounterLocationStatus_list_pskel::
  EncounterLocationStatus_list_pskel (EncounterLocationStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    EncounterLocationStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_EncounterLocationStatus_list_pskel_enums_, 4UL);
  }

  // EncounterLocationStatus_pskel
  //

  void EncounterLocationStatus_pskel::
  value_parser (::fhir::EncounterLocationStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void EncounterLocationStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::EncounterLocationStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  EncounterLocationStatus_pskel::
  EncounterLocationStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    EncounterLocationStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  EncounterLocationStatus_pskel::
  EncounterLocationStatus_pskel (EncounterLocationStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    EncounterLocationStatus_impl_ (impl),
    value_parser_ (0)
  {
  }

  // EncounterStatus_list_pskel
  //

  EncounterStatus_list_pskel::
  EncounterStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    EncounterStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_EncounterStatus_list_pskel_enums_, 9UL);
  }

  EncounterStatus_list_pskel::
  EncounterStatus_list_pskel (EncounterStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    EncounterStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_EncounterStatus_list_pskel_enums_, 9UL);
  }

  // EncounterStatus_pskel
  //

  void EncounterStatus_pskel::
  value_parser (::fhir::EncounterStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void EncounterStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::EncounterStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  EncounterStatus_pskel::
  EncounterStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    EncounterStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  EncounterStatus_pskel::
  EncounterStatus_pskel (EncounterStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    EncounterStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // Encounter_pskel
  //

  void Encounter_pskel::
  identifier ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->identifier ();
  }

  void Encounter_pskel::
  status ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->status ();
  }

  void Encounter_pskel::
  statusHistory ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->statusHistory ();
  }

  void Encounter_pskel::
  class_ ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->class_ ();
  }

  void Encounter_pskel::
  classHistory ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->classHistory ();
  }

  void Encounter_pskel::
  type ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->type ();
  }

  void Encounter_pskel::
  serviceType ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->serviceType ();
  }

  void Encounter_pskel::
  priority ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->priority ();
  }

  void Encounter_pskel::
  subject ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->subject ();
  }

  void Encounter_pskel::
  episodeOfCare ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->episodeOfCare ();
  }

  void Encounter_pskel::
  basedOn ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->basedOn ();
  }

  void Encounter_pskel::
  participant ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->participant ();
  }

  void Encounter_pskel::
  appointment ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->appointment ();
  }

  void Encounter_pskel::
  period ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->period ();
  }

  void Encounter_pskel::
  length ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->length ();
  }

  void Encounter_pskel::
  reasonCode ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->reasonCode ();
  }

  void Encounter_pskel::
  reasonReference ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->reasonReference ();
  }

  void Encounter_pskel::
  diagnosis ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->diagnosis ();
  }

  void Encounter_pskel::
  account ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->account ();
  }

  void Encounter_pskel::
  hospitalization ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->hospitalization ();
  }

  void Encounter_pskel::
  location ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->location ();
  }

  void Encounter_pskel::
  serviceProvider ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->serviceProvider ();
  }

  void Encounter_pskel::
  partOf ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->partOf ();
  }

  void Encounter_pskel::
  post_Encounter ()
  {
    if (this->Encounter_impl_)
      this->Encounter_impl_->post_Encounter ();
    else
      post_DomainResource ();
  }

  void Encounter_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->statusHistory_parser_)
      this->statusHistory_parser_->_reset ();

    if (this->class__parser_)
      this->class__parser_->_reset ();

    if (this->classHistory_parser_)
      this->classHistory_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->serviceType_parser_)
      this->serviceType_parser_->_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->episodeOfCare_parser_)
      this->episodeOfCare_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->participant_parser_)
      this->participant_parser_->_reset ();

    if (this->appointment_parser_)
      this->appointment_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->length_parser_)
      this->length_parser_->_reset ();

    if (this->reasonCode_parser_)
      this->reasonCode_parser_->_reset ();

    if (this->reasonReference_parser_)
      this->reasonReference_parser_->_reset ();

    if (this->diagnosis_parser_)
      this->diagnosis_parser_->_reset ();

    if (this->account_parser_)
      this->account_parser_->_reset ();

    if (this->hospitalization_parser_)
      this->hospitalization_parser_->_reset ();

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->serviceProvider_parser_)
      this->serviceProvider_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    this->resetting_ = false;
  }

  // Encounter_StatusHistory_pskel
  //

  void Encounter_StatusHistory_pskel::
  status ()
  {
    if (this->Encounter_StatusHistory_impl_)
      this->Encounter_StatusHistory_impl_->status ();
  }

  void Encounter_StatusHistory_pskel::
  period ()
  {
    if (this->Encounter_StatusHistory_impl_)
      this->Encounter_StatusHistory_impl_->period ();
  }

  void Encounter_StatusHistory_pskel::
  post_Encounter_StatusHistory ()
  {
    if (this->Encounter_StatusHistory_impl_)
      this->Encounter_StatusHistory_impl_->post_Encounter_StatusHistory ();
    else
      post_BackboneElement ();
  }

  void Encounter_StatusHistory_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    this->resetting_ = false;
  }

  // Encounter_ClassHistory_pskel
  //

  void Encounter_ClassHistory_pskel::
  class_ ()
  {
    if (this->Encounter_ClassHistory_impl_)
      this->Encounter_ClassHistory_impl_->class_ ();
  }

  void Encounter_ClassHistory_pskel::
  period ()
  {
    if (this->Encounter_ClassHistory_impl_)
      this->Encounter_ClassHistory_impl_->period ();
  }

  void Encounter_ClassHistory_pskel::
  post_Encounter_ClassHistory ()
  {
    if (this->Encounter_ClassHistory_impl_)
      this->Encounter_ClassHistory_impl_->post_Encounter_ClassHistory ();
    else
      post_BackboneElement ();
  }

  void Encounter_ClassHistory_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->class__parser_)
      this->class__parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    this->resetting_ = false;
  }

  // Encounter_Participant_pskel
  //

  void Encounter_Participant_pskel::
  type ()
  {
    if (this->Encounter_Participant_impl_)
      this->Encounter_Participant_impl_->type ();
  }

  void Encounter_Participant_pskel::
  period ()
  {
    if (this->Encounter_Participant_impl_)
      this->Encounter_Participant_impl_->period ();
  }

  void Encounter_Participant_pskel::
  individual ()
  {
    if (this->Encounter_Participant_impl_)
      this->Encounter_Participant_impl_->individual ();
  }

  void Encounter_Participant_pskel::
  post_Encounter_Participant ()
  {
    if (this->Encounter_Participant_impl_)
      this->Encounter_Participant_impl_->post_Encounter_Participant ();
    else
      post_BackboneElement ();
  }

  void Encounter_Participant_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    if (this->individual_parser_)
      this->individual_parser_->_reset ();

    this->resetting_ = false;
  }

  // Encounter_Diagnosis_pskel
  //

  void Encounter_Diagnosis_pskel::
  condition ()
  {
    if (this->Encounter_Diagnosis_impl_)
      this->Encounter_Diagnosis_impl_->condition ();
  }

  void Encounter_Diagnosis_pskel::
  use ()
  {
    if (this->Encounter_Diagnosis_impl_)
      this->Encounter_Diagnosis_impl_->use ();
  }

  void Encounter_Diagnosis_pskel::
  rank ()
  {
    if (this->Encounter_Diagnosis_impl_)
      this->Encounter_Diagnosis_impl_->rank ();
  }

  void Encounter_Diagnosis_pskel::
  post_Encounter_Diagnosis ()
  {
    if (this->Encounter_Diagnosis_impl_)
      this->Encounter_Diagnosis_impl_->post_Encounter_Diagnosis ();
    else
      post_BackboneElement ();
  }

  void Encounter_Diagnosis_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    if (this->use_parser_)
      this->use_parser_->_reset ();

    if (this->rank_parser_)
      this->rank_parser_->_reset ();

    this->resetting_ = false;
  }

  // Encounter_Hospitalization_pskel
  //

  void Encounter_Hospitalization_pskel::
  preAdmissionIdentifier ()
  {
    if (this->Encounter_Hospitalization_impl_)
      this->Encounter_Hospitalization_impl_->preAdmissionIdentifier ();
  }

  void Encounter_Hospitalization_pskel::
  origin ()
  {
    if (this->Encounter_Hospitalization_impl_)
      this->Encounter_Hospitalization_impl_->origin ();
  }

  void Encounter_Hospitalization_pskel::
  admitSource ()
  {
    if (this->Encounter_Hospitalization_impl_)
      this->Encounter_Hospitalization_impl_->admitSource ();
  }

  void Encounter_Hospitalization_pskel::
  reAdmission ()
  {
    if (this->Encounter_Hospitalization_impl_)
      this->Encounter_Hospitalization_impl_->reAdmission ();
  }

  void Encounter_Hospitalization_pskel::
  dietPreference ()
  {
    if (this->Encounter_Hospitalization_impl_)
      this->Encounter_Hospitalization_impl_->dietPreference ();
  }

  void Encounter_Hospitalization_pskel::
  specialCourtesy ()
  {
    if (this->Encounter_Hospitalization_impl_)
      this->Encounter_Hospitalization_impl_->specialCourtesy ();
  }

  void Encounter_Hospitalization_pskel::
  specialArrangement ()
  {
    if (this->Encounter_Hospitalization_impl_)
      this->Encounter_Hospitalization_impl_->specialArrangement ();
  }

  void Encounter_Hospitalization_pskel::
  destination ()
  {
    if (this->Encounter_Hospitalization_impl_)
      this->Encounter_Hospitalization_impl_->destination ();
  }

  void Encounter_Hospitalization_pskel::
  dischargeDisposition ()
  {
    if (this->Encounter_Hospitalization_impl_)
      this->Encounter_Hospitalization_impl_->dischargeDisposition ();
  }

  void Encounter_Hospitalization_pskel::
  post_Encounter_Hospitalization ()
  {
    if (this->Encounter_Hospitalization_impl_)
      this->Encounter_Hospitalization_impl_->post_Encounter_Hospitalization ();
    else
      post_BackboneElement ();
  }

  void Encounter_Hospitalization_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->preAdmissionIdentifier_parser_)
      this->preAdmissionIdentifier_parser_->_reset ();

    if (this->origin_parser_)
      this->origin_parser_->_reset ();

    if (this->admitSource_parser_)
      this->admitSource_parser_->_reset ();

    if (this->reAdmission_parser_)
      this->reAdmission_parser_->_reset ();

    if (this->dietPreference_parser_)
      this->dietPreference_parser_->_reset ();

    if (this->specialCourtesy_parser_)
      this->specialCourtesy_parser_->_reset ();

    if (this->specialArrangement_parser_)
      this->specialArrangement_parser_->_reset ();

    if (this->destination_parser_)
      this->destination_parser_->_reset ();

    if (this->dischargeDisposition_parser_)
      this->dischargeDisposition_parser_->_reset ();

    this->resetting_ = false;
  }

  // Encounter_Location_pskel
  //

  void Encounter_Location_pskel::
  location ()
  {
    if (this->Encounter_Location_impl_)
      this->Encounter_Location_impl_->location ();
  }

  void Encounter_Location_pskel::
  status ()
  {
    if (this->Encounter_Location_impl_)
      this->Encounter_Location_impl_->status ();
  }

  void Encounter_Location_pskel::
  physicalType ()
  {
    if (this->Encounter_Location_impl_)
      this->Encounter_Location_impl_->physicalType ();
  }

  void Encounter_Location_pskel::
  period ()
  {
    if (this->Encounter_Location_impl_)
      this->Encounter_Location_impl_->period ();
  }

  void Encounter_Location_pskel::
  post_Encounter_Location ()
  {
    if (this->Encounter_Location_impl_)
      this->Encounter_Location_impl_->post_Encounter_Location ();
    else
      post_BackboneElement ();
  }

  void Encounter_Location_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->location_parser_)
      this->location_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->physicalType_parser_)
      this->physicalType_parser_->_reset ();

    if (this->period_parser_)
      this->period_parser_->_reset ();

    this->resetting_ = false;
  }

  // EncounterLocationStatus_list_pskel
  //

  void EncounterLocationStatus_list_pskel::
  post_EncounterLocationStatus_list ()
  {
    if (this->EncounterLocationStatus_list_impl_)
      this->EncounterLocationStatus_list_impl_->post_EncounterLocationStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const EncounterLocationStatus_list_pskel::_xsde_EncounterLocationStatus_list_pskel_enums_[4UL] = 
  {
    "active",
    "completed",
    "planned",
    "reserved"
  };

  // EncounterLocationStatus_pskel
  //

  void EncounterLocationStatus_pskel::
  value ()
  {
    if (this->EncounterLocationStatus_impl_)
      this->EncounterLocationStatus_impl_->value ();
  }

  void EncounterLocationStatus_pskel::
  post_EncounterLocationStatus ()
  {
    if (this->EncounterLocationStatus_impl_)
      this->EncounterLocationStatus_impl_->post_EncounterLocationStatus ();
    else
      post_Element ();
  }

  void EncounterLocationStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }

  // EncounterStatus_list_pskel
  //

  void EncounterStatus_list_pskel::
  post_EncounterStatus_list ()
  {
    if (this->EncounterStatus_list_impl_)
      this->EncounterStatus_list_impl_->post_EncounterStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const EncounterStatus_list_pskel::_xsde_EncounterStatus_list_pskel_enums_[9UL] = 
  {
    "arrived",
    "cancelled",
    "entered-in-error",
    "finished",
    "in-progress",
    "onleave",
    "planned",
    "triaged",
    "unknown"
  };

  // EncounterStatus_pskel
  //

  void EncounterStatus_pskel::
  value ()
  {
    if (this->EncounterStatus_impl_)
      this->EncounterStatus_impl_->value ();
  }

  void EncounterStatus_pskel::
  post_EncounterStatus ()
  {
    if (this->EncounterStatus_impl_)
      this->EncounterStatus_impl_->post_EncounterStatus ();
    else
      post_Element ();
  }

  void EncounterStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for Encounter_pskel.
  //
  bool Encounter_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Encounter_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Encounter_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Encounter_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void Encounter_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Encounter_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_EncounterStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "statusHistory" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->statusHistory_parser_)
            {
              this->statusHistory_parser_->pre ();
              ctx.nested_parser (this->statusHistory_parser_);
            }
          }
          else
          {
            if (this->statusHistory_parser_ != 0)
            {
              this->statusHistory_parser_->post_Encounter_StatusHistory ();
              this->statusHistory ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "class" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->class__parser_)
            {
              this->class__parser_->pre ();
              ctx.nested_parser (this->class__parser_);
            }
          }
          else
          {
            if (this->class__parser_ != 0)
            {
              this->class__parser_->post_Coding ();
              this->class_ ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "classHistory" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->classHistory_parser_)
            {
              this->classHistory_parser_->pre ();
              ctx.nested_parser (this->classHistory_parser_);
            }
          }
          else
          {
            if (this->classHistory_parser_ != 0)
            {
              this->classHistory_parser_->post_Encounter_ClassHistory ();
              this->classHistory ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "serviceType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->serviceType_parser_)
            {
              this->serviceType_parser_->pre ();
              ctx.nested_parser (this->serviceType_parser_);
            }
          }
          else
          {
            if (this->serviceType_parser_ != 0)
            {
              this->serviceType_parser_->post_CodeableConcept ();
              this->serviceType ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "priority" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->priority_parser_)
            {
              this->priority_parser_->pre ();
              ctx.nested_parser (this->priority_parser_);
            }
          }
          else
          {
            if (this->priority_parser_ != 0)
            {
              this->priority_parser_->post_CodeableConcept ();
              this->priority ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "episodeOfCare" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->episodeOfCare_parser_)
            {
              this->episodeOfCare_parser_->pre ();
              ctx.nested_parser (this->episodeOfCare_parser_);
            }
          }
          else
          {
            if (this->episodeOfCare_parser_ != 0)
            {
              this->episodeOfCare_parser_->post_Reference ();
              this->episodeOfCare ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "participant" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->participant_parser_)
            {
              this->participant_parser_->pre ();
              ctx.nested_parser (this->participant_parser_);
            }
          }
          else
          {
            if (this->participant_parser_ != 0)
            {
              this->participant_parser_->post_Encounter_Participant ();
              this->participant ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "appointment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->appointment_parser_)
            {
              this->appointment_parser_->pre ();
              ctx.nested_parser (this->appointment_parser_);
            }
          }
          else
          {
            if (this->appointment_parser_ != 0)
            {
              this->appointment_parser_->post_Reference ();
              this->appointment ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "length" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->length_parser_)
            {
              this->length_parser_->pre ();
              ctx.nested_parser (this->length_parser_);
            }
          }
          else
          {
            if (this->length_parser_ != 0)
            {
              this->length_parser_->post_Duration ();
              this->length ();
            }

            count = 0;
            state = 15UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "reasonCode" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonCode_parser_)
            {
              this->reasonCode_parser_->pre ();
              ctx.nested_parser (this->reasonCode_parser_);
            }
          }
          else
          {
            if (this->reasonCode_parser_ != 0)
            {
              this->reasonCode_parser_->post_CodeableConcept ();
              this->reasonCode ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "reasonReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reasonReference_parser_)
            {
              this->reasonReference_parser_->pre ();
              ctx.nested_parser (this->reasonReference_parser_);
            }
          }
          else
          {
            if (this->reasonReference_parser_ != 0)
            {
              this->reasonReference_parser_->post_Reference ();
              this->reasonReference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 17UL;
          // Fall through.
        }
      }
      case 17UL:
      {
        if (n == "diagnosis" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->diagnosis_parser_)
            {
              this->diagnosis_parser_->pre ();
              ctx.nested_parser (this->diagnosis_parser_);
            }
          }
          else
          {
            if (this->diagnosis_parser_ != 0)
            {
              this->diagnosis_parser_->post_Encounter_Diagnosis ();
              this->diagnosis ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 18UL;
          // Fall through.
        }
      }
      case 18UL:
      {
        if (n == "account" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->account_parser_)
            {
              this->account_parser_->pre ();
              ctx.nested_parser (this->account_parser_);
            }
          }
          else
          {
            if (this->account_parser_ != 0)
            {
              this->account_parser_->post_Reference ();
              this->account ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 19UL;
          // Fall through.
        }
      }
      case 19UL:
      {
        if (n == "hospitalization" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->hospitalization_parser_)
            {
              this->hospitalization_parser_->pre ();
              ctx.nested_parser (this->hospitalization_parser_);
            }
          }
          else
          {
            if (this->hospitalization_parser_ != 0)
            {
              this->hospitalization_parser_->post_Encounter_Hospitalization ();
              this->hospitalization ();
            }

            count = 0;
            state = 20UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 20UL;
          // Fall through.
        }
      }
      case 20UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Encounter_Location ();
              this->location ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 21UL;
          // Fall through.
        }
      }
      case 21UL:
      {
        if (n == "serviceProvider" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->serviceProvider_parser_)
            {
              this->serviceProvider_parser_->pre ();
              ctx.nested_parser (this->serviceProvider_parser_);
            }
          }
          else
          {
            if (this->serviceProvider_parser_ != 0)
            {
              this->serviceProvider_parser_->post_Reference ();
              this->serviceProvider ();
            }

            count = 0;
            state = 22UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 22UL;
          // Fall through.
        }
      }
      case 22UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Encounter_StatusHistory_pskel.
  //
  bool Encounter_StatusHistory_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "status" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Encounter_StatusHistory_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Encounter_StatusHistory_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Encounter_StatusHistory_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Encounter_StatusHistory_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Encounter_StatusHistory_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_EncounterStatus ();
              this->status ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Encounter_ClassHistory_pskel.
  //
  bool Encounter_ClassHistory_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "class" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Encounter_ClassHistory_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Encounter_ClassHistory_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Encounter_ClassHistory_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Encounter_ClassHistory_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Encounter_ClassHistory_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "class" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->class__parser_)
            {
              this->class__parser_->pre ();
              ctx.nested_parser (this->class__parser_);
            }
          }
          else
          {
            if (this->class__parser_ != 0)
            {
              this->class__parser_->post_Coding ();
              this->class_ ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Encounter_Participant_pskel.
  //
  bool Encounter_Participant_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "period" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "individual" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Encounter_Participant_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Encounter_Participant_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Encounter_Participant_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Encounter_Participant_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Encounter_Participant_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "individual" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->individual_parser_)
            {
              this->individual_parser_->pre ();
              ctx.nested_parser (this->individual_parser_);
            }
          }
          else
          {
            if (this->individual_parser_ != 0)
            {
              this->individual_parser_->post_Reference ();
              this->individual ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Encounter_Diagnosis_pskel.
  //
  bool Encounter_Diagnosis_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Encounter_Diagnosis_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Encounter_Diagnosis_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Encounter_Diagnosis_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Encounter_Diagnosis_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Encounter_Diagnosis_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "condition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->condition_parser_)
            {
              this->condition_parser_->pre ();
              ctx.nested_parser (this->condition_parser_);
            }
          }
          else
          {
            if (this->condition_parser_ != 0)
            {
              this->condition_parser_->post_Reference ();
              this->condition ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "use" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->use_parser_)
            {
              this->use_parser_->pre ();
              ctx.nested_parser (this->use_parser_);
            }
          }
          else
          {
            if (this->use_parser_ != 0)
            {
              this->use_parser_->post_CodeableConcept ();
              this->use ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "rank" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rank_parser_)
            {
              this->rank_parser_->pre ();
              ctx.nested_parser (this->rank_parser_);
            }
          }
          else
          {
            if (this->rank_parser_ != 0)
            {
              this->rank_parser_->post_positiveInt ();
              this->rank ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Encounter_Hospitalization_pskel.
  //
  bool Encounter_Hospitalization_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "preAdmissionIdentifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "origin" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "admitSource" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "reAdmission" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "dietPreference" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "specialCourtesy" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "specialArrangement" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "destination" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "dischargeDisposition" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Encounter_Hospitalization_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Encounter_Hospitalization_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Encounter_Hospitalization_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Encounter_Hospitalization_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void Encounter_Hospitalization_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "preAdmissionIdentifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->preAdmissionIdentifier_parser_)
            {
              this->preAdmissionIdentifier_parser_->pre ();
              ctx.nested_parser (this->preAdmissionIdentifier_parser_);
            }
          }
          else
          {
            if (this->preAdmissionIdentifier_parser_ != 0)
            {
              this->preAdmissionIdentifier_parser_->post_Identifier ();
              this->preAdmissionIdentifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "origin" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->origin_parser_)
            {
              this->origin_parser_->pre ();
              ctx.nested_parser (this->origin_parser_);
            }
          }
          else
          {
            if (this->origin_parser_ != 0)
            {
              this->origin_parser_->post_Reference ();
              this->origin ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "admitSource" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->admitSource_parser_)
            {
              this->admitSource_parser_->pre ();
              ctx.nested_parser (this->admitSource_parser_);
            }
          }
          else
          {
            if (this->admitSource_parser_ != 0)
            {
              this->admitSource_parser_->post_CodeableConcept ();
              this->admitSource ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "reAdmission" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->reAdmission_parser_)
            {
              this->reAdmission_parser_->pre ();
              ctx.nested_parser (this->reAdmission_parser_);
            }
          }
          else
          {
            if (this->reAdmission_parser_ != 0)
            {
              this->reAdmission_parser_->post_CodeableConcept ();
              this->reAdmission ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "dietPreference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dietPreference_parser_)
            {
              this->dietPreference_parser_->pre ();
              ctx.nested_parser (this->dietPreference_parser_);
            }
          }
          else
          {
            if (this->dietPreference_parser_ != 0)
            {
              this->dietPreference_parser_->post_CodeableConcept ();
              this->dietPreference ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "specialCourtesy" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specialCourtesy_parser_)
            {
              this->specialCourtesy_parser_->pre ();
              ctx.nested_parser (this->specialCourtesy_parser_);
            }
          }
          else
          {
            if (this->specialCourtesy_parser_ != 0)
            {
              this->specialCourtesy_parser_->post_CodeableConcept ();
              this->specialCourtesy ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "specialArrangement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->specialArrangement_parser_)
            {
              this->specialArrangement_parser_->pre ();
              ctx.nested_parser (this->specialArrangement_parser_);
            }
          }
          else
          {
            if (this->specialArrangement_parser_ != 0)
            {
              this->specialArrangement_parser_->post_CodeableConcept ();
              this->specialArrangement ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "destination" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->destination_parser_)
            {
              this->destination_parser_->pre ();
              ctx.nested_parser (this->destination_parser_);
            }
          }
          else
          {
            if (this->destination_parser_ != 0)
            {
              this->destination_parser_->post_Reference ();
              this->destination ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "dischargeDisposition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dischargeDisposition_parser_)
            {
              this->dischargeDisposition_parser_->pre ();
              ctx.nested_parser (this->dischargeDisposition_parser_);
            }
          }
          else
          {
            if (this->dischargeDisposition_parser_ != 0)
            {
              this->dischargeDisposition_parser_->post_CodeableConcept ();
              this->dischargeDisposition ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for Encounter_Location_pskel.
  //
  bool Encounter_Location_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "location" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Encounter_Location_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Encounter_Location_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Encounter_Location_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void Encounter_Location_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Encounter_Location_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "location" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->location_parser_)
            {
              this->location_parser_->pre ();
              ctx.nested_parser (this->location_parser_);
            }
          }
          else
          {
            if (this->location_parser_ != 0)
            {
              this->location_parser_->post_Reference ();
              this->location ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_EncounterLocationStatus ();
              this->status ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "physicalType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->physicalType_parser_)
            {
              this->physicalType_parser_->pre ();
              ctx.nested_parser (this->physicalType_parser_);
            }
          }
          else
          {
            if (this->physicalType_parser_ != 0)
            {
              this->physicalType_parser_->post_CodeableConcept ();
              this->physicalType ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "period" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->period_parser_)
            {
              this->period_parser_->pre ();
              ctx.nested_parser (this->period_parser_);
            }
          }
          else
          {
            if (this->period_parser_ != 0)
            {
              this->period_parser_->post_Period ();
              this->period ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for EncounterLocationStatus_pskel.
  //
  bool EncounterLocationStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_EncounterLocationStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for EncounterStatus_pskel.
  //
  bool EncounterStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_EncounterStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

