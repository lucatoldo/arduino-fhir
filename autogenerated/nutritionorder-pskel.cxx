// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "nutritionorder-pskel.hxx"

namespace fhir
{
  // NutritionOrder_pskel
  //

  void NutritionOrder_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void NutritionOrder_pskel::
  instantiatesCanonical_parser (::fhir::canonical_pskel& p)
  {
    this->instantiatesCanonical_parser_ = &p;
  }

  void NutritionOrder_pskel::
  instantiatesUri_parser (::fhir::uri_pskel& p)
  {
    this->instantiatesUri_parser_ = &p;
  }

  void NutritionOrder_pskel::
  instantiates_parser (::fhir::uri_pskel& p)
  {
    this->instantiates_parser_ = &p;
  }

  void NutritionOrder_pskel::
  status_parser (::fhir::RequestStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void NutritionOrder_pskel::
  intent_parser (::fhir::RequestIntent_pskel& p)
  {
    this->intent_parser_ = &p;
  }

  void NutritionOrder_pskel::
  patient_parser (::fhir::Reference_pskel& p)
  {
    this->patient_parser_ = &p;
  }

  void NutritionOrder_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void NutritionOrder_pskel::
  dateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->dateTime_parser_ = &p;
  }

  void NutritionOrder_pskel::
  orderer_parser (::fhir::Reference_pskel& p)
  {
    this->orderer_parser_ = &p;
  }

  void NutritionOrder_pskel::
  allergyIntolerance_parser (::fhir::Reference_pskel& p)
  {
    this->allergyIntolerance_parser_ = &p;
  }

  void NutritionOrder_pskel::
  foodPreferenceModifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->foodPreferenceModifier_parser_ = &p;
  }

  void NutritionOrder_pskel::
  excludeFoodModifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->excludeFoodModifier_parser_ = &p;
  }

  void NutritionOrder_pskel::
  oralDiet_parser (::fhir::NutritionOrder_OralDiet_pskel& p)
  {
    this->oralDiet_parser_ = &p;
  }

  void NutritionOrder_pskel::
  supplement_parser (::fhir::NutritionOrder_Supplement_pskel& p)
  {
    this->supplement_parser_ = &p;
  }

  void NutritionOrder_pskel::
  enteralFormula_parser (::fhir::NutritionOrder_EnteralFormula_pskel& p)
  {
    this->enteralFormula_parser_ = &p;
  }

  void NutritionOrder_pskel::
  note_parser (::fhir::Annotation_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void NutritionOrder_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::canonical_pskel& instantiatesCanonical,
           ::fhir::uri_pskel& instantiatesUri,
           ::fhir::uri_pskel& instantiates,
           ::fhir::RequestStatus_pskel& status,
           ::fhir::RequestIntent_pskel& intent,
           ::fhir::Reference_pskel& patient,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& dateTime,
           ::fhir::Reference_pskel& orderer,
           ::fhir::Reference_pskel& allergyIntolerance,
           ::fhir::CodeableConcept_pskel& foodPreferenceModifier,
           ::fhir::CodeableConcept_pskel& excludeFoodModifier,
           ::fhir::NutritionOrder_OralDiet_pskel& oralDiet,
           ::fhir::NutritionOrder_Supplement_pskel& supplement,
           ::fhir::NutritionOrder_EnteralFormula_pskel& enteralFormula,
           ::fhir::Annotation_pskel& note)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->instantiatesCanonical_parser_ = &instantiatesCanonical;
    this->instantiatesUri_parser_ = &instantiatesUri;
    this->instantiates_parser_ = &instantiates;
    this->status_parser_ = &status;
    this->intent_parser_ = &intent;
    this->patient_parser_ = &patient;
    this->encounter_parser_ = &encounter;
    this->dateTime_parser_ = &dateTime;
    this->orderer_parser_ = &orderer;
    this->allergyIntolerance_parser_ = &allergyIntolerance;
    this->foodPreferenceModifier_parser_ = &foodPreferenceModifier;
    this->excludeFoodModifier_parser_ = &excludeFoodModifier;
    this->oralDiet_parser_ = &oralDiet;
    this->supplement_parser_ = &supplement;
    this->enteralFormula_parser_ = &enteralFormula;
    this->note_parser_ = &note;
  }

  NutritionOrder_pskel::
  NutritionOrder_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    NutritionOrder_impl_ (0),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    instantiates_parser_ (0),
    status_parser_ (0),
    intent_parser_ (0),
    patient_parser_ (0),
    encounter_parser_ (0),
    dateTime_parser_ (0),
    orderer_parser_ (0),
    allergyIntolerance_parser_ (0),
    foodPreferenceModifier_parser_ (0),
    excludeFoodModifier_parser_ (0),
    oralDiet_parser_ (0),
    supplement_parser_ (0),
    enteralFormula_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  NutritionOrder_pskel::
  NutritionOrder_pskel (NutritionOrder_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    NutritionOrder_impl_ (impl),
    identifier_parser_ (0),
    instantiatesCanonical_parser_ (0),
    instantiatesUri_parser_ (0),
    instantiates_parser_ (0),
    status_parser_ (0),
    intent_parser_ (0),
    patient_parser_ (0),
    encounter_parser_ (0),
    dateTime_parser_ (0),
    orderer_parser_ (0),
    allergyIntolerance_parser_ (0),
    foodPreferenceModifier_parser_ (0),
    excludeFoodModifier_parser_ (0),
    oralDiet_parser_ (0),
    supplement_parser_ (0),
    enteralFormula_parser_ (0),
    note_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // NutritionOrder_OralDiet_pskel
  //

  void NutritionOrder_OralDiet_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void NutritionOrder_OralDiet_pskel::
  schedule_parser (::fhir::Timing_pskel& p)
  {
    this->schedule_parser_ = &p;
  }

  void NutritionOrder_OralDiet_pskel::
  nutrient_parser (::fhir::NutritionOrder_Nutrient_pskel& p)
  {
    this->nutrient_parser_ = &p;
  }

  void NutritionOrder_OralDiet_pskel::
  texture_parser (::fhir::NutritionOrder_Texture_pskel& p)
  {
    this->texture_parser_ = &p;
  }

  void NutritionOrder_OralDiet_pskel::
  fluidConsistencyType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->fluidConsistencyType_parser_ = &p;
  }

  void NutritionOrder_OralDiet_pskel::
  instruction_parser (::fhir::string_pskel& p)
  {
    this->instruction_parser_ = &p;
  }

  void NutritionOrder_OralDiet_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::Timing_pskel& schedule,
           ::fhir::NutritionOrder_Nutrient_pskel& nutrient,
           ::fhir::NutritionOrder_Texture_pskel& texture,
           ::fhir::CodeableConcept_pskel& fluidConsistencyType,
           ::fhir::string_pskel& instruction)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->schedule_parser_ = &schedule;
    this->nutrient_parser_ = &nutrient;
    this->texture_parser_ = &texture;
    this->fluidConsistencyType_parser_ = &fluidConsistencyType;
    this->instruction_parser_ = &instruction;
  }

  NutritionOrder_OralDiet_pskel::
  NutritionOrder_OralDiet_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    NutritionOrder_OralDiet_impl_ (0),
    type_parser_ (0),
    schedule_parser_ (0),
    nutrient_parser_ (0),
    texture_parser_ (0),
    fluidConsistencyType_parser_ (0),
    instruction_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  NutritionOrder_OralDiet_pskel::
  NutritionOrder_OralDiet_pskel (NutritionOrder_OralDiet_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    NutritionOrder_OralDiet_impl_ (impl),
    type_parser_ (0),
    schedule_parser_ (0),
    nutrient_parser_ (0),
    texture_parser_ (0),
    fluidConsistencyType_parser_ (0),
    instruction_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // NutritionOrder_Nutrient_pskel
  //

  void NutritionOrder_Nutrient_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void NutritionOrder_Nutrient_pskel::
  amount_parser (::fhir::Quantity_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void NutritionOrder_Nutrient_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::Quantity_pskel& amount)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->modifier_parser_ = &modifier;
    this->amount_parser_ = &amount;
  }

  NutritionOrder_Nutrient_pskel::
  NutritionOrder_Nutrient_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    NutritionOrder_Nutrient_impl_ (0),
    modifier_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  NutritionOrder_Nutrient_pskel::
  NutritionOrder_Nutrient_pskel (NutritionOrder_Nutrient_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    NutritionOrder_Nutrient_impl_ (impl),
    modifier_parser_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // NutritionOrder_Texture_pskel
  //

  void NutritionOrder_Texture_pskel::
  modifier_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->modifier_parser_ = &p;
  }

  void NutritionOrder_Texture_pskel::
  foodType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->foodType_parser_ = &p;
  }

  void NutritionOrder_Texture_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& modifier,
           ::fhir::CodeableConcept_pskel& foodType)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->modifier_parser_ = &modifier;
    this->foodType_parser_ = &foodType;
  }

  NutritionOrder_Texture_pskel::
  NutritionOrder_Texture_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    NutritionOrder_Texture_impl_ (0),
    modifier_parser_ (0),
    foodType_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  NutritionOrder_Texture_pskel::
  NutritionOrder_Texture_pskel (NutritionOrder_Texture_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    NutritionOrder_Texture_impl_ (impl),
    modifier_parser_ (0),
    foodType_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // NutritionOrder_Supplement_pskel
  //

  void NutritionOrder_Supplement_pskel::
  type_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void NutritionOrder_Supplement_pskel::
  productName_parser (::fhir::string_pskel& p)
  {
    this->productName_parser_ = &p;
  }

  void NutritionOrder_Supplement_pskel::
  schedule_parser (::fhir::Timing_pskel& p)
  {
    this->schedule_parser_ = &p;
  }

  void NutritionOrder_Supplement_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void NutritionOrder_Supplement_pskel::
  instruction_parser (::fhir::string_pskel& p)
  {
    this->instruction_parser_ = &p;
  }

  void NutritionOrder_Supplement_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& type,
           ::fhir::string_pskel& productName,
           ::fhir::Timing_pskel& schedule,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::string_pskel& instruction)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->type_parser_ = &type;
    this->productName_parser_ = &productName;
    this->schedule_parser_ = &schedule;
    this->quantity_parser_ = &quantity;
    this->instruction_parser_ = &instruction;
  }

  NutritionOrder_Supplement_pskel::
  NutritionOrder_Supplement_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    NutritionOrder_Supplement_impl_ (0),
    type_parser_ (0),
    productName_parser_ (0),
    schedule_parser_ (0),
    quantity_parser_ (0),
    instruction_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  NutritionOrder_Supplement_pskel::
  NutritionOrder_Supplement_pskel (NutritionOrder_Supplement_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    NutritionOrder_Supplement_impl_ (impl),
    type_parser_ (0),
    productName_parser_ (0),
    schedule_parser_ (0),
    quantity_parser_ (0),
    instruction_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // NutritionOrder_EnteralFormula_pskel
  //

  void NutritionOrder_EnteralFormula_pskel::
  baseFormulaType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->baseFormulaType_parser_ = &p;
  }

  void NutritionOrder_EnteralFormula_pskel::
  baseFormulaProductName_parser (::fhir::string_pskel& p)
  {
    this->baseFormulaProductName_parser_ = &p;
  }

  void NutritionOrder_EnteralFormula_pskel::
  additiveType_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->additiveType_parser_ = &p;
  }

  void NutritionOrder_EnteralFormula_pskel::
  additiveProductName_parser (::fhir::string_pskel& p)
  {
    this->additiveProductName_parser_ = &p;
  }

  void NutritionOrder_EnteralFormula_pskel::
  caloricDensity_parser (::fhir::Quantity_pskel& p)
  {
    this->caloricDensity_parser_ = &p;
  }

  void NutritionOrder_EnteralFormula_pskel::
  routeofAdministration_parser (::fhir::CodeableConcept_pskel& p)
  {
    this->routeofAdministration_parser_ = &p;
  }

  void NutritionOrder_EnteralFormula_pskel::
  administration_parser (::fhir::NutritionOrder_Administration_pskel& p)
  {
    this->administration_parser_ = &p;
  }

  void NutritionOrder_EnteralFormula_pskel::
  maxVolumeToDeliver_parser (::fhir::Quantity_pskel& p)
  {
    this->maxVolumeToDeliver_parser_ = &p;
  }

  void NutritionOrder_EnteralFormula_pskel::
  administrationInstruction_parser (::fhir::string_pskel& p)
  {
    this->administrationInstruction_parser_ = &p;
  }

  void NutritionOrder_EnteralFormula_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::CodeableConcept_pskel& baseFormulaType,
           ::fhir::string_pskel& baseFormulaProductName,
           ::fhir::CodeableConcept_pskel& additiveType,
           ::fhir::string_pskel& additiveProductName,
           ::fhir::Quantity_pskel& caloricDensity,
           ::fhir::CodeableConcept_pskel& routeofAdministration,
           ::fhir::NutritionOrder_Administration_pskel& administration,
           ::fhir::Quantity_pskel& maxVolumeToDeliver,
           ::fhir::string_pskel& administrationInstruction)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->baseFormulaType_parser_ = &baseFormulaType;
    this->baseFormulaProductName_parser_ = &baseFormulaProductName;
    this->additiveType_parser_ = &additiveType;
    this->additiveProductName_parser_ = &additiveProductName;
    this->caloricDensity_parser_ = &caloricDensity;
    this->routeofAdministration_parser_ = &routeofAdministration;
    this->administration_parser_ = &administration;
    this->maxVolumeToDeliver_parser_ = &maxVolumeToDeliver;
    this->administrationInstruction_parser_ = &administrationInstruction;
  }

  NutritionOrder_EnteralFormula_pskel::
  NutritionOrder_EnteralFormula_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    NutritionOrder_EnteralFormula_impl_ (0),
    baseFormulaType_parser_ (0),
    baseFormulaProductName_parser_ (0),
    additiveType_parser_ (0),
    additiveProductName_parser_ (0),
    caloricDensity_parser_ (0),
    routeofAdministration_parser_ (0),
    administration_parser_ (0),
    maxVolumeToDeliver_parser_ (0),
    administrationInstruction_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  NutritionOrder_EnteralFormula_pskel::
  NutritionOrder_EnteralFormula_pskel (NutritionOrder_EnteralFormula_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    NutritionOrder_EnteralFormula_impl_ (impl),
    baseFormulaType_parser_ (0),
    baseFormulaProductName_parser_ (0),
    additiveType_parser_ (0),
    additiveProductName_parser_ (0),
    caloricDensity_parser_ (0),
    routeofAdministration_parser_ (0),
    administration_parser_ (0),
    maxVolumeToDeliver_parser_ (0),
    administrationInstruction_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // NutritionOrder_Administration_pskel
  //

  void NutritionOrder_Administration_pskel::
  schedule_parser (::fhir::Timing_pskel& p)
  {
    this->schedule_parser_ = &p;
  }

  void NutritionOrder_Administration_pskel::
  quantity_parser (::fhir::Quantity_pskel& p)
  {
    this->quantity_parser_ = &p;
  }

  void NutritionOrder_Administration_pskel::
  rateQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->rateQuantity_parser_ = &p;
  }

  void NutritionOrder_Administration_pskel::
  rateRatio_parser (::fhir::Ratio_pskel& p)
  {
    this->rateRatio_parser_ = &p;
  }

  void NutritionOrder_Administration_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Timing_pskel& schedule,
           ::fhir::Quantity_pskel& quantity,
           ::fhir::Quantity_pskel& rateQuantity,
           ::fhir::Ratio_pskel& rateRatio)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->schedule_parser_ = &schedule;
    this->quantity_parser_ = &quantity;
    this->rateQuantity_parser_ = &rateQuantity;
    this->rateRatio_parser_ = &rateRatio;
  }

  NutritionOrder_Administration_pskel::
  NutritionOrder_Administration_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    NutritionOrder_Administration_impl_ (0),
    schedule_parser_ (0),
    quantity_parser_ (0),
    rateQuantity_parser_ (0),
    rateRatio_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  NutritionOrder_Administration_pskel::
  NutritionOrder_Administration_pskel (NutritionOrder_Administration_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    NutritionOrder_Administration_impl_ (impl),
    schedule_parser_ (0),
    quantity_parser_ (0),
    rateQuantity_parser_ (0),
    rateRatio_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // NutritionOrder_pskel
  //

  void NutritionOrder_pskel::
  identifier ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->identifier ();
  }

  void NutritionOrder_pskel::
  instantiatesCanonical ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->instantiatesCanonical ();
  }

  void NutritionOrder_pskel::
  instantiatesUri ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->instantiatesUri ();
  }

  void NutritionOrder_pskel::
  instantiates ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->instantiates ();
  }

  void NutritionOrder_pskel::
  status ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->status ();
  }

  void NutritionOrder_pskel::
  intent ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->intent ();
  }

  void NutritionOrder_pskel::
  patient ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->patient ();
  }

  void NutritionOrder_pskel::
  encounter ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->encounter ();
  }

  void NutritionOrder_pskel::
  dateTime ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->dateTime ();
  }

  void NutritionOrder_pskel::
  orderer ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->orderer ();
  }

  void NutritionOrder_pskel::
  allergyIntolerance ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->allergyIntolerance ();
  }

  void NutritionOrder_pskel::
  foodPreferenceModifier ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->foodPreferenceModifier ();
  }

  void NutritionOrder_pskel::
  excludeFoodModifier ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->excludeFoodModifier ();
  }

  void NutritionOrder_pskel::
  oralDiet ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->oralDiet ();
  }

  void NutritionOrder_pskel::
  supplement ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->supplement ();
  }

  void NutritionOrder_pskel::
  enteralFormula ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->enteralFormula ();
  }

  void NutritionOrder_pskel::
  note ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->note ();
  }

  void NutritionOrder_pskel::
  post_NutritionOrder ()
  {
    if (this->NutritionOrder_impl_)
      this->NutritionOrder_impl_->post_NutritionOrder ();
    else
      post_DomainResource ();
  }

  void NutritionOrder_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->instantiatesCanonical_parser_)
      this->instantiatesCanonical_parser_->_reset ();

    if (this->instantiatesUri_parser_)
      this->instantiatesUri_parser_->_reset ();

    if (this->instantiates_parser_)
      this->instantiates_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->intent_parser_)
      this->intent_parser_->_reset ();

    if (this->patient_parser_)
      this->patient_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->dateTime_parser_)
      this->dateTime_parser_->_reset ();

    if (this->orderer_parser_)
      this->orderer_parser_->_reset ();

    if (this->allergyIntolerance_parser_)
      this->allergyIntolerance_parser_->_reset ();

    if (this->foodPreferenceModifier_parser_)
      this->foodPreferenceModifier_parser_->_reset ();

    if (this->excludeFoodModifier_parser_)
      this->excludeFoodModifier_parser_->_reset ();

    if (this->oralDiet_parser_)
      this->oralDiet_parser_->_reset ();

    if (this->supplement_parser_)
      this->supplement_parser_->_reset ();

    if (this->enteralFormula_parser_)
      this->enteralFormula_parser_->_reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    this->resetting_ = false;
  }

  // NutritionOrder_OralDiet_pskel
  //

  void NutritionOrder_OralDiet_pskel::
  type ()
  {
    if (this->NutritionOrder_OralDiet_impl_)
      this->NutritionOrder_OralDiet_impl_->type ();
  }

  void NutritionOrder_OralDiet_pskel::
  schedule ()
  {
    if (this->NutritionOrder_OralDiet_impl_)
      this->NutritionOrder_OralDiet_impl_->schedule ();
  }

  void NutritionOrder_OralDiet_pskel::
  nutrient ()
  {
    if (this->NutritionOrder_OralDiet_impl_)
      this->NutritionOrder_OralDiet_impl_->nutrient ();
  }

  void NutritionOrder_OralDiet_pskel::
  texture ()
  {
    if (this->NutritionOrder_OralDiet_impl_)
      this->NutritionOrder_OralDiet_impl_->texture ();
  }

  void NutritionOrder_OralDiet_pskel::
  fluidConsistencyType ()
  {
    if (this->NutritionOrder_OralDiet_impl_)
      this->NutritionOrder_OralDiet_impl_->fluidConsistencyType ();
  }

  void NutritionOrder_OralDiet_pskel::
  instruction ()
  {
    if (this->NutritionOrder_OralDiet_impl_)
      this->NutritionOrder_OralDiet_impl_->instruction ();
  }

  void NutritionOrder_OralDiet_pskel::
  post_NutritionOrder_OralDiet ()
  {
    if (this->NutritionOrder_OralDiet_impl_)
      this->NutritionOrder_OralDiet_impl_->post_NutritionOrder_OralDiet ();
    else
      post_BackboneElement ();
  }

  void NutritionOrder_OralDiet_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->schedule_parser_)
      this->schedule_parser_->_reset ();

    if (this->nutrient_parser_)
      this->nutrient_parser_->_reset ();

    if (this->texture_parser_)
      this->texture_parser_->_reset ();

    if (this->fluidConsistencyType_parser_)
      this->fluidConsistencyType_parser_->_reset ();

    if (this->instruction_parser_)
      this->instruction_parser_->_reset ();

    this->resetting_ = false;
  }

  // NutritionOrder_Nutrient_pskel
  //

  void NutritionOrder_Nutrient_pskel::
  modifier ()
  {
    if (this->NutritionOrder_Nutrient_impl_)
      this->NutritionOrder_Nutrient_impl_->modifier ();
  }

  void NutritionOrder_Nutrient_pskel::
  amount ()
  {
    if (this->NutritionOrder_Nutrient_impl_)
      this->NutritionOrder_Nutrient_impl_->amount ();
  }

  void NutritionOrder_Nutrient_pskel::
  post_NutritionOrder_Nutrient ()
  {
    if (this->NutritionOrder_Nutrient_impl_)
      this->NutritionOrder_Nutrient_impl_->post_NutritionOrder_Nutrient ();
    else
      post_BackboneElement ();
  }

  void NutritionOrder_Nutrient_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->amount_parser_)
      this->amount_parser_->_reset ();

    this->resetting_ = false;
  }

  // NutritionOrder_Texture_pskel
  //

  void NutritionOrder_Texture_pskel::
  modifier ()
  {
    if (this->NutritionOrder_Texture_impl_)
      this->NutritionOrder_Texture_impl_->modifier ();
  }

  void NutritionOrder_Texture_pskel::
  foodType ()
  {
    if (this->NutritionOrder_Texture_impl_)
      this->NutritionOrder_Texture_impl_->foodType ();
  }

  void NutritionOrder_Texture_pskel::
  post_NutritionOrder_Texture ()
  {
    if (this->NutritionOrder_Texture_impl_)
      this->NutritionOrder_Texture_impl_->post_NutritionOrder_Texture ();
    else
      post_BackboneElement ();
  }

  void NutritionOrder_Texture_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->modifier_parser_)
      this->modifier_parser_->_reset ();

    if (this->foodType_parser_)
      this->foodType_parser_->_reset ();

    this->resetting_ = false;
  }

  // NutritionOrder_Supplement_pskel
  //

  void NutritionOrder_Supplement_pskel::
  type ()
  {
    if (this->NutritionOrder_Supplement_impl_)
      this->NutritionOrder_Supplement_impl_->type ();
  }

  void NutritionOrder_Supplement_pskel::
  productName ()
  {
    if (this->NutritionOrder_Supplement_impl_)
      this->NutritionOrder_Supplement_impl_->productName ();
  }

  void NutritionOrder_Supplement_pskel::
  schedule ()
  {
    if (this->NutritionOrder_Supplement_impl_)
      this->NutritionOrder_Supplement_impl_->schedule ();
  }

  void NutritionOrder_Supplement_pskel::
  quantity ()
  {
    if (this->NutritionOrder_Supplement_impl_)
      this->NutritionOrder_Supplement_impl_->quantity ();
  }

  void NutritionOrder_Supplement_pskel::
  instruction ()
  {
    if (this->NutritionOrder_Supplement_impl_)
      this->NutritionOrder_Supplement_impl_->instruction ();
  }

  void NutritionOrder_Supplement_pskel::
  post_NutritionOrder_Supplement ()
  {
    if (this->NutritionOrder_Supplement_impl_)
      this->NutritionOrder_Supplement_impl_->post_NutritionOrder_Supplement ();
    else
      post_BackboneElement ();
  }

  void NutritionOrder_Supplement_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->productName_parser_)
      this->productName_parser_->_reset ();

    if (this->schedule_parser_)
      this->schedule_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->instruction_parser_)
      this->instruction_parser_->_reset ();

    this->resetting_ = false;
  }

  // NutritionOrder_EnteralFormula_pskel
  //

  void NutritionOrder_EnteralFormula_pskel::
  baseFormulaType ()
  {
    if (this->NutritionOrder_EnteralFormula_impl_)
      this->NutritionOrder_EnteralFormula_impl_->baseFormulaType ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  baseFormulaProductName ()
  {
    if (this->NutritionOrder_EnteralFormula_impl_)
      this->NutritionOrder_EnteralFormula_impl_->baseFormulaProductName ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  additiveType ()
  {
    if (this->NutritionOrder_EnteralFormula_impl_)
      this->NutritionOrder_EnteralFormula_impl_->additiveType ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  additiveProductName ()
  {
    if (this->NutritionOrder_EnteralFormula_impl_)
      this->NutritionOrder_EnteralFormula_impl_->additiveProductName ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  caloricDensity ()
  {
    if (this->NutritionOrder_EnteralFormula_impl_)
      this->NutritionOrder_EnteralFormula_impl_->caloricDensity ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  routeofAdministration ()
  {
    if (this->NutritionOrder_EnteralFormula_impl_)
      this->NutritionOrder_EnteralFormula_impl_->routeofAdministration ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  administration ()
  {
    if (this->NutritionOrder_EnteralFormula_impl_)
      this->NutritionOrder_EnteralFormula_impl_->administration ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  maxVolumeToDeliver ()
  {
    if (this->NutritionOrder_EnteralFormula_impl_)
      this->NutritionOrder_EnteralFormula_impl_->maxVolumeToDeliver ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  administrationInstruction ()
  {
    if (this->NutritionOrder_EnteralFormula_impl_)
      this->NutritionOrder_EnteralFormula_impl_->administrationInstruction ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  post_NutritionOrder_EnteralFormula ()
  {
    if (this->NutritionOrder_EnteralFormula_impl_)
      this->NutritionOrder_EnteralFormula_impl_->post_NutritionOrder_EnteralFormula ();
    else
      post_BackboneElement ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->baseFormulaType_parser_)
      this->baseFormulaType_parser_->_reset ();

    if (this->baseFormulaProductName_parser_)
      this->baseFormulaProductName_parser_->_reset ();

    if (this->additiveType_parser_)
      this->additiveType_parser_->_reset ();

    if (this->additiveProductName_parser_)
      this->additiveProductName_parser_->_reset ();

    if (this->caloricDensity_parser_)
      this->caloricDensity_parser_->_reset ();

    if (this->routeofAdministration_parser_)
      this->routeofAdministration_parser_->_reset ();

    if (this->administration_parser_)
      this->administration_parser_->_reset ();

    if (this->maxVolumeToDeliver_parser_)
      this->maxVolumeToDeliver_parser_->_reset ();

    if (this->administrationInstruction_parser_)
      this->administrationInstruction_parser_->_reset ();

    this->resetting_ = false;
  }

  // NutritionOrder_Administration_pskel
  //

  void NutritionOrder_Administration_pskel::
  schedule ()
  {
    if (this->NutritionOrder_Administration_impl_)
      this->NutritionOrder_Administration_impl_->schedule ();
  }

  void NutritionOrder_Administration_pskel::
  quantity ()
  {
    if (this->NutritionOrder_Administration_impl_)
      this->NutritionOrder_Administration_impl_->quantity ();
  }

  void NutritionOrder_Administration_pskel::
  rateQuantity ()
  {
    if (this->NutritionOrder_Administration_impl_)
      this->NutritionOrder_Administration_impl_->rateQuantity ();
  }

  void NutritionOrder_Administration_pskel::
  rateRatio ()
  {
    if (this->NutritionOrder_Administration_impl_)
      this->NutritionOrder_Administration_impl_->rateRatio ();
  }

  void NutritionOrder_Administration_pskel::
  post_NutritionOrder_Administration ()
  {
    if (this->NutritionOrder_Administration_impl_)
      this->NutritionOrder_Administration_impl_->post_NutritionOrder_Administration ();
    else
      post_BackboneElement ();
  }

  void NutritionOrder_Administration_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->schedule_parser_)
      this->schedule_parser_->_reset ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->rateQuantity_parser_)
      this->rateQuantity_parser_->_reset ();

    if (this->rateRatio_parser_)
      this->rateRatio_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for NutritionOrder_pskel.
  //
  bool NutritionOrder_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "instantiatesCanonical" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "instantiatesUri" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "instantiates" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &NutritionOrder_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool NutritionOrder_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void NutritionOrder_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void NutritionOrder_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void NutritionOrder_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "instantiatesCanonical" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesCanonical_parser_)
            {
              this->instantiatesCanonical_parser_->pre ();
              ctx.nested_parser (this->instantiatesCanonical_parser_);
            }
          }
          else
          {
            if (this->instantiatesCanonical_parser_ != 0)
            {
              this->instantiatesCanonical_parser_->post_canonical ();
              this->instantiatesCanonical ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "instantiatesUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiatesUri_parser_)
            {
              this->instantiatesUri_parser_->pre ();
              ctx.nested_parser (this->instantiatesUri_parser_);
            }
          }
          else
          {
            if (this->instantiatesUri_parser_ != 0)
            {
              this->instantiatesUri_parser_->post_uri ();
              this->instantiatesUri ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "instantiates" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instantiates_parser_)
            {
              this->instantiates_parser_->pre ();
              ctx.nested_parser (this->instantiates_parser_);
            }
          }
          else
          {
            if (this->instantiates_parser_ != 0)
            {
              this->instantiates_parser_->post_uri ();
              this->instantiates ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_RequestStatus ();
              this->status ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "intent" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->intent_parser_)
            {
              this->intent_parser_->pre ();
              ctx.nested_parser (this->intent_parser_);
            }
          }
          else
          {
            if (this->intent_parser_ != 0)
            {
              this->intent_parser_->post_RequestIntent ();
              this->intent ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "patient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->patient_parser_)
            {
              this->patient_parser_->pre ();
              ctx.nested_parser (this->patient_parser_);
            }
          }
          else
          {
            if (this->patient_parser_ != 0)
            {
              this->patient_parser_->post_Reference ();
              this->patient ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "dateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->dateTime_parser_)
            {
              this->dateTime_parser_->pre ();
              ctx.nested_parser (this->dateTime_parser_);
            }
          }
          else
          {
            if (this->dateTime_parser_ != 0)
            {
              this->dateTime_parser_->post_dateTime ();
              this->dateTime ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "orderer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->orderer_parser_)
            {
              this->orderer_parser_->pre ();
              ctx.nested_parser (this->orderer_parser_);
            }
          }
          else
          {
            if (this->orderer_parser_ != 0)
            {
              this->orderer_parser_->post_Reference ();
              this->orderer ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "allergyIntolerance" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->allergyIntolerance_parser_)
            {
              this->allergyIntolerance_parser_->pre ();
              ctx.nested_parser (this->allergyIntolerance_parser_);
            }
          }
          else
          {
            if (this->allergyIntolerance_parser_ != 0)
            {
              this->allergyIntolerance_parser_->post_Reference ();
              this->allergyIntolerance ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "foodPreferenceModifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->foodPreferenceModifier_parser_)
            {
              this->foodPreferenceModifier_parser_->pre ();
              ctx.nested_parser (this->foodPreferenceModifier_parser_);
            }
          }
          else
          {
            if (this->foodPreferenceModifier_parser_ != 0)
            {
              this->foodPreferenceModifier_parser_->post_CodeableConcept ();
              this->foodPreferenceModifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "excludeFoodModifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->excludeFoodModifier_parser_)
            {
              this->excludeFoodModifier_parser_->pre ();
              ctx.nested_parser (this->excludeFoodModifier_parser_);
            }
          }
          else
          {
            if (this->excludeFoodModifier_parser_ != 0)
            {
              this->excludeFoodModifier_parser_->post_CodeableConcept ();
              this->excludeFoodModifier ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "oralDiet" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->oralDiet_parser_)
            {
              this->oralDiet_parser_->pre ();
              ctx.nested_parser (this->oralDiet_parser_);
            }
          }
          else
          {
            if (this->oralDiet_parser_ != 0)
            {
              this->oralDiet_parser_->post_NutritionOrder_OralDiet ();
              this->oralDiet ();
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "supplement" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->supplement_parser_)
            {
              this->supplement_parser_->pre ();
              ctx.nested_parser (this->supplement_parser_);
            }
          }
          else
          {
            if (this->supplement_parser_ != 0)
            {
              this->supplement_parser_->post_NutritionOrder_Supplement ();
              this->supplement ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 15UL;
          // Fall through.
        }
      }
      case 15UL:
      {
        if (n == "enteralFormula" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->enteralFormula_parser_)
            {
              this->enteralFormula_parser_->pre ();
              ctx.nested_parser (this->enteralFormula_parser_);
            }
          }
          else
          {
            if (this->enteralFormula_parser_ != 0)
            {
              this->enteralFormula_parser_->post_NutritionOrder_EnteralFormula ();
              this->enteralFormula ();
            }

            count = 0;
            state = 16UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 16UL;
          // Fall through.
        }
      }
      case 16UL:
      {
        if (n == "note" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->note_parser_)
            {
              this->note_parser_->pre ();
              ctx.nested_parser (this->note_parser_);
            }
          }
          else
          {
            if (this->note_parser_ != 0)
            {
              this->note_parser_->post_Annotation ();
              this->note ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for NutritionOrder_OralDiet_pskel.
  //
  bool NutritionOrder_OralDiet_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "schedule" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "nutrient" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "texture" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "fluidConsistencyType" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "instruction" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &NutritionOrder_OralDiet_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool NutritionOrder_OralDiet_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void NutritionOrder_OralDiet_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void NutritionOrder_OralDiet_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void NutritionOrder_OralDiet_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "schedule" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->schedule_parser_)
            {
              this->schedule_parser_->pre ();
              ctx.nested_parser (this->schedule_parser_);
            }
          }
          else
          {
            if (this->schedule_parser_ != 0)
            {
              this->schedule_parser_->post_Timing ();
              this->schedule ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "nutrient" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->nutrient_parser_)
            {
              this->nutrient_parser_->pre ();
              ctx.nested_parser (this->nutrient_parser_);
            }
          }
          else
          {
            if (this->nutrient_parser_ != 0)
            {
              this->nutrient_parser_->post_NutritionOrder_Nutrient ();
              this->nutrient ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "texture" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->texture_parser_)
            {
              this->texture_parser_->pre ();
              ctx.nested_parser (this->texture_parser_);
            }
          }
          else
          {
            if (this->texture_parser_ != 0)
            {
              this->texture_parser_->post_NutritionOrder_Texture ();
              this->texture ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "fluidConsistencyType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->fluidConsistencyType_parser_)
            {
              this->fluidConsistencyType_parser_->pre ();
              ctx.nested_parser (this->fluidConsistencyType_parser_);
            }
          }
          else
          {
            if (this->fluidConsistencyType_parser_ != 0)
            {
              this->fluidConsistencyType_parser_->post_CodeableConcept ();
              this->fluidConsistencyType ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "instruction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instruction_parser_)
            {
              this->instruction_parser_->pre ();
              ctx.nested_parser (this->instruction_parser_);
            }
          }
          else
          {
            if (this->instruction_parser_ != 0)
            {
              this->instruction_parser_->post_string ();
              this->instruction ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for NutritionOrder_Nutrient_pskel.
  //
  bool NutritionOrder_Nutrient_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "amount" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &NutritionOrder_Nutrient_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool NutritionOrder_Nutrient_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void NutritionOrder_Nutrient_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void NutritionOrder_Nutrient_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void NutritionOrder_Nutrient_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "amount" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->amount_parser_)
            {
              this->amount_parser_->pre ();
              ctx.nested_parser (this->amount_parser_);
            }
          }
          else
          {
            if (this->amount_parser_ != 0)
            {
              this->amount_parser_->post_Quantity ();
              this->amount ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for NutritionOrder_Texture_pskel.
  //
  bool NutritionOrder_Texture_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "foodType" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &NutritionOrder_Texture_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool NutritionOrder_Texture_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void NutritionOrder_Texture_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void NutritionOrder_Texture_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void NutritionOrder_Texture_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "modifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->modifier_parser_)
            {
              this->modifier_parser_->pre ();
              ctx.nested_parser (this->modifier_parser_);
            }
          }
          else
          {
            if (this->modifier_parser_ != 0)
            {
              this->modifier_parser_->post_CodeableConcept ();
              this->modifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "foodType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->foodType_parser_)
            {
              this->foodType_parser_->pre ();
              ctx.nested_parser (this->foodType_parser_);
            }
          }
          else
          {
            if (this->foodType_parser_ != 0)
            {
              this->foodType_parser_->post_CodeableConcept ();
              this->foodType ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for NutritionOrder_Supplement_pskel.
  //
  bool NutritionOrder_Supplement_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "type" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "productName" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "schedule" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "quantity" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "instruction" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &NutritionOrder_Supplement_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool NutritionOrder_Supplement_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void NutritionOrder_Supplement_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void NutritionOrder_Supplement_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void NutritionOrder_Supplement_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "type" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->type_parser_)
            {
              this->type_parser_->pre ();
              ctx.nested_parser (this->type_parser_);
            }
          }
          else
          {
            if (this->type_parser_ != 0)
            {
              this->type_parser_->post_CodeableConcept ();
              this->type ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "productName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->productName_parser_)
            {
              this->productName_parser_->pre ();
              ctx.nested_parser (this->productName_parser_);
            }
          }
          else
          {
            if (this->productName_parser_ != 0)
            {
              this->productName_parser_->post_string ();
              this->productName ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "schedule" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->schedule_parser_)
            {
              this->schedule_parser_->pre ();
              ctx.nested_parser (this->schedule_parser_);
            }
          }
          else
          {
            if (this->schedule_parser_ != 0)
            {
              this->schedule_parser_->post_Timing ();
              this->schedule ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "instruction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->instruction_parser_)
            {
              this->instruction_parser_->pre ();
              ctx.nested_parser (this->instruction_parser_);
            }
          }
          else
          {
            if (this->instruction_parser_ != 0)
            {
              this->instruction_parser_->post_string ();
              this->instruction ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for NutritionOrder_EnteralFormula_pskel.
  //
  bool NutritionOrder_EnteralFormula_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "baseFormulaType" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "baseFormulaProductName" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "additiveType" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "additiveProductName" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "caloricDensity" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "routeofAdministration" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "administration" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "maxVolumeToDeliver" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "administrationInstruction" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &NutritionOrder_EnteralFormula_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool NutritionOrder_EnteralFormula_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void NutritionOrder_EnteralFormula_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void NutritionOrder_EnteralFormula_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "baseFormulaType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->baseFormulaType_parser_)
            {
              this->baseFormulaType_parser_->pre ();
              ctx.nested_parser (this->baseFormulaType_parser_);
            }
          }
          else
          {
            if (this->baseFormulaType_parser_ != 0)
            {
              this->baseFormulaType_parser_->post_CodeableConcept ();
              this->baseFormulaType ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "baseFormulaProductName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->baseFormulaProductName_parser_)
            {
              this->baseFormulaProductName_parser_->pre ();
              ctx.nested_parser (this->baseFormulaProductName_parser_);
            }
          }
          else
          {
            if (this->baseFormulaProductName_parser_ != 0)
            {
              this->baseFormulaProductName_parser_->post_string ();
              this->baseFormulaProductName ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "additiveType" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->additiveType_parser_)
            {
              this->additiveType_parser_->pre ();
              ctx.nested_parser (this->additiveType_parser_);
            }
          }
          else
          {
            if (this->additiveType_parser_ != 0)
            {
              this->additiveType_parser_->post_CodeableConcept ();
              this->additiveType ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "additiveProductName" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->additiveProductName_parser_)
            {
              this->additiveProductName_parser_->pre ();
              ctx.nested_parser (this->additiveProductName_parser_);
            }
          }
          else
          {
            if (this->additiveProductName_parser_ != 0)
            {
              this->additiveProductName_parser_->post_string ();
              this->additiveProductName ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "caloricDensity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->caloricDensity_parser_)
            {
              this->caloricDensity_parser_->pre ();
              ctx.nested_parser (this->caloricDensity_parser_);
            }
          }
          else
          {
            if (this->caloricDensity_parser_ != 0)
            {
              this->caloricDensity_parser_->post_Quantity ();
              this->caloricDensity ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "routeofAdministration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->routeofAdministration_parser_)
            {
              this->routeofAdministration_parser_->pre ();
              ctx.nested_parser (this->routeofAdministration_parser_);
            }
          }
          else
          {
            if (this->routeofAdministration_parser_ != 0)
            {
              this->routeofAdministration_parser_->post_CodeableConcept ();
              this->routeofAdministration ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "administration" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->administration_parser_)
            {
              this->administration_parser_->pre ();
              ctx.nested_parser (this->administration_parser_);
            }
          }
          else
          {
            if (this->administration_parser_ != 0)
            {
              this->administration_parser_->post_NutritionOrder_Administration ();
              this->administration ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "maxVolumeToDeliver" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->maxVolumeToDeliver_parser_)
            {
              this->maxVolumeToDeliver_parser_->pre ();
              ctx.nested_parser (this->maxVolumeToDeliver_parser_);
            }
          }
          else
          {
            if (this->maxVolumeToDeliver_parser_ != 0)
            {
              this->maxVolumeToDeliver_parser_->post_Quantity ();
              this->maxVolumeToDeliver ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "administrationInstruction" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->administrationInstruction_parser_)
            {
              this->administrationInstruction_parser_->pre ();
              ctx.nested_parser (this->administrationInstruction_parser_);
            }
          }
          else
          {
            if (this->administrationInstruction_parser_ != 0)
            {
              this->administrationInstruction_parser_->post_string ();
              this->administrationInstruction ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for NutritionOrder_Administration_pskel.
  //
  bool NutritionOrder_Administration_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "schedule" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "quantity" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "rateQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "rateRatio" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &NutritionOrder_Administration_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool NutritionOrder_Administration_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void NutritionOrder_Administration_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void NutritionOrder_Administration_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void NutritionOrder_Administration_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "schedule" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->schedule_parser_)
            {
              this->schedule_parser_->pre ();
              ctx.nested_parser (this->schedule_parser_);
            }
          }
          else
          {
            if (this->schedule_parser_ != 0)
            {
              this->schedule_parser_->post_Timing ();
              this->schedule ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "quantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->quantity_parser_)
            {
              this->quantity_parser_->pre ();
              ctx.nested_parser (this->quantity_parser_);
            }
          }
          else
          {
            if (this->quantity_parser_ != 0)
            {
              this->quantity_parser_->post_Quantity ();
              this->quantity ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "rateQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rateQuantity_parser_)
            {
              this->rateQuantity_parser_->pre ();
              ctx.nested_parser (this->rateQuantity_parser_);
            }
          }
          else
          {
            if (this->rateQuantity_parser_ != 0)
            {
              this->rateQuantity_parser_->post_Quantity ();
              this->rateQuantity ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "rateRatio" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->rateRatio_parser_)
            {
              this->rateRatio_parser_->pre ();
              ctx.nested_parser (this->rateRatio_parser_);
            }
          }
          else
          {
            if (this->rateRatio_parser_ != 0)
            {
              this->rateRatio_parser_->post_Ratio ();
              this->rateRatio ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

