// Copyright (c) 2005-2020 Code Synthesis Tools CC.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "questionnaireresponse-pskel.hxx"

namespace fhir
{
  // QuestionnaireResponse_pskel
  //

  void QuestionnaireResponse_pskel::
  identifier_parser (::fhir::Identifier_pskel& p)
  {
    this->identifier_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  basedOn_parser (::fhir::Reference_pskel& p)
  {
    this->basedOn_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  partOf_parser (::fhir::Reference_pskel& p)
  {
    this->partOf_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  questionnaire_parser (::fhir::canonical_pskel& p)
  {
    this->questionnaire_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  status_parser (::fhir::QuestionnaireResponseStatus_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  subject_parser (::fhir::Reference_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  encounter_parser (::fhir::Reference_pskel& p)
  {
    this->encounter_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  authored_parser (::fhir::dateTime_pskel& p)
  {
    this->authored_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  author_parser (::fhir::Reference_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  source_parser (::fhir::Reference_pskel& p)
  {
    this->source_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  item_parser (::fhir::QuestionnaireResponse_Item_pskel& p)
  {
    this->item_parser_ = &p;
  }

  void QuestionnaireResponse_pskel::
  parsers (::fhir::id_pskel& id,
           ::fhir::Meta_pskel& meta,
           ::fhir::uri_pskel& implicitRules,
           ::fhir::code_pskel& language,
           ::fhir::Narrative_pskel& text,
           ::fhir::ResourceContainer_pskel& contained,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::Identifier_pskel& identifier,
           ::fhir::Reference_pskel& basedOn,
           ::fhir::Reference_pskel& partOf,
           ::fhir::canonical_pskel& questionnaire,
           ::fhir::QuestionnaireResponseStatus_pskel& status,
           ::fhir::Reference_pskel& subject,
           ::fhir::Reference_pskel& encounter,
           ::fhir::dateTime_pskel& authored,
           ::fhir::Reference_pskel& author,
           ::fhir::Reference_pskel& source,
           ::fhir::QuestionnaireResponse_Item_pskel& item)
  {
    this->id_parser_ = &id;
    this->meta_parser_ = &meta;
    this->implicitRules_parser_ = &implicitRules;
    this->language_parser_ = &language;
    this->text_parser_ = &text;
    this->contained_parser_ = &contained;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->identifier_parser_ = &identifier;
    this->basedOn_parser_ = &basedOn;
    this->partOf_parser_ = &partOf;
    this->questionnaire_parser_ = &questionnaire;
    this->status_parser_ = &status;
    this->subject_parser_ = &subject;
    this->encounter_parser_ = &encounter;
    this->authored_parser_ = &authored;
    this->author_parser_ = &author;
    this->source_parser_ = &source;
    this->item_parser_ = &item;
  }

  QuestionnaireResponse_pskel::
  QuestionnaireResponse_pskel (::fhir::DomainResource_pskel* tiein)
  : ::fhir::DomainResource_pskel (tiein, 0),
    QuestionnaireResponse_impl_ (0),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    questionnaire_parser_ (0),
    status_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    authored_parser_ (0),
    author_parser_ (0),
    source_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  QuestionnaireResponse_pskel::
  QuestionnaireResponse_pskel (QuestionnaireResponse_pskel* impl, void*)
  : ::fhir::DomainResource_pskel (impl, 0),
    QuestionnaireResponse_impl_ (impl),
    identifier_parser_ (0),
    basedOn_parser_ (0),
    partOf_parser_ (0),
    questionnaire_parser_ (0),
    status_parser_ (0),
    subject_parser_ (0),
    encounter_parser_ (0),
    authored_parser_ (0),
    author_parser_ (0),
    source_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // QuestionnaireResponse_Item_pskel
  //

  void QuestionnaireResponse_Item_pskel::
  linkId_parser (::fhir::string_pskel& p)
  {
    this->linkId_parser_ = &p;
  }

  void QuestionnaireResponse_Item_pskel::
  definition_parser (::fhir::uri_pskel& p)
  {
    this->definition_parser_ = &p;
  }

  void QuestionnaireResponse_Item_pskel::
  text_parser (::fhir::string_pskel& p)
  {
    this->text_parser_ = &p;
  }

  void QuestionnaireResponse_Item_pskel::
  answer_parser (::fhir::QuestionnaireResponse_Answer_pskel& p)
  {
    this->answer_parser_ = &p;
  }

  void QuestionnaireResponse_Item_pskel::
  item_parser (::fhir::QuestionnaireResponse_Item_pskel& p)
  {
    this->item_parser_ = &p;
  }

  void QuestionnaireResponse_Item_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::string_pskel& linkId,
           ::fhir::uri_pskel& definition,
           ::fhir::string_pskel& text,
           ::fhir::QuestionnaireResponse_Answer_pskel& answer,
           ::fhir::QuestionnaireResponse_Item_pskel& item)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->linkId_parser_ = &linkId;
    this->definition_parser_ = &definition;
    this->text_parser_ = &text;
    this->answer_parser_ = &answer;
    this->item_parser_ = &item;
  }

  QuestionnaireResponse_Item_pskel::
  QuestionnaireResponse_Item_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    QuestionnaireResponse_Item_impl_ (0),
    linkId_parser_ (0),
    definition_parser_ (0),
    text_parser_ (0),
    answer_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  QuestionnaireResponse_Item_pskel::
  QuestionnaireResponse_Item_pskel (QuestionnaireResponse_Item_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    QuestionnaireResponse_Item_impl_ (impl),
    linkId_parser_ (0),
    definition_parser_ (0),
    text_parser_ (0),
    answer_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // QuestionnaireResponse_Answer_pskel
  //

  void QuestionnaireResponse_Answer_pskel::
  valueBoolean_parser (::fhir::boolean_pskel& p)
  {
    this->valueBoolean_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueDecimal_parser (::fhir::decimal_pskel& p)
  {
    this->valueDecimal_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueInteger_parser (::fhir::integer_pskel& p)
  {
    this->valueInteger_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueDate_parser (::fhir::date_pskel& p)
  {
    this->valueDate_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueDateTime_parser (::fhir::dateTime_pskel& p)
  {
    this->valueDateTime_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueTime_parser (::fhir::time_pskel& p)
  {
    this->valueTime_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueString_parser (::fhir::string_pskel& p)
  {
    this->valueString_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueUri_parser (::fhir::uri_pskel& p)
  {
    this->valueUri_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueAttachment_parser (::fhir::Attachment_pskel& p)
  {
    this->valueAttachment_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueCoding_parser (::fhir::Coding_pskel& p)
  {
    this->valueCoding_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueQuantity_parser (::fhir::Quantity_pskel& p)
  {
    this->valueQuantity_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  valueReference_parser (::fhir::Reference_pskel& p)
  {
    this->valueReference_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  item_parser (::fhir::QuestionnaireResponse_Item_pskel& p)
  {
    this->item_parser_ = &p;
  }

  void QuestionnaireResponse_Answer_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::Extension_pskel& modifierExtension,
           ::fhir::boolean_pskel& valueBoolean,
           ::fhir::decimal_pskel& valueDecimal,
           ::fhir::integer_pskel& valueInteger,
           ::fhir::date_pskel& valueDate,
           ::fhir::dateTime_pskel& valueDateTime,
           ::fhir::time_pskel& valueTime,
           ::fhir::string_pskel& valueString,
           ::fhir::uri_pskel& valueUri,
           ::fhir::Attachment_pskel& valueAttachment,
           ::fhir::Coding_pskel& valueCoding,
           ::fhir::Quantity_pskel& valueQuantity,
           ::fhir::Reference_pskel& valueReference,
           ::fhir::QuestionnaireResponse_Item_pskel& item)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->modifierExtension_parser_ = &modifierExtension;
    this->valueBoolean_parser_ = &valueBoolean;
    this->valueDecimal_parser_ = &valueDecimal;
    this->valueInteger_parser_ = &valueInteger;
    this->valueDate_parser_ = &valueDate;
    this->valueDateTime_parser_ = &valueDateTime;
    this->valueTime_parser_ = &valueTime;
    this->valueString_parser_ = &valueString;
    this->valueUri_parser_ = &valueUri;
    this->valueAttachment_parser_ = &valueAttachment;
    this->valueCoding_parser_ = &valueCoding;
    this->valueQuantity_parser_ = &valueQuantity;
    this->valueReference_parser_ = &valueReference;
    this->item_parser_ = &item;
  }

  QuestionnaireResponse_Answer_pskel::
  QuestionnaireResponse_Answer_pskel (::fhir::BackboneElement_pskel* tiein)
  : ::fhir::BackboneElement_pskel (tiein, 0),
    QuestionnaireResponse_Answer_impl_ (0),
    valueBoolean_parser_ (0),
    valueDecimal_parser_ (0),
    valueInteger_parser_ (0),
    valueDate_parser_ (0),
    valueDateTime_parser_ (0),
    valueTime_parser_ (0),
    valueString_parser_ (0),
    valueUri_parser_ (0),
    valueAttachment_parser_ (0),
    valueCoding_parser_ (0),
    valueQuantity_parser_ (0),
    valueReference_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  QuestionnaireResponse_Answer_pskel::
  QuestionnaireResponse_Answer_pskel (QuestionnaireResponse_Answer_pskel* impl, void*)
  : ::fhir::BackboneElement_pskel (impl, 0),
    QuestionnaireResponse_Answer_impl_ (impl),
    valueBoolean_parser_ (0),
    valueDecimal_parser_ (0),
    valueInteger_parser_ (0),
    valueDate_parser_ (0),
    valueDateTime_parser_ (0),
    valueTime_parser_ (0),
    valueString_parser_ (0),
    valueUri_parser_ (0),
    valueAttachment_parser_ (0),
    valueCoding_parser_ (0),
    valueQuantity_parser_ (0),
    valueReference_parser_ (0),
    item_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // QuestionnaireResponseStatus_list_pskel
  //

  QuestionnaireResponseStatus_list_pskel::
  QuestionnaireResponseStatus_list_pskel (::fhir::code_primitive_pskel* tiein)
  : ::fhir::code_primitive_pskel (tiein, 0),
    QuestionnaireResponseStatus_list_impl_ (0)
  {
    this->_enumeration_facet (_xsde_QuestionnaireResponseStatus_list_pskel_enums_, 5UL);
  }

  QuestionnaireResponseStatus_list_pskel::
  QuestionnaireResponseStatus_list_pskel (QuestionnaireResponseStatus_list_pskel* impl, void*)
  : ::fhir::code_primitive_pskel (impl, 0),
    QuestionnaireResponseStatus_list_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_QuestionnaireResponseStatus_list_pskel_enums_, 5UL);
  }

  // QuestionnaireResponseStatus_pskel
  //

  void QuestionnaireResponseStatus_pskel::
  value_parser (::fhir::QuestionnaireResponseStatus_list_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void QuestionnaireResponseStatus_pskel::
  parsers (::fhir::string_primitive_pskel& id,
           ::fhir::Extension_pskel& extension,
           ::fhir::QuestionnaireResponseStatus_list_pskel& value)
  {
    this->id_parser_ = &id;
    this->extension_parser_ = &extension;
    this->value_parser_ = &value;
  }

  QuestionnaireResponseStatus_pskel::
  QuestionnaireResponseStatus_pskel (::fhir::Element_pskel* tiein)
  : ::fhir::Element_pskel (tiein, 0),
    QuestionnaireResponseStatus_impl_ (0),
    value_parser_ (0)
  {
  }

  QuestionnaireResponseStatus_pskel::
  QuestionnaireResponseStatus_pskel (QuestionnaireResponseStatus_pskel* impl, void*)
  : ::fhir::Element_pskel (impl, 0),
    QuestionnaireResponseStatus_impl_ (impl),
    value_parser_ (0)
  {
  }
}

#include <assert.h>

namespace fhir
{
  // QuestionnaireResponse_pskel
  //

  void QuestionnaireResponse_pskel::
  identifier ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->identifier ();
  }

  void QuestionnaireResponse_pskel::
  basedOn ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->basedOn ();
  }

  void QuestionnaireResponse_pskel::
  partOf ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->partOf ();
  }

  void QuestionnaireResponse_pskel::
  questionnaire ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->questionnaire ();
  }

  void QuestionnaireResponse_pskel::
  status ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->status ();
  }

  void QuestionnaireResponse_pskel::
  subject ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->subject ();
  }

  void QuestionnaireResponse_pskel::
  encounter ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->encounter ();
  }

  void QuestionnaireResponse_pskel::
  authored ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->authored ();
  }

  void QuestionnaireResponse_pskel::
  author ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->author ();
  }

  void QuestionnaireResponse_pskel::
  source ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->source ();
  }

  void QuestionnaireResponse_pskel::
  item ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->item ();
  }

  void QuestionnaireResponse_pskel::
  post_QuestionnaireResponse ()
  {
    if (this->QuestionnaireResponse_impl_)
      this->QuestionnaireResponse_impl_->post_QuestionnaireResponse ();
    else
      post_DomainResource ();
  }

  void QuestionnaireResponse_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::DomainResource_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->identifier_parser_)
      this->identifier_parser_->_reset ();

    if (this->basedOn_parser_)
      this->basedOn_parser_->_reset ();

    if (this->partOf_parser_)
      this->partOf_parser_->_reset ();

    if (this->questionnaire_parser_)
      this->questionnaire_parser_->_reset ();

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    if (this->encounter_parser_)
      this->encounter_parser_->_reset ();

    if (this->authored_parser_)
      this->authored_parser_->_reset ();

    if (this->author_parser_)
      this->author_parser_->_reset ();

    if (this->source_parser_)
      this->source_parser_->_reset ();

    if (this->item_parser_)
      this->item_parser_->_reset ();

    this->resetting_ = false;
  }

  // QuestionnaireResponse_Item_pskel
  //

  void QuestionnaireResponse_Item_pskel::
  linkId ()
  {
    if (this->QuestionnaireResponse_Item_impl_)
      this->QuestionnaireResponse_Item_impl_->linkId ();
  }

  void QuestionnaireResponse_Item_pskel::
  definition ()
  {
    if (this->QuestionnaireResponse_Item_impl_)
      this->QuestionnaireResponse_Item_impl_->definition ();
  }

  void QuestionnaireResponse_Item_pskel::
  text ()
  {
    if (this->QuestionnaireResponse_Item_impl_)
      this->QuestionnaireResponse_Item_impl_->text ();
  }

  void QuestionnaireResponse_Item_pskel::
  answer ()
  {
    if (this->QuestionnaireResponse_Item_impl_)
      this->QuestionnaireResponse_Item_impl_->answer ();
  }

  void QuestionnaireResponse_Item_pskel::
  item ()
  {
    if (this->QuestionnaireResponse_Item_impl_)
      this->QuestionnaireResponse_Item_impl_->item ();
  }

  void QuestionnaireResponse_Item_pskel::
  post_QuestionnaireResponse_Item ()
  {
    if (this->QuestionnaireResponse_Item_impl_)
      this->QuestionnaireResponse_Item_impl_->post_QuestionnaireResponse_Item ();
    else
      post_BackboneElement ();
  }

  void QuestionnaireResponse_Item_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->linkId_parser_)
      this->linkId_parser_->_reset ();

    if (this->definition_parser_)
      this->definition_parser_->_reset ();

    if (this->text_parser_)
      this->text_parser_->_reset ();

    if (this->answer_parser_)
      this->answer_parser_->_reset ();

    if (this->item_parser_)
      this->item_parser_->_reset ();

    this->resetting_ = false;
  }

  // QuestionnaireResponse_Answer_pskel
  //

  void QuestionnaireResponse_Answer_pskel::
  valueBoolean ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueBoolean ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueDecimal ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueDecimal ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueInteger ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueInteger ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueDate ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueDate ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueDateTime ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueDateTime ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueTime ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueTime ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueString ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueString ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueUri ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueUri ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueAttachment ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueAttachment ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueCoding ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueCoding ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueQuantity ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueQuantity ();
  }

  void QuestionnaireResponse_Answer_pskel::
  valueReference ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->valueReference ();
  }

  void QuestionnaireResponse_Answer_pskel::
  item ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->item ();
  }

  void QuestionnaireResponse_Answer_pskel::
  post_QuestionnaireResponse_Answer ()
  {
    if (this->QuestionnaireResponse_Answer_impl_)
      this->QuestionnaireResponse_Answer_impl_->post_QuestionnaireResponse_Answer ();
    else
      post_BackboneElement ();
  }

  void QuestionnaireResponse_Answer_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::fhir::BackboneElement_pskel base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->valueBoolean_parser_)
      this->valueBoolean_parser_->_reset ();

    if (this->valueDecimal_parser_)
      this->valueDecimal_parser_->_reset ();

    if (this->valueInteger_parser_)
      this->valueInteger_parser_->_reset ();

    if (this->valueDate_parser_)
      this->valueDate_parser_->_reset ();

    if (this->valueDateTime_parser_)
      this->valueDateTime_parser_->_reset ();

    if (this->valueTime_parser_)
      this->valueTime_parser_->_reset ();

    if (this->valueString_parser_)
      this->valueString_parser_->_reset ();

    if (this->valueUri_parser_)
      this->valueUri_parser_->_reset ();

    if (this->valueAttachment_parser_)
      this->valueAttachment_parser_->_reset ();

    if (this->valueCoding_parser_)
      this->valueCoding_parser_->_reset ();

    if (this->valueQuantity_parser_)
      this->valueQuantity_parser_->_reset ();

    if (this->valueReference_parser_)
      this->valueReference_parser_->_reset ();

    if (this->item_parser_)
      this->item_parser_->_reset ();

    this->resetting_ = false;
  }

  // QuestionnaireResponseStatus_list_pskel
  //

  void QuestionnaireResponseStatus_list_pskel::
  post_QuestionnaireResponseStatus_list ()
  {
    if (this->QuestionnaireResponseStatus_list_impl_)
      this->QuestionnaireResponseStatus_list_impl_->post_QuestionnaireResponseStatus_list ();
    else
      post_code_primitive ();
  }

  const char* const QuestionnaireResponseStatus_list_pskel::_xsde_QuestionnaireResponseStatus_list_pskel_enums_[5UL] = 
  {
    "amended",
    "completed",
    "entered-in-error",
    "in-progress",
    "stopped"
  };

  // QuestionnaireResponseStatus_pskel
  //

  void QuestionnaireResponseStatus_pskel::
  value ()
  {
    if (this->QuestionnaireResponseStatus_impl_)
      this->QuestionnaireResponseStatus_impl_->value ();
  }

  void QuestionnaireResponseStatus_pskel::
  post_QuestionnaireResponseStatus ()
  {
    if (this->QuestionnaireResponseStatus_impl_)
      this->QuestionnaireResponseStatus_impl_->post_QuestionnaireResponseStatus ();
    else
      post_Element ();
  }

  void QuestionnaireResponseStatus_pskel::
  _reset ()
  {
    typedef ::fhir::Element_pskel base;
    base::_reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();
  }
}

#include <assert.h>

namespace fhir
{
  // Element validation and dispatch functions for QuestionnaireResponse_pskel.
  //
  bool QuestionnaireResponse_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "basedOn" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "partOf" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "questionnaire" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "status" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &QuestionnaireResponse_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool QuestionnaireResponse_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::DomainResource_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void QuestionnaireResponse_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::DomainResource_pskel base;
    base::_pre_e_validate ();
  }

  void QuestionnaireResponse_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::DomainResource_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void QuestionnaireResponse_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "identifier" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->identifier_parser_)
            {
              this->identifier_parser_->pre ();
              ctx.nested_parser (this->identifier_parser_);
            }
          }
          else
          {
            if (this->identifier_parser_ != 0)
            {
              this->identifier_parser_->post_Identifier ();
              this->identifier ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "basedOn" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->basedOn_parser_)
            {
              this->basedOn_parser_->pre ();
              ctx.nested_parser (this->basedOn_parser_);
            }
          }
          else
          {
            if (this->basedOn_parser_ != 0)
            {
              this->basedOn_parser_->post_Reference ();
              this->basedOn ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "partOf" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->partOf_parser_)
            {
              this->partOf_parser_->pre ();
              ctx.nested_parser (this->partOf_parser_);
            }
          }
          else
          {
            if (this->partOf_parser_ != 0)
            {
              this->partOf_parser_->post_Reference ();
              this->partOf ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "questionnaire" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->questionnaire_parser_)
            {
              this->questionnaire_parser_->pre ();
              ctx.nested_parser (this->questionnaire_parser_);
            }
          }
          else
          {
            if (this->questionnaire_parser_ != 0)
            {
              this->questionnaire_parser_->post_canonical ();
              this->questionnaire ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "status" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->status_parser_)
            {
              this->status_parser_->pre ();
              ctx.nested_parser (this->status_parser_);
            }
          }
          else
          {
            if (this->status_parser_ != 0)
            {
              this->status_parser_->post_QuestionnaireResponseStatus ();
              this->status ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "subject" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              this->subject_parser_->post_Reference ();
              this->subject ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "encounter" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->encounter_parser_)
            {
              this->encounter_parser_->pre ();
              ctx.nested_parser (this->encounter_parser_);
            }
          }
          else
          {
            if (this->encounter_parser_ != 0)
            {
              this->encounter_parser_->post_Reference ();
              this->encounter ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "authored" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->authored_parser_)
            {
              this->authored_parser_->pre ();
              ctx.nested_parser (this->authored_parser_);
            }
          }
          else
          {
            if (this->authored_parser_ != 0)
            {
              this->authored_parser_->post_dateTime ();
              this->authored ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "author" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->author_parser_)
            {
              this->author_parser_->pre ();
              ctx.nested_parser (this->author_parser_);
            }
          }
          else
          {
            if (this->author_parser_ != 0)
            {
              this->author_parser_->post_Reference ();
              this->author ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "source" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->source_parser_)
            {
              this->source_parser_->pre ();
              ctx.nested_parser (this->source_parser_);
            }
          }
          else
          {
            if (this->source_parser_ != 0)
            {
              this->source_parser_->post_Reference ();
              this->source ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "item" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->item_parser_)
            {
              this->item_parser_->pre ();
              ctx.nested_parser (this->item_parser_);
            }
          }
          else
          {
            if (this->item_parser_ != 0)
            {
              this->item_parser_->post_QuestionnaireResponse_Item ();
              this->item ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for QuestionnaireResponse_Item_pskel.
  //
  bool QuestionnaireResponse_Item_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "linkId" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &QuestionnaireResponse_Item_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool QuestionnaireResponse_Item_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void QuestionnaireResponse_Item_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void QuestionnaireResponse_Item_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void QuestionnaireResponse_Item_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "linkId" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->linkId_parser_)
            {
              this->linkId_parser_->pre ();
              ctx.nested_parser (this->linkId_parser_);
            }
          }
          else
          {
            if (this->linkId_parser_ != 0)
            {
              this->linkId_parser_->post_string ();
              this->linkId ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "definition" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->definition_parser_)
            {
              this->definition_parser_->pre ();
              ctx.nested_parser (this->definition_parser_);
            }
          }
          else
          {
            if (this->definition_parser_ != 0)
            {
              this->definition_parser_->post_uri ();
              this->definition ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "text" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->text_parser_)
            {
              this->text_parser_->pre ();
              ctx.nested_parser (this->text_parser_);
            }
          }
          else
          {
            if (this->text_parser_ != 0)
            {
              this->text_parser_->post_string ();
              this->text ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "answer" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->answer_parser_)
            {
              this->answer_parser_->pre ();
              ctx.nested_parser (this->answer_parser_);
            }
          }
          else
          {
            if (this->answer_parser_ != 0)
            {
              this->answer_parser_->post_QuestionnaireResponse_Answer ();
              this->answer ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "item" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->item_parser_)
            {
              this->item_parser_->pre ();
              ctx.nested_parser (this->item_parser_);
            }
          }
          else
          {
            if (this->item_parser_ != 0)
            {
              this->item_parser_->post_QuestionnaireResponse_Item ();
              this->item ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for QuestionnaireResponse_Answer_pskel.
  //
  bool QuestionnaireResponse_Answer_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
          s = 0UL;
        else if (n == "valueDecimal" &&
                 ns == "http://hl7.org/fhir")
          s = 1UL;
        else if (n == "valueInteger" &&
                 ns == "http://hl7.org/fhir")
          s = 2UL;
        else if (n == "valueDate" &&
                 ns == "http://hl7.org/fhir")
          s = 3UL;
        else if (n == "valueDateTime" &&
                 ns == "http://hl7.org/fhir")
          s = 4UL;
        else if (n == "valueTime" &&
                 ns == "http://hl7.org/fhir")
          s = 5UL;
        else if (n == "valueString" &&
                 ns == "http://hl7.org/fhir")
          s = 6UL;
        else if (n == "valueUri" &&
                 ns == "http://hl7.org/fhir")
          s = 7UL;
        else if (n == "valueAttachment" &&
                 ns == "http://hl7.org/fhir")
          s = 8UL;
        else if (n == "valueCoding" &&
                 ns == "http://hl7.org/fhir")
          s = 9UL;
        else if (n == "valueQuantity" &&
                 ns == "http://hl7.org/fhir")
          s = 10UL;
        else if (n == "valueReference" &&
                 ns == "http://hl7.org/fhir")
          s = 11UL;
        else if (n == "item" &&
                 ns == "http://hl7.org/fhir")
          s = 12UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &QuestionnaireResponse_Answer_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool QuestionnaireResponse_Answer_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::fhir::BackboneElement_pskel base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void QuestionnaireResponse_Answer_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
    typedef ::fhir::BackboneElement_pskel base;
    base::_pre_e_validate ();
  }

  void QuestionnaireResponse_Answer_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    typedef ::fhir::BackboneElement_pskel base;
    base::_post_e_validate ();

    if (ctx.error_type ())
      return;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void QuestionnaireResponse_Answer_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "valueBoolean" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueBoolean_parser_)
            {
              this->valueBoolean_parser_->pre ();
              ctx.nested_parser (this->valueBoolean_parser_);
            }
          }
          else
          {
            if (this->valueBoolean_parser_ != 0)
            {
              this->valueBoolean_parser_->post_boolean ();
              this->valueBoolean ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "valueDecimal" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDecimal_parser_)
            {
              this->valueDecimal_parser_->pre ();
              ctx.nested_parser (this->valueDecimal_parser_);
            }
          }
          else
          {
            if (this->valueDecimal_parser_ != 0)
            {
              this->valueDecimal_parser_->post_decimal ();
              this->valueDecimal ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "valueInteger" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueInteger_parser_)
            {
              this->valueInteger_parser_->pre ();
              ctx.nested_parser (this->valueInteger_parser_);
            }
          }
          else
          {
            if (this->valueInteger_parser_ != 0)
            {
              this->valueInteger_parser_->post_integer ();
              this->valueInteger ();
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "valueDate" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDate_parser_)
            {
              this->valueDate_parser_->pre ();
              ctx.nested_parser (this->valueDate_parser_);
            }
          }
          else
          {
            if (this->valueDate_parser_ != 0)
            {
              this->valueDate_parser_->post_date ();
              this->valueDate ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "valueDateTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueDateTime_parser_)
            {
              this->valueDateTime_parser_->pre ();
              ctx.nested_parser (this->valueDateTime_parser_);
            }
          }
          else
          {
            if (this->valueDateTime_parser_ != 0)
            {
              this->valueDateTime_parser_->post_dateTime ();
              this->valueDateTime ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "valueTime" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueTime_parser_)
            {
              this->valueTime_parser_->pre ();
              ctx.nested_parser (this->valueTime_parser_);
            }
          }
          else
          {
            if (this->valueTime_parser_ != 0)
            {
              this->valueTime_parser_->post_time ();
              this->valueTime ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "valueString" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueString_parser_)
            {
              this->valueString_parser_->pre ();
              ctx.nested_parser (this->valueString_parser_);
            }
          }
          else
          {
            if (this->valueString_parser_ != 0)
            {
              this->valueString_parser_->post_string ();
              this->valueString ();
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "valueUri" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueUri_parser_)
            {
              this->valueUri_parser_->pre ();
              ctx.nested_parser (this->valueUri_parser_);
            }
          }
          else
          {
            if (this->valueUri_parser_ != 0)
            {
              this->valueUri_parser_->post_uri ();
              this->valueUri ();
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "valueAttachment" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueAttachment_parser_)
            {
              this->valueAttachment_parser_->pre ();
              ctx.nested_parser (this->valueAttachment_parser_);
            }
          }
          else
          {
            if (this->valueAttachment_parser_ != 0)
            {
              this->valueAttachment_parser_->post_Attachment ();
              this->valueAttachment ();
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "valueCoding" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueCoding_parser_)
            {
              this->valueCoding_parser_->pre ();
              ctx.nested_parser (this->valueCoding_parser_);
            }
          }
          else
          {
            if (this->valueCoding_parser_ != 0)
            {
              this->valueCoding_parser_->post_Coding ();
              this->valueCoding ();
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "valueQuantity" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueQuantity_parser_)
            {
              this->valueQuantity_parser_->pre ();
              ctx.nested_parser (this->valueQuantity_parser_);
            }
          }
          else
          {
            if (this->valueQuantity_parser_ != 0)
            {
              this->valueQuantity_parser_->post_Quantity ();
              this->valueQuantity ();
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "valueReference" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->valueReference_parser_)
            {
              this->valueReference_parser_->pre ();
              ctx.nested_parser (this->valueReference_parser_);
            }
          }
          else
          {
            if (this->valueReference_parser_ != 0)
            {
              this->valueReference_parser_->post_Reference ();
              this->valueReference ();
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "item" &&
            ns == "http://hl7.org/fhir")
        {
          if (start)
          {
            if (this->item_parser_)
            {
              this->item_parser_->pre ();
              ctx.nested_parser (this->item_parser_);
            }
          }
          else
          {
            if (this->item_parser_ != 0)
            {
              this->item_parser_->post_QuestionnaireResponse_Item ();
              this->item ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace fhir
{
  // Attribute validation and dispatch functions for QuestionnaireResponseStatus_pskel.
  //
  bool QuestionnaireResponseStatus_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();

        this->value_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->value_parser_->_characters (s);

        if (!ctx.error_type ())
          this->value_parser_->_post_impl ();

        if (!ctx.error_type ())
          this->value_parser_->post_QuestionnaireResponseStatus_list ();

        this->value ();
      }

      return true;
    }

    typedef ::fhir::Element_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace fhir
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

